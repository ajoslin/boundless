(function(e,t,n){"use strict";var r="default"in t?t["default"]:t;var o="default"in n?n["default"]:n;var s=function(e){return typeof e==="function"};function i(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return Object.keys(e).reduce(function n(r,o){if(t.indexOf(o)===-1){r[o]=e[o]}return r},{})}var a=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol==="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var p=function(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}};var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||false;r.configurable=true;if("value"in r)r.writable=true;Object.defineProperty(e,r.key,r)}}return function(t,n,r){if(n)e(t.prototype,n);if(r)e(t,r);return t}}();var u=function(e,t,n){if(t in e){Object.defineProperty(e,t,{value:n,enumerable:true,configurable:true,writable:true})}else{e[t]=n}return e};var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n){if(Object.prototype.hasOwnProperty.call(n,r)){e[r]=n[r]}}}return e};var d=function(e,t){if(typeof t!=="function"&&t!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof t)}e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}});if(t)Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t};var f=function(e,t){var n={};for(var r in e){if(t.indexOf(r)>=0)continue;if(!Object.prototype.hasOwnProperty.call(e,r))continue;n[r]=e[r]}return n};var h=function(e,t){if(!e){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t&&(typeof t==="object"||typeof t==="function")?t:e};var y=function(e){d(t,e);function t(){var e;var n,o,i;p(this,t);for(var a=arguments.length,l=Array(a),u=0;u<a;u++){l[u]=arguments[u]}return i=(n=(o=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),o),o.state={activeChildIndex:o.props.defaultActiveChildIndex},o.handleKeyDown=function(e){switch(e.key){case"ArrowUp":if(o.props.mode===t.mode.VERTICAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(-1)}break;case"ArrowLeft":if(o.props.mode===t.mode.HORIZONTAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(-1)}break;case"ArrowDown":if(o.props.mode===t.mode.VERTICAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(1)}break;case"ArrowRight":if(o.props.mode===t.mode.HORIZONTAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(1)}break}if(s(o.props.onKeyDown)){o.props.onKeyDown(e)}},o.handleFocus=function(e){if(e.target.hasAttribute("data-focus-index")){var t=parseInt(e.target.getAttribute("data-focus-index"),10);var n=r.Children.toArray(o.props.children)[t];o.setState({activeChildIndex:t});if(n.props.onFocus){n.props.onFocus(e)}}},n),h(o,i)}l(t,[{key:"componentDidUpdate",value:function e(t,n){if(this.state.activeChildIndex!==n.activeChildIndex){this.setFocus(this.state.activeChildIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(this.state.activeChildIndex!==0){var n=t.children?r.Children.count(t.children):0;if(n===0){this.setState({activeChildIndex:0})}else if(this.state.activeChildIndex>=n){this.setState({activeChildIndex:n-1})}}}},{key:"setFocus",value:function e(t){var r=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:n.findDOMNode(this.refs.wrapper)).children[t];if(r&&r.hasAttribute("data-skip")){this.moveFocus(r.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1)}else if(r&&document.activeElement!==r){r.focus()}}},{key:"moveFocus",value:function e(t){var n=this.props.children?r.Children.count(this.props.children):0;var o=this.state.activeChildIndex+t;if(o>=n){o=0}else if(o<0){o=n-1}this.setState({activeChildIndex:o})}},{key:"children",value:function e(){var t=this;return r.Children.map(this.props.children,function(e,n){return r.cloneElement(e,{"data-focus-index":n,"data-skip":parseInt(e.props.tabIndex,10)===-1||undefined,key:e.key||n,tabIndex:t.state.activeChildIndex===n?0:-1})})}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"wrapper",onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children())}}]);return t}(r.PureComponent);y.mode={HORIZONTAL:"HORIZONTAL",VERTICAL:"VERTICAL",BOTH:"BOTH"};y.propTypes={component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),defaultActiveChildIndex:t.PropTypes.number,mode:t.PropTypes.oneOf(Object.keys(y.mode))};y.defaultProps={component:"div",defaultActiveChildIndex:0,mode:y.mode.BOTH};y.internalKeys=Object.keys(y.defaultProps);function m(e,t){return t={exports:{}},e(t,t.exports),t.exports}var v=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});function g(){}var P=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.handleClick=function(e){if(r.props.disabled){return}r.toggleState(e);if(s(r.props.onClick)){r.props.onClick(e)}},r.handleKeyDown=function(e){if(r.props.disabled){return}switch(e.key){case"Enter":case"Space":e.preventDefault();r.toggleState(e)}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"toggleState",value:function e(t){this.props[this.props.pressed?"onUnpressed":"onPressed"](t)}},{key:"render",value:function e(){return r.createElement("button",c({},i(this.props,t.internalKeys),{ref:"button",className:v("b-button",this.props.className,{"b-button-pressable":typeof this.props.pressed!=="undefined","b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]);return t}(r.PureComponent);P.propTypes={children:t.PropTypes.node,onClick:t.PropTypes.func,onPressed:t.PropTypes.func,onUnpressed:t.PropTypes.func,pressed:t.PropTypes.bool};P.defaultProps={children:null,onClick:g,onPressed:g,onUnpressed:g,pressed:undefined};P.internalKeys=Object.keys(P.defaultProps);var b=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});function T(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(e){return(e^Math.random()*16>>e/4).toString(16)})}var k=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.id=T(),r.handleChange=function(e){if(r.props.inputProps.disabled){return}r.props[!r.props.inputProps.checked?"onChecked":"onUnchecked"](r.props.inputProps.name);if(s(r.props.inputProps.onChange)){r.props.inputProps.onChange(e)}},r.handleClick=function(e){if(r.props.inputProps.disabled){return}r.refs.input.focus();if(s(r.props.inputProps.onClick)){r.props.inputProps.onClick(e)}},n),h(r,o)}l(t,[{key:"componentDidMount",value:function e(){if(this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"componentDidUpdate",value:function e(t){if(t.inputProps.indeterminate!==this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"setIndeterminate",value:function e(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function e(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function e(){return r.createElement("input",c({},i(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:b("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function e(){if(this.props.label){return r.createElement("label",c({},this.props.labelProps,{ref:"label",className:b("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:b("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(r.PureComponent);k.propTypes={inputProps:t.PropTypes.shape({checked:t.PropTypes.bool,className:t.PropTypes.string,disabled:t.PropTypes.bool,id:t.PropTypes.string,indeterminate:t.PropTypes.bool,onChange:t.PropTypes.func,onClick:t.PropTypes.func,name:t.PropTypes.string,value:t.PropTypes.string}),label:t.PropTypes.node,labelProps:t.PropTypes.object,onChecked:t.PropTypes.func,onUnchecked:t.PropTypes.func};k.defaultProps={inputProps:{checked:false,indeterminate:false},label:null,labelProps:{},onChecked:g,onUnchecked:g};k.internalKeys=Object.keys(k.defaultProps);var O=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var E=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"allItemsChecked",value:function e(){return this.props.items.every(function(e){return e.inputProps.checked===true})}},{key:"anyItemsChecked",value:function e(){return this.props.items.some(function(e){return e.inputProps.checked===true})}},{key:"renderSelectAll",value:function e(){if(this.props.selectAll){var t=this.allItemsChecked();var n=this.props.selectAllProps.inputProps;return r.createElement(k,c({},this.props.selectAllProps,{ref:"select_all",key:"cb_select_all",className:O("b-checkbox-group-selectall",this.props.selectAllProps.className),inputProps:c({},n,{checked:t,indeterminate:!t&&this.anyItemsChecked(),name:n&&n.name?n.name:"cb_select_all"}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}}},{key:"renderCheckboxes",value:function e(){var t=this;return this.props.items.map(function(e){return r.createElement(k,c({},e,{key:e.inputProps.name,onChecked:t.props.onChildChecked,onUnchecked:t.props.onChildUnchecked}))})}},{key:"renderChildren",value:function e(){var n=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition){switch(this.props.selectAllPosition){case t.Constants.SELECT_ALL_BEFORE:n.unshift(this.renderSelectAll());break;case t.Constants.SELECT_ALL_AFTER:n.push(this.renderSelectAll());break}}return n}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"group",className:O("b-checkbox-group",this.props.className)}),this.renderChildren())}}]);return t}(r.PureComponent);E.Constants={SELECT_ALL_BEFORE:"SELECT_ALL_BEFORE",SELECT_ALL_AFTER:"SELECT_ALL_AFTER"};E.propTypes={items:t.PropTypes.arrayOf(k.propTypes.inputProps).isRequired,onAllChecked:t.PropTypes.func,onAllUnchecked:t.PropTypes.func,onChildChecked:t.PropTypes.func,onChildUnchecked:t.PropTypes.func,selectAll:t.PropTypes.bool,selectAllProps:t.PropTypes.shape({label:t.PropTypes.string,inputProps:t.PropTypes.object}),selectAllPosition:t.PropTypes.oneOf(Object.keys(E.Constants))};E.defaultProps={items:[],onAllChecked:g,onAllUnchecked:g,onChildChecked:g,onChildUnchecked:g,selectAll:false,selectAllProps:{},selectAllPosition:E.Constants.SELECT_ALL_BEFORE};E.internalKeys=Object.keys(E.defaultProps);var w=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var C="data-portal-id";var A=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.id=T(),r.$portal=null,r.$passenger=null,n),h(r,o)}l(t,[{key:"componentWillMount",value:function e(){this.$portal=document.createElement("div");this.props.destination.appendChild(this.$portal);this.renderPortalledContent()}},{key:"renderPortalledContent",value:function e(){var t=r.isValidElement(this.props.children)?this.props.children:r.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id;o.unstable_renderSubtreeIntoContainer(this,t,this.$portal);this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function e(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function e(){o.unmountComponentAtNode(this.$portal);this.props.destination.removeChild(this.$portal)}},{key:"render",value:function e(){return r.createElement("span",c({},i(this.props,t.internalKeys),u({},C,this.props.portalId||this.id)))}}]);return t}(r.Component);A.propTypes={children:r.PropTypes.node.isRequired,destination:t.PropTypes.instanceOf(HTMLElement),portalId:t.PropTypes.string};A.defaultProps={children:null,destination:document.body,portalId:null};A.internalKeys=Object.keys(A.defaultProps);var x=Array.prototype.slice;var I=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.mounted=false,r.uuidHeader=T(),r.uuidBody=T(),r.handleFocus=function(e){if(!r.props.captureFocus){if(r.props.closeOnOutsideFocus){if(!r.isPartOfDialog(e.target)){return window.setTimeout(r.props.onClose,0)}}return}var t=e.explicitOriginalTarget||e.relatedTarget;if(r.isPartOfDialog(t)&&!r.isPartOfDialog(e.target)){e.preventDefault();t.focus()}},r.handleKeyDown=function(e){if(r.props.closeOnEscKey&&e.key==="Escape"){window.setTimeout(r.props.onClose,0)}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},r.handleOutsideClick=function(e){if(r.props.closeOnOutsideClick&&!r.isPartOfDialog(e.target)){window.setTimeout(r.props.onClose,0)}},r.handleOutsideScrollWheel=function(e){if(r.props.closeOnOutsideScroll&&!r.isPartOfDialog(e.target)){window.setTimeout(r.props.onClose,0)}},n),h(r,o)}l(t,[{key:"isPartOfDialog",value:function e(t){if(!t||t===window){return false}var n=[this.$wrapper].concat(x.call(this.$wrapper.querySelectorAll("["+C+"]")).map(function(e){return document.getElementById(e.getAttribute(C))}));var r=t.nodeType!==Node.ELEMENT_NODE?t.parentNode:t;return n.some(function(e){return e.contains(r)})}},{key:"componentDidMount",value:function e(){window.addEventListener("click",this.handleOutsideClick,true);window.addEventListener("contextmenu",this.handleOutsideClick,true);window.addEventListener("focus",this.handleFocus,true);window.addEventListener("scroll",this.handleOutsideScrollWheel,true);window.addEventListener("wheel",this.handleOutsideScrollWheel,true);if(this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)){this.$dialog.focus()}}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("click",this.handleOutsideClick,true);window.removeEventListener("contextmenu",this.handleOutsideClick,true);window.removeEventListener("focus",this.handleFocus,true);window.removeEventListener("scroll",this.handleOutsideScrollWheel,true);window.removeEventListener("wheel",this.handleOutsideScrollWheel,true)}},{key:"renderBody",value:function e(){return r.createElement("div",c({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:w("b-dialog-body",this.props.bodyProps.className)}),this.props.children)}},{key:"renderFooter",value:function e(){if(this.props.footer){return r.createElement("footer",c({},this.props.footerProps,{className:w("b-dialog-footer",this.props.footerProps.className)}),this.props.footer)}}},{key:"renderHeader",value:function e(){if(this.props.header){return r.createElement("header",c({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:w("b-dialog-header",this.props.headerProps.className)}),this.props.header)}}},{key:"renderFocusBoundary",value:function e(){if(this.props.captureFocus){return r.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}}},{key:"render",value:function e(){var n=this;return r.createElement("div",c({},this.props.wrapperProps,{ref:function e(t){return n.$wrapper=t},className:w("b-dialog-wrapper",this.props.wrapperProps.className),tabIndex:"0"}),this.renderFocusBoundary(),this.props.before,r.createElement("div",c({},i(this.props,t.internalKeys),{ref:function e(t){return n.$dialog=t},className:w("b-dialog",this.props.className),onKeyDown:this.handleKeyDown,role:"dialog","aria-labelledby":this.uuidHeader,"aria-describedby":this.uuidBody,tabIndex:"0"}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary())}}]);return t}(r.PureComponent);I.propTypes={after:t.PropTypes.node,before:t.PropTypes.node,bodyProps:t.PropTypes.object,captureFocus:t.PropTypes.bool,children:t.PropTypes.node,closeOnEscKey:t.PropTypes.bool,closeOnOutsideClick:t.PropTypes.bool,closeOnOutsideFocus:t.PropTypes.bool,closeOnOutsideScroll:t.PropTypes.bool,footer:t.PropTypes.node,footerProps:t.PropTypes.object,header:t.PropTypes.node,headerProps:t.PropTypes.object,onClose:t.PropTypes.func,wrapperProps:t.PropTypes.object};I.defaultProps={after:null,before:null,bodyProps:{},captureFocus:true,children:null,closeOnEscKey:false,closeOnOutsideClick:false,closeOnOutsideFocus:false,closeOnOutsideScroll:false,footer:null,footerProps:{},header:null,headerProps:{},onClose:g,wrapperProps:{}};I.internalKeys=Object.keys(I.defaultProps);var N=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var S=[];function D(e){return parseInt(e,10)}function j(e){var t=n.findDOMNode(e);var r=window.getComputedStyle(t.parentNode);var o=D(window.getComputedStyle(t).fontSize);var s=D(r.height);var i=D(r.width);if(r.boxSizing==="border-box"||r.boxSizing==="padding-box"){s-=D(r.paddingTop)+D(r.paddingBottom);i-=D(r.paddingLeft)+D(r.paddingRight)}var a=Math.floor(o/t.offsetHeight*s);var p=Math.floor(o/t.offsetWidth*i);t.style.fontSize=(Math.min(e.props.maxFontSize,a,p)||1)+"px"}function F(){S.forEach(function(e){return j(e)})}function L(e){if(S.length===0){window.addEventListener("resize",F,true)}S.push(e)}function _(e){S.splice(S.indexOf(e),1);if(S.length===0){window.removeEventListener("resize",F,true)}}var M=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"componentDidMount",value:function e(){j(this);L(this)}},{key:"componentDidUpdate",value:function e(){j(this)}},{key:"componentWillUnmount",value:function e(){_(this)}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{className:N("b-text",this.props.className)}),this.props.children)}}]);return t}(r.PureComponent);M.propTypes={children:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.number]),component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),maxFontSize:t.PropTypes.number};M.defaultProps={children:null,component:"span",maxFontSize:Number.MAX_VALUE};M.internalKeys=Object.keys(M.defaultProps);var R=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var K=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.state={status:t.status.LOADING},n),h(r,o)}l(t,[{key:"componentWillReceiveProps",value:function e(n){if(n.src!==this.props.src){this.resetPreloader();this.setState({status:t.status.LOADING})}}},{key:"componentDidMount",value:function e(){this.preload()}},{key:"componentDidUpdate",value:function e(){this.preload()}},{key:"componentWillUnmount",value:function e(){this.resetPreloader()}},{key:"resetPreloader",value:function e(){this.loader.onload=null;this.loader.onerror=null;this.loader=null}},{key:"preload",value:function e(){var n=this;if(this.loader){return}this.loader=document.createElement("img");this.loader.onload=function(){return n.setState({status:t.status.LOADED})};this.loader.onerror=function(){return n.setState({status:t.status.ERROR})};this.loader.src=this.props.src}},{key:"renderImage",value:function e(){if(this.props.displayAsBackgroundImage){return r.createElement("div",c({},this.props.imageProps,{ref:"image",className:R("b-image",this.props.imageProps.className),title:this.props.alt,style:c({},this.props.imageProps.style,{backgroundImage:"url("+this.props.src+")"})}))}return r.createElement("img",c({},this.props.imageProps,{ref:"image",className:R("b-image",this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:g,onError:g}))}},{key:"renderStatus",value:function e(){return r.createElement("div",c({},this.props.statusProps,{ref:"status",className:R("b-image-status",this.props.statusProps.className,{"b-image-loading":this.state.status===t.status.LOADING,"b-image-loaded":this.state.status===t.status.LOADED,"b-image-error":this.state.status===t.status.ERROR}),role:"presentation"}))}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:R("b-image-wrapper",this.props.className)}),this.renderImage(),this.renderStatus())}}]);return t}(r.PureComponent);K.status={LOADING:"LOADING",LOADED:"LOADED",ERROR:"ERROR"};K.propTypes={alt:t.PropTypes.string,displayAsBackgroundImage:t.PropTypes.bool,imageProps:t.PropTypes.object,src:t.PropTypes.string.isRequired,statusProps:t.PropTypes.object};K.defaultProps={alt:null,displayAsBackgroundImage:false,imageProps:{},src:"about:blank",statusProps:{}};K.internalKeys=Object.keys(K.defaultProps);var W=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var B=function(e){return typeof e==="string"};var V=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={input:"",isControlled:B(r.props.inputProps.value),isFocused:false},r.setInputValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return r.setState({input:e})},r.getValue=function(){return r.refs.field.value},r.handleBlur=function(e){r.setState({isFocused:false});if(s(r.props.inputProps.onBlur)===true){r.props.inputProps.onBlur(e)}},r.handleFocus=function(e){r.setState({isFocused:true});if(s(r.props.inputProps.onFocus)===true){r.props.inputProps.onFocus(e)}},r.handleChange=function(e){if(r.state.isControlled===false){r.setInputValue(e.target.value)}if(s(r.props.inputProps.onChange)===true){r.props.inputProps.onChange(e)}},n),h(r,o)}l(t,[{key:"componentWillMount",value:function e(){if(this.state.isControlled===true){return this.setInputValue(this.props.inputProps.value)}this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function e(t){if(t.inputProps.value!==this.props.inputProps.value){this.setInputValue(t.inputProps.value)}}},{key:"setValue",value:function e(t){this.setInputValue(t);this.refs.field.value=t;if(this.state.isControlled===true){this.refs.field.dispatchEvent(new Event("input",{bubbles:true}));this.refs.field.dispatchEvent(new Event("change",{bubbles:true}))}}},{key:"getPlaceholderText",value:function e(){var t=this.state.input!=="";var n=this.props.hidePlaceholderOnFocus===true?this.state.isFocused===false&&t===false:t===false;return n?this.props.inputProps.placeholder:""}},{key:"renderPlaceholder",value:function e(){return r.createElement("div",{ref:"placeholder",className:"b-input-placeholder b-input"},this.getPlaceholderText())}},{key:"render",value:function e(){var n=this.props;return r.createElement("div",c({},i(n,t.internalKeys),{ref:"wrapper",className:W("b-input-wrapper",n.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),r.createElement("input",c({},n.inputProps,{ref:"field",className:W("b-input",n.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})))}}]);return t}(r.PureComponent);V.propTypes={hidePlaceholderOnFocus:t.PropTypes.bool,inputProps:t.PropTypes.shape({defaultValue:t.PropTypes.string,onBlur:t.PropTypes.func,onFocus:t.PropTypes.func,onChange:t.PropTypes.func,placeholder:t.PropTypes.string,type:t.PropTypes.string,value:t.PropTypes.string})};V.defaultProps={hidePlaceholderOnFocus:true,inputProps:{type:"text"}};V.internalKeys=Object.keys(V.defaultProps);var X=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});function H(e,t){return Object.keys(t).reduce(function(t,n){if(n in e){t[n]=e[n]}return t},{})}var Y=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"render",value:function e(){var n=this;var o=this.props;return r.createElement(A,o.portalProps,r.createElement("div",c({},i(o,t.internalKeys),{ref:function e(t){return n.$modal=t},className:X("b-modal-wrapper",o.className)}),r.createElement("div",c({},o.maskProps,{className:X("b-modal-mask",o.maskProps.className)})),r.createElement(I,c({},H(o,I.defaultProps),o.modalProps,{className:X("b-modal",o.modalProps.className)}),o.children)))}}]);return t}(r.PureComponent);Y.propTypes=c({},I.propTypes,{maskProps:t.PropTypes.object,modalProps:t.PropTypes.object,portalProps:t.PropTypes.object});Y.defaultProps=c({},I.defaultProps,{captureFocus:true,maskProps:{},modalProps:{},portalProps:{}});Y.internalKeys=Object.keys(Y.defaultProps);var U=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var $=1/0;var z=1.7976931348623157e308;var Z=0/0;var J="[object Symbol]";var q=/^\s+|\s+$/g;var G=/^[-+]0x[0-9a-f]+$/i;var Q=/^0b[01]+$/i;var ee=/^0o[0-7]+$/i;var te=parseInt;var ne=Object.prototype;var re=ne.toString;function oe(e){return typeof e=="number"&&e==le(e)}function se(e){var t=typeof e==="undefined"?"undefined":a(e);return!!e&&(t=="object"||t=="function")}function ie(e){return!!e&&(typeof e==="undefined"?"undefined":a(e))=="object"}function ae(e){return(typeof e==="undefined"?"undefined":a(e))=="symbol"||ie(e)&&re.call(e)==J}function pe(e){if(!e){return e===0?e:0}e=ue(e);if(e===$||e===-$){var t=e<0?-1:1;return t*z}return e===e?e:0}function le(e){var t=pe(e),n=t%1;return t===t?n?t-n:t:0}function ue(e){if(typeof e=="number"){return e}if(ae(e)){return Z}if(se(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=se(t)?t+"":t}if(typeof e!="string"){return e===0?e:+e}e=e.replace(q,"");var n=Q.test(e);return n||ee.test(e)?te(e.slice(2),n?2:8):G.test(e)?Z:+e}var ce=oe;var de=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var fe=function(e){d(t,e);
function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={indexOfOptionInFocus:null},r.handleKeyDown=function(e){var t=e.key;var n=r.state.indexOfOptionInFocus;if(t==="ArrowLeft"){r.setFocus(r.getPreviousOptionIndex(n));e.preventDefault()}else if(t==="ArrowRight"){r.setFocus(r.getNextOptionIndex(n));e.preventDefault()}else if(t==="Enter"){r.handleOptionClick(r.props.options[n]);e.preventDefault()}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"currentValue",value:function e(){var t=void 0;this.props.options.some(function(e){if(e.selected){t=e.value;return true}});return t}},{key:"setFocus",value:function e(t){n.findDOMNode(this.refs["option_$"+t]).focus()}},{key:"getNextOptionIndex",value:function e(t){var n=t+1;return n<this.props.options.length?n:0}},{key:"getPreviousOptionIndex",value:function e(t){var n=t-1;return n<0?this.props.options.length-1:n}},{key:"handleOptionBlur",value:function e(t,n){if(this.state.indexOfOptionInFocus===this.props.options.indexOf(t)){this.setState({indexOfOptionInFocus:null})}if(s(t.onBlur)){t.onBlur(n)}}},{key:"handleOptionClick",value:function e(t,n){this.props.onOptionSelected(t.value);if(s(t.onClick)){t.onClick(n)}}},{key:"handleOptionFocus",value:function e(t,n){this.setState({indexOfOptionInFocus:this.props.options.indexOf(t)});if(s(t.onFocus)){t.onFocus(n)}}},{key:"renderOptions",value:function e(){var n=this;return this.props.options.map(function(e,o){return r.createElement(P,c({},i(e,t.internalChildKeys),{role:"radio","aria-checked":String(e.selected),ref:"option_$"+o,key:e.value,className:de("b-segmented-control-option",e.className,{"b-segmented-control-option-selected":e.selected}),tabIndex:e.selected?"0":"-1",onBlur:n.handleOptionBlur.bind(n,e),onPressed:n.handleOptionClick.bind(n,e),onFocus:n.handleOptionFocus.bind(n,e)}),e.content)})}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",role:"radiogroup",className:de("b-segmented-control",this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions())}}]);return t}(r.PureComponent);fe.propTypes={onOptionSelected:t.PropTypes.func,options:function e(t){if(t.options.length<2){throw new Error("Must provide at least two options.")}var n=t.options.some(function(e){if(!("selected"in e)){return true}});if(n){throw new Error("Must provide a `selected` prop for each option.")}var r=false;var o=t.options.some(function(e){if(e.selected){if(r){return true}r=true}});if(o){throw new Error("Encountered multiple options with `selected: true`. There can be only one.")}if(t.options.some(function(e){return typeof e.value==="undefined"})){throw new Error("Must provide a `value` prop for each option.")}}};fe.defaultProps={onOptionSelected:g,options:[]};fe.internalKeys=Object.keys(fe.defaultProps);fe.internalChildKeys=["content","value","selected"];var he=function e(t){return t};var ye=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.mounted=false,r.state={},n),h(r,o)}l(t,[{key:"convertDataToJSXOrWait",value:function e(){var t=this;var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props;if(n.data instanceof Promise){var r=function(){t.setState({component:null});var e=n.data;n.data.then(function(n){if(t.mounted){t.setState(function(t,r){return{component:r.data===e?r.convertToJSXFunc(n,r.index):t.component}})}},g);return{v:void 0}}();if((typeof r==="undefined"?"undefined":a(r))==="object")return r.v}this.setState({component:n.convertToJSXFunc(n.data,n.index)})}},{key:"componentWillMount",value:function e(){this.convertDataToJSXOrWait()}},{key:"componentDidMount",value:function e(){this.mounted=true}},{key:"componentWillReceiveProps",value:function e(t){this.convertDataToJSXOrWait(t)}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"getClasses",value:function e(t){return U("b-pagination-item",t,{"b-pagination-item-even":this.props.even,"b-pagination-item-odd":!this.props.even,"b-pagination-item-loading":this.state.component===null})}},{key:"render",value:function e(){if(this.state.component===null){return r.createElement("div",c({},i(this.props,t.internalKeys),{className:this.getClasses()}),this.props.loadingContent)}return r.cloneElement(this.state.component,c({},i(this.props,t.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className),"data-pagination-index":this.props.index}))}}]);return t}(r.PureComponent);ye.propTypes={convertToJSXFunc:t.PropTypes.func,data:t.PropTypes.object,even:t.PropTypes.bool,index:t.PropTypes.number,loadingContent:t.PropTypes.node};ye.defaultProps={convertToJSXFunc:g,data:null,even:true,index:0,loadingContent:null};ye.internalKeys=Object.keys(ye.defaultProps);var me=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.state={currentPage:r.props.initialPage,targetIndex:(r.props.initialPage-1)*r.props.numItemsPerPage},r.currentPage=function(){return r.state.currentPage},r.getPageForIndex=function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:r.props.numItemsPerPage;return Math.ceil((e+1)/t)},r.totalPages=function(){return Math.ceil(r.props.totalItems/r.props.numItemsPerPage)},r.firstVisibleItemIndex=function(){return(r.currentPage()-1)*r.props.numItemsPerPage},r.pageToIndex=function(e){if(e<0||e>=r.props.totalItems){return new Error("Cannot page to invalid index "+e+".")}r.setState({currentPage:r.getPageForIndex(e),targetIndex:e})},r.handleClick=function(e){var n=void 0;switch(e){case t.controls.FIRST:n=0;break;case t.controls.PREVIOUS:n=r.firstVisibleItemIndex()-r.props.numItemsPerPage;break;case t.controls.NEXT:n=r.firstVisibleItemIndex()+r.props.numItemsPerPage;break;case t.controls.LAST:n=r.props.totalItems-1;break;default:n=parseInt(e,10)*r.props.numItemsPerPage-1}r.setState({currentPage:r.getPageForIndex(n),targetIndex:n})},n),h(r,o)}l(t,[{key:"componentDidUpdate",value:function e(t,r){if(r.currentPage!==this.currentPage()){n.findDOMNode(this.refs.item_0).focus()}}},{key:"componentWillReceiveProps",value:function e(){var t=this;var n=this.props;this.setState(function(e,r){if(r.identifier!==n.identifier){return{currentPage:1,targetIndex:0}}return{currentPage:t.getPageForIndex(e.targetIndex,r.numItemsPerPage),targetIndex:e.targetIndex}})}},{key:"createPageButtonOptions",value:function e(){var n=[];var r=this.currentPage();var o=this.props.numPageToggles;var i=this.totalPages();var a=r-(r-1)%o;var p=Math.min(a+o-1,i);if(this.props.showPaginationState){n.push({selected:false,content:s(this.props.showPaginationState)?this.props.showPaginationState(r,i):r+" of "+i,value:"",disabled:true,className:"b-pagination-control b-pagination-control-state"})}if(this.props.showJumpToFirst){n.push({selected:false,content:this.props.jumpToFirstControlContent,value:t.controls.FIRST,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-first"})}n.push({selected:false,content:this.props.previousPageControlContent,value:t.controls.PREVIOUS,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-previous"});for(var l=a;l<=p;l++){n.push({className:"b-pagination-control","data-page-number":l,selected:l===this.currentPage(),content:l,value:l})}n.push({selected:false,content:this.props.nextPageControlContent,value:t.controls.NEXT,disabled:this.currentPage()===i,className:"b-pagination-control b-pagination-control-next"});if(this.props.showJumpToLast){n.push({selected:false,content:this.props.jumpToLastControlContent,value:t.controls.LAST,disabled:this.currentPage()===i,className:"b-pagination-control b-pagination-control-last"})}if(this.props.customControlContent){n.push({selected:false,content:this.props.customControlContent,value:T(),disabled:true,className:"b-pagination-control b-pagination-control-custom"})}return n}},{key:"generateItems",value:function e(){var t=[];var n=this.firstVisibleItemIndex();var r=Math.min(this.props.totalItems,n+this.props.numItemsPerPage)-1;for(var o=n;o<=r;o+=1){t.push({data:this.props.getItem(o)})}return t}},{key:"renderItems",value:function e(){var t=this;var n=this.props.listWrapperProps;var o=this.props.numItemsPerPage*(this.currentPage()-1);return r.createElement(y,c({},n,{ref:"itemList",className:U("b-pagination-items",n.className)}),this.generateItems().map(function(e,n){return r.createElement(ye,{ref:"item_"+n,key:n,convertToJSXFunc:t.props.itemToJSXConverterFunc,data:e.data,even:n%2===0,index:o+n,loadingContent:t.props.itemLoadingContent})}))}},{key:"renderControls",value:function e(t){if(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage){return}var n=this.props.toggleWrapperProps;var o=t.toLowerCase();var s=o[0].toUpperCase()+o.slice(1);return r.createElement(fe,c({},n,{ref:"segmentedControl"+s,className:U("b-pagination-controls",n.className,u({},"b-pagination-controls-"+o,true)),options:this.createPageButtonOptions(),onOptionSelected:this.handleClick}))}},{key:"renderView",value:function e(){var n=this.props;var o=t.positions;return r.createElement("div",{ref:"paginatedView",className:"b-pagination"},n.position===o.ABOVE||n.position===o.BOTH?this.renderControls(o.ABOVE):g,n.before,this.renderItems(),n.after,n.position===o.BELOW||n.position===o.BOTH?this.renderControls(o.BELOW):g)}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:U("b-pagination-wrapper",this.props.className)}),this.renderView())}}]);return t}(r.PureComponent);me.controls={FIRST:"FIRST",PREVIOUS:"PREVIOUS",NEXT:"NEXT",LAST:"LAST"};me.positions={ABOVE:"ABOVE",BELOW:"BELOW",BOTH:"BOTH"};me.propTypes={after:t.PropTypes.node,before:t.PropTypes.node,customControlContent:t.PropTypes.node,getItem:t.PropTypes.func,hidePagerIfNotNeeded:t.PropTypes.bool,identifier:t.PropTypes.string.isRequired,initialPage:function e(t){if(ce(t.initialPage)===false){return new Error("`initialPage` must be an integer.")}var n=Math.ceil(t.totalItems/t.numItemsPerPage);if(t.initialPage<1||t.initialPage>n){return new Error("`initialPage` must be between 1 and "+n+".")}},itemLoadingContent:t.PropTypes.node,itemToJSXConverterFunc:t.PropTypes.func,jumpToFirstControlContent:t.PropTypes.node,jumpToLastControlContent:t.PropTypes.node,listWrapperProps:t.PropTypes.object,nextPageControlContent:t.PropTypes.node,numItemsPerPage:function e(t){if(ce(t.numItemsPerPage)===false){return new Error("`numItemsPerPage` must be an integer.")}else if(t.numItemsPerPage<1){return new Error("`numItemsPerPage` must be greater than zero.")}},numPageToggles:t.PropTypes.number,position:t.PropTypes.oneOf(Object.keys(me.positions)),previousPageControlContent:t.PropTypes.node,showJumpToFirst:t.PropTypes.bool,showJumpToLast:t.PropTypes.bool,showPaginationState:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),toggleWrapperProps:t.PropTypes.object,totalItems:t.PropTypes.number.isRequired};me.defaultProps={after:null,before:null,customControlContent:null,getItem:g,hidePagerIfNotNeeded:false,identifier:T(),initialPage:1,itemLoadingContent:null,itemToJSXConverterFunc:he,jumpToFirstControlContent:"« First",jumpToLastControlContent:"Last »",listWrapperProps:{},nextPageControlContent:"Next ›",numItemsPerPage:10,numPageToggles:5,position:me.positions.ABOVE,previousPageControlContent:"‹ Previous",showJumpToFirst:true,showJumpToLast:true,showPaginationState:true,toggleWrapperProps:{},totalItems:null};me.internalKeys=Object.keys(me.defaultProps);var ve=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var ge=function e(){var t=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"];for(var n=0,r=t.length;n<r;n++){if(t[n]in document.documentElement.style){return t[n]}}return false}();function Pe(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}function be(e){return Object.keys(e).map(function(t){return e[t]})}var Te=r.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},r.createElement("g",null,r.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),r.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"})));var ke=function(e){d(t,e);function t(e){p(this,t);var r=h(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));r.align=function(){var e=r.props.anchor instanceof HTMLElement?r.props.anchor:n.findDOMNode(r.props.anchor);r.cacheViewportCartography(e);var t=Math.round(r.getNextDialogXPosition(e));var o=Math.round(r.getNextDialogYPosition(e));var s=r.getAlignmentCorrectionIfOverflowing(t,o);if(s&&r.didAlignmentChange(s)){return r.setState(s)}r.$caret.style.left=Math.round(r.getNextCaretXPosition(e))+"px";r.$caret.style.top=Math.round(r.getNextCaretYPosition(e))+"px";r.applyTranslation(r.$caret,ve,0);r.applyTranslation(r.dialog.$wrapper,t,o)};r.state={anchorXAlign:e.anchorXAlign||e.preset.anchorXAlign,anchorYAlign:e.anchorYAlign||e.preset.anchorYAlign,selfXAlign:e.selfXAlign||e.preset.selfXAlign,selfYAlign:e.selfYAlign||e.preset.selfYAlign};return r}l(t,[{key:"cacheViewportCartography",value:function e(t){var n=t.getBoundingClientRect();var r=document.body.getBoundingClientRect();this.anchorLeft=n.left;this.anchorTop=n.top;this.anchorHeight=n.height;this.anchorWidth=n.width;this.bodyLeft=r.left*-1;this.bodyTop=r.top*-1}},{key:"getNextCaretXPosition",value:function e(n){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var o=this.state,s=o.anchorXAlign,i=o.selfXAlign,a=o.anchorYAlign,p=o.selfYAlign;var l=t.position;var u=0;if(i!==l.MIDDLE&&(a===l.START&&p===l.END||a===l.END&&p===l.START)){if(s===l.START){u+=this.anchorWidth/2-r.clientWidth/2}else if(s===l.END){u+=this.dialog.$wrapper.clientWidth-this.anchorWidth/2-r.clientWidth/2}}return u}},{key:"getNextCaretYPosition",value:function e(n){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var o=this.state,s=o.anchorXAlign,i=o.selfXAlign,a=o.anchorYAlign,p=o.selfYAlign;var l=t.position;var u=0;if(p!==l.MIDDLE&&(s===l.START&&i===l.END||s===l.END&&i===l.START)){if(a===l.START){u+=this.anchorHeight/2-r.clientWidth/2}else if(a===l.END){u+=this.dialog.$wrapper.clientHeight-this.anchorWidth/2-r.clientWidth/2}}return u}},{key:"getNextDialogXPosition",value:function e(n){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var o=this.state,s=o.anchorXAlign,i=o.selfXAlign;var a=t.position;var p=this.anchorLeft+this.bodyLeft;switch(s){case a.MIDDLE:p+=this.anchorWidth/2;break;case a.END:p+=this.anchorWidth;break}switch(i){case a.MIDDLE:p-=r.clientWidth/2;break;case a.END:p-=r.clientWidth;break}return p}},{key:"getNextDialogYPosition",value:function e(n){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var o=this.state;var s=t.position;var i=this.anchorTop+this.bodyTop;var a=i+this.anchorHeight;switch(o.anchorYAlign){case s.START:a=i;break;case s.MIDDLE:a=i+this.anchorHeight/2;break}switch(o.selfYAlign){case s.MIDDLE:a-=r.clientHeight/2;break;case s.END:a-=r.clientHeight;break}return a}},{key:"getAlignmentCorrectionIfOverflowing",value:function e(n,r){if(!this.props.autoReposition){return false}var o=c({},this.state);var s=t.position;var i=this.dialog.$wrapper.clientWidth;var a=this.dialog.$wrapper.clientHeight;var p=document.body.scrollWidth;var l=document.body.scrollHeight;if(n+i>p){o.anchorXAlign=s.START;o.selfXAlign=s.END}if(n<0){o.anchorXAlign=s.END;o.selfXAlign=s.START}if(r+a>l){if(o.anchorXAlign===s.START&&o.selfXAlign===s.END||o.anchorXAlign===s.END&&o.selfXAlign===s.START){o.anchorYAlign=s.END}else{o.anchorYAlign=s.START}o.selfYAlign=s.END}if(r<0){if(o.anchorXAlign===s.START&&o.selfXAlign===s.END||o.anchorXAlign===s.END&&o.selfXAlign===s.START){o.anchorYAlign=s.START}else{o.anchorYAlign=s.END}o.selfYAlign=s.START}return o}},{key:"applyTranslation",value:function e(t,n,r){if(ge){t.style[ge]="translate("+n+"px, "+r+"px)"}else{t.style.left=n+"px";t.style.top=r+"px"}}},{key:"didAlignmentChange",value:function e(t){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.state;return t.anchorXAlign!==n.anchorXAlign||t.anchorYAlign!==n.anchorYAlign||t.selfXAlign!==n.selfXAlign||t.selfYAlign!==n.selfYAlign}},{key:"componentDidMount",value:function e(){this.align();window.addEventListener("resize",this.align,true)}},{key:"componentDidUpdate",value:function e(){this.align()}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("resize",this.align,true)}},{key:"getClassAlignmentFragment",value:function e(n){var r=t.position;switch(n){case r.START:return"start";case r.MIDDLE:return"middle";case r.END:return"end"}}},{key:"render",value:function e(){var n=this,o;var s=this.getClassAlignmentFragment,a=this.props,p=this.state;return r.createElement(A,a.portalProps,r.createElement(I,c({},i(a,t.internalKeys),{ref:function e(t){return n.dialog=t},before:r.cloneElement(a.caretComponent,{ref:function e(t){return n.$caret=t},className:ve("b-popover-caret",a.caretComponent.props.className)}),wrapperProps:c({},a.wrapperProps,{className:ve("b-popover",a.wrapperProps.className,(o={},u(o,"b-popover-anchor-x-"+s(p.anchorXAlign),true),u(o,"b-popover-anchor-y-"+s(p.anchorYAlign),true),u(o,"b-popover-self-x-"+s(p.selfXAlign),true),u(o,"b-popover-self-y-"+s(p.selfYAlign),true),o))})})))}}]);return t}(r.PureComponent);ke.position={START:"START",MIDDLE:"MIDDLE",END:"END"};ke.preset={ABOVE:{anchorXAlign:ke.position.MIDDLE,anchorYAlign:ke.position.START,selfXAlign:ke.position.MIDDLE,selfYAlign:ke.position.END},BELOW:{anchorXAlign:ke.position.MIDDLE,anchorYAlign:ke.position.END,selfXAlign:ke.position.MIDDLE,selfYAlign:ke.position.START},LEFT:{anchorXAlign:ke.position.START,anchorYAlign:ke.position.MIDDLE,selfXAlign:ke.position.END,selfYAlign:ke.position.MIDDLE},RIGHT:{anchorXAlign:ke.position.END,anchorYAlign:ke.position.MIDDLE,selfXAlign:ke.position.START,selfYAlign:ke.position.MIDDLE}};ke.presetValues=be(ke.preset);ke.propTypes=c({},I.propTypes,{anchor:t.PropTypes.oneOfType([t.PropTypes.instanceOf(HTMLElement),t.PropTypes.shape({props:t.PropTypes.object,state:t.PropTypes.object})]).isRequired,anchorXAlign:t.PropTypes.oneOf(Object.keys(ke.position)),anchorYAlign:t.PropTypes.oneOf(Object.keys(ke.position)),autoReposition:t.PropTypes.bool,caretComponent:t.PropTypes.element,portalProps:t.PropTypes.object,preset:t.PropTypes.oneOf(ke.presetValues),selfXAlign:t.PropTypes.oneOf(Object.keys(ke.position)),selfYAlign:t.PropTypes.oneOf(Object.keys(ke.position)),wrapperProps:t.PropTypes.object});ke.defaultProps=c({},I.defaultProps,{anchor:document.body,anchorXAlign:undefined,anchorYAlign:undefined,autoReposition:true,captureFocus:false,caretComponent:Te,closeOnEscKey:true,closeOnOutsideClick:true,closeOnOutsideScroll:true,portalProps:{},preset:ke.preset.BELOW,selfXAlign:undefined,selfYAlign:undefined,wrapperProps:{}});ke.internalKeys=Pe(Object.keys(ke.defaultProps),I.internalKeys);var Oe=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Ee=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={expanded:r.props.expanded},r.dispatchCallback=function(){r.props[r.state.expanded?"onExpand":"onHide"]()},r.handleClick=function(e){r.setState({expanded:!r.state.expanded},r.dispatchCallback);if(s(r.props.toggleProps.onClick)){r.props.toggleProps.onClick(e)}},r.handleKeyDown=function(e){switch(e.key){case"Enter":e.preventDefault();r.setState({expanded:!r.state.expanded},r.dispatchCallback)}if(s(r.props.toggleProps.onKeyDown)){r.props.toggleProps.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"componentWillReceiveProps",value:function e(t){if(t.expanded!==this.props.expanded){this.setState({expanded:t.expanded},this.dispatchCallback)}}},{key:"renderContent",value:function e(){if(this.state.expanded){return r.createElement("div",{ref:"content",className:"b-disclosure-content"},this.props.children)}}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"wrapper",className:Oe("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),r.createElement("div",c({},this.props.toggleProps,{ref:"toggle",className:Oe("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent())}}]);return t}(r.PureComponent);Ee.propTypes={children:t.PropTypes.node,component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),expanded:t.PropTypes.bool,onExpand:t.PropTypes.func,onHide:t.PropTypes.func,teaser:t.PropTypes.node,teaserExpanded:t.PropTypes.node,toggleProps:t.PropTypes.object};Ee.defaultProps={children:null,component:"div",expanded:false,onExpand:g,onHide:g,teaser:null,teaserExpanded:null,toggleProps:{}};Ee.internalKeys=Object.keys(Ee.defaultProps);var we=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Ce=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"renderLabel",value:function e(){if(this.props.label){return r.createElement("div",c({},this.props.labelProps,{ref:"label",className:we("b-progress-label",this.props.labelProps.className)}),this.props.label)}}},{key:"renderCancel",value:function e(){if(this.props.onCancel){return r.createElement(P,c({},this.props.cancelProps,{ref:"cancel",className:we("b-progress-cancel",this.props.cancelProps.className),onPressed:this.props.onCancel}))}}},{key:"renderProgress",value:function e(){return r.createElement("div",c({},this.props.progressProps,{ref:"progress",className:we("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":typeof this.props.progress==="undefined"}),role:"presentation",style:c({},this.props.progressProps.style,u({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"wrapper",className:we("b-progress-wrapper",this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel())}}]);return t}(r.PureComponent);Ce.propTypes={cancelProps:t.PropTypes.object,component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),label:t.PropTypes.node,labelProps:t.PropTypes.object,onCancel:t.PropTypes.func,progress:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.number]),progressProps:t.PropTypes.object,tweenProperty:t.PropTypes.string};Ce.defaultProps={cancelProps:{},component:"div",label:null,labelProps:{},onCancel:null,progress:undefined,progressProps:{},tweenProperty:"width"};Ce.internalKeys=Object.keys(Ce.defaultProps);var Ae=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var xe=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.uuid=T(),r.handleChange=function(e){if(e.target.checked){r.props.onSelected(e.target.value)}if(s(r.props.inputProps.onChange)){r.props.inputProps.onChange(e)}},n),h(r,o)}l(t,[{key:"renderInput",value:function e(){return r.createElement("input",c({},this.props.inputProps,{ref:"input",type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:Ae("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function e(){if(this.props.label){return r.createElement("label",c({},this.props.labelProps,{ref:"label",className:Ae("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label)}}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:Ae("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(r.PureComponent);xe.propTypes={inputProps:t.PropTypes.object,label:t.PropTypes.node,labelProps:t.PropTypes.object,name:t.PropTypes.string.isRequired,onSelected:t.PropTypes.func,selected:t.PropTypes.bool,value:t.PropTypes.string.isRequired};xe.defaultProps={inputProps:{},label:null,labelProps:{},name:"",onSelected:g,selected:false,value:""};xe.internalKeys=Object.keys(xe.defaultProps);var Ie=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Ne=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Se=/[|\\{}()[\]^$+*?.]/g;var De=function e(t){if(typeof t!=="string"){throw new TypeError("Expected a string")}return t.replace(Se,"\\$&")};var je=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),Fe.call(r),n),h(r,o)}l(t,[{key:"componentWillMount",value:function e(){if(this.props.inputProps.value||this.props.inputProps.defaultValue){this.computeMatches()}}},{key:"componentDidMount",value:function e(){this.mounted=true;if(this.state.selectedEntityIndex>=0){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(t.entities!==this.props.entities){this.computeMatches(t.entities)}if(t.inputProps.value!==this.props.inputProps.value){this.updateInputState(t.inputProps.value);this.computeMatches()}}},{key:"componentDidUpdate",value:function e(t,n){if(this.state.entityMatchIndexes.length&&!n.entityMatchIndexes.length){this.refs.matches.scrollTop=0}if(this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==t.entities[n.selectedEntityIndex]){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"handleMatchClick",value:function e(t){this.setState({selectedEntityIndex:t},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function e(t){var n=this.state.entityMatchIndexes;var r=n.length;var o=n.indexOf(this.state.selectedEntityIndex)+t;if(r){if(o<0){o=r-1}else if(o>=r){o=0}var s=n[o];var i=this.refs.matches;var a=i.scrollTop+i.clientHeight;var p=this.refs["match_$"+s];var l=p.offsetTop;var u=l+p.clientHeight;if(u>=a){i.scrollTop+=u-a}else if(l<=i.scrollTop){i.scrollTop=l}this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function e(){var t=this.getInputNode();return t.selectionStart===t.selectionEnd&&t.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function e(t,n){var o=n.text;var s=o.split(new RegExp("("+De(t)+")","ig"));var i=t.toLowerCase();var a=s.length;var p=-1;while(++p<a){if(s[p].toLowerCase()===i){s[p]=r.createElement("mark",{key:p,className:"b-typeahead-match-highlight"},s[p])}}return s}},{key:"markStartsWithMatchSubstring",value:function e(t,n){var o=n.text;var s=t.toLowerCase();var i=o.toLowerCase().indexOf(s);var a=i+s.length;return[r.createElement("span",{key:"0"},o.slice(0,i)),r.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},o.slice(i,a)),r.createElement("span",{key:"2"},o.slice(a))]}},{key:"getMarkingFunction",value:function e(){if(B(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.markStartsWithMatchSubstring}return this.markFuzzyMatchSubstring}else if(s(this.props.algorithm.marker)){return this.props.algorithm.marker}if(this.warnedMarker===undefined){this.warnedMarker=true;console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")}return this.markFuzzyMatchSubstring}},{key:"getFuzzyMatchIndexes",value:function e(t,n){var r=t.toLowerCase();return n.reduce(function e(t,n,o){return n.text.toLowerCase().indexOf(r)!==-1?t.push(o)&&t:t},[])}},{key:"getStartsWithMatchIndexes",value:function e(t,n){var r=t.toLowerCase();return n.reduce(function e(t,n,o){if(n.text.toLowerCase().indexOf(r)===0){t.push(o)}return t},[])}},{key:"getMatchingFunction",
value:function e(){if(B(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.getStartsWithMatchIndexes}return this.getFuzzyMatchIndexes}else if(s(this.props.algorithm.matcher)){return this.props.algorithm.matcher}if(this.warnedMatcher===undefined){this.warnedMatcher=true;console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")}return this.getFuzzyMatchIndexes}},{key:"computeMatches",value:function e(t){var n=this;this.setState(function(e,r){var o=t||r.entities;var s=e.input;var i=s===""?[]:n.getMatchIndexes(s,o);return{selectedEntityIndex:i.length?i[0]:-1,entityMatchIndexes:i}})}},{key:"renderNotification",value:function e(){return r.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function e(){if(this.props.hint){var t=this.state.input;var n=this.getSelectedEntityText();var o="";if(n&&n.toLowerCase().indexOf(t.toLowerCase())===0){o=n.replace(new RegExp(t,"i"),t)}return r.createElement("div",c({},this.props.hintProps,{ref:"hint",className:Ne("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),o)}}},{key:"renderMatches",value:function e(){var t=this;if(this.state.entityMatchIndexes.length){var n=this.props.matchWrapperProps;return r.createElement("div",c({},n,{ref:"matches",className:Ne("b-typeahead-match-wrapper",n.className)}),this.state.entityMatchIndexes.map(function(e){var n=t.props.entities[e];var o=n.className,s=n.text,i=f(n,["className","text"]);return r.createElement("div",c({},i,{ref:"match_$"+e,className:Ne("b-typeahead-match",o,{"b-typeahead-match-selected":t.state.selectedEntityIndex===e}),key:s,onClick:t.handleMatchClick.bind(t,e)}),t.markMatchSubstring(t.state.input,n))}))}}},{key:"render",value:function e(){var n=this.props,o=this.state;return r.createElement("div",c({},i(n,t.internalKeys),{ref:"wrapper",className:Ne("b-typeahead-wrapper",n.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),r.createElement(V,c({},H(n,V.defaultProps),{ref:"input","aria-controls":o.id,inputProps:c({},n.inputProps,{className:Ne("b-typeahead",n.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]);return t}(r.PureComponent);je.mode={STARTS_WITH:"STARTS_WITH",FUZZY:"FUZZY"};je.propTypes=c({},V.propTypes,{algorithm:t.PropTypes.oneOfType([t.PropTypes.oneOf([je.mode.STARTS_WITH,je.mode.FUZZY]),t.PropTypes.shape({marker:t.PropTypes.oneOfType([t.PropTypes.func,t.PropTypes.oneOf([je.mode.STARTS_WITH,je.mode.FUZZY])]),matcher:t.PropTypes.oneOfType([t.PropTypes.func,t.PropTypes.oneOf([je.mode.STARTS_WITH,je.mode.FUZZY])])})]),clearPartialInputOnSelection:t.PropTypes.bool,entities:t.PropTypes.arrayOf(t.PropTypes.shape({text:t.PropTypes.string})),hint:t.PropTypes.bool,hintProps:t.PropTypes.object,matchWrapperProps:t.PropTypes.object,offscreenClass:t.PropTypes.string,onComplete:t.PropTypes.func,onEntityHighlighted:t.PropTypes.func,onEntitySelected:t.PropTypes.func});je.defaultProps=c({},V.defaultProps,{algorithm:je.mode.FUZZY,clearPartialInputOnSelection:false,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:g,onEntityHighlighted:g,onEntitySelected:g});je.internalKeys=Object.keys(je.defaultProps);var Fe=function e(){var t=this;this.state={entityMatchIndexes:[],id:T(),isControlled:B(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1};this.mounted=false;this.updateInputState=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return t.setState({input:e})};this.getSelectedEntityText=function(){var e=t.props.entities[t.state.selectedEntityIndex];return e?e.text:""};this.resetMatches=function(){if(t.mounted){t.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})}};this.getInputNode=function(){return t.refs.input.refs.field};this.select=function(){var e=t.getInputNode();e.selectionStart=0;e.selectionEnd=t.getValue().length};this.focus=function(){return t.getInputNode().focus()};this.getValue=function(){return t.refs.input.getValue()};this.setValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";t.refs.input.setValue(e);t.updateInputState(e);t.resetMatches();t.focus()};this.setValueWithSelectedEntity=function(){t.props.onEntitySelected(t.state.selectedEntityIndex);if(t.props.clearPartialInputOnSelection){t.setValue("")}else{t.setValue(t.getSelectedEntityText())}window.setTimeout(t.resetMatches,0)};this.markMatchSubstring=function(){return t.getMarkingFunction().apply(undefined,arguments)};this.getMatchIndexes=function(){return t.getMatchingFunction().apply(undefined,arguments)};this.handleChange=function(e){if(t.state.isControlled===false){t.updateInputState(e.target.value);t.computeMatches()}if(s(t.props.inputProps.onChange)){t.props.inputProps.onChange(e)}};this.handleKeyDown=function(e){switch(e.key){case"ArrowLeft":if(e.target.selectionStart>1){e.stopPropagation()}break;case"Tab":case"ArrowRight":if(t.state.selectedEntityIndex!==-1&&t.cursorAtEndOfInput()&&t.getInputNode()===e.target&&!e.shiftKey){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}break;case"ArrowUp":e.nativeEvent.preventDefault();t.selectMatch(-1);t.focus();break;case"ArrowDown":e.nativeEvent.preventDefault();t.selectMatch(1);t.focus();break;case"Escape":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){t.resetMatches()}break;case"Enter":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}else{t.props.onComplete(t.state.input,e)}break}if(s(t.props.onKeyDown)){t.props.onKeyDown(e)}}};var Le=function e(t){return t[0]};var _e=function e(t){return t[t.length-1]};var Me=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.focus=function(){return r.refs.typeahead.focus()},r.getInputNode=function(){return r.refs.typeahead.getInputNode()},r.getSelectedEntityText=function(){return r.refs.typeahead.getSelectedEntityText()},r.getValue=function(){return r.refs.typeahead.getValue()},r.select=function(){return r.refs.typeahead.select()},r.setValue=function(e){return r.refs.typeahead.setValue(e)},r.add=function(e){if(r.props.tokens.indexOf(e)===-1){r.props.handleAddToken(e)}},r.handleInputClick=function(e){r.clearSelection();if(s(r.props.inputProps.onClick)){r.props.inputProps.onClick(e)}},r.handleInputFocus=function(e){r.clearSelection();if(s(r.props.inputProps.onFocus)){r.props.inputProps.onFocus(e)}},r.handleKeyDown=function(e){switch(e.which){case 37:r.selectPreviousToken(e.shiftKey);break;case 39:r.selectNextToken(e.shiftKey);break;case 8:if(r.props.tokensSelected.length){r.remove(r.props.tokensSelected);r.focus()}break;case 65:if(e.metaKey){e.preventDefault();r.focus();r.select();r._suppressNextTokenSelection=true;r.props.handleNewSelection(r.props.tokens)}}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"componentDidUpdate",value:function e(t){var n=t.tokensSelected;var r=this.props.tokensSelected;if(this.props.tokens.length>t.tokens.length){this.setValue("")}if(this._suppressNextTokenSelection){this._suppressNextTokenSelection=false;return}if(n!==r&&r.length!==0){if(r.length===1||r[0]!==n[0]){return this.refs["token_"+r[0]].focus()}else if(_e(r)!==_e(n)){return this.refs["token_"+_e(r)].focus()}this.refs["token_"+r[0]].focus()}}},{key:"remove",value:function e(t){var n=this;var r=(Array.isArray(t)?t:[t]).filter(function(e){return n.props.tokens.indexOf(e)!==-1});if(r.length){this.props.handleRemoveTokens(r)}}},{key:"selectToken",value:function e(t){this.props.handleNewSelection([t])}},{key:"selectTokens",value:function e(t){this.props.handleNewSelection(t)}},{key:"selectPreviousToken",value:function e(t){var n=this.props.tokensSelected;var r=this.props.tokens;if(n.length===1&&Le(n)===Le(r)){return}if(n.length===0){this.selectToken(_e(r))}else{var o=r[r.indexOf(Le(n))-1];this.selectTokens(t?[o].concat(n):[o])}}},{key:"selectNextToken",value:function e(t){var n=this.props.tokensSelected;var r=this.props.tokens;if(n.length===0){return}if(_e(n)===_e(r)){this.clearSelection();this.focus()}else{var o=r[r.indexOf(_e(n))+1];this.selectTokens(t?n.concat(o):[o])}}},{key:"clearSelection",value:function e(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function e(t,n){n.stopPropagation();this.remove(t);this.focus();if(this.props.tokenCloseComponent.props.onClick){this.props.tokenCloseComponent.props.onClick(n)}}},{key:"renderTokenClose",value:function e(t){if(this.props.tokenCloseVisible){return r.cloneElement(this.props.tokenCloseComponent,{className:Ie("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,t)})}}},{key:"handleTokenKeyDown",value:function e(t,n){switch(n.which){case 13:case 32:this.selectToken(t);n.preventDefault();break;case 8:this.remove(t);this.focus();n.preventDefault();break}}},{key:"renderTokens",value:function e(){var t=this;return r.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(e){return r.createElement("div",{ref:"token_"+e,key:e,className:Ie("b-tokenfield-token",{"b-tokenfield-token-selected":t.props.tokensSelected.indexOf(e)!==-1}),onClick:t.selectToken.bind(t,e),onKeyDown:t.handleTokenKeyDown.bind(t,e),tabIndex:"0"},t.props.entities[e].text,t.renderTokenClose(e))}))}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:Ie("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),r.createElement(je,c({},H(this.props,je.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearPartialInputOnSelection:true,inputProps:c({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]);return t}(r.PureComponent);Me.propTypes=c({},je.propTypes,{handleAddToken:t.PropTypes.func,handleRemoveTokens:t.PropTypes.func,handleNewSelection:t.PropTypes.func,tokenCloseComponent:t.PropTypes.element,tokenCloseVisible:t.PropTypes.bool,tokens:t.PropTypes.arrayOf(t.PropTypes.number),tokensSelected:t.PropTypes.arrayOf(t.PropTypes.number)});Me.defaultProps=c({},je.defaultProps,{handleAddToken:g,handleRemoveTokens:g,handleNewSelection:g,tokenCloseComponent:r.createElement("div",null,"X"),tokenCloseVisible:true,tokens:[],tokensSelected:[]});Me.internalKeys=Object.keys(Me.defaultProps);var Re=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&a(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Ke=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"render",value:function e(){var n=this.props.position;return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{className:Re("b-tooltip",this.props.className,{"b-tooltip-position-above":n===t.position.ABOVE,"b-tooltip-position-below":n===t.position.BELOW,"b-tooltip-position-before":n===t.position.BEFORE,"b-tooltip-position-after":n===t.position.AFTER}),"data-tooltip":this.props.text,"aria-label":this.props["aria-label"]||this.props.text}),this.props.children)}}]);return t}(r.PureComponent);Ke.position={ABOVE:"ABOVE",BELOW:"BELOW",BEFORE:"BEFORE",AFTER:"AFTER"};Ke.propTypes={component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),position:t.PropTypes.oneOf(Object.keys(Ke.position)),text:t.PropTypes.string};Ke.defaultProps={component:"div",position:Ke.position.ABOVE,text:""};Ke.internalKeys=Object.keys(Ke.defaultProps);e.ArrowKeyNavigation=y;e.Button=P;e.Checkbox=k;e.CheckboxGroup=E;e.Dialog=I;e.FittedText=M;e.Image=K;e.Input=V;e.Modal=Y;e.Pagination=me;e.Popover=ke;e.Portal=A;e.ProgressiveDisclosure=Ee;e.Progress=Ce;e.Radio=xe;e.SegmentedControl=fe;e.TokenizedInput=Me;e.Tooltip=Ke;e.Typeahead=je})(this.Boundless=this.Boundless||{},React,ReactDOM);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRsZXNzLnN0YW5kYWxvbmUuanMiLCJzb3VyY2VzIjpbIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtYnV0dG9uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1jaGVja2JveC9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94L2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtZGlhbG9nL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWZpdHRlZC10ZXh0L25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWZpdHRlZC10ZXh0L2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWltYWdlL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWltYWdlL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLWlucHV0L25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLWlzLXN0cmluZy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dC9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLW1vZGFsL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoLmlzaW50ZWdlci9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1zZWdtZW50ZWQtY29udHJvbC9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1zZWdtZW50ZWQtY29udHJvbC9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcG92ZXIvbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdHJhbnNmb3JtLXByb3BlcnR5L2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcG92ZXIvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtcHJvZ3Jlc3NpdmUtZGlzY2xvc3VyZS9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzc2l2ZS1kaXNjbG9zdXJlL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXRva2VuaXplZC1pbnB1dC9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL25vZGVfbW9kdWxlcy9lc2NhcGUtc3RyaW5nLXJlZ2V4cC9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtdG9rZW5pemVkLWlucHV0L2luZGV4LmpzIiwiLi4vcGFja2FnZXMvYm91bmRsZXNzLXRvb2x0aXAvbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9ib3VuZGxlc3MtdG9vbHRpcC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAodGVzdCkgPT4gdHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbic7XG4iLCIvKipcbiAqIFJldHVybnMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBzdXBwbGllZCBvYmplY3Qgd2l0aG91dCB0aGUgZ2l2ZW4ga2V5cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb21pdEtleXNGcm9tU291cmNlT2JqZWN0KHNvdXJjZSwgb21pdHRlZEtleXMgPSBbXSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiByZWxvY2F0ZUFjY2VwdGVkS2V5cyhoYXNoLCBrZXkpIHtcbiAgICAgICAgaWYgKG9taXR0ZWRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGhhc2hba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc2g7XG5cbiAgICB9LCB7fSk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmluZERPTU5vZGV9IGZyb20gJ3JlYWN0LWRvbSc7XG5cbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJyb3dLZXlOYXZpZ2F0aW9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIG1vZGUgPSB7XG4gICAgICAgIEhPUklaT05UQUw6ICdIT1JJWk9OVEFMJyxcbiAgICAgICAgVkVSVElDQUw6ICdWRVJUSUNBTCcsXG4gICAgICAgIEJPVEg6ICdCT1RIJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICAgIEFueSB2YWxpZCBIVE1MIHRhZyBuYW1lIG9yIGEgUmVhY3QgY29tcG9uZW50IGZhY3RvcnksIGFueXRoaW5nIHRoYXQgY2FuIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYFJlYWN0LmNyZWF0ZUVsZW1lbnRgXG4gICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgQWxsb3dzIGZvciBhIHBhcnRpY3VsYXIgY2hpbGQgdG8gYmUgaW5pdGlhbGx5IHJlYWNoYWJsZSB2aWEgdGFiYmluZ1xuICAgICAgICAqL1xuICAgICAgICBkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAgICAgICAvKipcbiAgICAgICAgICAgIENvbnRyb2xzIHdoZW4gYXJyb3cga2V5IHByZXNzZXMgd2lsbCBiZSBjYXVnaHQgYnkgY29tcG9uZW50IGFuZCByZXN1bHQgaW4gdGhlIGFjdGl2ZSBpdGVtIGJlaW5nIGluY3JlbWVudGVkIG9yIGRlY3JlbWVudGVkXG4gICAgICAgICovXG4gICAgICAgIG1vZGU6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhBcnJvd0tleU5hdmlnYXRpb24ubW9kZSkpLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGRlZmF1bHRBY3RpdmVDaGlsZEluZGV4OiAwLFxuICAgICAgICBtb2RlOiBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RILFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhBcnJvd0tleU5hdmlnYXRpb24uZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGFjdGl2ZUNoaWxkSW5kZXg6IHRoaXMucHJvcHMuZGVmYXVsdEFjdGl2ZUNoaWxkSW5kZXgsXG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmFjdGl2ZUNoaWxkSW5kZXggIT09IHByZXZTdGF0ZS5hY3RpdmVDaGlsZEluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNldEZvY3VzKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBudW1DaGlsZHJlbiA9ICAgbmV4dFByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gUmVhY3QuQ2hpbGRyZW4uY291bnQobmV4dFByb3BzLmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICAgIGlmIChudW1DaGlsZHJlbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2FjdGl2ZUNoaWxkSW5kZXg6IDB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ID49IG51bUNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDogbnVtQ2hpbGRyZW4gLSAxfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRGb2N1cyhpbmRleCkge1xuICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSAoXG4gICAgICAgICAgICB0aGlzLnJlZnMud3JhcHBlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICAgICAgPyB0aGlzLnJlZnMud3JhcHBlclxuICAgICAgICAgIDogZmluZERPTU5vZGUodGhpcy5yZWZzLndyYXBwZXIpXG4gICAgICAgICkuY2hpbGRyZW5baW5kZXhdO1xuXG4gICAgICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmhhc0F0dHJpYnV0ZSgnZGF0YS1za2lwJykpIHtcbiAgICAgICAgICAgIHRoaXMubW92ZUZvY3VzKFxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkb2N1bWVudC5hY3RpdmVFbGVtZW50KSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HID8gLTEgOiAxXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTm9kZSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgIGNoaWxkTm9kZS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW92ZUZvY3VzKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bUNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gUmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgbGV0IG5leHRJbmRleCA9IHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCArIGRlbHRhO1xuXG4gICAgICAgIGlmIChuZXh0SW5kZXggPj0gbnVtQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIG5leHRJbmRleCA9IDA7IC8vIGxvb3BcbiAgICAgICAgfSBlbHNlIGlmIChuZXh0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSBudW1DaGlsZHJlbiAtIDE7IC8vIHJldmVyc2UgbG9vcFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDogbmV4dEluZGV4fSk7XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1cygtMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1cygtMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5WRVJUSUNBTFxuICAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRm9jdXMoMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTFxuICAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRm9jdXMoMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5vbktleURvd24pKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVGb2N1cyA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1mb2N1cy1pbmRleCcpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtaW5kZXgnKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pW2luZGV4XTtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDogaW5kZXh9KTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgICAgICAnZGF0YS1mb2N1cy1pbmRleCc6IGluZGV4LFxuICAgICAgICAgICAgICAgICdkYXRhLXNraXAnOiBwYXJzZUludChjaGlsZC5wcm9wcy50YWJJbmRleCwgMTApID09PSAtMSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAga2V5OiBjaGlsZC5rZXkgfHwgaW5kZXgsXG4gICAgICAgICAgICAgICAgdGFiSW5kZXg6IHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCA9PT0gaW5kZXggPyAwIDogLTEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgQXJyb3dLZXlOYXZpZ2F0aW9uLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXN9XG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259PlxuICAgICAgICAgICAgICAgIHt0aGlzLmNoaWxkcmVuKCl9XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgICAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgYmVjb21lcyBcInByZXNzZWRcIiBvciB0cmlnZ2VyZWQgYnkgdGhlIHVzZXIgKG1vdXNlIG9yIGtleWJvYXJkKTsgYmFja2luZyBkYXRhIG11c3QgYmUgdXBkYXRlZCB0byBwZXJzaXN0IHRoZSBzdGF0ZSBjaGFuZ2U7IHRoaXMgZnVuY3Rpb24gd2lsbCBzdGlsbCBiZSBjYWxsZWQgaWYgYHByb3BzLnByZXNzZWRgIGlzIG5vdCBwYXNzZWRcbiAgICAgICAgICovXG4gICAgICAgIG9uUHJlc3NlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgXCJ1bnByZXNzZWRcIjsgYmFja2luZyBkYXRhIG11c3QgYmUgdXBkYXRlZCB0byBwZXJzaXN0IHRoZSBzdGF0ZSBjaGFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIG9uVW5wcmVzc2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZW5hYmxlcyBcInByZXNzZWRcIiBzdXBwb3J0IGFuZCBhZGRzIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgdG8gdGhlIGAuYi1idXR0b25gIG5vZGU7IGVzc2VudGlhbGx5IGEgXCJzdGF0ZWZ1bFwiIGJ1dHRvbiAoc2VlIHRoZSBcInVucHJlc3NlZC9wcmVzc2VkXCIgZXhhbXBsZSBkZW1vIGFib3ZlKVxuICAgICAgICAgKi9cbiAgICAgICAgcHJlc3NlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgIG9uQ2xpY2s6IG5vb3AsXG4gICAgICAgIG9uUHJlc3NlZDogbm9vcCxcbiAgICAgICAgb25VbnByZXNzZWQ6IG5vb3AsXG4gICAgICAgIHByZXNzZWQ6IHVuZGVmaW5lZCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoQnV0dG9uLmRlZmF1bHRQcm9wcylcblxuICAgIHRvZ2dsZVN0YXRlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucHJvcHNbdGhpcy5wcm9wcy5wcmVzc2VkID8gJ29uVW5wcmVzc2VkJyA6ICdvblByZXNzZWQnXShldmVudCk7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy50b2dnbGVTdGF0ZShldmVudCk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5vbkNsaWNrKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICBjYXNlICdTcGFjZSc6XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy50b2dnbGVTdGF0ZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLm9uS2V5RG93bikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBCdXR0b24uaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9J2J1dHRvbidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWJ1dHRvbicsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICdiLWJ1dHRvbi1wcmVzc2FibGUnOiB0eXBlb2YgdGhpcy5wcm9wcy5wcmVzc2VkICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ItYnV0dG9uLXByZXNzZWQnOiB0aGlzLnByb3BzLnByZXNzZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgYXJpYS1wcmVzc2VkPXt0aGlzLnByb3BzLnByZXNzZWR9XG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIi8qKlxuICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBBZGRzIGEgcHJlZml4IHNvIGl0IGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgYW4gSFRNTCBJRC5cbiAqIEJhc2VkIG9uIHtAbGluayBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qZWQvOTgyODgzIHRoaXMgaW1wbGVtZW50YXRpb259LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gYSB1bmlxdWUgaWRlbnRpZmllclxuICpcbiAqIEBleGFtcGxlXG4gKiB1dWlkKCk7IC8vIGItMWYyY2QyN2YtMDc1NC00MzQ0LTlkMjAtNDM2YTIwMWIyZjgwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHV1aWQoKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICByZXR1cm4gJ2ItJyArIChbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZyxhPT4oYV5NYXRoLnJhbmRvbSgpKjE2Pj5hLzQpLnRvU3RyaW5nKDE2KSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcbmltcG9ydCB1dWlkIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYWxsIGlucHV0LXNwZWNpZmljIHByb3BzIGxpa2UgYHZhbHVlYCwgYG5hbWVgLCBldGMgc2hvdWxkIGJlIHBhc3NlZCBoZXJlIC0tIGNvbW1vbiBvbmVzIGFyZSBsaXN0ZWQgYmVsb3cuXG4gICAgICAgICAqIEFsc28gc3VwcG9ydHMgYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpOyBhcHBsaWVkIHRvIHRoZSBgLmItY2hlY2tib3hgIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGlucHV0UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGRldGVybWluZXMgaWYgdGhlIGNoZWNrYm94IGlzIHJlbmRlcmVkIGFzIGNoZWNrZWQvdW5jaGVja2VkLCBzZWUgUmVhY3QgW1wiY29udHJvbGxlZCBpbnB1dHNcIl0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9mb3Jtcy5odG1sI2NvbnRyb2xsZWQtY29tcG9uZW50cykpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgICAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogcHJldmVudHMgdGhlIGBvbntDaGVja2VkLFVuY2hlY2tlZH1gIGV2ZW50cyBmcm9tIGZpcmluZyB3aGVuIGB0cnVlYFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBlbmFibGVzIG9yIGRpc2FibGVzIFwibWl4ZWRcIiBjaGVja2JveCBzdGF0ZSwgcmVhZCB0aGlzIFtDU1MtVHJpY2tzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vaW5kZXRlcm1pbmF0ZS1jaGVja2JveGVzLykgIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbmRldGVybWluYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAgICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogcmVuZGVyZWQgYXMgdGhlIGlucHV0IGNvbnRyb2wncyBmb3JtIG5hbWVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiAgcGFzc2VkLXRocm91Z2ggdG8gdGhlIGlucHV0IG5vZGUsIGxpa2UgYG5hbWVgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFJlYWN0LXJlbmRlcmFibGUgY29udGVudCwgbW9zdCBjb21tb25seSBhIHNpbXBsZSBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpOyBhcHBsaWVkIHRvIHRoZSBgLmItY2hlY2tib3gtbGFiZWxgIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGxhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgY2hlY2tlZDsgYmFja2luZyBkYXRhIG11c3QgYmUgdXBkYXRlZCB0byBwZXJzaXN0IHRoZSBzdGF0ZSBjaGFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIG9uQ2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgdW5jaGVja2VkOyBiYWNraW5nIGRhdGEgbXVzdCBiZSB1cGRhdGVkIHRvIHBlcnNpc3QgdGhlIHN0YXRlIGNoYW5nZVxuICAgICAgICAgKi9cbiAgICAgICAgb25VbmNoZWNrZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGlucHV0UHJvcHM6IHtcbiAgICAgICAgICAgIGNoZWNrZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaW5kZXRlcm1pbmF0ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICBsYWJlbFByb3BzOiB7fSxcbiAgICAgICAgb25DaGVja2VkOiBub29wLFxuICAgICAgICBvblVuY2hlY2tlZDogbm9vcCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoQ2hlY2tib3guZGVmYXVsdFByb3BzKVxuXG4gICAgaWQgPSB1dWlkKClcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5kZXRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5yZWZzLmlucHV0LmluZGV0ZXJtaW5hdGUgPSAhIXRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlO1xuICAgIH1cblxuICAgIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4geyAvLyBTZW5kIHRoZSBvcHBvc2l0ZSBzaWduYWwgZnJvbSB3aGF0IHdhcyBwYXNzZWQgdG8gdG9nZ2xlIHRoZSBkYXRhXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlucHV0UHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy5wcm9wc1shdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQgPyAnb25DaGVja2VkJyA6ICdvblVuY2hlY2tlZCddKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5uYW1lKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kaXNhYmxlZCkgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLnJlZnMuaW5wdXQuZm9jdXMoKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljaykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEFyaWFTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlID8gJ21peGVkJyA6IFN0cmluZyh0aGlzLnByb3BzLmlucHV0UHJvcHMuY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgcmVuZGVySW5wdXQoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLmlucHV0UHJvcHMsICdpbmRldGVybWluYXRlJyl9XG4gICAgICAgICAgICAgICAgcmVmPSdpbnB1dCdcbiAgICAgICAgICAgICAgICB0eXBlPSdjaGVja2JveCdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94JywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1jaGVja2JveC1taXhlZCc6IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlLFxuICAgICAgICAgICAgICAgICAgICAnYi1jaGVja2JveC1jaGVja2VkJzogdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgICdiLWNoZWNrYm94LXVuY2hlY2tlZCc6ICF0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSAmJiAhdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaW5wdXRQcm9wcy5pZCB8fCB0aGlzLmlkfVxuICAgICAgICAgICAgICAgIGFyaWEtY2hlY2tlZD17dGhpcy5nZXRBcmlhU3RhdGUoKX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30gLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJMYWJlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubGFiZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmxhYmVsUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIHJlZj0nbGFiZWwnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItY2hlY2tib3gtbGFiZWwnLCB0aGlzLnByb3BzLmxhYmVsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj17dGhpcy5wcm9wcy5pbnB1dFByb3BzLmlkIHx8IHRoaXMuaWR9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbH1cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBDaGVja2JveC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94LXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTGFiZWwoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi9ib3VuZGxlc3MtY2hlY2tib3gvaW5kZXgnO1xuaW1wb3J0IG9taXQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleCc7XG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrYm94R3JvdXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgQ29uc3RhbnRzID0ge1xuICAgICAgICBTRUxFQ1RfQUxMX0JFRk9SRTogJ1NFTEVDVF9BTExfQkVGT1JFJyxcbiAgICAgICAgU0VMRUNUX0FMTF9BRlRFUjogJ1NFTEVDVF9BTExfQUZURVInLFxuICAgIH1cblxuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgZGF0YSB3aXNoZWQgdG8gYmUgcmVuZGVyZWQsIGVhY2ggaXRlbSBtdXN0IGNvbmZvcm0gdG8gdGhlIFtDaGVja2JveCBwcm9wIHNwZWNdKC4uL0NoZWNrYm94I3Byb3BzKVxuICAgICAgICAgKi9cbiAgICAgICAgaXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKENoZWNrYm94LnByb3BUeXBlcy5pbnB1dFByb3BzKS5pc1JlcXVpcmVkLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiBhbGwgY2hpbGRyZW4gYmVjb21lIGNoZWNrZWQgKG5vdCBmaXJlZCBvbiBmaXJzdCByZW5kZXIpLCBubyByZXR1cm5cbiAgICAgICAgICovXG4gICAgICAgIG9uQWxsQ2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGFsbCBjaGlsZHJlbiBiZWNvbWUgdW5jaGVja2VkIChub3QgZmlyZWQgb24gZmlyc3QgcmVuZGVyKSwgbm8gcmV0dXJuXG4gICAgICAgICAqL1xuICAgICAgICBvbkFsbFVuY2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGEgc3BlY2lmaWMgY2hpbGQgaGFzIGJlY29tZSBjaGVja2VkLCByZXR1cm5zIHRoZSBjaGlsZCBkZWZpbml0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBvbkNoaWxkQ2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGEgc3BlY2lmaWMgY2hpbGQgaGFzIGJlY29tZSBjaGVja2VkLCByZXR1cm5zIHRoZSBjaGlsZCBkZWZpbml0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBvbkNoaWxkVW5jaGVja2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVuZGVycyBhIG1hc3RlciBjaGVja2JveCB0aGF0IGNhbiBtYW5pcHVsYXRlIHRoZSB2YWx1ZXMgb2YgYWxsIGNoaWxkcmVuIHNpbXVsdGFuZW91c2x5XG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RBbGw6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtdXN0IGNvbmZvcm0gdG8gdGhlIFtDaGVja2JveCBwcm9wIHNwZWNdKC4uL0NoZWNrYm94I3Byb3BzKVxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0QWxsUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHRoZSB0ZXh0IG9yIHJlbmRlcmFibGUgbm9kZSB0byBkaXNwbGF5IG5leHQgdG8gdGhlIGNoZWNrYm94XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIChzZWUgW3RoZSBpbXBsZW1lbnRhdGlvbl0oaW5kZXguanMpKSB0aGUgcmVuZGVyaW5nIHBvc2l0aW9uIG9mIHRoZSBcInNlbGVjdCBhbGxcIiBjaGVja2JveCwgZGVmYXVsdHMgdG8gXCJiZWZvcmVcIlxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0QWxsUG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhDaGVja2JveEdyb3VwLkNvbnN0YW50cykpLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgb25BbGxDaGVja2VkOiBub29wLFxuICAgICAgICBvbkFsbFVuY2hlY2tlZDogbm9vcCxcbiAgICAgICAgb25DaGlsZENoZWNrZWQ6IG5vb3AsXG4gICAgICAgIG9uQ2hpbGRVbmNoZWNrZWQ6IG5vb3AsXG4gICAgICAgIHNlbGVjdEFsbDogZmFsc2UsXG4gICAgICAgIHNlbGVjdEFsbFByb3BzOiB7fSxcbiAgICAgICAgc2VsZWN0QWxsUG9zaXRpb246IENoZWNrYm94R3JvdXAuQ29uc3RhbnRzLlNFTEVDVF9BTExfQkVGT1JFLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhDaGVja2JveEdyb3VwLmRlZmF1bHRQcm9wcylcblxuICAgIGFsbEl0ZW1zQ2hlY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXRlbXMuZXZlcnkoKGl0ZW0pID0+IGl0ZW0uaW5wdXRQcm9wcy5jaGVja2VkID09PSB0cnVlKTtcbiAgICB9XG5cbiAgICBhbnlJdGVtc0NoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLml0ZW1zLnNvbWUoKGl0ZW0pID0+IGl0ZW0uaW5wdXRQcm9wcy5jaGVja2VkID09PSB0cnVlKTtcbiAgICB9XG5cbiAgICByZW5kZXJTZWxlY3RBbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdEFsbCkge1xuICAgICAgICAgICAgY29uc3QgYWxsQ2hlY2tlZCA9IHRoaXMuYWxsSXRlbXNDaGVja2VkKCk7XG4gICAgICAgICAgICBjb25zdCB7aW5wdXRQcm9wc30gPSB0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzO1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdzZWxlY3RfYWxsJ1xuICAgICAgICAgICAgICAgICAgICBrZXk9J2NiX3NlbGVjdF9hbGwnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItY2hlY2tib3gtZ3JvdXAtc2VsZWN0YWxsJywgdGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5pbnB1dFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogYWxsQ2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6ICFhbGxDaGVja2VkICYmIHRoaXMuYW55SXRlbXNDaGVja2VkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbnB1dFByb3BzICYmIGlucHV0UHJvcHMubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpbnB1dFByb3BzLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2NiX3NlbGVjdF9hbGwnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wcy5sYWJlbCB8fCAnU2VsZWN0IEFsbCd9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hlY2tlZD17dGhpcy5wcm9wcy5vbkFsbENoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgIG9uVW5jaGVja2VkPXt0aGlzLnByb3BzLm9uQWxsVW5jaGVja2VkfSAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckNoZWNrYm94ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgey4uLml0ZW19XG4gICAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5pbnB1dFByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hlY2tlZD17dGhpcy5wcm9wcy5vbkNoaWxkQ2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgb25VbmNoZWNrZWQ9e3RoaXMucHJvcHMub25DaGlsZFVuY2hlY2tlZH0gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCB0b0JlUmVuZGVyZWQgPSBbdGhpcy5yZW5kZXJDaGVja2JveGVzKCldO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdEFsbCAmJiB0aGlzLnByb3BzLnNlbGVjdEFsbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuc2VsZWN0QWxsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgQ2hlY2tib3hHcm91cC5Db25zdGFudHMuU0VMRUNUX0FMTF9CRUZPUkU6XG4gICAgICAgICAgICAgICAgdG9CZVJlbmRlcmVkLnVuc2hpZnQodGhpcy5yZW5kZXJTZWxlY3RBbGwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgQ2hlY2tib3hHcm91cC5Db25zdGFudHMuU0VMRUNUX0FMTF9BRlRFUjpcbiAgICAgICAgICAgICAgICB0b0JlUmVuZGVyZWQucHVzaCh0aGlzLnJlbmRlclNlbGVjdEFsbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b0JlUmVuZGVyZWQ7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIENoZWNrYm94R3JvdXAuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9J2dyb3VwJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItY2hlY2tib3gtZ3JvdXAnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNoaWxkcmVuKCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbmltcG9ydCBvbWl0IGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXgnO1xuaW1wb3J0IHV1aWQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXgnO1xuXG5leHBvcnQgY29uc3QgUE9SVEFMX0RBVEFfQVRUUklCVVRFID0gJ2RhdGEtcG9ydGFsLWlkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9ydGFsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvLyBzaW5nbGUgY2hpbGQgb25seSAtIGFycmF5cyBub3QgYWxsb3dlZFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgbm9ybWFsIFJlYWN0IGNoaWxkLCBidXQgbXVzdCBiZSBzaW5ndWxhcjsgbXVsdGlwbGUgc2libGluZyBjaGlsZHJlbiBtdXN0IGhhdmUgYSBjb21tb24gd3JhcHBlciwgc3VjaCBhcyBhIFwibGF5b3V0XCIgYDxkaXY+YFxuXG4gICAgICAgICAqIOKchSBPSzpcblxuICAgICAgICAgKiBgYGBqc3hcbiAgICAgICAgICogPFBvcnRhbD5cbiAgICAgICAgICogICBmb29cbiAgICAgICAgICogPC9Qb3J0YWw+XG5cbiAgICAgICAgICogPFBvcnRhbD5cbiAgICAgICAgICogICA8ZGl2PmZvbzwvZGl2PlxuICAgICAgICAgKiA8L1BvcnRhbD5cblxuICAgICAgICAgKiA8UG9ydGFsPlxuICAgICAgICAgKiAgIDxkaXY+XG4gICAgICAgICAqICAgICAgIDxkaXY+Zm9vPC9kaXY+XG4gICAgICAgICAqICAgICAgIDxkaXY+YmFyPC9kaXY+XG4gICAgICAgICAqICAgPC9kaXY+XG4gICAgICAgICAqIDwvUG9ydGFsPlxuICAgICAgICAgKiBgYGBcblxuICAgICAgICAgKiDim5TvuI8gTm90IE9LOlxuXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiA8UG9ydGFsPlxuICAgICAgICAgKiAgIDxkaXY+Zm9vPC9kaXY+XG4gICAgICAgICAqICAgPGRpdj5iYXI8L2Rpdj5cbiAgICAgICAgICogPC9Qb3J0YWw+XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgY2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBsb2NhdGlvbiB0byBhcHBlbmQgdGhlIGdlbmVyYXRlZCBwb3J0YWwgYW5kIGNoaWxkIGVsZW1lbnRzXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0aW5hdGlvbjogUHJvcFR5cGVzLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgSUQgdXNlZCB0byBsaW5rIHRoZSBwb3J0YWwgb3JpZ2luIHRvIHRoZSBkZXN0aW5hdGlvbjsgYWRkZWQgdG8gZ2VuZXJhdGVkIGA8ZGl2PmAgYXBwZW5kZWQgdG8gdGhlIGRlc3RpbmF0aW9uIEhUTUwgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgcG9ydGFsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBkb2N1bWVudC5ib2R5LFxuICAgICAgICBwb3J0YWxJZDogbnVsbCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoUG9ydGFsLmRlZmF1bHRQcm9wcylcblxuICAgIGlkID0gdXVpZCgpXG5cbiAgICAvLyB0aGUgPGRpdj4gdGhhdCB0aGUgY2hpbGRyZW4gYXJlIHJlbmRlcmVkIGludG9cbiAgICAkcG9ydGFsID0gbnVsbFxuXG4gICAgLy8gdGhlIHRvcC1sZXZlbCBjaGlsZCByZW5kZXJlZCBpbnRvIHRoZSAkcG9ydGFsXG4gICAgJHBhc3NlbmdlciA9IG51bGw7XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIHRoaXMuJHBvcnRhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnByb3BzLmRlc3RpbmF0aW9uLmFwcGVuZENoaWxkKHRoaXMuJHBvcnRhbCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJQb3J0YWxsZWRDb250ZW50KCk7XG4gICAgfVxuXG4gICAgcmVuZGVyUG9ydGFsbGVkQ29udGVudCgpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA/IHRoaXMucHJvcHMuY2hpbGRyZW4gOiAoPGRpdj57dGhpcy5wcm9wcy5jaGlsZHJlbn08L2Rpdj4pO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgcG9ydGFsIElEIGxpbmsgaWYgbmVlZGVkXG4gICAgICAgIHRoaXMuJHBvcnRhbC5pZCA9IHRoaXMucHJvcHMucG9ydGFsSWQgfHwgdGhpcy5pZDtcblxuICAgICAgICBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCBjaGlsZCwgdGhpcy4kcG9ydGFsKTtcbiAgICAgICAgdGhpcy4kcGFzc2VuZ2VyID0gdGhpcy4kcG9ydGFsLmNoaWxkcmVuWzBdO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHsgdGhpcy5yZW5kZXJQb3J0YWxsZWRDb250ZW50KCk7IH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuJHBvcnRhbCk7XG4gICAgICAgIHRoaXMucHJvcHMuZGVzdGluYXRpb24ucmVtb3ZlQ2hpbGQodGhpcy4kcG9ydGFsKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFBvcnRhbC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHsuLi57W1BPUlRBTF9EQVRBX0FUVFJJQlVURV06IHRoaXMucHJvcHMucG9ydGFsSWQgfHwgdGhpcy5pZH19IC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7UE9SVEFMX0RBVEFfQVRUUklCVVRFfSBmcm9tICcuLi9ib3VuZGxlc3MtcG9ydGFsL2luZGV4JztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcbmltcG9ydCB1dWlkIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4JztcblxuY29uc3QgdG9BcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlhbG9nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFyYml0cmFyeSBjb250ZW50IHRvIGJlIHJlbmRlcmVkIGFmdGVyIHRoZSBkaWFsb2cgaW4gdGhlIERPTVxuICAgICAgICAgKi9cbiAgICAgICAgYWZ0ZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhcmJpdHJhcnkgY29udGVudCB0byBiZSByZW5kZXJlZCBiZWZvcmUgdGhlIGRpYWxvZyBpbiB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBiZWZvcmU6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcyk7IGFwcGxpZWQgdG8gdGhlIGAuYi1kaWFsb2ctYm9keWAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgYm9keVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmVzIGlmIGZvY3VzIGlzIGFsbG93ZWQgdG8gbW92ZSBhd2F5IGZyb20gdGhlIGRpYWxvZ1xuICAgICAgICAgKi9cbiAgICAgICAgY2FwdHVyZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2YgXCJFc2NhcGVcIiBrZXlwcmVzc2VzIHRvIHRyaWdnZXIgYHByb3BzLm9uQ2xvc2VgXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZU9uRXNjS2V5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZW5hYmxlIGRldGVjdGlvbiBvZiBjbGlja3Mgb3V0c2lkZSB0aGUgZGlhbG9nIGFyZWEgdG8gdHJpZ2dlciBgcHJvcHMub25DbG9zZWBcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBlbmFibGUgZGV0ZWN0aW9uIG9mIGZvY3VzIG91dHNpZGUgdGhlIGRpYWxvZyBhcmVhIHRvIHRyaWdnZXIgYHByb3BzLm9uQ2xvc2VgXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZU9uT3V0c2lkZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZW5hYmxlIGRldGVjdGlvbiBvZiBzY3JvbGwgYW5kIG1vdXNld2hlZWwgZXZlbnRzIG91dHNpZGUgdGhlIGRpYWxvZyBhcmVhIHRvIHRyaWdnZXIgYHByb3BzLm9uQ2xvc2VgXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZU9uT3V0c2lkZVNjcm9sbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRleHQsIFJlYWN0RWxlbWVudHMsIGV0Yy4gY29tcHJpc2luZyB0aGUgXCJmb290ZXJcIiBhcmVhIG9mIHRoZSBkaWFsb2csIGUuZy4gY29uZmlybS9jYW5jZWwgYnV0dG9uc1xuICAgICAgICAgKi9cbiAgICAgICAgZm9vdGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpOyBhcHBsaWVkIHRvIHRoZSBgLmItZGlhbG9nLWZvb3RlcmAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgZm9vdGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRleHQsIFJlYWN0RWxlbWVudHMsIGV0Yy4gdG8gcmVwcmVzZW50IHRoZSBcInRpdGxlIGJhclwiIGFyZWEgb2YgdGhlIGRpYWxvZ1xuICAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpOyBhcHBsaWVkIHRvIHRoZSBgLmItZGlhbG9nLWhlYWRlcmAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgY3VzdG9tIGV2ZW50IGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgdG8gaW5kaWNhdGUgdGhhdCB0aGUgZGlhbG9nIHNob3VsZCBiZSB1bnJlbmRlcmVkIGJ5IGl0cyBwYXJlbnQ7IHRoZSBldmVudCBvY2N1cnMgaWYgb25lIG9yIG1vcmUgb2YgdGhlIGBjbG9zZU9uYCBwcm9wcyAoYGNsb3NlT25Fc2NLZXlgLCBgY2xvc2VPbk91dHNpZGVDbGlja2AsIGV0Yy4pIGFyZSBwYXNzZWQgYXMgYHRydWVgIGFuZCB0aGUgZGlzbWlzc2FsIGNyaXRlcmlhIGFyZSBzYXRpc2ZpZWRcbiAgICAgICAgICovXG4gICAgICAgIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcyk7IGFwcGxpZWQgdG8gdGhlIGAuYi1kaWFsb2ctd3JhcHBlcmAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgd3JhcHBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGFmdGVyOiBudWxsLFxuICAgICAgICBiZWZvcmU6IG51bGwsXG4gICAgICAgIGJvZHlQcm9wczoge30sXG4gICAgICAgIGNhcHR1cmVGb2N1czogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgIGNsb3NlT25Fc2NLZXk6IGZhbHNlLFxuICAgICAgICBjbG9zZU9uT3V0c2lkZUNsaWNrOiBmYWxzZSxcbiAgICAgICAgY2xvc2VPbk91dHNpZGVGb2N1czogZmFsc2UsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlU2Nyb2xsOiBmYWxzZSxcbiAgICAgICAgZm9vdGVyOiBudWxsLFxuICAgICAgICBmb290ZXJQcm9wczoge30sXG4gICAgICAgIGhlYWRlcjogbnVsbCxcbiAgICAgICAgaGVhZGVyUHJvcHM6IHt9LFxuICAgICAgICBvbkNsb3NlOiBub29wLFxuICAgICAgICB3cmFwcGVyUHJvcHM6IHt9LFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhEaWFsb2cuZGVmYXVsdFByb3BzKVxuXG4gICAgbW91bnRlZCA9IGZhbHNlXG5cbiAgICAvLyBmYWxsYmFja3MgaWYgb25lIGlzbid0IHBhc3NlZFxuICAgIHV1aWRIZWFkZXIgPSB1dWlkKClcbiAgICB1dWlkQm9keSA9IHV1aWQoKVxuXG4gICAgaXNQYXJ0T2ZEaWFsb2cobm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUgfHwgbm9kZSA9PT0gd2luZG93KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGNvbnN0IHJvb3RzID0gW3RoaXMuJHdyYXBwZXJdLmNvbmNhdChcbiAgICAgICAgICAgIHRvQXJyYXkuY2FsbChcbiAgICAgICAgICAgICAgICB0aGlzLiR3cmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoYFske1BPUlRBTF9EQVRBX0FUVFJJQlVURX1dYClcbiAgICAgICAgICAgICkubWFwKChkb20pID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRvbS5nZXRBdHRyaWJ1dGUoUE9SVEFMX0RBVEFfQVRUUklCVVRFKSkpXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFID8gbm9kZS5wYXJlbnROb2RlIDogbm9kZTtcblxuICAgICAgICByZXR1cm4gcm9vdHMuc29tZSgoZG9tKSA9PiBkb20uY29udGFpbnMoZWxlbWVudCkpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLCB0cnVlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlT3V0c2lkZVNjcm9sbFdoZWVsLCB0cnVlKTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYXB0dXJlRm9jdXMgJiYgIXRoaXMuaXNQYXJ0T2ZEaWFsb2coZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuJGRpYWxvZy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssIHRydWUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLmhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlT3V0c2lkZVNjcm9sbFdoZWVsLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsIHRydWUpO1xuICAgIH1cblxuICAgIGhhbmRsZUZvY3VzID0gKG5hdGl2ZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5jYXB0dXJlRm9jdXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNQYXJ0T2ZEaWFsb2cobmF0aXZlRXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGV4cGxpY2l0T3JpZ2luYWxUYXJnZXQgaXMgZm9yIEZpcmVmb3gsIGFzIGl0IGRvZXNuJ3Qgc3VwcG9ydCByZWxhdGVkVGFyZ2V0XG4gICAgICAgIGxldCBwcmV2aW91cyA9IG5hdGl2ZUV2ZW50LmV4cGxpY2l0T3JpZ2luYWxUYXJnZXQgfHwgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldDtcblxuICAgICAgICBpZiAoICAgdGhpcy5pc1BhcnRPZkRpYWxvZyhwcmV2aW91cylcbiAgICAgICAgICAgICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKG5hdGl2ZUV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwcmV2aW91cy5mb2N1cygpOyAvLyByZXN0b3JlIGZvY3VzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25Fc2NLZXkgJiYgZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlT3V0c2lkZUNsaWNrID0gKG5hdGl2ZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2sgJiYgIXRoaXMuaXNQYXJ0T2ZEaWFsb2cobmF0aXZlRXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCA9IChuYXRpdmVFdmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5jbG9zZU9uT3V0c2lkZVNjcm9sbCAmJiAhdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLnByb3BzLm9uQ2xvc2UsIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyQm9keSgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5ib2R5UHJvcHN9XG4gICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuYm9keVByb3BzLmlkIHx8IHRoaXMudXVpZEJvZHl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1kaWFsb2ctYm9keScsIHRoaXMucHJvcHMuYm9keVByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyRm9vdGVyKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5mb290ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGZvb3RlclxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5mb290ZXJQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1kaWFsb2ctZm9vdGVyJywgdGhpcy5wcm9wcy5mb290ZXJQcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZm9vdGVyfVxuICAgICAgICAgICAgICAgIDwvZm9vdGVyPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckhlYWRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMuaGVhZGVyUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmhlYWRlclByb3BzLmlkIHx8IHRoaXMudXVpZEhlYWRlcn1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1kaWFsb2ctaGVhZGVyJywgdGhpcy5wcm9wcy5oZWFkZXJQcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuaGVhZGVyfVxuICAgICAgICAgICAgICAgIDwvaGVhZGVyPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckZvY3VzQm91bmRhcnkoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNhcHR1cmVGb2N1cykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYi1vZmZzY3JlZW4nIHRhYkluZGV4PScwJyBhcmlhLWhpZGRlbj0ndHJ1ZSc+Jm5ic3A7PC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSAvLyB1c2VkIHRvIGxvY2sgZm9jdXMgaW50byBhIHBhcnRpY3VsYXIgc3Vic2V0IG9mIERPTVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLndyYXBwZXJQcm9wc31cbiAgICAgICAgICAgICAgICByZWY9eyhub2RlKSA9PiAodGhpcy4kd3JhcHBlciA9IG5vZGUpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlhbG9nLXdyYXBwZXInLCB0aGlzLnByb3BzLndyYXBwZXJQcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIHRhYkluZGV4PScwJz5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJGb2N1c0JvdW5kYXJ5KCl9XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5iZWZvcmV9XG5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIERpYWxvZy5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgICAgICByZWY9eyhub2RlKSA9PiAodGhpcy4kZGlhbG9nID0gbm9kZSl9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlhbG9nJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgICAgICAgICAgICAgICAgcm9sZT0nZGlhbG9nJ1xuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9e3RoaXMudXVpZEhlYWRlcn1cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT17dGhpcy51dWlkQm9keX1cbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9JzAnPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJIZWFkZXIoKX1cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQm9keSgpfVxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJGb290ZXIoKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmFmdGVyfVxuXG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyRm9jdXNCb3VuZGFyeSgpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmluZERPTU5vZGV9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcblxuY29uc3QgaW5zdGFuY2VzID0gW107XG5cbmZ1bmN0aW9uIHRvSShzdHJpbmdOdW1iZXIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nTnVtYmVyLCAxMCk7XG59XG5cbmZ1bmN0aW9uIHJlc2NhbGUoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBub2RlID0gZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgIGNvbnN0IGNvbnRhaW5lckJveCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUucGFyZW50Tm9kZSk7XG4gICAgY29uc3QgZm9udFNpemUgPSB0b0kod2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZm9udFNpemUpO1xuXG4gICAgbGV0IGNvbnRhaW5lckhlaWdodCA9IHRvSShjb250YWluZXJCb3guaGVpZ2h0KTtcbiAgICBsZXQgY29udGFpbmVyV2lkdGggPSB0b0koY29udGFpbmVyQm94LndpZHRoKTtcblxuICAgIC8vIG5lZWQgdG8gYWNjb3VudCBmb3IgcGFkZGluZ1xuICAgIGlmIChjb250YWluZXJCb3guYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcgfHwgY29udGFpbmVyQm94LmJveFNpemluZyA9PT0gJ3BhZGRpbmctYm94Jykge1xuICAgICAgICBjb250YWluZXJIZWlnaHQgLT0gdG9JKGNvbnRhaW5lckJveC5wYWRkaW5nVG9wKSArIHRvSShjb250YWluZXJCb3gucGFkZGluZ0JvdHRvbSk7XG4gICAgICAgIGNvbnRhaW5lcldpZHRoIC09IHRvSShjb250YWluZXJCb3gucGFkZGluZ0xlZnQpICsgdG9JKGNvbnRhaW5lckJveC5wYWRkaW5nUmlnaHQpO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGltaXplRm9ySGVpZ2h0ID0gTWF0aC5mbG9vcigoZm9udFNpemUgLyBub2RlLm9mZnNldEhlaWdodCkgKiBjb250YWluZXJIZWlnaHQpO1xuICAgIGNvbnN0IG9wdGltaXplRm9yV2lkdGggPSBNYXRoLmZsb29yKChmb250U2l6ZSAvIG5vZGUub2Zmc2V0V2lkdGgpICogY29udGFpbmVyV2lkdGgpO1xuXG4gICAgLy8gdGhlIHx8IDEgaXMgYSBmYWxsYmFjayB0byBwcmV2ZW50IGZvbnRTaXplIGZyb20gYmVpbmcgc2V0IHRvIHplcm8sIHdoaWNoIGZ1YmFycyB0aGluZ3NcbiAgICBub2RlLnN0eWxlLmZvbnRTaXplID0gKE1hdGgubWluKGluc3RhbmNlLnByb3BzLm1heEZvbnRTaXplLCBvcHRpbWl6ZUZvckhlaWdodCwgb3B0aW1pemVGb3JXaWR0aCkgfHwgMSkgKyAncHgnO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVXaW5kb3dSZXNpemUoKSB7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goKGluc3RhbmNlKSA9PiByZXNjYWxlKGluc3RhbmNlKSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlcy5zcGxpY2UoaW5zdGFuY2VzLmluZGV4T2YoaW5zdGFuY2UpLCAxKTtcblxuICAgIGlmIChpbnN0YW5jZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVXaW5kb3dSZXNpemUsIHRydWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRml0dGVkVGV4dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IHZhbGlkIEhUTUwgdGFnIG5hbWUgb3IgYSBSZWFjdCBjb21wb25lbnQgZmFjdG9yeSwgYW55dGhpbmcgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgUmVhY3QuY3JlYXRlRWxlbWVudGBcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbiB1cHBlciBib3VuZCAoaW4gcGl4ZWxzKSBmb3IgaG93IGxhcmdlIHRoZSB0ZXh0IGlzIGFsbG93ZWQgdG8gZ3Jvd1xuICAgICAgICAgKi9cbiAgICAgICAgbWF4Rm9udFNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgIGNvbXBvbmVudDogJ3NwYW4nLFxuICAgICAgICBtYXhGb250U2l6ZTogTnVtYmVyLk1BWF9WQUxVRSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoRml0dGVkVGV4dC5kZWZhdWx0UHJvcHMpXG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgcmVzY2FsZSh0aGlzKTtcblxuICAgICAgICAvLyB0aGVyZSBhcmUgbGlrZWx5IHRvIGJlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGlzIGNvbXBvbmVudCBvbiBhIHBhZ2UsIHNvIGl0IG1ha2VzIHNlbnNlIHRvIGp1c3QgdXNlXG4gICAgICAgIC8vIGEgc2hhcmVkIGdsb2JhbCByZXNpemUgbGlzdGVuZXIgaW5zdGVhZCBvZiBlYWNoIGNvbXBvbmVudCBoYXZpbmcgaXRzIG93blxuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgcmVzY2FsZSh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdW5yZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIEZpdHRlZFRleHQuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXRleHQnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2UgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgc3RhdHVzID0ge1xuICAgICAgICBMT0FESU5HOiAnTE9BRElORycsXG4gICAgICAgIExPQURFRDogJ0xPQURFRCcsXG4gICAgICAgIEVSUk9SOiAnRVJST1InLFxuICAgIH1cblxuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHdyaXR0ZW4gZGVzY3JpcHRpb24gb2YgdGhlIGltYWdlIGZvciBzZWFyY2ggZW5naW5lcywgaG92ZXJ0ZXh0IGFuZCB0aG9zZSB1c2luZyBhY2Nlc3NpYmlsaXR5IHRlY2hub2xvZ2llczsgYXBwbGllZCB0byB0aGUgYC5iLWltYWdlYCBhcyB0aGUgSFRNTCBhdHRyaWJ1dGVzIGBhbHRgIG9yIGB0aXRsZWAsIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiByZW5kZXJlZCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVtaXRzIHRoZSBpbWFnZSBhcyBhIGA8ZGl2PmAgd2l0aCBgYmFja2dyb3VuZC1pbWFnZWAgY3NzIHByb3BlcnR5IHNldCBpbnN0ZWFkIG9mIGA8aW1nPmBcbiAgICAgICAgICovXG4gICAgICAgIGRpc3BsYXlBc0JhY2tncm91bmRJbWFnZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLWltYWdlYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBpbWFnZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHZhbGlkIHBhdGggdG8gdGhlIGRlc2lyZWQgaW1hZ2VcbiAgICAgICAgICovXG4gICAgICAgIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcyk7IGFwcGxpZWQgdG8gdGhlIGAuYi1pbWFnZS1zdGF0dXNgIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIHN0YXR1c1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGFsdDogbnVsbCxcbiAgICAgICAgZGlzcGxheUFzQmFja2dyb3VuZEltYWdlOiBmYWxzZSxcbiAgICAgICAgaW1hZ2VQcm9wczoge30sXG4gICAgICAgIHNyYzogJ2Fib3V0OmJsYW5rJyxcbiAgICAgICAgc3RhdHVzUHJvcHM6IHt9LFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhJbWFnZS5kZWZhdWx0UHJvcHMpXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgc3RhdHVzOiBJbWFnZS5zdGF0dXMuTE9BRElORyxcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAobmV4dFByb3BzLnNyYyAhPT0gdGhpcy5wcm9wcy5zcmMpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQcmVsb2FkZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3N0YXR1czogSW1hZ2Uuc3RhdHVzLkxPQURJTkd9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnByZWxvYWQoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMucHJlbG9hZCgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnJlc2V0UHJlbG9hZGVyKCk7XG4gICAgfVxuXG4gICAgcmVzZXRQcmVsb2FkZXIoKSB7XG4gICAgICAgIHRoaXMubG9hZGVyLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIHRoaXMubG9hZGVyLm9uZXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmxvYWRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgcHJlbG9hZCgpIHtcbiAgICAgICAgaWYgKHRoaXMubG9hZGVyKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHRoaXMubG9hZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgdGhpcy5sb2FkZXIub25sb2FkID0gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7c3RhdHVzOiBJbWFnZS5zdGF0dXMuTE9BREVEfSk7XG4gICAgICAgIHRoaXMubG9hZGVyLm9uZXJyb3IgPSAoKSA9PiB0aGlzLnNldFN0YXRlKHtzdGF0dXM6IEltYWdlLnN0YXR1cy5FUlJPUn0pO1xuXG4gICAgICAgIHRoaXMubG9hZGVyLnNyYyA9IHRoaXMucHJvcHMuc3JjO1xuICAgIH1cblxuICAgIHJlbmRlckltYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXNwbGF5QXNCYWNrZ3JvdW5kSW1hZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5pbWFnZVByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2ltYWdlJ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWltYWdlJywgdGhpcy5wcm9wcy5pbWFnZVByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLmFsdH1cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuaW1hZ2VQcm9wcy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3RoaXMucHJvcHMuc3JjfSlgLFxuICAgICAgICAgICAgICAgICAgICB9fSAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMuaW1hZ2VQcm9wc31cbiAgICAgICAgICAgICAgICByZWY9J2ltYWdlJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItaW1hZ2UnLCB0aGlzLnByb3BzLmltYWdlUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBzcmM9e3RoaXMucHJvcHMuc3JjfVxuICAgICAgICAgICAgICAgIGFsdD17dGhpcy5wcm9wcy5hbHR9XG4gICAgICAgICAgICAgICAgb25Mb2FkPXtub29wfVxuICAgICAgICAgICAgICAgIG9uRXJyb3I9e25vb3B9IC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyU3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiB7Li4udGhpcy5wcm9wcy5zdGF0dXNQcm9wc31cbiAgICAgICAgICAgICAgICAgcmVmPSdzdGF0dXMnXG4gICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItaW1hZ2Utc3RhdHVzJywgdGhpcy5wcm9wcy5zdGF0dXNQcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ItaW1hZ2UtbG9hZGluZyc6IHRoaXMuc3RhdGUuc3RhdHVzID09PSBJbWFnZS5zdGF0dXMuTE9BRElORyxcbiAgICAgICAgICAgICAgICAgICAgJ2ItaW1hZ2UtbG9hZGVkJzogdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEltYWdlLnN0YXR1cy5MT0FERUQsXG4gICAgICAgICAgICAgICAgICAgICdiLWltYWdlLWVycm9yJzogdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEltYWdlLnN0YXR1cy5FUlJPUixcbiAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgIHJvbGU9J3ByZXNlbnRhdGlvbicgLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgSW1hZ2UuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9J3dyYXBwZXInXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1pbWFnZS13cmFwcGVyJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJJbWFnZSgpfVxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlclN0YXR1cygpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJleHBvcnQgZGVmYXVsdCAodGVzdCkgPT4gdHlwZW9mIHRlc3QgPT09ICdzdHJpbmcnO1xuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLWlzLXN0cmluZy9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogdHJpZ2dlcnMgdGhlIHBsYWNlaG9sZGVyIHRvIGRpc2FwcGVhciB3aGVuIHRoZSBpbnB1dCBmaWVsZCBpcyBmb2N1c2VkLCByZWFwcGVhcnMgd2hlbiB0aGUgdXNlciBoYXMgdGFiYmVkIGF3YXkgb3IgZm9jdXMgaXMgbW92ZWRcbiAgICAgICAgICovXG4gICAgICAgIGhpZGVQbGFjZWhvbGRlck9uRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwcm9wcyB0byBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgaW5wdXQgbm9kZSwgYC5iLXRleHR1YWwtaW5wdXRgOyB0aGlzIGluY2x1ZGVzIHRoZSBzdGFuZGFyZCBzZXQgb2YgUmVhY3QgaW5wdXQgcHJvcHMgbGlrZSBgZGVmYXVsdFZhbHVlYCwgYHZhbHVlYCwgYG5hbWVgLCBgcGxhY2Vob2xkZXJgLCBgYXV0b0ZvY3VzYCwgZXRjLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgICAgICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB9KSxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBoaWRlUGxhY2Vob2xkZXJPbkZvY3VzOiB0cnVlLFxuICAgICAgICBpbnB1dFByb3BzOiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKElucHV0LmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBpbnB1dDogJycsXG4gICAgICAgIGlzQ29udHJvbGxlZDogaXNTdHJpbmcodGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKSxcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldElucHV0VmFsdWUobmV4dFByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5wdXRWYWx1ZSA9ICh2YWx1ZSA9ICcnKSA9PiB0aGlzLnNldFN0YXRlKHtpbnB1dDogdmFsdWV9KVxuXG4gICAgZ2V0VmFsdWUgPSAoKSA9PiB0aGlzLnJlZnMuZmllbGQudmFsdWVcblxuICAgIHNldFZhbHVlKG5leHRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldElucHV0VmFsdWUobmV4dFZhbHVlKTtcbiAgICAgICAgdGhpcy5yZWZzLmZpZWxkLnZhbHVlID0gbmV4dFZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gc2ltdWxhdGUgaW5wdXQgY2hhbmdlIGV2ZW50IGZsb3dcbiAgICAgICAgICAgIHRoaXMucmVmcy5maWVsZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7YnViYmxlczogdHJ1ZX0pKTtcbiAgICAgICAgICAgIHRoaXMucmVmcy5maWVsZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywge2J1YmJsZXM6IHRydWV9KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVCbHVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2lzRm9jdXNlZDogZmFsc2V9KTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25CbHVyKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVGb2N1cyA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtpc0ZvY3VzZWQ6IHRydWV9KTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cykgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgICAvLyBmb3IgXCJjb250cm9sbGVkXCIgc2NlbmFyaW9zLCB1cGRhdGVzIHRvIHRoZSBjYWNoZWQgaW5wdXQgdGV4dCBzaG91bGQgY29tZVxuICAgICAgICAvLyBleGNsdXNpdmVseSB2aWEgcHJvcHMgKGNXUlApIHNvIGl0IGV4YWN0bHkgbWlycm9ycyB0aGUgY3VycmVudCBhcHBsaWNhdGlvblxuICAgICAgICAvLyBzdGF0ZSwgb3RoZXJ3aXNlIGEgcmUtcmVuZGVyIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBuZXcgdGV4dCBoYXMgY29tcGxldGVkIGl0c1xuICAgICAgICAvLyBmZWVkYmFjayBsb29wIGFuZCB0aGUgY3Vyc29yIHBvc2l0aW9uIGlzIGxvc3RcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNDb250cm9sbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRJbnB1dFZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UGxhY2Vob2xkZXJUZXh0KCkge1xuICAgICAgICBjb25zdCBpc05vbkVtcHR5ID0gdGhpcy5zdGF0ZS5pbnB1dCAhPT0gJyc7XG4gICAgICAgIGNvbnN0IHNob3VsZFNob3dQbGFjZWhvbGRlciA9ICAgdGhpcy5wcm9wcy5oaWRlUGxhY2Vob2xkZXJPbkZvY3VzID09PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN0YXRlLmlzRm9jdXNlZCA9PT0gZmFsc2UgJiYgaXNOb25FbXB0eSA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGlzTm9uRW1wdHkgPT09IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBzaG91bGRTaG93UGxhY2Vob2xkZXIgPyB0aGlzLnByb3BzLmlucHV0UHJvcHMucGxhY2Vob2xkZXIgOiAnJztcbiAgICB9XG5cbiAgICByZW5kZXJQbGFjZWhvbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgcmVmPSdwbGFjZWhvbGRlcicgY2xhc3NOYW1lPSdiLWlucHV0LXBsYWNlaG9sZGVyIGItaW5wdXQnPlxuICAgICAgICAgICAgICAgIHt0aGlzLmdldFBsYWNlaG9sZGVyVGV4dCgpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHByb3BzLCBJbnB1dC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWlucHV0LXdyYXBwZXInLCBwcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt0aGlzLmdldFBsYWNlaG9sZGVyVGV4dCgpfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJQbGFjZWhvbGRlcigpfVxuXG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wcy5pbnB1dFByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2ZpZWxkJ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWlucHV0JywgcHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17bnVsbH1cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXt0aGlzLmhhbmRsZUJsdXJ9XG4gICAgICAgICAgICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXN9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiLyoqXG4gKiBSZXR1cm5zIGFuIGludGVyc2VjdGlvbiBvZiB0aGUgZmlyc3QgYXJndW1lbnQgYWdhaW5zdCB0aGUgc2Vjb25kIGFyZ3VtZW50J3Mga2V5cy5cbiAqIGUuZy4gdXNlZCBpbiBUeXBlYWhlYWQgdG8gaWRlbnRpZnkgd2hpY2ggcHJvcHMgYXJlIG1lYW50IGZvciBJbnB1dFxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqMVxuICogQHBhcmFtICB7T2JqZWN0fSBvYmoyXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBrZXk6IHZhbHVlcyBpbiBvYmoxIG1hdGNoaW5nIHRoZSBrZXlzIHN1cHBsaWVkIGluIG9iajJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24ob2JqMSwgb2JqMikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmoyKS5yZWR1Y2UoKGNoaWxkUHJvcHMsIGtleSkgPT4ge1xuICAgICAgICBpZiAoa2V5IGluIG9iajEpIHtcbiAgICAgICAgICAgIGNoaWxkUHJvcHNba2V5XSA9IG9iajFba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzO1xuXG4gICAgfSwge30pO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBEaWFsb2cgZnJvbSAnLi4vYm91bmRsZXNzLWRpYWxvZy9pbmRleCc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXgnO1xuaW1wb3J0IGV4dHJhY3RDaGlsZFByb3BzIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4JztcbmltcG9ydCBvbWl0IGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXgnO1xuXG4vKipcbiAqIF9fTW9kYWwgc3VwcG9ydHMgYWxsIFtEaWFsb2cgcHJvcHNdKC9EaWFsb2cjcHJvcHMpOyBhcHBsaWVkIHRvIHRoZSBgLmItbW9kYWxgIG5vZGVfX1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5wcm9wVHlwZXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLW1vZGFsLW1hc2tgIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIG1hc2tQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpOyBhcHBsaWVkIHRvIHRoZSBgLmItbW9kYWxgIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIG1vZGFsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueS9hbGwgc3VwcG9ydGVkIFtQb3J0YWwgcHJvcHNdKC9Qb3J0YWwvUkVBRE1FLm1kKVxuICAgICAgICAgKi9cbiAgICAgICAgcG9ydGFsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgLi4uRGlhbG9nLmRlZmF1bHRQcm9wcyxcbiAgICAgICAgY2FwdHVyZUZvY3VzOiB0cnVlLFxuICAgICAgICBtYXNrUHJvcHM6IHt9LFxuICAgICAgICBtb2RhbFByb3BzOiB7fSxcbiAgICAgICAgcG9ydGFsUHJvcHM6IHt9LFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhNb2RhbC5kZWZhdWx0UHJvcHMpXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHtwcm9wc30gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8UG9ydGFsIHsuLi5wcm9wcy5wb3J0YWxQcm9wc30+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICB7Li4ub21pdChwcm9wcywgTW9kYWwuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPXsobm9kZSkgPT4gKHRoaXMuJG1vZGFsID0gbm9kZSl9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItbW9kYWwtd3JhcHBlcicsIHByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHMubWFza1Byb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1tb2RhbC1tYXNrJywgcHJvcHMubWFza1Byb3BzLmNsYXNzTmFtZSl9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgey4uLmV4dHJhY3RDaGlsZFByb3BzKHByb3BzLCBEaWFsb2cuZGVmYXVsdFByb3BzKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wcy5tb2RhbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1tb2RhbCcsIHByb3BzLm1vZGFsUHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgICAgIDwvRGlhbG9nPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9Qb3J0YWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0ludGVnZXIoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0ludGVnZXIoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbnRlZ2VyO1xuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmluZERPTU5vZGV9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vYm91bmRsZXNzLWJ1dHRvbi9pbmRleCc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtaXMtZnVuY3Rpb24vaW5kZXgnO1xuaW1wb3J0IG5vb3AgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW5vb3AvaW5kZXgnO1xuaW1wb3J0IG9taXQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnRlZENvbnRyb2wgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBjaGlsZCBlbGVtZW50IGJlY29tZXMgc2VsZWN0ZWQ7IGJhY2tpbmcgZGF0YSBtdXN0IGJlIHVwZGF0ZWQgdG8gcGVyc2lzdCB0aGUgc3RhdGUgY2hhbmdlXG4gICAgICAgICAqL1xuICAgICAgICBvbk9wdGlvblNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIGJhY2tpbmcgZGF0YSBmb3IgdGhlIHNlZ21lbnRzIG9mIHRoZSByZW5kZXJlZCBjb250cm9sXG5cbiAgICAgICAgICogPiBfX1ZhbGlkYXRpb24gQ3JpdGVyaWE6X19cbiAgICAgICAgICogPlxuICAgICAgICAgKiA+IDEuIFRoZXJlIG11c3QgYmUgYXQgbGVhc3QgdHdvIGBvcHRpb25zYCAoYSBzZWdtZW50ZWQgY29udHJvbCB3aXRoIG9uZSBidXR0b24gaXMgbm90IGFsbG93ZWQpXG4gICAgICAgICAqID4gMS4gVGhlcmUgbXVzdCBvbmx5IGJlIG9uZSBgb3B0aW9uYCB3aG9zZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBpcyBgdHJ1ZWAgKG11bHRpcGxlIHNlbGVjdGlvbnMgYXJlIG5vdCBhbGxvd2VkKVxuICAgICAgICAgKiA+IDEuIEVhY2ggYHZhbHVlYCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmlxdWUgYWNyb3NzIHRoZSBzZXQgb2YgYG9wdGlvbnNgXG5cbiAgICAgICAgICogLSBfX29wdGlvbnNbXS5zZWxlY3RlZF9fIGBCb29sZWFuYFxuICAgICAgICAgKiAtIF9fb3B0aW9uc1tdLnZhbHVlX18gYFN0cmluZ2BcbiAgICAgICAgICogLSBfX29wdGlvbnNbXS5jb250ZW50X18gYCpgXG4gICAgICAgICAgICogdGhlIGNvbnRlbnQgdG8gZ28gaW5zaWRlIHRoZSBidXR0b25cbiAgICAgICAgICovXG4gICAgICAgIG9wdGlvbnM6IGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhwcm9wcykge1xuICAgICAgICAgICAgaWYgKHByb3BzLm9wdGlvbnMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGF0IGxlYXN0IHR3byBvcHRpb25zLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nU2VsZWN0ZWQgPSBwcm9wcy5vcHRpb25zLnNvbWUoKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghKCdzZWxlY3RlZCcgaW4gb3B0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG1pc3NpbmdTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgYHNlbGVjdGVkYCBwcm9wIGZvciBlYWNoIG9wdGlvbi4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHNlZW5TZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbXVsdGlwbGVTZWxlY3RlZCA9IHByb3BzLm9wdGlvbnMuc29tZSgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VlblNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNlZW5TZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChtdWx0aXBsZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvdW50ZXJlZCBtdWx0aXBsZSBvcHRpb25zIHdpdGggYHNlbGVjdGVkOiB0cnVlYC4gVGhlcmUgY2FuIGJlIG9ubHkgb25lLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5zb21lKChvcHRpb24pID0+IHR5cGVvZiBvcHRpb24udmFsdWUgPT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgYHZhbHVlYCBwcm9wIGZvciBlYWNoIG9wdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBvbk9wdGlvblNlbGVjdGVkOiBub29wLFxuICAgICAgICBvcHRpb25zOiBbXSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoU2VnbWVudGVkQ29udHJvbC5kZWZhdWx0UHJvcHMpXG4gICAgc3RhdGljIGludGVybmFsQ2hpbGRLZXlzID0gW1xuICAgICAgICAnY29udGVudCcsXG4gICAgICAgICd2YWx1ZScsXG4gICAgICAgICdzZWxlY3RlZCcsXG4gICAgXVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGluZGV4T2ZPcHRpb25JbkZvY3VzOiBudWxsLFxuICAgIH1cblxuICAgIGN1cnJlbnRWYWx1ZSgpIHtcbiAgICAgICAgbGV0IHZhbHVlO1xuXG4gICAgICAgIHRoaXMucHJvcHMub3B0aW9ucy5zb21lKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbi52YWx1ZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc2V0Rm9jdXMoaW5kZXgpIHtcbiAgICAgICAgZmluZERPTU5vZGUodGhpcy5yZWZzWydvcHRpb25fJCcgKyBpbmRleF0pLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgZ2V0TmV4dE9wdGlvbkluZGV4KGN1cnJlbnRPcHRpb25JbmRleCkge1xuICAgICAgICBsZXQgbmV4dCA9IGN1cnJlbnRPcHRpb25JbmRleCArIDE7XG5cbiAgICAgICAgcmV0dXJuIG5leHQgPCB0aGlzLnByb3BzLm9wdGlvbnMubGVuZ3RoID8gbmV4dCA6IDA7XG4gICAgfVxuXG4gICAgZ2V0UHJldmlvdXNPcHRpb25JbmRleChjdXJyZW50T3B0aW9uSW5kZXgpIHtcbiAgICAgICAgbGV0IHByZXZpb3VzID0gY3VycmVudE9wdGlvbkluZGV4IC0gMTtcblxuICAgICAgICByZXR1cm4gcHJldmlvdXMgPCAwID8gdGhpcy5wcm9wcy5vcHRpb25zLmxlbmd0aCAtIDEgOiBwcmV2aW91cztcbiAgICB9XG5cbiAgICBoYW5kbGVPcHRpb25CbHVyKG9wdGlvbiwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaW5kZXhPZk9wdGlvbkluRm9jdXMgPT09IHRoaXMucHJvcHMub3B0aW9ucy5pbmRleE9mKG9wdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2luZGV4T2ZPcHRpb25JbkZvY3VzOiBudWxsfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb24ub25CbHVyKSkge1xuICAgICAgICAgICAgb3B0aW9uLm9uQmx1cihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPcHRpb25DbGljayhvcHRpb24sIGV2ZW50KSB7XG4gICAgICAgIHRoaXMucHJvcHMub25PcHRpb25TZWxlY3RlZChvcHRpb24udmFsdWUpO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbi5vbkNsaWNrKSkge1xuICAgICAgICAgICAgb3B0aW9uLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlT3B0aW9uRm9jdXMob3B0aW9uLCBldmVudCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtpbmRleE9mT3B0aW9uSW5Gb2N1czogdGhpcy5wcm9wcy5vcHRpb25zLmluZGV4T2Yob3B0aW9uKX0pO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbi5vbkZvY3VzKSkge1xuICAgICAgICAgICAgb3B0aW9uLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUl0ZW1JbmRleCA9IHRoaXMuc3RhdGUuaW5kZXhPZk9wdGlvbkluRm9jdXM7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ0Fycm93TGVmdCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9jdXModGhpcy5nZXRQcmV2aW91c09wdGlvbkluZGV4KGFjdGl2ZUl0ZW1JbmRleCkpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xuICAgICAgICAgICAgdGhpcy5zZXRGb2N1cyh0aGlzLmdldE5leHRPcHRpb25JbmRleChhY3RpdmVJdGVtSW5kZXgpKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU9wdGlvbkNsaWNrKHRoaXMucHJvcHMub3B0aW9uc1thY3RpdmVJdGVtSW5kZXhdKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLm9uS2V5RG93bikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlck9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9wdGlvbnMubWFwKChkZWZpbml0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHsuLi5vbWl0KGRlZmluaXRpb24sIFNlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxDaGlsZEtleXMpfVxuICAgICAgICAgICAgICAgICAgICByb2xlPSdyYWRpbydcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1jaGVja2VkPXtTdHJpbmcoZGVmaW5pdGlvbi5zZWxlY3RlZCl9XG4gICAgICAgICAgICAgICAgICAgIHJlZj17J29wdGlvbl8kJyArIGluZGV4fVxuICAgICAgICAgICAgICAgICAgICBrZXk9e2RlZmluaXRpb24udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2Itc2VnbWVudGVkLWNvbnRyb2wtb3B0aW9uJywgZGVmaW5pdGlvbi5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdiLXNlZ21lbnRlZC1jb250cm9sLW9wdGlvbi1zZWxlY3RlZCc6IGRlZmluaXRpb24uc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17ZGVmaW5pdGlvbi5zZWxlY3RlZCA/ICcwJyA6ICctMSd9XG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cj17dGhpcy5oYW5kbGVPcHRpb25CbHVyLmJpbmQodGhpcywgZGVmaW5pdGlvbil9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZD17dGhpcy5oYW5kbGVPcHRpb25DbGljay5iaW5kKHRoaXMsIGRlZmluaXRpb24pfVxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXt0aGlzLmhhbmRsZU9wdGlvbkZvY3VzLmJpbmQodGhpcywgZGVmaW5pdGlvbil9PlxuICAgICAgICAgICAgICAgICAgICB7ZGVmaW5pdGlvbi5jb250ZW50fVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFNlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9J3dyYXBwZXInXG4gICAgICAgICAgICAgICAgcm9sZT0ncmFkaW9ncm91cCdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXNlZ21lbnRlZC1jb250cm9sJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVLZXlEb3dufT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJPcHRpb25zKCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmluZERPTU5vZGV9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgaXNJbnRlZ2VyIGZyb20gJ2xvZGFzaC5pc2ludGVnZXInO1xuXG5pbXBvcnQgU2VnbWVudGVkQ29udHJvbCBmcm9tICcuLi9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXgnO1xuaW1wb3J0IEFycm93S2V5TmF2aWdhdGlvbiBmcm9tICcuLi9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXgnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLWlzLWZ1bmN0aW9uL2luZGV4JztcbmltcG9ydCBub29wIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1ub29wL2luZGV4JztcbmltcG9ydCBvbWl0IGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXgnO1xuaW1wb3J0IHV1aWQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXgnO1xuXG5jb25zdCBpZGVudGl0eSA9ICh4KSA9PiB4O1xuXG4vKipcbiAqIEEgdXRpbGl0eSBjb21wb25lbnQgZm9yIGhhbmRsaW5nIHByb21pc2VzIGFzIGNoaWxkcmVuIGFuZCBldmVudHVhbGx5IGRvaW5nIHNvbWV0aGluZyB3aXRoIHRoZWlyIHJlc29sdmVkIHBheWxvYWQuXG4gKi9cbmNsYXNzIEl0ZW0gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICBjb252ZXJ0VG9KU1hGdW5jOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgZXZlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICBsb2FkaW5nQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY29udmVydFRvSlNYRnVuYzogbm9vcCxcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXZlbjogdHJ1ZSxcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIGxvYWRpbmdDb250ZW50OiBudWxsLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhJdGVtLmRlZmF1bHRQcm9wcylcblxuICAgIG1vdW50ZWQgPSBmYWxzZVxuICAgIHN0YXRlID0ge31cblxuICAgIGNvbnZlcnREYXRhVG9KU1hPcldhaXQocHJvcHMgPSB0aGlzLnByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5kYXRhIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29tcG9uZW50OiBudWxsfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNsb3N1cmVQcm9taXNlID0gcHJvcHMuZGF0YTtcblxuICAgICAgICAgICAgcHJvcHMuZGF0YS50aGVuKChyZXNvbHZlZFBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlLCBjdXJyZW50UHJvcHMpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGN1cnJlbnRQcm9wcy5kYXRhID09PSBjbG9zdXJlUHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnRQcm9wcy5jb252ZXJ0VG9KU1hGdW5jKHJlc29sdmVkUGF5bG9hZCwgY3VycmVudFByb3BzLmluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHN0YXRlLmNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0gLy8gb25seSByZXBsYWNlIGlmIHdlJ3JlIGxvb2tpbmcgYXQgdGhlIHNhbWUgcHJvbWlzZSwgb3RoZXJ3aXNlIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtjb21wb25lbnQ6IHByb3BzLmNvbnZlcnRUb0pTWEZ1bmMocHJvcHMuZGF0YSwgcHJvcHMuaW5kZXgpfSk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkgICAgICAgICAgICAgICAgIHsgdGhpcy5jb252ZXJ0RGF0YVRvSlNYT3JXYWl0KCk7IH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpICAgICAgICAgICAgICAgICAgeyB0aGlzLm1vdW50ZWQgPSB0cnVlOyB9XG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHsgdGhpcy5jb252ZXJ0RGF0YVRvSlNYT3JXYWl0KG5leHRQcm9wcyk7IH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpICAgICAgICAgICAgICAgeyB0aGlzLm1vdW50ZWQgPSBmYWxzZTsgfVxuXG4gICAgZ2V0Q2xhc3NlcyhleHRyYUNsYXNzZXMpIHtcbiAgICAgICAgcmV0dXJuIGN4KCdiLXBhZ2luYXRpb24taXRlbScsIGV4dHJhQ2xhc3Nlcywge1xuICAgICAgICAgICAgJ2ItcGFnaW5hdGlvbi1pdGVtLWV2ZW4nOiB0aGlzLnByb3BzLmV2ZW4sXG4gICAgICAgICAgICAnYi1wYWdpbmF0aW9uLWl0ZW0tb2RkJzogIXRoaXMucHJvcHMuZXZlbixcbiAgICAgICAgICAgICdiLXBhZ2luYXRpb24taXRlbS1sb2FkaW5nJzogdGhpcy5zdGF0ZS5jb21wb25lbnQgPT09IG51bGwsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgey4uLm9taXQodGhpcy5wcm9wcywgSXRlbS5pbnRlcm5hbEtleXMpfSBjbGFzc05hbWU9e3RoaXMuZ2V0Q2xhc3NlcygpfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubG9hZGluZ0NvbnRlbnR9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnN0YXRlLmNvbXBvbmVudCwge1xuICAgICAgICAgICAgLi4ub21pdCh0aGlzLnByb3BzLCBJdGVtLmludGVybmFsS2V5cyksXG4gICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3Nlcyh0aGlzLnN0YXRlLmNvbXBvbmVudC5wcm9wcyAmJiB0aGlzLnN0YXRlLmNvbXBvbmVudC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgJ2RhdGEtcGFnaW5hdGlvbi1pbmRleCc6IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb250cm9scyA9IHtcbiAgICAgICAgRklSU1Q6ICdGSVJTVCcsXG4gICAgICAgIFBSRVZJT1VTOiAnUFJFVklPVVMnLFxuICAgICAgICBORVhUOiAnTkVYVCcsXG4gICAgICAgIExBU1Q6ICdMQVNUJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgcG9zaXRpb25zID0ge1xuICAgICAgICBBQk9WRTogJ0FCT1ZFJyxcbiAgICAgICAgQkVMT1c6ICdCRUxPVycsXG4gICAgICAgIEJPVEg6ICdCT1RIJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgYWZ0ZXIgdGhlIGl0ZW1zIGluIHRoZSBET01cbiAgICAgICAgICovXG4gICAgICAgIGFmdGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgYmVmb3JlIHRoZSBpdGVtcyBpbiB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBiZWZvcmU6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbGxvd3MgZm9yIGFyYml0cmFyeSBjb250ZW50IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIGNvbnRyb2wgYXJlYVxuICAgICAgICAgKi9cbiAgICAgICAgY3VzdG9tQ29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2l0aCBhIGRlc2lyZWQgaXRlbSBpbmRleCB3aGVuIHRoYXQgaXRlbSBjb21lcyBpbnRvIHZpZXc7IGFjY2VwdHMgYSBgUHJvbWlzZWAgaWYgeW91IG5lZWQgdG8gZmV0Y2ggdGhlIHJvdyBhc3luY2hyb25vdXNseVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SXRlbTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRvZXMgbm90IHJlbmRlciB0aGUgcGFnaW5nIGNvbnRyb2xzIGlmIHRoZSBudW1iZXIgb2YgaXRlbXMgc3VwcGxpZWQgdG8gdGhlIHZpZXcgaXMgbGVzcy10aGFuLW9yLWVxdWFsLXRvIHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gc2hvdyBwZXIgcGFnZSB2aWEgYHByb3BzLm51bUl0ZW1zUGVyUGFnZWBcbiAgICAgICAgICovXG4gICAgICAgIGhpZGVQYWdlcklmTm90TmVlZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYSB1bmlxdWUgbmFtZSBmb3IgdGhlIGRhdGFzZXQgYmVpbmcgY29uc3VtZWQ7IHBhc3MgYSBkaWZmZXJlbnQgbmFtZSB0byBjYXVzZSB0aGUgdmlldyB0byBmdWxseSByZXNldCBhbmQgcHVsbCBicmFuZCBuZXcgZGF0YVxuICAgICAgICAgKi9cbiAgICAgICAgaWRlbnRpZmllcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgKF9vbmUtaW5kZXhlZF8pIG51bWJlciBvZiB0aGUgcGFnZSB0aGF0IHNob3VsZCBiZSBpbml0aWFsbHkgZGlzcGxheWVkOyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHRvdGFsIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgKi9cbiAgICAgICAgaW5pdGlhbFBhZ2U6IGZ1bmN0aW9uIHZhbGlkYXRlSW5pdGlhbFBhZ2UocHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChpc0ludGVnZXIocHJvcHMuaW5pdGlhbFBhZ2UpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2Bpbml0aWFsUGFnZWAgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhZ2VzID0gTWF0aC5jZWlsKHByb3BzLnRvdGFsSXRlbXMgLyBwcm9wcy5udW1JdGVtc1BlclBhZ2UpO1xuXG4gICAgICAgICAgICBpZiAocHJvcHMuaW5pdGlhbFBhZ2UgPCAxIHx8IHByb3BzLmluaXRpYWxQYWdlID4gbnVtYmVyT2ZQYWdlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2Bpbml0aWFsUGFnZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kICcgKyBudW1iZXJPZlBhZ2VzICsgJy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWxsb3dzIGZvciBhcmJpdHJhcnkgY29udGVudCB0byBiZSByZW5kZXJlZCBpbnRvIHBhZ2luYXRpb24gaXRlbXMgYXMgdGhleSdyZSBsb2FkaW5nIGlmIHRoZSBiYWNraW5nIGRhdGEgaXMgYSBgUHJvbWlzZWBcbiAgICAgICAgICovXG4gICAgICAgIGl0ZW1Mb2FkaW5nQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIHNwZWNpZnkgaG93IGFuIGl0ZW0gc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBKU1gsIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHJlbmRlcmFibGUgYnkgUmVhY3RcbiAgICAgICAgICovXG4gICAgICAgIGl0ZW1Ub0pTWENvbnZlcnRlckZ1bmM6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgb2YgdGhlIFwiRmlyc3QgcGFnZVwiIGNvbnRyb2wgYnV0dG9uXG4gICAgICAgICAqL1xuICAgICAgICBqdW1wVG9GaXJzdENvbnRyb2xDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udGVudCB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIG9mIHRoZSBcIkxhc3QgcGFnZVwiIGNvbnRyb2wgYnV0dG9uXG4gICAgICAgICAqL1xuICAgICAgICBqdW1wVG9MYXN0Q29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcyk7IGFwcGxpZWQgdG8gdGhlIGAuYi1wYWdpbmF0aW9uLWl0ZW0tbGlzdGAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdFdyYXBwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udGVudCB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIG9mIHRoZSBcIk5leHQgcGFnZVwiIGNvbnRyb2wgYnV0dG9uXG4gICAgICAgICAqL1xuICAgICAgICBuZXh0UGFnZUNvbnRyb2xDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIGJlIGRpc3BsYXllZCBvbiBlYWNoIHBhZ2U7IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm9cbiAgICAgICAgICovXG4gICAgICAgIG51bUl0ZW1zUGVyUGFnZTogZnVuY3Rpb24gdmFsaWRhdGVOdW1JdGVtc1BlclBhZ2UocHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChpc0ludGVnZXIocHJvcHMubnVtSXRlbXNQZXJQYWdlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdgbnVtSXRlbXNQZXJQYWdlYCBtdXN0IGJlIGFuIGludGVnZXIuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm51bUl0ZW1zUGVyUGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdgbnVtSXRlbXNQZXJQYWdlYCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgbWF4aW11bSBudW1iZXIgb2YgcGFnZXMgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBjb250cm9sIGJhciBhdCBvbmUgdGltZVxuICAgICAgICAgKi9cbiAgICAgICAgbnVtUGFnZVRvZ2dsZXM6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgd2hldGhlciB0aGUgcGFnaW5hdGlvbiBjb250cm9scyBhcmUgZGlzcGxheWVkIGFib3ZlLCBiZWxvdywgb3IgYm90aCBhYm92ZSBhbmQgYmVsb3cgdGhlIGNvbnRlbnRcbiAgICAgICAgICovXG4gICAgICAgIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoUGFnaW5hdGlvbi5wb3NpdGlvbnMpKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udGVudCB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIG9mIHRoZSBcIlByZXZpb3VzIHBhZ2VcIiBjb250cm9sIGJ1dHRvblxuICAgICAgICAgKi9cbiAgICAgICAgcHJldmlvdXNQYWdlQ29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3aGV0aGVyIHRoZSBcIkZpcnN0IHBhZ2VcIiBjb250cm9sIGJ1dHRvbiBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAgICAgICAqL1xuICAgICAgICBzaG93SnVtcFRvRmlyc3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3aGV0aGVyIHRoZSBcIkxhc3QgcGFnZVwiIGNvbnRyb2wgYnV0dG9uIHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNob3dKdW1wVG9MYXN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVuZGVycyBhbiBlbGVtZW50IGNhbGxlZCBgLmItcGFnaW5hdGlvbi1jb250cm9sLXN0YXRlYCB0aGF0IGNvbnRhaW5zIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwYWdpbmF0aW9uIGxpa2UgXCIxIG9mIDEwXCI7IGFsdGVybmF0aXZlbHksIHRoaXMgcHJvcCBhbHNvIGFjY2VwdHMgYSBmdW5jdGlvbiB0aGF0IGl0IHdpbGwgY2FsbCB3aXRoIHRoZSBjdXJyZW50UGFnZSBhbmQgdG90YWxQYWdlcyBmb3IgeW91IHRvIGZvcm1hdDpcblxuICAgICAgICAgKiBgYGBqc3hcbiAgICAgICAgICogc2hvd1BhZ2luYXRlZFN0YXRlPXtcbiAgICAgICAgICogICAgIChjdXJyZW50UGFnZSwgdG90YWxQYWdlcykgPT4gKFxuICAgICAgICAgKiAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb28nPlxuICAgICAgICAgKiAgICAgICAgICAgICBZb3UncmUgb24gcGFnZSB7Y3VycmVudFBhZ2V9IG9mIHt0b3RhbFBhZ2VzfSBwYWdlcyFcbiAgICAgICAgICogICAgICAgICA8L2Rpdj5cbiAgICAgICAgICogICAgIClcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHNob3dQYWdpbmF0aW9uU3RhdGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgU2VnbWVudGVkQ29udHJvbCBub2RlKHMpLCBgLmItcGFnaW5hdGlvbi1jb250cm9sc2BcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZVdyYXBwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIHRvdGFsIG51bWJlciBvZiBpdGVtcyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHZpZXdcbiAgICAgICAgICovXG4gICAgICAgIHRvdGFsSXRlbXM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBhZnRlcjogbnVsbCxcbiAgICAgICAgYmVmb3JlOiBudWxsLFxuICAgICAgICBjdXN0b21Db250cm9sQ29udGVudDogbnVsbCxcbiAgICAgICAgZ2V0SXRlbTogbm9vcCxcbiAgICAgICAgaGlkZVBhZ2VySWZOb3ROZWVkZWQ6IGZhbHNlLFxuICAgICAgICBpZGVudGlmaWVyOiB1dWlkKCksXG4gICAgICAgIGluaXRpYWxQYWdlOiAxLFxuICAgICAgICBpdGVtTG9hZGluZ0NvbnRlbnQ6IG51bGwsXG4gICAgICAgIGl0ZW1Ub0pTWENvbnZlcnRlckZ1bmM6IGlkZW50aXR5LFxuICAgICAgICBqdW1wVG9GaXJzdENvbnRyb2xDb250ZW50OiAnwqsgRmlyc3QnLFxuICAgICAgICBqdW1wVG9MYXN0Q29udHJvbENvbnRlbnQ6ICdMYXN0IMK7JyxcbiAgICAgICAgbGlzdFdyYXBwZXJQcm9wczoge30sXG4gICAgICAgIG5leHRQYWdlQ29udHJvbENvbnRlbnQ6ICdOZXh0IOKAuicsXG4gICAgICAgIG51bUl0ZW1zUGVyUGFnZTogMTAsXG4gICAgICAgIG51bVBhZ2VUb2dnbGVzOiA1LFxuICAgICAgICBwb3NpdGlvbjogUGFnaW5hdGlvbi5wb3NpdGlvbnMuQUJPVkUsXG4gICAgICAgIHByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50OiAn4oC5IFByZXZpb3VzJyxcbiAgICAgICAgc2hvd0p1bXBUb0ZpcnN0OiB0cnVlLFxuICAgICAgICBzaG93SnVtcFRvTGFzdDogdHJ1ZSxcbiAgICAgICAgc2hvd1BhZ2luYXRpb25TdGF0ZTogdHJ1ZSxcbiAgICAgICAgdG9nZ2xlV3JhcHBlclByb3BzOiB7fSxcbiAgICAgICAgdG90YWxJdGVtczogbnVsbCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoUGFnaW5hdGlvbi5kZWZhdWx0UHJvcHMpXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMucHJvcHMuaW5pdGlhbFBhZ2UsXG4gICAgICAgIHRhcmdldEluZGV4OiAodGhpcy5wcm9wcy5pbml0aWFsUGFnZSAtIDEpICogdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UsXG4gICAgfVxuXG4gICAgY3VycmVudFBhZ2UgPSAoKSA9PiB0aGlzLnN0YXRlLmN1cnJlbnRQYWdlXG4gICAgZ2V0UGFnZUZvckluZGV4ID0gKGluZGV4LCBpdGVtc1BlclBhZ2UgPSB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZSkgPT4gTWF0aC5jZWlsKChpbmRleCArIDEpIC8gaXRlbXNQZXJQYWdlKVxuICAgIHRvdGFsUGFnZXMgPSAoKSA9PiBNYXRoLmNlaWwodGhpcy5wcm9wcy50b3RhbEl0ZW1zIC8gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpXG5cbiAgICBmaXJzdFZpc2libGVJdGVtSW5kZXggPSAoKSA9PiAodGhpcy5jdXJyZW50UGFnZSgpIC0gMSkgKiB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIGlmIChwcmV2U3RhdGUuY3VycmVudFBhZ2UgIT09IHRoaXMuY3VycmVudFBhZ2UoKSkge1xuICAgICAgICAgICAgZmluZERPTU5vZGUodGhpcy5yZWZzLml0ZW1fMCkuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IG9sZFByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgICAvLyB1c2UgdHJhbnNhY3Rpb25hbCBgc2V0U3RhdGUoKWAgc3ludGF4IHRvIGVuc3VyZSB0aGF0IHBlbmRpbmcgc3RhdGUgdXBkYXRlcyBhcmUgaG9ub3JlZCxcbiAgICAgICAgLy8gbGlrZSB0aG9zZSBmcm9tIGBwYWdlVG9JbmRleCgpYFxuICAgICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICAgICAgICAgIC8vIE5PVEU6IGBwcm9wc2AgaGVyZSBpcyB0ZWNobmljYWxseSB0aGUgYG5leHRQcm9wc2AgeW91J2QgcmVjZWl2ZSBmcm9tIHRoZSBmaXJzdCBjV1JQIGFyZ3VtZW50XG4gICAgICAgICAgICAvLyBzbyB0aGF0J3Mgd2h5IHdlJ3JlIGNhY2hpbmcgYG9sZFByb3BzYCBvdXRzaWRlIHRoZSBgc2V0U3RhdGVgXG4gICAgICAgICAgICBpZiAocHJvcHMuaWRlbnRpZmllciAhPT0gb2xkUHJvcHMuaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJbmRleDogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiB0aGlzLmdldFBhZ2VGb3JJbmRleChzdGF0ZS50YXJnZXRJbmRleCwgcHJvcHMubnVtSXRlbXNQZXJQYWdlKSxcbiAgICAgICAgICAgICAgICB0YXJnZXRJbmRleDogc3RhdGUudGFyZ2V0SW5kZXgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYWdlVG9JbmRleCA9IChpKSA9PiB7XG4gICAgICAgIGlmIChpIDwgMCB8fCBpID49IHRoaXMucHJvcHMudG90YWxJdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQ2Fubm90IHBhZ2UgdG8gaW52YWxpZCBpbmRleCAke2l9LmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogdGhpcy5nZXRQYWdlRm9ySW5kZXgoaSksXG4gICAgICAgICAgICB0YXJnZXRJbmRleDogaSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUGFnZUJ1dHRvbk9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlKCk7XG4gICAgICAgIGNvbnN0IG51bVBhZ2VUb2dnbGVzID0gdGhpcy5wcm9wcy5udW1QYWdlVG9nZ2xlcztcbiAgICAgICAgY29uc3QgdG90YWxQYWdlcyA9IHRoaXMudG90YWxQYWdlcygpO1xuICAgICAgICBjb25zdCBzdGFydFBhZ2UgPSBjdXJyZW50UGFnZSAtICgoY3VycmVudFBhZ2UgLSAxKSAlIG51bVBhZ2VUb2dnbGVzKTtcbiAgICAgICAgY29uc3QgZW5kUGFnZSA9IE1hdGgubWluKHN0YXJ0UGFnZSArIG51bVBhZ2VUb2dnbGVzIC0gMSwgdG90YWxQYWdlcyk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd1BhZ2luYXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29udGVudDogaXNGdW5jdGlvbih0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgOiBgJHtjdXJyZW50UGFnZX0gb2YgJHt0b3RhbFBhZ2VzfWAsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLXN0YXRlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd0p1bXBUb0ZpcnN0KSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLnByb3BzLmp1bXBUb0ZpcnN0Q29udHJvbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFBhZ2luYXRpb24uY29udHJvbHMuRklSU1QsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuY3VycmVudFBhZ2UoKSA9PT0gMSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1maXJzdCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLnByb3BzLnByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50LFxuICAgICAgICAgICAgdmFsdWU6IFBhZ2luYXRpb24uY29udHJvbHMuUFJFVklPVVMsXG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5jdXJyZW50UGFnZSgpID09PSAxLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtcHJldmlvdXMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRQYWdlOyBpIDw9IGVuZFBhZ2U7IGkrKykge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdiLXBhZ2luYXRpb24tY29udHJvbCcsXG4gICAgICAgICAgICAgICAgJ2RhdGEtcGFnZS1udW1iZXInOiBpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBpID09PSB0aGlzLmN1cnJlbnRQYWdlKCksXG4gICAgICAgICAgICAgICAgY29udGVudDogaSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMucHJvcHMubmV4dFBhZ2VDb250cm9sQ29udGVudCxcbiAgICAgICAgICAgIHZhbHVlOiBQYWdpbmF0aW9uLmNvbnRyb2xzLk5FWFQsXG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5jdXJyZW50UGFnZSgpID09PSB0b3RhbFBhZ2VzLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtbmV4dCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dKdW1wVG9MYXN0KSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLnByb3BzLmp1bXBUb0xhc3RDb250cm9sQ29udGVudCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogUGFnaW5hdGlvbi5jb250cm9scy5MQVNULFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLmN1cnJlbnRQYWdlKCkgPT09IHRvdGFsUGFnZXMsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtbGFzdCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmN1c3RvbUNvbnRyb2xDb250ZW50KSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLnByb3BzLmN1c3RvbUNvbnRyb2xDb250ZW50LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB1dWlkKCksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtY3VzdG9tJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVJdGVtcygpIHtcbiAgICAgICAgY29uc3QgZ2VuZXJhdGVkSXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgZmlyc3RJdGVtSW5kZXggPSB0aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpO1xuICAgICAgICBjb25zdCBsYXN0SXRlbUluZGV4ID0gTWF0aC5taW4odGhpcy5wcm9wcy50b3RhbEl0ZW1zLCBmaXJzdEl0ZW1JbmRleCArIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlKSAtIDE7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SXRlbUluZGV4OyBpIDw9IGxhc3RJdGVtSW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgZ2VuZXJhdGVkSXRlbXMucHVzaCh7ZGF0YTogdGhpcy5wcm9wcy5nZXRJdGVtKGkpfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVkSXRlbXM7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2sgPSAodmFsdWUpID0+IHtcbiAgICAgICAgbGV0IG5leHRUYXJnZXRJbmRleDtcblxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgUGFnaW5hdGlvbi5jb250cm9scy5GSVJTVDpcbiAgICAgICAgICAgIG5leHRUYXJnZXRJbmRleCA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQYWdpbmF0aW9uLmNvbnRyb2xzLlBSRVZJT1VTOlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gdGhpcy5maXJzdFZpc2libGVJdGVtSW5kZXgoKSAtIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUGFnaW5hdGlvbi5jb250cm9scy5ORVhUOlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gdGhpcy5maXJzdFZpc2libGVJdGVtSW5kZXgoKSArIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUGFnaW5hdGlvbi5jb250cm9scy5MQVNUOlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gdGhpcy5wcm9wcy50b3RhbEl0ZW1zIC0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gcGFyc2VJbnQodmFsdWUsIDEwKSAqIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMuZ2V0UGFnZUZvckluZGV4KG5leHRUYXJnZXRJbmRleCksXG4gICAgICAgICAgICB0YXJnZXRJbmRleDogbmV4dFRhcmdldEluZGV4LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJJdGVtcygpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzLmxpc3RXcmFwcGVyUHJvcHM7XG4gICAgICAgIGNvbnN0IGluZGV4T2Zmc2V0ID0gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UgKiAodGhpcy5jdXJyZW50UGFnZSgpIC0gMSk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcnJvd0tleU5hdmlnYXRpb25cbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgcmVmPSdpdGVtTGlzdCdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXBhZ2luYXRpb24taXRlbXMnLCBwcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5nZW5lcmF0ZUl0ZW1zKCkubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2BpdGVtXyR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRUb0pTWEZ1bmM9e3RoaXMucHJvcHMuaXRlbVRvSlNYQ29udmVydGVyRnVuY31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXtpdGVtLmRhdGF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbj17aW5kZXggJSAyID09PSAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleE9mZnNldCArIGluZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmdDb250ZW50PXt0aGlzLnByb3BzLml0ZW1Mb2FkaW5nQ29udGVudH0gLz5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQXJyb3dLZXlOYXZpZ2F0aW9uPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckNvbnRyb2xzKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICggICB0aGlzLnByb3BzLmhpZGVQYWdlcklmTm90TmVlZGVkXG4gICAgICAgICAgICAmJiB0aGlzLnByb3BzLnRvdGFsSXRlbXMgPD0gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcy50b2dnbGVXcmFwcGVyUHJvcHM7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uTG93ZXIgPSBwb3NpdGlvbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkNhcGl0YWxpemVkID0gcG9zaXRpb25Mb3dlclswXS50b1VwcGVyQ2FzZSgpICsgcG9zaXRpb25Mb3dlci5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFNlZ21lbnRlZENvbnRyb2xcbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgcmVmPXtgc2VnbWVudGVkQ29udHJvbCR7cG9zaXRpb25DYXBpdGFsaXplZH1gfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcGFnaW5hdGlvbi1jb250cm9scycsIHByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBbYGItcGFnaW5hdGlvbi1jb250cm9scy0ke3Bvc2l0aW9uTG93ZXJ9YF06IHRydWUsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgb3B0aW9ucz17dGhpcy5jcmVhdGVQYWdlQnV0dG9uT3B0aW9ucygpfVxuICAgICAgICAgICAgICAgIG9uT3B0aW9uU2VsZWN0ZWQ9e3RoaXMuaGFuZGxlQ2xpY2t9IC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyVmlldygpIHtcbiAgICAgICAgY29uc3Qge3Byb3BzfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gUGFnaW5hdGlvbi5wb3NpdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICByZWY9J3BhZ2luYXRlZFZpZXcnXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdiLXBhZ2luYXRpb24nPlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAocHJvcHMucG9zaXRpb24gPT09IHBvc2l0aW9uLkFCT1ZFIHx8IHByb3BzLnBvc2l0aW9uID09PSBwb3NpdGlvbi5CT1RIKVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyQ29udHJvbHMocG9zaXRpb24uQUJPVkUpXG4gICAgICAgICAgICAgICAgICAgIDogbm9vcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7cHJvcHMuYmVmb3JlfVxuXG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVySXRlbXMoKX1cblxuICAgICAgICAgICAgICAgIHtwcm9wcy5hZnRlcn1cblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAocHJvcHMucG9zaXRpb24gPT09IHBvc2l0aW9uLkJFTE9XIHx8IHByb3BzLnBvc2l0aW9uID09PSBwb3NpdGlvbi5CT1RIKVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyQ29udHJvbHMocG9zaXRpb24uQkVMT1cpXG4gICAgICAgICAgICAgICAgICAgIDogbm9vcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBQYWdpbmF0aW9uLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcGFnaW5hdGlvbi13cmFwcGVyJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJWaWV3KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIi8qKlxuICogUmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IGZvciB1c2UgaW4gcHJvZ3JhbW1hdGljIHRyYW5zZm9ybSBzdHlsZSBtYW5pcHVsYXRpb24uXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBwcm9wZXJ0eSBrZXkgKGUuZy4gYFdlYmtpdFRyYW5zZm9ybWAsIGBtc1RyYW5zZm9ybWApXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBkZXRlY3RUcmFuc2Zvcm1Qcm9wZXJ0eSgpIHtcbiAgICBjb25zdCBwcm9wcyA9IFtcbiAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICdXZWJraXRUcmFuc2Zvcm0nLFxuICAgICAgICAnTW96VHJhbnNmb3JtJyxcbiAgICAgICAgJ09UcmFuc2Zvcm0nLFxuICAgICAgICAnbXNUcmFuc2Zvcm0nLFxuICAgICAgICAnd2Via2l0LXRyYW5zZm9ybScsIC8vIHVzZWQgaW4gSlNET01cbiAgICBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHByb3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9wc1tpXSBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn0pKCk7XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmluZERPTU5vZGV9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBEaWFsb2cgZnJvbSAnLi4vYm91bmRsZXNzLWRpYWxvZy9pbmRleCc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXgnO1xuaW1wb3J0IG9taXQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleCc7XG5pbXBvcnQgdHJhbnNmb3JtUHJvcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtdHJhbnNmb3JtLXByb3BlcnR5L2luZGV4JztcblxuZnVuY3Rpb24gd2l0aG91dChhcnIxLCBhcnIyKSB7IHJldHVybiBhcnIxLmZpbHRlcigoaXRlbSkgPT4gYXJyMi5pbmRleE9mKGl0ZW0pID09PSAtMSk7IH1cbmZ1bmN0aW9uIHZhbHVlcyhvYmopICAgICAgICAgeyByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoKGtleSkgPT4gb2JqW2tleV0pOyB9XG5cbmNvbnN0IERFRkFVTFRfQ0FSRVRfQ09NUE9ORU5UID0gKFxuICAgIDxzdmcgdmlld0JveD0nMCAwIDE0IDkuNScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJz5cbiAgICAgICAgPGc+XG4gICAgICAgICAgICA8cG9seWdvbiBjbGFzc05hbWU9J2ItcG9wb3Zlci1jYXJldC1ib3JkZXInIGZpbGw9JyMwMDAnIHBvaW50cz0nNyAwIDE0IDEwIDAgMTAnIC8+XG4gICAgICAgICAgICA8cG9seWdvbiBjbGFzc05hbWU9J2ItcG9wb3Zlci1jYXJldC1maWxsJyBmaWxsPScjRkZGJyBwb2ludHM9JzYuOTgyMzA0NDQgMS43NSAxMi43NSAxMCAxLjI1IDEwJyAvPlxuICAgICAgICA8L2c+XG4gICAgPC9zdmc+XG4pO1xuXG4vKipcbiAqIF9fUG9wb3ZlciBzdXBwb3J0cyBhbGwgW0RpYWxvZyBwcm9wc10oL0RpYWxvZyNwcm9wcyk7IGFwcGxpZWQgdG8gdGhlIGAuYi1wb3BvdmVyYCBub2RlX19cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wb3ZlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwb3NpdGlvbiA9IHtcbiAgICAgICAgU1RBUlQ6ICdTVEFSVCcsXG4gICAgICAgIE1JRERMRTogJ01JRERMRScsXG4gICAgICAgIEVORDogJ0VORCcsXG4gICAgfVxuXG4gICAgc3RhdGljIHByZXNldCA9IHtcbiAgICAgICAgJ0FCT1ZFJzoge1xuICAgICAgICAgICAgYW5jaG9yWEFsaWduOiBQb3BvdmVyLnBvc2l0aW9uLk1JRERMRSxcbiAgICAgICAgICAgIGFuY2hvcllBbGlnbjogUG9wb3Zlci5wb3NpdGlvbi5TVEFSVCxcbiAgICAgICAgICAgIHNlbGZYQWxpZ246IFBvcG92ZXIucG9zaXRpb24uTUlERExFLFxuICAgICAgICAgICAgc2VsZllBbGlnbjogUG9wb3Zlci5wb3NpdGlvbi5FTkQsXG4gICAgICAgIH0sXG4gICAgICAgICdCRUxPVyc6IHtcbiAgICAgICAgICAgIGFuY2hvclhBbGlnbjogUG9wb3Zlci5wb3NpdGlvbi5NSURETEUsXG4gICAgICAgICAgICBhbmNob3JZQWxpZ246IFBvcG92ZXIucG9zaXRpb24uRU5ELFxuICAgICAgICAgICAgc2VsZlhBbGlnbjogUG9wb3Zlci5wb3NpdGlvbi5NSURETEUsXG4gICAgICAgICAgICBzZWxmWUFsaWduOiBQb3BvdmVyLnBvc2l0aW9uLlNUQVJULFxuICAgICAgICB9LFxuICAgICAgICAnTEVGVCc6IHtcbiAgICAgICAgICAgIGFuY2hvclhBbGlnbjogUG9wb3Zlci5wb3NpdGlvbi5TVEFSVCxcbiAgICAgICAgICAgIGFuY2hvcllBbGlnbjogUG9wb3Zlci5wb3NpdGlvbi5NSURETEUsXG4gICAgICAgICAgICBzZWxmWEFsaWduOiBQb3BvdmVyLnBvc2l0aW9uLkVORCxcbiAgICAgICAgICAgIHNlbGZZQWxpZ246IFBvcG92ZXIucG9zaXRpb24uTUlERExFLFxuICAgICAgICB9LFxuICAgICAgICAnUklHSFQnOiB7XG4gICAgICAgICAgICBhbmNob3JYQWxpZ246IFBvcG92ZXIucG9zaXRpb24uRU5ELFxuICAgICAgICAgICAgYW5jaG9yWUFsaWduOiBQb3BvdmVyLnBvc2l0aW9uLk1JRERMRSxcbiAgICAgICAgICAgIHNlbGZYQWxpZ246IFBvcG92ZXIucG9zaXRpb24uU1RBUlQsXG4gICAgICAgICAgICBzZWxmWUFsaWduOiBQb3BvdmVyLnBvc2l0aW9uLk1JRERMRSxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJlc2V0VmFsdWVzID0gdmFsdWVzKFBvcG92ZXIucHJlc2V0KVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLi4uRGlhbG9nLnByb3BUeXBlcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYSBET00gZWxlbWVudCBvciBSZWFjdCByZWZlcmVuY2UgdG8gb25lIGZvciBwb3NpdGlvbmluZyBwdXJwb3Nlc1xuICAgICAgICAgKi9cbiAgICAgICAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5pbnN0YW5jZU9mKEhUTUxFbGVtZW50KSxcbiAgICAgICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAgICAgcHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgICAgICAgICAgc3RhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgICAgICB9KSwgLy8gYSByZWFjdCBlbGVtZW50IG9mIHNvbWUgZmFzaGlvbiwgUHJvcFR5cGVzLmVsZW1lbnQgd2Fzbid0IHdvcmtpbmdcbiAgICAgICAgXSkuaXNSZXF1aXJlZCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogbG9jYXRpb24gb24gdGhlIGFuY2hvciBYLWF4aXMgdG8gdXNlIGZvciBhbGlnbm1lbnQgY2FsY3VsYXRpb25zXG4gICAgICAgICAqIC0gYFBvcG92ZXIucG9zaXRpb24uU1RBUlRgXG4gICAgICAgICAqICAgZXF1YXRlcyB0byBgezAsID99YCBvbiBhIDEwMHgxMDAgY2FydGVzaWFuIHBsYW5lXG5cbiAgICAgICAgICogLSBgUG9wb3Zlci5wb3NpdGlvbi5NSURETEVgXG4gICAgICAgICAqICAgZXF1YXRlcyB0byBgezUwLCA/fWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuXG4gICAgICAgICAqIC0gYFBvcG92ZXIucG9zaXRpb24uRU5EYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHsxMDAsID99YCBvbiBhIDEwMHgxMDAgY2FydGVzaWFuIHBsYW5lXG4gICAgICAgICAqL1xuICAgICAgICBhbmNob3JYQWxpZ246IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhQb3BvdmVyLnBvc2l0aW9uKSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGxvY2F0aW9uIG9uIHRoZSBhbmNob3IgWS1heGlzIHRvIHVzZSBmb3IgYWxpZ25tZW50IGNhbGN1bGF0aW9uc1xuICAgICAgICAgKiAtIGBQb3BvdmVyLnBvc2l0aW9uLlNUQVJUYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHs/LCAwfWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuXG4gICAgICAgICAqIC0gYFBvcG92ZXIucG9zaXRpb24uTUlERExFYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHs/LCA1MH1gIG9uIGEgMTAweDEwMCBjYXJ0ZXNpYW4gcGxhbmVcblxuICAgICAgICAgKiAtIGBQb3BvdmVyLnBvc2l0aW9uLkVORGBcbiAgICAgICAgICogICBlcXVhdGVzIHRvIGB7PywgMTAwfWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuICAgICAgICAgKi9cbiAgICAgICAgYW5jaG9yWUFsaWduOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoUG9wb3Zlci5wb3NpdGlvbikpLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0aGUgZ2l2ZW4gYWxpZ25tZW50IHNldHRpbmdzIHdvdWxkIHRha2UgdGhlIHBvcG92ZXIgb3V0IG9mIGJvdW5kcywgY2hhbmdlIHRoZSBhbGlnbm1lbnQgYXMgbmVjZXNzYXJ5IHRvIHJlbWFpbiBpbiB0aGUgdmlld3BvcnRcbiAgICAgICAgICovXG4gICAgICAgIGF1dG9SZXBvc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIEpTWCB0aGF0IGlzIHJlbmRlcmVkIGFuZCB1c2VkIHRvIHBvaW50IGF0IHRoZSBtaWRkbGUgb2YgdGhlIGFuY2hvciBlbGVtZW50IGFuZCBpbmRpY2F0ZSB0aGUgY29udGV4dCBvZiB0aGUgcG9wb3ZlclxuICAgICAgICAgKi9cbiAgICAgICAgY2FyZXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkvYWxsIHN1cHBvcnRlZCBbUG9ydGFsIHByb3BzXShib3VuZGxlc3MtcG9ydGFsL1JFQURNRS5tZClcbiAgICAgICAgICovXG4gICAgICAgIHBvcnRhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIGJhc2VsaW5lIHNldCBvZiBhbGlnbm1lbnQgcHJvcGVydGllcyB0aGF0IGNvdmVyIG1vc3QgdXNlIGNhc2VzOyBvdmVycmlkZSBhIHBhcnRpY3VsYXIgc3VicHJvcGVydHkgYnkgcGFzc2luZyBpdCBhcyB3ZWxsOlxuXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiA8UG9wb3ZlclxuICAgICAgICAgKiAgICAgYW5jaG9yPXtIVE1MRWxlbWVudH1cbiAgICAgICAgICogICAgIHByZXNldD17UG9wb3Zlci5wcmVzZXQuQkVMT1d9XG4gICAgICAgICAqICAgICBzZWxmWEFsaWduPXtQb3BvdmVyLnBvc2l0aW9uLlNUQVJUfT5cbiAgICAgICAgICogICAgIE15IHBvcG92ZXIgY29udGVudCFcbiAgICAgICAgICogPC9Qb3BvdmVyPlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHByZXNldDogUHJvcFR5cGVzLm9uZU9mKFBvcG92ZXIucHJlc2V0VmFsdWVzKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogbG9jYXRpb24gb24gdGhlIHBvcG92ZXIgWC1heGlzIHRvIHVzZSBmb3IgYWxpZ25tZW50IGNhbGN1bGF0aW9uc1xuICAgICAgICAgKiAtIGBQb3BvdmVyLnBvc2l0aW9uLlNUQVJUYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHswLCA/fWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuXG4gICAgICAgICAqIC0gYFBvcG92ZXIucG9zaXRpb24uTUlERExFYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHs1MCwgP31gIG9uIGEgMTAweDEwMCBjYXJ0ZXNpYW4gcGxhbmVcblxuICAgICAgICAgKiAtIGBQb3BvdmVyLnBvc2l0aW9uLkVORGBcbiAgICAgICAgICogICBlcXVhdGVzIHRvIGB7MTAwLCA/fWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZlhBbGlnbjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKFBvcG92ZXIucG9zaXRpb24pKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogbG9jYXRpb24gb24gdGhlIHBvcG92ZXIgWS1heGlzIHRvIHVzZSBmb3IgYWxpZ25tZW50IGNhbGN1bGF0aW9uc1xuICAgICAgICAgKiAtIGBQb3BvdmVyLnBvc2l0aW9uLlNUQVJUYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHs/LCAwfWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuXG4gICAgICAgICAqIC0gYFBvcG92ZXIucG9zaXRpb24uTUlERExFYFxuICAgICAgICAgKiAgIGVxdWF0ZXMgdG8gYHs/LCA1MH1gIG9uIGEgMTAweDEwMCBjYXJ0ZXNpYW4gcGxhbmVcblxuICAgICAgICAgKiAtIGBQb3BvdmVyLnBvc2l0aW9uLkVORGBcbiAgICAgICAgICogICBlcXVhdGVzIHRvIGB7PywgMTAwfWAgb24gYSAxMDB4MTAwIGNhcnRlc2lhbiBwbGFuZVxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZllBbGlnbjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKFBvcG92ZXIucG9zaXRpb24pKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpOyBhcHBsaWVkIHRvIHRoZSBgLmItcG9wb3ZlcmAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgd3JhcHBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGFuY2hvcjogZG9jdW1lbnQuYm9keSxcbiAgICAgICAgYW5jaG9yWEFsaWduOiB1bmRlZmluZWQsXG4gICAgICAgIGFuY2hvcllBbGlnbjogdW5kZWZpbmVkLFxuICAgICAgICBhdXRvUmVwb3NpdGlvbjogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZUZvY3VzOiBmYWxzZSxcbiAgICAgICAgY2FyZXRDb21wb25lbnQ6IERFRkFVTFRfQ0FSRVRfQ09NUE9ORU5ULFxuICAgICAgICBjbG9zZU9uRXNjS2V5OiB0cnVlLFxuICAgICAgICBjbG9zZU9uT3V0c2lkZUNsaWNrOiB0cnVlLFxuICAgICAgICBjbG9zZU9uT3V0c2lkZVNjcm9sbDogdHJ1ZSxcbiAgICAgICAgcG9ydGFsUHJvcHM6IHt9LFxuICAgICAgICBwcmVzZXQ6IFBvcG92ZXIucHJlc2V0LkJFTE9XLFxuICAgICAgICBzZWxmWEFsaWduOiB1bmRlZmluZWQsXG4gICAgICAgIHNlbGZZQWxpZ246IHVuZGVmaW5lZCxcbiAgICAgICAgd3JhcHBlclByb3BzOiB7fSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gd2l0aG91dChPYmplY3Qua2V5cyhQb3BvdmVyLmRlZmF1bHRQcm9wcyksIERpYWxvZy5pbnRlcm5hbEtleXMpXG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBhbmNob3JYQWxpZ246IHByb3BzLmFuY2hvclhBbGlnbiB8fCBwcm9wcy5wcmVzZXQuYW5jaG9yWEFsaWduLFxuICAgICAgICAgICAgYW5jaG9yWUFsaWduOiBwcm9wcy5hbmNob3JZQWxpZ24gfHwgcHJvcHMucHJlc2V0LmFuY2hvcllBbGlnbixcbiAgICAgICAgICAgIHNlbGZYQWxpZ246IHByb3BzLnNlbGZYQWxpZ24gICAgIHx8IHByb3BzLnByZXNldC5zZWxmWEFsaWduLFxuICAgICAgICAgICAgc2VsZllBbGlnbjogcHJvcHMuc2VsZllBbGlnbiAgICAgfHwgcHJvcHMucHJlc2V0LnNlbGZZQWxpZ24sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY2FjaGVWaWV3cG9ydENhcnRvZ3JhcGh5KGFuY2hvcikge1xuICAgICAgICBjb25zdCBhbmNob3JSZWN0ID0gYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBib2R5UmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgdGhpcy5hbmNob3JMZWZ0ID0gYW5jaG9yUmVjdC5sZWZ0O1xuICAgICAgICB0aGlzLmFuY2hvclRvcCA9IGFuY2hvclJlY3QudG9wO1xuICAgICAgICB0aGlzLmFuY2hvckhlaWdodCA9IGFuY2hvclJlY3QuaGVpZ2h0O1xuICAgICAgICB0aGlzLmFuY2hvcldpZHRoID0gYW5jaG9yUmVjdC53aWR0aDtcblxuICAgICAgICAvLyBub3JtYWxseSB3ZSdkIHVzZSBzY3JvbGxUb3Avc2Nyb2xsTGVmdCwgYnV0IHNjcm9sbCBiZWhhdmlvciBjaGFuZ2VzIHdoZW4gcG9zaXRpb246IHN0aWNreSBpcyBlbmFibGVkIGluIENocm9tZVxuICAgICAgICAvLyBhbmQgaW52ZXJ0aW5nIHRoZSBuZWdhdGl2ZSB2aWV3cG9ydCByZWN0IHZhbHVlIHNlZW1zIHRvIHdvcmsgbW9yZSBjb25zaXN0ZW50bHlcbiAgICAgICAgdGhpcy5ib2R5TGVmdCA9IGJvZHlSZWN0LmxlZnQgKiAtMTtcbiAgICAgICAgdGhpcy5ib2R5VG9wID0gYm9keVJlY3QudG9wICogLTE7XG4gICAgfVxuXG4gICAgZ2V0TmV4dENhcmV0WFBvc2l0aW9uKGFuY2hvciwgY2FyZXQgPSB0aGlzLiRjYXJldCkge1xuICAgICAgICBjb25zdCB7YW5jaG9yWEFsaWduLCBzZWxmWEFsaWduLCBhbmNob3JZQWxpZ24sIHNlbGZZQWxpZ259ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBQb3BvdmVyLnBvc2l0aW9uO1xuXG4gICAgICAgIGxldCBuZXh0WCA9IDA7XG5cbiAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIGNoYW5nZSB0aGUgWCBwb3NpdGlvbiB3aGVuIHdlJ3JlXG4gICAgICAgIC8vIGZ1bGx5IGFib3ZlIG9yIGJlbG93IHRoZSBhbmNob3IgYW5kIHNlbGZYQWxpZ24gaXNuJ3QgTUlERExFXG5cbiAgICAgICAgaWYgKCAgIHNlbGZYQWxpZ24gIT09IHBvc2l0aW9uLk1JRERMRVxuICAgICAgICAgICAgJiYgKCAgIGFuY2hvcllBbGlnbiA9PT0gcG9zaXRpb24uU1RBUlQgJiYgc2VsZllBbGlnbiA9PT0gcG9zaXRpb24uRU5EXG4gICAgICAgICAgICAgICAgfHwgYW5jaG9yWUFsaWduID09PSBwb3NpdGlvbi5FTkQgJiYgc2VsZllBbGlnbiA9PT0gcG9zaXRpb24uU1RBUlQpKSB7XG5cbiAgICAgICAgICAgIGlmIChhbmNob3JYQWxpZ24gPT09IHBvc2l0aW9uLlNUQVJUKSB7XG4gICAgICAgICAgICAgICAgbmV4dFggKz0gdGhpcy5hbmNob3JXaWR0aCAvIDIgLSBjYXJldC5jbGllbnRXaWR0aCAvIDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFuY2hvclhBbGlnbiA9PT0gcG9zaXRpb24uRU5EKSB7XG4gICAgICAgICAgICAgICAgbmV4dFggKz0gdGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50V2lkdGggLSB0aGlzLmFuY2hvcldpZHRoIC8gMiAtIGNhcmV0LmNsaWVudFdpZHRoIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0WDtcbiAgICB9XG5cbiAgICBnZXROZXh0Q2FyZXRZUG9zaXRpb24oYW5jaG9yLCBjYXJldCA9IHRoaXMuJGNhcmV0KSB7XG4gICAgICAgIGNvbnN0IHthbmNob3JYQWxpZ24sIHNlbGZYQWxpZ24sIGFuY2hvcllBbGlnbiwgc2VsZllBbGlnbn0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFBvcG92ZXIucG9zaXRpb247XG5cbiAgICAgICAgbGV0IG5leHRZID0gMDtcblxuICAgICAgICAvLyB3ZSBvbmx5IHdhbnQgdG8gY2hhbmdlIHRoZSBZIHBvc2l0aW9uIHdoZW4gd2UncmVcbiAgICAgICAgLy8gZnVsbHkgdG8gdGhlIGxlZnQgb3IgcmlnaHQgb2YgdGhlIGFuY2hvciAoc3RhcnQsZW5kIHwgZW5kLHN0YXJ0KVxuICAgICAgICAvLyBzZWxmWUFsaWduIGlzbid0IE1JRERMRVxuXG4gICAgICAgIGlmICggICBzZWxmWUFsaWduICE9PSBwb3NpdGlvbi5NSURETEVcbiAgICAgICAgICAgICYmICggICBhbmNob3JYQWxpZ24gPT09IHBvc2l0aW9uLlNUQVJUICYmIHNlbGZYQWxpZ24gPT09IHBvc2l0aW9uLkVORFxuICAgICAgICAgICAgICAgIHx8IGFuY2hvclhBbGlnbiA9PT0gcG9zaXRpb24uRU5EICYmIHNlbGZYQWxpZ24gPT09IHBvc2l0aW9uLlNUQVJUKSkge1xuXG4gICAgICAgICAgICBpZiAoYW5jaG9yWUFsaWduID09PSBwb3NpdGlvbi5TVEFSVCkge1xuICAgICAgICAgICAgICAgIG5leHRZICs9IHRoaXMuYW5jaG9ySGVpZ2h0IC8gMiAtIGNhcmV0LmNsaWVudFdpZHRoIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5jaG9yWUFsaWduID09PSBwb3NpdGlvbi5FTkQpIHtcbiAgICAgICAgICAgICAgICBuZXh0WSArPSB0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRIZWlnaHQgLSB0aGlzLmFuY2hvcldpZHRoIC8gMiAtIGNhcmV0LmNsaWVudFdpZHRoIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0WTtcbiAgICB9XG5cbiAgICBnZXROZXh0RGlhbG9nWFBvc2l0aW9uKGFuY2hvciwgZGlhbG9nID0gdGhpcy5kaWFsb2cuJHdyYXBwZXIpIHtcbiAgICAgICAgY29uc3Qge2FuY2hvclhBbGlnbiwgc2VsZlhBbGlnbn0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFBvcG92ZXIucG9zaXRpb247XG5cbiAgICAgICAgbGV0IG5leHRYID0gdGhpcy5hbmNob3JMZWZ0ICsgdGhpcy5ib2R5TGVmdDtcblxuICAgICAgICBzd2l0Y2ggKGFuY2hvclhBbGlnbikge1xuICAgICAgICBjYXNlIHBvc2l0aW9uLk1JRERMRTpcbiAgICAgICAgICAgIG5leHRYICs9IHRoaXMuYW5jaG9yV2lkdGggLyAyO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBwb3NpdGlvbi5FTkQ6XG4gICAgICAgICAgICBuZXh0WCArPSB0aGlzLmFuY2hvcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHNlbGZYQWxpZ24pIHtcbiAgICAgICAgY2FzZSBwb3NpdGlvbi5NSURETEU6XG4gICAgICAgICAgICBuZXh0WCAtPSBkaWFsb2cuY2xpZW50V2lkdGggLyAyO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBwb3NpdGlvbi5FTkQ6XG4gICAgICAgICAgICBuZXh0WCAtPSBkaWFsb2cuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0WDtcbiAgICB9XG5cbiAgICBnZXROZXh0RGlhbG9nWVBvc2l0aW9uKGFuY2hvciwgZGlhbG9nID0gdGhpcy5kaWFsb2cuJHdyYXBwZXIpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFBvcG92ZXIucG9zaXRpb247XG4gICAgICAgIGNvbnN0IGFuY2hvclkgPSB0aGlzLmFuY2hvclRvcCArIHRoaXMuYm9keVRvcDtcblxuICAgICAgICBsZXQgbmV4dFkgPSBhbmNob3JZICsgdGhpcy5hbmNob3JIZWlnaHQ7XG5cbiAgICAgICAgc3dpdGNoIChzdGF0ZS5hbmNob3JZQWxpZ24pIHtcbiAgICAgICAgY2FzZSBwb3NpdGlvbi5TVEFSVDpcbiAgICAgICAgICAgIG5leHRZID0gYW5jaG9yWTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgcG9zaXRpb24uTUlERExFOlxuICAgICAgICAgICAgbmV4dFkgPSBhbmNob3JZICsgdGhpcy5hbmNob3JIZWlnaHQgLyAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHN0YXRlLnNlbGZZQWxpZ24pIHtcbiAgICAgICAgY2FzZSBwb3NpdGlvbi5NSURETEU6XG4gICAgICAgICAgICBuZXh0WSAtPSBkaWFsb2cuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgcG9zaXRpb24uRU5EOlxuICAgICAgICAgICAgbmV4dFkgLT0gZGlhbG9nLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRZO1xuICAgIH1cblxuICAgIGdldEFsaWdubWVudENvcnJlY3Rpb25JZk92ZXJmbG93aW5nKHgsIHkpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmF1dG9SZXBvc2l0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb3JyZWN0aW9ucyA9IHsuLi50aGlzLnN0YXRlfTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBQb3BvdmVyLnBvc2l0aW9uO1xuXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50V2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudEhlaWdodDtcbiAgICAgICAgY29uc3QgeE1heCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsV2lkdGg7XG4gICAgICAgIGNvbnN0IHlNYXggPSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodDtcblxuICAgICAgICBpZiAoeCArIHdpZHRoID4geE1heCkgeyAvLyBvdmVyZmxvd2luZyBvZmYgdG8gdGhlIHJpZ2h0XG4gICAgICAgICAgICBjb3JyZWN0aW9ucy5hbmNob3JYQWxpZ24gPSBwb3NpdGlvbi5TVEFSVDtcbiAgICAgICAgICAgIGNvcnJlY3Rpb25zLnNlbGZYQWxpZ24gPSBwb3NpdGlvbi5FTkQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeCA8IDApIHsgLy8gb3ZlcmZsb3dpbmcgb2ZmIHRvIHRoZSBsZWZ0XG4gICAgICAgICAgICBjb3JyZWN0aW9ucy5hbmNob3JYQWxpZ24gPSBwb3NpdGlvbi5FTkQ7XG4gICAgICAgICAgICBjb3JyZWN0aW9ucy5zZWxmWEFsaWduID0gcG9zaXRpb24uU1RBUlQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSArIGhlaWdodCA+IHlNYXgpIHsgLy8gb3ZlcmZsb3dpbmcgYmVsb3dcbiAgICAgICAgICAgIC8vIGlmIGxlZnQvcmlnaHRcbiAgICAgICAgICAgIGlmICggICAoY29ycmVjdGlvbnMuYW5jaG9yWEFsaWduID09PSBwb3NpdGlvbi5TVEFSVCAmJiBjb3JyZWN0aW9ucy5zZWxmWEFsaWduID09PSBwb3NpdGlvbi5FTkQpXG4gICAgICAgICAgICAgICAgfHwgKGNvcnJlY3Rpb25zLmFuY2hvclhBbGlnbiA9PT0gcG9zaXRpb24uRU5EICYmIGNvcnJlY3Rpb25zLnNlbGZYQWxpZ24gPT09IHBvc2l0aW9uLlNUQVJUKSkge1xuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb25zLmFuY2hvcllBbGlnbiA9IHBvc2l0aW9uLkVORDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29ycmVjdGlvbnMuYW5jaG9yWUFsaWduID0gcG9zaXRpb24uU1RBUlQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvcnJlY3Rpb25zLnNlbGZZQWxpZ24gPSBwb3NpdGlvbi5FTkQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSA8IDApIHsgLy8gb3ZlcmZsb3dpbmcgYWJvdmVcbiAgICAgICAgICAgIC8vIGlmIGxlZnQvcmlnaHRcbiAgICAgICAgICAgIGlmICggICAoY29ycmVjdGlvbnMuYW5jaG9yWEFsaWduID09PSBwb3NpdGlvbi5TVEFSVCAmJiBjb3JyZWN0aW9ucy5zZWxmWEFsaWduID09PSBwb3NpdGlvbi5FTkQpXG4gICAgICAgICAgICAgICAgfHwgKGNvcnJlY3Rpb25zLmFuY2hvclhBbGlnbiA9PT0gcG9zaXRpb24uRU5EICYmIGNvcnJlY3Rpb25zLnNlbGZYQWxpZ24gPT09IHBvc2l0aW9uLlNUQVJUKSkge1xuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb25zLmFuY2hvcllBbGlnbiA9IHBvc2l0aW9uLlNUQVJUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb3JyZWN0aW9ucy5hbmNob3JZQWxpZ24gPSBwb3NpdGlvbi5FTkQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvcnJlY3Rpb25zLnNlbGZZQWxpZ24gPSBwb3NpdGlvbi5TVEFSVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb3JyZWN0aW9ucztcbiAgICB9XG5cbiAgICBhcHBseVRyYW5zbGF0aW9uKG5vZGUsIHgsIHkpIHtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVByb3ApIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGVbdHJhbnNmb3JtUHJvcF0gPSBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLnN0eWxlLmxlZnQgPSB4ICsgJ3B4JztcbiAgICAgICAgICAgIG5vZGUuc3R5bGUudG9wID0geSArICdweCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaWRBbGlnbm1lbnRDaGFuZ2UobmV4dEFsaWdubWVudCwgY3VycmVudEFsaWdubWVudCA9IHRoaXMuc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuICAgIG5leHRBbGlnbm1lbnQuYW5jaG9yWEFsaWduICE9PSBjdXJyZW50QWxpZ25tZW50LmFuY2hvclhBbGlnblxuICAgICAgICAgICAgICAgfHwgbmV4dEFsaWdubWVudC5hbmNob3JZQWxpZ24gIT09IGN1cnJlbnRBbGlnbm1lbnQuYW5jaG9yWUFsaWduXG4gICAgICAgICAgICAgICB8fCBuZXh0QWxpZ25tZW50LnNlbGZYQWxpZ24gIT09IGN1cnJlbnRBbGlnbm1lbnQuc2VsZlhBbGlnblxuICAgICAgICAgICAgICAgfHwgbmV4dEFsaWdubWVudC5zZWxmWUFsaWduICE9PSBjdXJyZW50QWxpZ25tZW50LnNlbGZZQWxpZ247XG4gICAgfVxuXG4gICAgYWxpZ24gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFuY2hvciA9ICAgdGhpcy5wcm9wcy5hbmNob3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuYW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgIDogZmluZERPTU5vZGUodGhpcy5wcm9wcy5hbmNob3IpO1xuXG4gICAgICAgIHRoaXMuY2FjaGVWaWV3cG9ydENhcnRvZ3JhcGh5KGFuY2hvcik7XG5cbiAgICAgICAgY29uc3QgZHggPSBNYXRoLnJvdW5kKHRoaXMuZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbihhbmNob3IpKTtcbiAgICAgICAgY29uc3QgZHkgPSBNYXRoLnJvdW5kKHRoaXMuZ2V0TmV4dERpYWxvZ1lQb3NpdGlvbihhbmNob3IpKTtcblxuICAgICAgICBjb25zdCBhbGlnbm1lbnRDb3JyZWN0aW9uID0gdGhpcy5nZXRBbGlnbm1lbnRDb3JyZWN0aW9uSWZPdmVyZmxvd2luZyhkeCwgZHkpO1xuXG4gICAgICAgIGlmIChhbGlnbm1lbnRDb3JyZWN0aW9uICYmIHRoaXMuZGlkQWxpZ25tZW50Q2hhbmdlKGFsaWdubWVudENvcnJlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZShhbGlnbm1lbnRDb3JyZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBjYXJldCBpcyBpbml0aWFsbHkgcG9zaXRpb25lZCBhdCAwLDAgaW5zaWRlIHRoZSBkaWFsb2dcbiAgICAgICAgLy8gd2hpY2ggaXMgYWxyZWFkeSBwb3NpdGlvbmVkIGF0IHRoZSBhbmNob3IsIHNvIHdlIGp1c3QgbmVlZCB0b1xuICAgICAgICAvLyBtYWtlIHNtYWxsIGFkanVzdG1lbnRzIGFzIG5lY2Vzc2FyeSB0byBsaW5lIHVwIHRoZSBjYXJldFxuICAgICAgICAvLyB3aXRoIHRoZSB2aXN1YWwgY2VudGVyIG9mIHRoZSBhbmNob3JcblxuICAgICAgICB0aGlzLiRjYXJldC5zdHlsZS5sZWZ0ID0gTWF0aC5yb3VuZCh0aGlzLmdldE5leHRDYXJldFhQb3NpdGlvbihhbmNob3IpKSArICdweCc7XG4gICAgICAgIHRoaXMuJGNhcmV0LnN0eWxlLnRvcCA9IE1hdGgucm91bmQodGhpcy5nZXROZXh0Q2FyZXRZUG9zaXRpb24oYW5jaG9yKSkgKyAncHgnO1xuXG4gICAgICAgIHRoaXMuYXBwbHlUcmFuc2xhdGlvbih0aGlzLiRjYXJldCwgY3gsIDApO1xuICAgICAgICB0aGlzLmFwcGx5VHJhbnNsYXRpb24odGhpcy5kaWFsb2cuJHdyYXBwZXIsIGR4LCBkeSk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuYWxpZ24oKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuYWxpZ24sIHRydWUpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHsgdGhpcy5hbGlnbigpOyB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmFsaWduLCB0cnVlKTsgfVxuXG4gICAgZ2V0Q2xhc3NBbGlnbm1lbnRGcmFnbWVudChjb25zdGFudCkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFBvcG92ZXIucG9zaXRpb247XG5cbiAgICAgICAgc3dpdGNoIChjb25zdGFudCkge1xuICAgICAgICBjYXNlIHBvc2l0aW9uLlNUQVJUOlxuICAgICAgICAgICAgcmV0dXJuICdzdGFydCc7XG5cbiAgICAgICAgY2FzZSBwb3NpdGlvbi5NSURETEU6XG4gICAgICAgICAgICByZXR1cm4gJ21pZGRsZSc7XG5cbiAgICAgICAgY2FzZSBwb3NpdGlvbi5FTkQ6XG4gICAgICAgICAgICByZXR1cm4gJ2VuZCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHtnZXRDbGFzc0FsaWdubWVudEZyYWdtZW50OiBnZXRGcmFnLCBwcm9wcywgc3RhdGV9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFBvcnRhbCB7Li4ucHJvcHMucG9ydGFsUHJvcHN9PlxuICAgICAgICAgICAgICAgIDxEaWFsb2dcbiAgICAgICAgICAgICAgICAgICAgey4uLm9taXQocHJvcHMsIFBvcG92ZXIuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPXsoaW5zdGFuY2UpID0+ICh0aGlzLmRpYWxvZyA9IGluc3RhbmNlKX1cbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChwcm9wcy5jYXJldENvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogKG5vZGUpID0+ICh0aGlzLiRjYXJldCA9IG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY3goJ2ItcG9wb3Zlci1jYXJldCcsIHByb3BzLmNhcmV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXJQcm9wcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJvcHMud3JhcHBlclByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjeCgnYi1wb3BvdmVyJywgcHJvcHMud3JhcHBlclByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtgYi1wb3BvdmVyLWFuY2hvci14LSR7Z2V0RnJhZyhzdGF0ZS5hbmNob3JYQWxpZ24pfWBdOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtgYi1wb3BvdmVyLWFuY2hvci15LSR7Z2V0RnJhZyhzdGF0ZS5hbmNob3JZQWxpZ24pfWBdOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtgYi1wb3BvdmVyLXNlbGYteC0ke2dldEZyYWcoc3RhdGUuc2VsZlhBbGlnbil9YF06IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2BiLXBvcG92ZXItc2VsZi15LSR7Z2V0RnJhZyhzdGF0ZS5zZWxmWUFsaWduKX1gXTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9fSAvPlxuICAgICAgICAgICAgPC9Qb3J0YWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLWlzLWZ1bmN0aW9uL2luZGV4JztcbmltcG9ydCBub29wIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1ub29wL2luZGV4JztcbmltcG9ydCBvbWl0IGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc2l2ZURpc2Nsb3N1cmUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lIG9yIGEgUmVhY3QgY29tcG9uZW50IGZhY3RvcnksIGFueXRoaW5nIHRoYXQgY2FuIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYFJlYWN0LmNyZWF0ZUVsZW1lbnRgXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWxsb3dzIHRoZSBkaXNjbG9zdXJlIHRvIGJlIHJlbmRlcmVkIGV4cGFuZGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgICovXG4gICAgICAgIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGNvbnRlbnQgaXMgc2hvd247IG5vdCBjYWxsZWQgb24gaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICovXG4gICAgICAgIG9uRXhwYW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGNvbnRlbnQgaXMgaGlkZGVuOyBub3QgY2FsbGVkIG9uIGluaXRpYWwgcmVuZGVyXG4gICAgICAgICAqL1xuICAgICAgICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIHNob3duIG5leHQgdG8gdGhlIGV4cGFuc2lvbiB0b2dnbGUsIGUuZy4gXCJBZHZhbmNlZCBPcHRpb25zXCJcbiAgICAgICAgICovXG4gICAgICAgIHRlYXNlcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRlbnQgdG8gYmUgc2hvd24gbmV4dCB0byB0aGUgZXhwYW5zaW9uIHRvZ2dsZSB3aGVuIHRoZSBkaXNjbG9zdXJlIGlzIGluIFwiZXhwYW5kZWRcIiBzdGF0ZSwgZS5nLiBcIkhpZGUgQWR2YW5jZWQgT3B0aW9uc1wiXG4gICAgICAgICAqL1xuICAgICAgICB0ZWFzZXJFeHBhbmRlZDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLWRpc2Nsb3N1cmUtdG9nZ2xlYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICB0b2dnbGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjaGlsZHJlbjogbnVsbCxcbiAgICAgICAgY29tcG9uZW50OiAnZGl2JyxcbiAgICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgICBvbkV4cGFuZDogbm9vcCxcbiAgICAgICAgb25IaWRlOiBub29wLFxuICAgICAgICB0ZWFzZXI6IG51bGwsXG4gICAgICAgIHRlYXNlckV4cGFuZGVkOiBudWxsLFxuICAgICAgICB0b2dnbGVQcm9wczoge30sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFByb2dyZXNzaXZlRGlzY2xvc3VyZS5kZWZhdWx0UHJvcHMpXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgZXhwYW5kZWQ6IHRoaXMucHJvcHMuZXhwYW5kZWQsXG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcykge1xuICAgICAgICBpZiAobmV3UHJvcHMuZXhwYW5kZWQgIT09IHRoaXMucHJvcHMuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2V4cGFuZGVkOiBuZXdQcm9wcy5leHBhbmRlZH0sIHRoaXMuZGlzcGF0Y2hDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwYXRjaENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzW3RoaXMuc3RhdGUuZXhwYW5kZWQgPyAnb25FeHBhbmQnIDogJ29uSGlkZSddKCk7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6ICF0aGlzLnN0YXRlLmV4cGFuZGVkfSwgdGhpcy5kaXNwYXRjaENhbGxiYWNrKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6ICF0aGlzLnN0YXRlLmV4cGFuZGVkfSwgdGhpcy5kaXNwYXRjaENhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMudG9nZ2xlUHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyQ29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiByZWY9J2NvbnRlbnQnXG4gICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2ItZGlzY2xvc3VyZS1jb250ZW50Jz5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlzY2xvc3VyZScsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgJ2ItZGlzY2xvc3VyZS1leHBhbmRlZCc6IHRoaXMuc3RhdGUuZXhwYW5kZWQsXG4gICAgICAgICAgICAgICAgfSl9PlxuXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy50b2dnbGVQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSd0b2dnbGUnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlzY2xvc3VyZS10b2dnbGUnLCB0aGlzLnByb3BzLnRvZ2dsZVByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVLZXlEb3dufVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD0nMCc+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmV4cGFuZGVkID8gdGhpcy5wcm9wcy50ZWFzZXJFeHBhbmRlZCB8fCB0aGlzLnByb3BzLnRlYXNlciA6IHRoaXMucHJvcHMudGVhc2VyfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ29udGVudCgpfVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2JvdW5kbGVzcy1idXR0b24vaW5kZXgnO1xuaW1wb3J0IG5vb3AgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW5vb3AvaW5kZXgnO1xuaW1wb3J0IG9taXQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLXByb2dyZXNzLWNhbmNlbGAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgY2FuY2VsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lIG9yIGEgUmVhY3QgY29tcG9uZW50IGZhY3RvcnksIGFueXRoaW5nIHRoYXQgY2FuIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYFJlYWN0LmNyZWF0ZUVsZW1lbnRgXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgdmFsdWUgdG8gc2hvdyBhcyBhIGxhYmVsIG9mIHRoZSBwcm9ncmVzcywgZS5nLiBcIjUwJVwiXG4gICAgICAgICAqL1xuICAgICAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLXByb2dyZXNzLWxhYmVsYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBsYWJlbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiBzdXBwbGllZCwgYWRkcyBhIGNhbmNlbCBlbGVtZW50IGFuZCBjYWxscyB0aGlzIGZ1bmN0aW9uIHdoZW4gdGhhdCBlbGVtZW50IGlzIGNsaWNrZWRcbiAgICAgICAgICovXG4gICAgICAgIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIGludGVnZXIgKGFuZCB1bml0LCBpZiBhcHBsaWNhYmxlKSBvZiB0aGUgY3VycmVudCBwcm9ncmVzcyBzdGF0ZSwgZS5nLiAwLjAxIChvcGFjaXR5KVxuICAgICAgICAgKi9cbiAgICAgICAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLXByb2dyZXNzYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBwcm9ncmVzc1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgQ1NTIHByb3BlcnR5IHRvIHR3ZWVuIChtdXN0IGFjY2VwdCBwZXJjZW50YWdlcykgLSBkZWZhdWx0cyB0byBcIndpZHRoXCJcbiAgICAgICAgICovXG4gICAgICAgIHR3ZWVuUHJvcGVydHk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2FuY2VsUHJvcHM6IHt9LFxuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgbGFiZWxQcm9wczoge30sXG4gICAgICAgIG9uQ2FuY2VsOiBudWxsLFxuICAgICAgICBwcm9ncmVzczogdW5kZWZpbmVkLFxuICAgICAgICBwcm9ncmVzc1Byb3BzOiB7fSxcbiAgICAgICAgdHdlZW5Qcm9wZXJ0eTogJ3dpZHRoJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoUHJvZ3Jlc3MuZGVmYXVsdFByb3BzKVxuXG4gICAgcmVuZGVyTGFiZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmxhYmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMubGFiZWxQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdsYWJlbCdcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wcm9ncmVzcy1sYWJlbCcsIHRoaXMucHJvcHMubGFiZWxQcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWx9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyQ2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNhbmNlbCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmNhbmNlbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2NhbmNlbCdcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wcm9ncmVzcy1jYW5jZWwnLCB0aGlzLnByb3BzLmNhbmNlbFByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZD17dGhpcy5wcm9wcy5vbkNhbmNlbH0gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJQcm9ncmVzcygpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5wcm9ncmVzc1Byb3BzfVxuICAgICAgICAgICAgICAgIHJlZj0ncHJvZ3Jlc3MnXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wcm9ncmVzcycsIHRoaXMucHJvcHMucHJvZ3Jlc3NQcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ItcHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZSc6IHR5cGVvZiB0aGlzLnByb3BzLnByb2dyZXNzID09PSAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICByb2xlPSdwcmVzZW50YXRpb24nXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5wcm9ncmVzc1Byb3BzLnN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBbdGhpcy5wcm9wcy50d2VlblByb3BlcnR5XTogdGhpcy5wcm9wcy5wcm9ncmVzcyxcbiAgICAgICAgICAgICAgICB9fSAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFByb2dyZXNzLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcHJvZ3Jlc3Mtd3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyUHJvZ3Jlc3MoKX1cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJMYWJlbCgpfVxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNhbmNlbCgpfVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtaXMtZnVuY3Rpb24vaW5kZXgnO1xuaW1wb3J0IG5vb3AgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW5vb3AvaW5kZXgnO1xuaW1wb3J0IG9taXQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleCc7XG5pbXBvcnQgdXVpZCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhZGlvIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgUmVhY3QtcmVuZGVyYWJsZSBjb250ZW50LCBtb3N0IGNvbW1vbmx5IGEgc2ltcGxlIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcyk7IGFwcGxpZWQgdG8gdGhlIGAuYi1yYWRpby1sYWJlbGAgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWxQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcGFzc3Rocm91Z2ggdG8gdGhlIEhUTUwgYG5hbWVgIGF0dHJpYnV0ZSBvbiB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgc2VsZWN0ZWQ7IGJhY2tpbmcgZGF0YSBtdXN0IGJlIHVwZGF0ZWQgdG8gcGVyc2lzdCB0aGUgc3RhdGUgY2hhbmdlXG4gICAgICAgICAqL1xuICAgICAgICBvblNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lcyB0aGUgYWN0aXZhdGlvbiBzdGF0ZSBvZiB0aGUgcmFkaW8gY29udHJvbCwgc2VlIFJlYWN0IFtcImNvbnRyb2xsZWQgaW5wdXRzXCJdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHMpKVxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwYXNzdGhyb3VnaCB0byB0aGUgSFRNTCBgdmFsdWVgIGF0dHJpYnV0ZSBvbiB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGlucHV0UHJvcHM6IHt9LFxuICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgbGFiZWxQcm9wczoge30sXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBvblNlbGVjdGVkOiBub29wLFxuICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAnJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoUmFkaW8uZGVmYXVsdFByb3BzKVxuXG4gICAgdXVpZCA9IHV1aWQoKVxuXG4gICAgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVySW5wdXQoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5pbnB1dFByb3BzfVxuICAgICAgICAgICAgICAgIHJlZj0naW5wdXQnXG4gICAgICAgICAgICAgICAgdHlwZT0ncmFkaW8nXG4gICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaWQgfHwgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmlkIHx8IHRoaXMudXVpZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXJhZGlvJywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1yYWRpby1zZWxlY3RlZCc6IHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgYXJpYS1jaGVja2VkPXtTdHJpbmcodGhpcy5wcm9wcy5zZWxlY3RlZCl9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckxhYmVsKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5sYWJlbCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMubGFiZWxQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdsYWJlbCdcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1yYWRpby1sYWJlbCcsIHRoaXMucHJvcHMubGFiZWxQcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBodG1sRm9yPXt0aGlzLnByb3BzLmlkIHx8IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pZCB8fCB0aGlzLnV1aWR9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbH1cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBSYWRpby5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXJhZGlvLXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTGFiZWwoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYXRjaE9wZXJhdG9yc1JlID0gL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcblx0fVxuXG5cdHJldHVybiBzdHIucmVwbGFjZShtYXRjaE9wZXJhdG9yc1JlLCAnXFxcXCQmJyk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgZXNjYXBlciBmcm9tICdlc2NhcGUtc3RyaW5nLXJlZ2V4cCc7XG5cbmltcG9ydCBJbnB1dCBmcm9tICcuLi9ib3VuZGxlc3MtaW5wdXQvaW5kZXgnO1xuaW1wb3J0IGV4dHJhY3RDaGlsZFByb3BzIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4JztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLWlzLXN0cmluZy9pbmRleCc7XG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcbmltcG9ydCB1dWlkIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4JztcblxuLyoqXG4gKiBfX1R5cGVhaGVhZCBhY2NlcHRzIGFsbCBzdXBwb3J0ZWQgW0lucHV0IHByb3BzXSgvSW5wdXQjcHJvcHMpOyBhcHBsaWVkIHRvIHRoZSBgLmItdGV4dHVhbC1pbnB1dC13cmFwcGVyYCBub2RlX19cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZWFoZWFkIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIG1vZGUgPSB7XG4gICAgICAgICdTVEFSVFNfV0lUSCc6ICdTVEFSVFNfV0lUSCcsXG4gICAgICAgICdGVVpaWSc6ICdGVVpaWScsXG4gICAgfVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLi4uSW5wdXQucHJvcFR5cGVzLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgbWVjaGFuaXNtIHVzZWQgdG8gaWRlbnRpZnkgYW5kIG1hcmsgbWF0Y2hpbmcgc3Vic3RyaW5nczsgYSBjdXN0b20gc2V0IGNhbiBiZSBwcm92aWRlZCB3aXRoIHRoZSBPYmplY3QgZm9ybWF0Ojxici8+PGJyLz5cblxuICAgICAgICAgKiAtIF9fYWxnb3JpdGhtLm1hdGNoZXJfXyBgRnVuY3Rpb258VHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEh8VHlwZWFoZWFkLm1vZGUuRlVaWllgXG4gICAgICAgICAgICAgcHJvdmlkZSBhIGN1c3RvbSBtYXRjaGluZyBhbGdvcml0aG0sIGFkaGVyaW5nIHRvIHRoaXMgZm9ybWF0OlxuXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAqIG15TWF0Y2hGdW5jKGlucHV0VGV4dCwgZW50aXRpZXMpIHtcbiAgICAgICAgICogICAgIC8vIC4uLlxuICAgICAgICAgKiAgICAgcmV0dXJuIFttYXRjaDFJbmRleCwgbWF0Y2gySW5kZXgsIC4uLiBdO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuXG4gICAgICAgICAqIHRoZSBpbmRleCBpcyBzdG9yZWQgaW5zdGVhZCBvZiB0aGUgZW50aXJlIGVudGl0eSB0byBjb25zZXJ2ZSBtZW1vcnkgYW5kIHJlZHVjZSBkYXRhIGR1cGxpY2F0aW9uXG5cbiAgICAgICAgICogLSBfX2FsZ29yaXRobS5tYXJrZXJfXyBgRnVuY3Rpb258VHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEh8VHlwZWFoZWFkLm1vZGUuRlVaWllgXG4gICAgICAgICAqICAgcHJvdmlkZSBhIGN1c3RvbSBtYXJraW5nIGZ1bmN0aW9uLCBhbGxvd3MgZm9yIHRoZSB1c2Ugb2YgY3VzdG9tIHRlbXBsYXRpbmcgLyBkZXZlbG9wZXItZGVmaW5lZCBDU1MgaG9va3MsIGFkaGVyaW5nIHRvIHRoaXMgZm9ybWF0OlxuXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAqIG15TWFya0Z1bmMoaW5wdXRUZXh0LCBlbnRpdHkpIHtcbiAgICAgICAgICogICAgIHJldHVybiA8ZGVzaXJlZCBKU1ggdGVtcGxhdGluZz4gXTtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIGFsZ29yaXRobTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRILFxuICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLkZVWlpZLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgICAgIG1hcmtlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbWF0Y2hlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIGB0cnVlYCwgY2xlYXJzIHRoZSBpbnB1dCB0ZXh0IHdoZW4gYSAocGFydGlhbCkgbWF0Y2ggaXMgc2VsZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyUGFydGlhbElucHV0T25TZWxlY3Rpb246IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcyk7IGFwcGxpZWQgdG8gdGhlIGFwcHJvcHJpYXRlIGAuYi10eXBlYWhlYWQtbWF0Y2hgIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGVudGl0aWVzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogdGhlIHRleHQgdG8gYmUgdXNlZCB0byBkbyBzdHJpbmcgY29tcGFyaXNvbiBhbmQgbWF0Y2ggYWdhaW5zdFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICB9KVxuICAgICAgICApLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZW5kZXJzIGEgZGlzYWJsZWQgdGV4dGZpZWxkIHdpdGggdGhlIGZ1bGwgdGV4dCBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGlucHV0IGhpbnQ7IHdpbGwgcmVtYWluIGJsYW5rIGlmIHRoZSBtYXRjaGVkIHN1YnN0cmluZyBpcyBub3QgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdXNlciBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgaGludDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLXR5cGVhaGVhZC1oaW50YCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBoaW50UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKTsgYXBwbGllZCB0byB0aGUgYC5iLXR5cGVhaGVhZC1tYXRjaC13cmFwcGVyYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBtYXRjaFdyYXBwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIFwib2Zmc2NyZWVuXCIgY2xhc3MgdXNlZCBieSB5b3VyIGFwcGxpY2F0aW9uOyBzcGVjaWZpY2FsbHkgdG8gcmV0YWluIFtBUklBIG5hdmlnYWJpbGl0eV0oaHR0cDovL3Nub29rLmNhL2FyY2hpdmVzL2h0bWxfYW5kX2Nzcy9oaWRpbmctY29udGVudC1mb3ItYWNjZXNzaWJpbGl0eSkgYXMgYGRpc3BsYXk6IG5vbmVgIGV4Y2x1ZGVzIHRoZSBlbGVtZW50IGZyb20gY29uc2lkZXJhdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgb2Zmc2NyZWVuQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgYEVudGVyYCB3aXRoIG5vIGF1dG9zdWdnZXN0IGhpbnQgYXZhaWxhYmxlLCBpbmRpY2F0aW5nIHRoYXQgaW5wdXQgaXMgY29tcGxldGVcbiAgICAgICAgICovXG4gICAgICAgIG9uQ29tcGxldGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2l0aCB0aGUgaW5kZXggb2YgdGhlIGhpZ2hsaWdodGVkIGVudGl0eSBkdWUgdG8ga2V5Ym9hcmQgc2VsZWN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBvbkVudGl0eUhpZ2hsaWdodGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdpdGggdGhlIGluZGV4IG9mIHRoZSBlbnRpdHkgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICovXG4gICAgICAgIG9uRW50aXR5U2VsZWN0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIC4uLklucHV0LmRlZmF1bHRQcm9wcyxcbiAgICAgICAgYWxnb3JpdGhtOiBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgY2xlYXJQYXJ0aWFsSW5wdXRPblNlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgIGVudGl0aWVzOiBbXSxcbiAgICAgICAgaGludDogbnVsbCxcbiAgICAgICAgaGludFByb3BzOiB7fSxcbiAgICAgICAgbWF0Y2hXcmFwcGVyUHJvcHM6IHt9LFxuICAgICAgICBvZmZzY3JlZW5DbGFzczogJ2Itb2Zmc2NyZWVuJyxcbiAgICAgICAgb25Db21wbGV0ZTogbm9vcCxcbiAgICAgICAgb25FbnRpdHlIaWdobGlnaHRlZDogbm9vcCxcbiAgICAgICAgb25FbnRpdHlTZWxlY3RlZDogbm9vcCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoVHlwZWFoZWFkLmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBlbnRpdHlNYXRjaEluZGV4ZXM6IFtdLFxuICAgICAgICBpZDogdXVpZCgpLFxuICAgICAgICBpc0NvbnRyb2xsZWQ6IGlzU3RyaW5nKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSksXG4gICAgICAgIGlucHV0OiB0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWVcbiAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgIHx8ICcnLFxuICAgICAgICBzZWxlY3RlZEVudGl0eUluZGV4OiAtMSxcbiAgICB9XG5cbiAgICBtb3VudGVkID0gZmFsc2VcblxuICAgIHVwZGF0ZUlucHV0U3RhdGUgPSAodmFsdWUgPSAnJykgPT4gdGhpcy5zZXRTdGF0ZSh7aW5wdXQ6IHZhbHVlfSlcblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5lbnRpdGllcyAhPT0gdGhpcy5wcm9wcy5lbnRpdGllcykge1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcyhuZXh0UHJvcHMuZW50aXRpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRQcm9wcy5pbnB1dFByb3BzLnZhbHVlICE9PSB0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRTdGF0ZShuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCAmJiAhcHJldlN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcy5tYXRjaGVzLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH0gLy8gZml4IGFuIG9kZCBidWcgaW4gRkYgd2hlcmUgaXQgaW5pdGlhbGl6ZXMgdGhlIGVsZW1lbnQgd2l0aCBhbiBpbmNvcnJlY3Qgc2Nyb2xsVG9wXG5cbiAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCA+PSAwXG4gICAgICAgICAgICAmJiB0aGlzLnByb3BzLmVudGl0aWVzW3RoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0gIT09IHByZXZQcm9wcy5lbnRpdGllc1twcmV2U3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldFNlbGVjdGVkRW50aXR5VGV4dCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5wcm9wcy5lbnRpdGllc1t0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdO1xuXG4gICAgICAgIHJldHVybiBlbnRpdHkgPyBlbnRpdHkudGV4dCA6ICcnO1xuICAgIH1cblxuICAgIGhhbmRsZU1hdGNoQ2xpY2soaW5kZXgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRFbnRpdHlJbmRleDogaW5kZXh9LCB0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KTtcbiAgICB9XG5cbiAgICBzZWxlY3RNYXRjaChkZWx0YSkge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXM7XG4gICAgICAgIGNvbnN0IHRvdGFsTWF0Y2hlcyA9IG1hdGNoZXMubGVuZ3RoO1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gbWF0Y2hlcy5pbmRleE9mKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCkgKyBkZWx0YTtcblxuICAgICAgICBpZiAodG90YWxNYXRjaGVzKSB7XG4gICAgICAgICAgICBpZiAobmV4dEluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRvdGFsTWF0Y2hlcyAtIDE7IC8vIHJldmVyc2UgbG9vcFxuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0SW5kZXggPj0gdG90YWxNYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gMDsgLy8gbG9vcFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtYXRjaEluZGV4ID0gbWF0Y2hlc1tuZXh0SW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlc05vZGUgPSB0aGlzLnJlZnMubWF0Y2hlcztcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXNOb2RlWUVuZCA9IG1hdGNoZXNOb2RlLnNjcm9sbFRvcCArIG1hdGNoZXNOb2RlLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTm9kZSA9IHRoaXMucmVmc1tgbWF0Y2hfJCR7bWF0Y2hJbmRleH1gXTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTm9kZVlTdGFydCA9IG1hdGNoTm9kZS5vZmZzZXRUb3A7XG4gICAgICAgICAgICBjb25zdCBtYXRjaE5vZGVZRW5kID0gbWF0Y2hOb2RlWVN0YXJ0ICsgbWF0Y2hOb2RlLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgLy8gYnJpbmcgaW50byB2aWV3IGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgaWYgKG1hdGNoTm9kZVlFbmQgPj0gbWF0Y2hlc05vZGVZRW5kKSB7IC8vIGJlbG93XG4gICAgICAgICAgICAgICAgbWF0Y2hlc05vZGUuc2Nyb2xsVG9wICs9IG1hdGNoTm9kZVlFbmQgLSBtYXRjaGVzTm9kZVlFbmQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoTm9kZVlTdGFydCA8PSBtYXRjaGVzTm9kZS5zY3JvbGxUb3ApIHsgLy8gYWJvdmVcbiAgICAgICAgICAgICAgICBtYXRjaGVzTm9kZS5zY3JvbGxUb3AgPSBtYXRjaE5vZGVZU3RhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkRW50aXR5SW5kZXg6IG1hdGNoSW5kZXh9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0TWF0Y2hlcyA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbnRpdHlJbmRleDogLTEsXG4gICAgICAgICAgICAgICAgZW50aXR5TWF0Y2hJbmRleGVzOiBbXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SW5wdXROb2RlID0gKCkgPT4gdGhpcy5yZWZzLmlucHV0LnJlZnMuZmllbGRcblxuICAgIHNlbGVjdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLmdldElucHV0Tm9kZSgpO1xuXG4gICAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gdGhpcy5nZXRWYWx1ZSgpLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb2N1cyA9ICgpID0+IHRoaXMuZ2V0SW5wdXROb2RlKCkuZm9jdXMoKVxuICAgIGdldFZhbHVlID0gKCkgPT4gdGhpcy5yZWZzLmlucHV0LmdldFZhbHVlKClcblxuICAgIHNldFZhbHVlID0gKHZhbHVlID0gJycpID0+IHtcbiAgICAgICAgdGhpcy5yZWZzLmlucHV0LnNldFZhbHVlKHZhbHVlKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUlucHV0U3RhdGUodmFsdWUpO1xuICAgICAgICB0aGlzLnJlc2V0TWF0Y2hlcygpO1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgY3Vyc29yQXRFbmRPZklucHV0KCkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXRJbnB1dE5vZGUoKTtcblxuICAgICAgICByZXR1cm4gICAgbm9kZS5zZWxlY3Rpb25TdGFydCA9PT0gbm9kZS5zZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgICYmIG5vZGUuc2VsZWN0aW9uRW5kID09PSB0aGlzLmdldFZhbHVlKCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRW50aXR5U2VsZWN0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jbGVhclBhcnRpYWxJbnB1dE9uU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgdGhlIHVwY29taW5nIHJlbmRlciB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IGBzZXRWYWx1ZWBcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5yZXNldE1hdGNoZXMsIDApO1xuICAgIH1cblxuICAgIG1hcmtGdXp6eU1hdGNoU3Vic3RyaW5nKGlucHV0LCBlbnRpdHkpIHtcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGVudCA9IGVudGl0eS50ZXh0O1xuICAgICAgICBjb25zdCBmcmFncyA9IGVudGl0eUNvbnRlbnQuc3BsaXQobmV3IFJlZ0V4cCgnKCcgKyBlc2NhcGVyKGlucHV0KSArICcpJywgJ2lnJykpO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkVXNlclRleHQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB0aHJlc2hvbGQgPSBmcmFncy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsraSA8IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgaWYgKGZyYWdzW2ldLnRvTG93ZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWRVc2VyVGV4dCkge1xuICAgICAgICAgICAgICAgIGZyYWdzW2ldID0gPG1hcmsga2V5PXtpfSBjbGFzc05hbWU9J2ItdHlwZWFoZWFkLW1hdGNoLWhpZ2hsaWdodCc+e2ZyYWdzW2ldfTwvbWFyaz47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnJhZ3M7XG4gICAgfVxuXG4gICAgbWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZyhpbnB1dCwgZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRlbnQgPSBlbnRpdHkudGV4dDtcbiAgICAgICAgY29uc3Qgc2Vla1ZhbHVlID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgaW5kZXhTdGFydCA9IGVudGl0eUNvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlZWtWYWx1ZSk7XG4gICAgICAgIGNvbnN0IGluZGV4RW5kID0gaW5kZXhTdGFydCArIHNlZWtWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIDxzcGFuIGtleT0nMCc+e2VudGl0eUNvbnRlbnQuc2xpY2UoMCwgaW5kZXhTdGFydCl9PC9zcGFuPixcbiAgICAgICAgICAgIDxtYXJrIGtleT0nMScgY2xhc3NOYW1lPSdiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnPntlbnRpdHlDb250ZW50LnNsaWNlKGluZGV4U3RhcnQsIGluZGV4RW5kKX08L21hcms+LFxuICAgICAgICAgICAgPHNwYW4ga2V5PScyJz57ZW50aXR5Q29udGVudC5zbGljZShpbmRleEVuZCl9PC9zcGFuPixcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBnZXRNYXJraW5nRnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpc1N0cmluZyh0aGlzLnByb3BzLmFsZ29yaXRobSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmFsZ29yaXRobSA9PT0gVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXJrU3RhcnRzV2l0aE1hdGNoU3Vic3RyaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZztcblxuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5hbGdvcml0aG0ubWFya2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndhcm5lZE1hcmtlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5lZE1hcmtlciA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1R5cGVhaGVhZDogbm8gYHByb3BzLmFsZ29yaXRobS5tYXJrZXJgIHdhcyBwcm92aWRlZDsgZmFsbGluZyBiYWNrIHRvIHRoZSBkZWZhdWx0IG1hcmtpbmcgYWxnb3JpdGhtIChGVVpaWSkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZztcbiAgICB9XG5cbiAgICBtYXJrTWF0Y2hTdWJzdHJpbmcgPSAoLi4uYXJncykgPT4gdGhpcy5nZXRNYXJraW5nRnVuY3Rpb24oKSguLi5hcmdzKVxuXG4gICAgZ2V0RnV6enlNYXRjaEluZGV4ZXModXNlclRleHQsIGVudGl0aWVzKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB1c2VyVGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiBlbnRpdGllcy5yZWR1Y2UoZnVuY3Rpb24gZmluZEluZGV4ZXMocmVzdWx0LCBlbnRpdHksIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gICBlbnRpdHkudGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yobm9ybWFsaXplZCkgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgPyAocmVzdWx0LnB1c2goaW5kZXgpICYmIHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICA6IHJlc3VsdDtcbiAgICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIGdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXModXNlclRleHQsIGVudGl0aWVzKSB7XG4gICAgICAgIGNvbnN0IHNlZWtWYWx1ZSA9IHVzZXJUZXh0LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgcmV0dXJuIGVudGl0aWVzLnJlZHVjZShmdW5jdGlvbiBzZWVrTWF0Y2gocmVzdWx0cywgZW50aXR5LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGVudGl0eS50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cbiAgICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIGdldE1hdGNoaW5nRnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpc1N0cmluZyh0aGlzLnByb3BzLmFsZ29yaXRobSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmFsZ29yaXRobSA9PT0gVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGdXp6eU1hdGNoSW5kZXhlcztcblxuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5hbGdvcml0aG0ubWF0Y2hlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmFsZ29yaXRobS5tYXRjaGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud2FybmVkTWF0Y2hlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5lZE1hdGNoZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWF0Y2hlcmAgd2FzIHByb3ZpZGVkOyBmYWxsaW5nIGJhY2sgdG8gdGhlIGRlZmF1bHQgbWF0Y2hpbmcgYWxnb3JpdGhtIChGVVpaWSkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRGdXp6eU1hdGNoSW5kZXhlcztcbiAgICB9XG5cbiAgICBnZXRNYXRjaEluZGV4ZXMgPSAoLi4uYXJncykgPT4gdGhpcy5nZXRNYXRjaGluZ0Z1bmN0aW9uKCkoLi4uYXJncylcblxuICAgIGNvbXB1dGVNYXRjaGVzKHByb3ZpZGVkRW50aXRpZXMpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbnRpdGllcyA9IHByb3ZpZGVkRW50aXRpZXMgfHwgcHJvcHMuZW50aXRpZXM7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzdGF0ZS5pbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBjdXJyZW50VmFsdWUgPT09ICcnID8gW10gOiB0aGlzLmdldE1hdGNoSW5kZXhlcyhjdXJyZW50VmFsdWUsIGVudGl0aWVzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEVudGl0eUluZGV4OiBtYXRjaGVzLmxlbmd0aCA/IG1hdGNoZXNbMF0gOiAtMSxcbiAgICAgICAgICAgICAgICBlbnRpdHlNYXRjaEluZGV4ZXM6IG1hdGNoZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNDb250cm9sbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVJbnB1dFN0YXRlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydCA+IDEpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICBpZiAoICAgdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIHRoaXMuY3Vyc29yQXRFbmRPZklucHV0KClcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmdldElucHV0Tm9kZSgpID09PSBldmVudC50YXJnZXRcbiAgICAgICAgICAgICAgICAmJiAhZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBibG9jayBjdXJzb3IgbW92ZW1lbnRcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TWF0Y2goLTEpO1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIGJsb2NrIGN1cnNvciBtb3ZlbWVudFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RNYXRjaCgxKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgICBpZiAoICAgdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIHRoaXMuZ2V0SW5wdXROb2RlKCkgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRNYXRjaGVzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICAgIGlmICggICB0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXggIT09IC0xXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5nZXRJbnB1dE5vZGUoKSA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25Db21wbGV0ZSh0aGlzLnN0YXRlLmlucHV0LCBldmVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5vbktleURvd24pKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJOb3RpZmljYXRpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgcmVmPSdhcmlhJ1xuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnN0YXRlLmlkfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5vZmZzY3JlZW5DbGFzc31cbiAgICAgICAgICAgICAgICBhcmlhLWxpdmU9J3BvbGl0ZSc+XG4gICAgICAgICAgICAgICAge3RoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJIaW50KCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5oaW50KSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyVGV4dCA9IHRoaXMuc3RhdGUuaW5wdXQ7XG4gICAgICAgICAgICBjb25zdCByYXcgPSB0aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dCgpO1xuICAgICAgICAgICAgbGV0IHByb2Nlc3NlZCA9ICcnO1xuXG4gICAgICAgICAgICBpZiAoICAgcmF3XG4gICAgICAgICAgICAgICAgJiYgcmF3LnRvTG93ZXJDYXNlKCkuaW5kZXhPZih1c2VyVGV4dC50b0xvd2VyQ2FzZSgpKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZCA9IHJhdy5yZXBsYWNlKG5ldyBSZWdFeHAodXNlclRleHQsICdpJyksIHVzZXJUZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmhpbnRQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdoaW50J1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ItaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ItaW5wdXQtcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ItdHlwZWFoZWFkLWhpbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaW50UHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD0nLTEnPlxuICAgICAgICAgICAgICAgICAgICB7cHJvY2Vzc2VkfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlck1hdGNoZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcy5tYXRjaFdyYXBwZXJQcm9wcztcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdtYXRjaGVzJ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXR5cGVhaGVhZC1tYXRjaC13cmFwcGVyJywgcHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5tYXAoKGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLnByb3BzLmVudGl0aWVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtjbGFzc05hbWUsIHRleHQsIC4uLnJlc3R9ID0gZW50aXR5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17YG1hdGNoXyQke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItdHlwZWFoZWFkLW1hdGNoJywgY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYi10eXBlYWhlYWQtbWF0Y2gtc2VsZWN0ZWQnOiB0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXggPT09IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXt0ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU1hdGNoQ2xpY2suYmluZCh0aGlzLCBpbmRleCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5tYXJrTWF0Y2hTdWJzdHJpbmcodGhpcy5zdGF0ZS5pbnB1dCwgZW50aXR5KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge3Byb3BzLCBzdGF0ZX0gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgey4uLm9taXQocHJvcHMsIFR5cGVhaGVhZC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXR5cGVhaGVhZC13cmFwcGVyJywgcHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTm90aWZpY2F0aW9uKCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVySGludCgpfVxuXG4gICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgIHsuLi5leHRyYWN0Q2hpbGRQcm9wcyhwcm9wcywgSW5wdXQuZGVmYXVsdFByb3BzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdpbnB1dCdcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17c3RhdGUuaWR9XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnByb3BzLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGN4KCdiLXR5cGVhaGVhZCcsIHByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgfX0gLz5cblxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlck1hdGNoZXMoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgVHlwZWFoZWFkIGZyb20gJy4uL2JvdW5kbGVzcy10eXBlYWhlYWQvaW5kZXgnO1xuaW1wb3J0IGV4dHJhY3RDaGlsZFByb3BzIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4JztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL2JvdW5kbGVzcy11dGlscy1pcy1mdW5jdGlvbi9pbmRleCc7XG5pbXBvcnQgbm9vcCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtbm9vcC9pbmRleCc7XG5pbXBvcnQgb21pdCBmcm9tICcuLi9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4JztcblxuY29uc3QgZmlyc3QgPSAoYXJyYXkpID0+IGFycmF5WzBdO1xuY29uc3QgbGFzdCA9IChhcnJheSkgPT4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG5cbi8qKlxuICogX19Ub2tlbml6ZWRJbnB1dCBhY2NlcHRzIGFsbCBbYFR5cGVhaGVhZGBdKC9UeXBlYWhlYWQjcHJvcHMpIGFuZCBbYElucHV0YF0oL0lucHV0I3Byb3BzKSBwcm9wc19fXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRva2VuaXplZElucHV0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLi4uVHlwZWFoZWFkLnByb3BUeXBlcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZnVuY3Rpb24gaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIGFuIGVudGl0eSBpcyBzZWxlY3RlZCBieSB0aGUgdXNlciBhbmQgYSB0b2tlbiBzaG91bGQgYmUgY3JlYXRlZFxuICAgICAgICAgKi9cbiAgICAgICAgaGFuZGxlQWRkVG9rZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmdW5jdGlvbiBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gb25lIG9yIG1vcmUgdG9rZW5zIGFyZSByZW1vdmVkIGJ5IHRoZSB1c2VyIHZpYSBjbGlja2luZyB0aGUgXCJjbG9zZVwiIGJ1dHRvbiBvciBwcmVzc2luZyB0aGUgYEJhY2tzcGFjZWAga2V5IHdoaWxlIHRva2VucyBhcmUgc2VsZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZVJlbW92ZVRva2VuczogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZ1bmN0aW9uIGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiBvbmUgb3IgbW9yZSB0b2tlbnMgYXJlIHNlbGVjdGVkIGJ5IHRoZSB1c2VyIHZpYSBjbGljayBvciBrZXlib2FyZCBhY3Rpb25zOyBjYWxsZWQgd2l0aCB3aGF0IHRoZSBuZXcgc2VsZWN0aW9uIHNob3VsZCBiZVxuICAgICAgICAgKi9cbiAgICAgICAgaGFuZGxlTmV3U2VsZWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIEpTWCB1c2VkIGZvciB0aGUgY2xvc2UgYnV0dG9uIGl0c2VsZlxuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW5DbG9zZUNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgaWYgdGhlIGAuYi10b2tlbmZpZWxkLXRva2VuLWNsb3NlYCBlbGVtZW50IHNob3VsZCBiZSByZW5kZXJlZCBmb3IgZWFjaCB0b2tlblxuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW5DbG9zZVZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgaW5kZXhlcyBvZiBlbnRpdGllcyB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhcyBcInRva2Vuc1wiIGluIHRoZSBjb21wb25lbnQgVUlcbiAgICAgICAgICovXG4gICAgICAgIHRva2VuczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBpbmRleGVzIG9mIHRva2VuaXplZCBlbnRpdGllcyB0aGF0IGFyZSBwYXJ0IG9mIGFuIGFjdGl2ZSBzZWxlY3Rpb247IHRoZSB1c2VyIGNhbiBwcmVzcyBgQmFja3NwYWNlYCB0byB0cmlnZ2VyIGBoYW5kbGVSZW1vdmVUb2tlbnNgXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbnNTZWxlY3RlZDogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgLi4uVHlwZWFoZWFkLmRlZmF1bHRQcm9wcyxcbiAgICAgICAgaGFuZGxlQWRkVG9rZW46IG5vb3AsXG4gICAgICAgIGhhbmRsZVJlbW92ZVRva2Vuczogbm9vcCxcbiAgICAgICAgaGFuZGxlTmV3U2VsZWN0aW9uOiBub29wLFxuICAgICAgICB0b2tlbkNsb3NlQ29tcG9uZW50OiAoPGRpdj5YPC9kaXY+KSxcbiAgICAgICAgdG9rZW5DbG9zZVZpc2libGU6IHRydWUsXG4gICAgICAgIHRva2VuczogW10sXG4gICAgICAgIHRva2Vuc1NlbGVjdGVkOiBbXSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoVG9rZW5pemVkSW5wdXQuZGVmYXVsdFByb3BzKVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICBjb25zdCBwcmV2aW91c1NlbGVjdGVkSW5kZXhlcyA9IHByZXZQcm9wcy50b2tlbnNTZWxlY3RlZDtcbiAgICAgICAgY29uc3QgY3VycmVudFNlbGVjdGVkSW5kZXhlcyA9IHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudG9rZW5zLmxlbmd0aCA+IHByZXZQcm9wcy50b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fc3VwcHJlc3NOZXh0VG9rZW5TZWxlY3Rpb24gPSBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAgIHByZXZpb3VzU2VsZWN0ZWRJbmRleGVzICE9PSBjdXJyZW50U2VsZWN0ZWRJbmRleGVzXG4gICAgICAgICAgICAmJiBjdXJyZW50U2VsZWN0ZWRJbmRleGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgaWYgKCAgIGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgIHx8IGN1cnJlbnRTZWxlY3RlZEluZGV4ZXNbMF0gIT09IHByZXZpb3VzU2VsZWN0ZWRJbmRleGVzWzBdIC8qIG11bHRpIHNlbGVjdGlvbiwgbGVmdHdhcmQgKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZzW2B0b2tlbl8ke2N1cnJlbnRTZWxlY3RlZEluZGV4ZXNbMF19YF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdChjdXJyZW50U2VsZWN0ZWRJbmRleGVzKSAhPT0gbGFzdChwcmV2aW91c1NlbGVjdGVkSW5kZXhlcykgLyogbXVsdGkgc2VsZWN0aW9uLCByaWdodHdhcmQgKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZzW2B0b2tlbl8ke2xhc3QoY3VycmVudFNlbGVjdGVkSW5kZXhlcyl9YF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yZWZzW2B0b2tlbl8ke2N1cnJlbnRTZWxlY3RlZEluZGV4ZXNbMF19YF0uZm9jdXMoKTtcbiAgICAgICAgfSAvLyBtb3ZlIGZvY3VzXG4gICAgfVxuXG4gICAgLy8gcGFzc3Rocm91Z2hzIHRvIFR5cGVhaGVhZCBpbnN0YW5jZSBtZXRob2RzXG4gICAgZm9jdXMgPSAoKSA9PiB0aGlzLnJlZnMudHlwZWFoZWFkLmZvY3VzKClcbiAgICBnZXRJbnB1dE5vZGUgPSAoKSA9PiB0aGlzLnJlZnMudHlwZWFoZWFkLmdldElucHV0Tm9kZSgpXG4gICAgZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0ID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRTZWxlY3RlZEVudGl0eVRleHQoKVxuICAgIGdldFZhbHVlID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRWYWx1ZSgpXG4gICAgc2VsZWN0ID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5zZWxlY3QoKVxuICAgIHNldFZhbHVlID0gKHZhbHVlKSA9PiB0aGlzLnJlZnMudHlwZWFoZWFkLnNldFZhbHVlKHZhbHVlKVxuXG4gICAgYWRkID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRva2Vucy5pbmRleE9mKGluZGV4KSA9PT0gLTEpIHsgdGhpcy5wcm9wcy5oYW5kbGVBZGRUb2tlbihpbmRleCk7IH1cbiAgICB9XG5cbiAgICByZW1vdmUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgaW5kZXhlcyA9IChBcnJheS5pc0FycmF5KGluZGV4KSA/IGluZGV4IDogW2luZGV4XSkuZmlsdGVyKChpZHgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRva2Vucy5pbmRleE9mKGlkeCkgIT09IC0xO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaW5kZXhlcy5sZW5ndGgpIHsgdGhpcy5wcm9wcy5oYW5kbGVSZW1vdmVUb2tlbnMoaW5kZXhlcyk7IH1cbiAgICB9XG5cbiAgICBzZWxlY3RUb2tlbihpbmRleCkge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBzZWxlY3RUb2tlbnMoaW5kZXhlcykge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihpbmRleGVzKTtcbiAgICB9XG5cbiAgICBzZWxlY3RQcmV2aW91c1Rva2VuKGFwcGVuZCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQ7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLnByb3BzLnRva2VucztcblxuICAgICAgICBpZiAoICAgc2VsZWN0ZWQubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAmJiBmaXJzdChzZWxlY3RlZCkgPT09IGZpcnN0KGluZGV4ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIGFscmVhZHkgYXQgbGVmdG1vc3QgYm91bmRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPT09IDApIHsgLy8gcGljayB0aGUgcmlnaHRtb3N0XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRva2VuKGxhc3QoaW5kZXhlcykpO1xuICAgICAgICB9IGVsc2UgeyAvLyBhZGQgdGhlIG5leHQgbGVmdG1vc3QgdG8gYSByZWNvbnN0cnVjdGVkIFwic2VsZWN0ZWRcIiBhcnJheVxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNUb2tlbiA9IGluZGV4ZXNbaW5kZXhlcy5pbmRleE9mKGZpcnN0KHNlbGVjdGVkKSkgLSAxXTtcblxuICAgICAgICAgICAgdGhpcy5zZWxlY3RUb2tlbnMoYXBwZW5kID8gW3ByZXZpb3VzVG9rZW5dLmNvbmNhdChzZWxlY3RlZCkgOiBbcHJldmlvdXNUb2tlbl0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0TmV4dFRva2VuKGFwcGVuZCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQ7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLnByb3BzLnRva2VucztcblxuICAgICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdChzZWxlY3RlZCkgPT09IGxhc3QoaW5kZXhlcykpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRUb2tlbiA9IGluZGV4ZXNbaW5kZXhlcy5pbmRleE9mKGxhc3Qoc2VsZWN0ZWQpKSArIDFdO1xuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRva2VucyhhcHBlbmQgPyBzZWxlY3RlZC5jb25jYXQobmV4dFRva2VuKSA6IFtuZXh0VG9rZW5dKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihbXSk7XG4gICAgfVxuXG4gICAgaGFuZGxlSW5wdXRDbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVJbnB1dEZvY3VzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICBjYXNlIDM3OiAgICAvLyBsZWZ0IGFycm93XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFByZXZpb3VzVG9rZW4oZXZlbnQuc2hpZnRLZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOTogICAgLy8gcmlnaHQgYXJyb3dcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TmV4dFRva2VuKGV2ZW50LnNoaWZ0S2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODogICAgIC8vIGJhY2tzcGFjZVxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDY1OiAgICAvLyBsZXR0ZXIgXCJhXCJcbiAgICAgICAgICAgIGlmIChldmVudC5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGFja3ksIGJ1dCB0aGUgb25seSB3YXkgdW5sZXNzIHdlIG1vdmUgc2VsZWN0aW9uIG1hbmFnZW1lbnQgaW50ZXJuYWwgYWdhaW5cbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbih0aGlzLnByb3BzLnRva2Vucyk7XG4gICAgICAgICAgICB9IC8vIFwiY21kXCJcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlVG9rZW5DbG9zZUNsaWNrKGluZGV4LCBldmVudCkge1xuICAgICAgICAvLyBpZiB3ZSBkb24ndCBzdG9wIHByb3BhZ2F0aW9uLCB0aGUgZXZlbnQgYnViYmxlcyBhbmQgcmVzdWx0cyBpbiBhIGZhaWxlZCB0b2tlbiBzZWxlY3Rpb25cbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5yZW1vdmUoaW5kZXgpO1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJUb2tlbkNsb3NlKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRva2VuQ2xvc2VWaXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY3goJ2ItdG9rZW5maWVsZC10b2tlbi1jbG9zZScsIHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlVG9rZW5DbG9zZUNsaWNrLmJpbmQodGhpcywgaW5kZXgpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVUb2tlbktleURvd24oaW5kZXgsIGV2ZW50KSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSAxMzogLy8gZW50ZXJcbiAgICAgICAgY2FzZSAzMjogLy8gc3BhY2VcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VG9rZW4oaW5kZXgpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODogLy8gYmFja3NwYWNlXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJUb2tlbnMoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYi10b2tlbmZpZWxkLXRva2Vucyc+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMudG9rZW5zLm1hcCgoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2B0b2tlbl8ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXRva2VuZmllbGQtdG9rZW4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ItdG9rZW5maWVsZC10b2tlbi1zZWxlY3RlZCc6IHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQuaW5kZXhPZihpbmRleCkgIT09IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc2VsZWN0VG9rZW4uYmluZCh0aGlzLCBpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZVRva2VuS2V5RG93bi5iaW5kKHRoaXMsIGluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD0nMCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZW50aXRpZXNbaW5kZXhdLnRleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyVG9rZW5DbG9zZShpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBUb2tlbml6ZWRJbnB1dC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXRva2VuZmllbGQtd3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyVG9rZW5zKCl9XG5cbiAgICAgICAgICAgICAgICA8VHlwZWFoZWFkXG4gICAgICAgICAgICAgICAgICAgIHsuLi5leHRyYWN0Q2hpbGRQcm9wcyh0aGlzLnByb3BzLCBUeXBlYWhlYWQuZGVmYXVsdFByb3BzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPSd0eXBlYWhlYWQnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYi10b2tlbmZpZWxkJ1xuICAgICAgICAgICAgICAgICAgICBjbGVhclBhcnRpYWxJbnB1dE9uU2VsZWN0aW9uPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUlucHV0Q2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUlucHV0Rm9jdXMsXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIG9uRW50aXR5U2VsZWN0ZWQ9e3RoaXMuYWRkfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IG9taXQgZnJvbSAnLi4vYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcG9zaXRpb24gPSB7XG4gICAgICAgIEFCT1ZFOiAnQUJPVkUnLFxuICAgICAgICBCRUxPVzogJ0JFTE9XJyxcbiAgICAgICAgQkVGT1JFOiAnQkVGT1JFJyxcbiAgICAgICAgQUZURVI6ICdBRlRFUicsXG4gICAgfVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lIG9yIGEgUmVhY3QgY29tcG9uZW50IGZhY3RvcnksIGFueXRoaW5nIHRoYXQgY2FuIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYFJlYWN0LmNyZWF0ZUVsZW1lbnRgXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lcyB0aGUgY29ycmVjdCBjbGFzcyB0byBhcHBseSB0byBwb3NpdGlvbiB0aGUgdG9vbHRpcFxuICAgICAgICAgKi9cbiAgICAgICAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhUb29sdGlwLnBvc2l0aW9uKSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBjb250ZW50IHRvIGJlIHNob3duIGluIHRoZSB0b29sdGlwXG4gICAgICAgICAqL1xuICAgICAgICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIHBvc2l0aW9uOiBUb29sdGlwLnBvc2l0aW9uLkFCT1ZFLFxuICAgICAgICB0ZXh0OiAnJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoVG9vbHRpcC5kZWZhdWx0UHJvcHMpXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHtwb3NpdGlvbn0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBUb29sdGlwLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi10b29sdGlwJywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ItdG9vbHRpcC1wb3NpdGlvbi1hYm92ZSc6IHBvc2l0aW9uID09PSBUb29sdGlwLnBvc2l0aW9uLkFCT1ZFLFxuICAgICAgICAgICAgICAgICAgICAnYi10b29sdGlwLXBvc2l0aW9uLWJlbG93JzogcG9zaXRpb24gPT09IFRvb2x0aXAucG9zaXRpb24uQkVMT1csXG4gICAgICAgICAgICAgICAgICAgICdiLXRvb2x0aXAtcG9zaXRpb24tYmVmb3JlJzogcG9zaXRpb24gPT09IFRvb2x0aXAucG9zaXRpb24uQkVGT1JFLFxuICAgICAgICAgICAgICAgICAgICAnYi10b29sdGlwLXBvc2l0aW9uLWFmdGVyJzogcG9zaXRpb24gPT09IFRvb2x0aXAucG9zaXRpb24uQUZURVIsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgZGF0YS10b29sdGlwPXt0aGlzLnByb3BzLnRleHR9XG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD17dGhpcy5wcm9wc1snYXJpYS1sYWJlbCddIHx8IHRoaXMucHJvcHMudGV4dH0+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJ0ZXN0Iiwic291cmNlIiwia2V5cyIsInJlZHVjZSIsImhhc2giLCJrZXkiLCJvbWl0dGVkS2V5cyIsImluZGV4T2YiLCJzdGF0ZSIsImFjdGl2ZUNoaWxkSW5kZXgiLCJfdGhpcyIsInByb3BzIiwiZGVmYXVsdEFjdGl2ZUNoaWxkSW5kZXgiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJtb2RlIiwiQXJyb3dLZXlOYXZpZ2F0aW9uIiwiVkVSVElDQUwiLCJCT1RIIiwicHJldmVudERlZmF1bHQiLCJtb3ZlRm9jdXMiLCJIT1JJWk9OVEFMIiwiaXNGdW5jdGlvbiIsIm9uS2V5RG93biIsImhhbmRsZUZvY3VzIiwidGFyZ2V0IiwiaGFzQXR0cmlidXRlIiwicGFyc2VJbnQiLCJnZXRBdHRyaWJ1dGUiLCJSZWFjdCIsIkNoaWxkcmVuIiwidG9BcnJheSIsImNoaWxkcmVuIiwiaW5kZXgiLCJzZXRTdGF0ZSIsImNoaWxkIiwib25Gb2N1cyIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsInRoaXMiLCJzZXRGb2N1cyIsIm5leHRQcm9wcyIsImNvdW50IiwibnVtQ2hpbGRyZW4iLCJyZWZzIiwid3JhcHBlciIsImZpbmRET01Ob2RlIiwiY2hpbGROb2RlIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiZm9jdXMiLCJkZWx0YSIsIm5leHRJbmRleCIsIm1hcCIsImNsb25lRWxlbWVudCIsImRhdGEtZm9jdXMtaW5kZXgiLCJkYXRhLXNraXAiLCJ0YWJJbmRleCIsInVuZGVmaW5lZCIsIl90aGlzMiIsImNvbXBvbmVudCIsIm9taXQiLCJpbnRlcm5hbEtleXMiLCJyZWYiLCJQdXJlQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiZnVuYyIsIm51bWJlciIsIm9uZU9mIiwiT2JqZWN0IiwiZGVmYXVsdFByb3BzIiwiaGFzT3duUHJvcGVydHkiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiYXJnVHlwZSIsImNsYXNzZXMiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiY2xhc3NOYW1lcyIsImFwcGx5IiwiaGFzT3duIiwiY2FsbCIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiYmFiZWxIZWxwZXJzLnR5cGVvZiIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsImhhbmRsZUNsaWNrIiwiZGlzYWJsZWQiLCJ0b2dnbGVTdGF0ZSIsIm9uQ2xpY2siLCJwcmVzc2VkIiwiQnV0dG9uIiwiY2xhc3NOYW1lIiwiY3giLCJiLWJ1dHRvbi1wcmVzc2FibGUiLCJiLWJ1dHRvbi1wcmVzc2VkIiwiYXJpYS1wcmVzc2VkIiwibm9kZSIsIm9uUHJlc3NlZCIsIm9uVW5wcmVzc2VkIiwiYm9vbCIsIm5vb3AiLCJyZXBsYWNlIiwiYSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImlkIiwidXVpZCIsImhhbmRsZUNoYW5nZSIsImlucHV0UHJvcHMiLCJjaGVja2VkIiwibmFtZSIsIm9uQ2hhbmdlIiwiaW5wdXQiLCJpbmRldGVybWluYXRlIiwic2V0SW5kZXRlcm1pbmF0ZSIsIlN0cmluZyIsInR5cGUiLCJiLWNoZWNrYm94LW1peGVkIiwiYi1jaGVja2JveC1jaGVja2VkIiwiYi1jaGVja2JveC11bmNoZWNrZWQiLCJhcmlhLWNoZWNrZWQiLCJnZXRBcmlhU3RhdGUiLCJsYWJlbCIsImxhYmVsUHJvcHMiLCJodG1sRm9yIiwiQ2hlY2tib3giLCJyZW5kZXJJbnB1dCIsInJlbmRlckxhYmVsIiwic2hhcGUiLCJ2YWx1ZSIsIm9iamVjdCIsIm9uQ2hlY2tlZCIsIm9uVW5jaGVja2VkIiwiaXRlbXMiLCJldmVyeSIsIml0ZW0iLCJzb21lIiwic2VsZWN0QWxsIiwiYWxsSXRlbXNDaGVja2VkIiwic2VsZWN0QWxsUHJvcHMiLCJhbGxDaGVja2VkIiwiYW55SXRlbXNDaGVja2VkIiwib25BbGxDaGVja2VkIiwib25BbGxVbmNoZWNrZWQiLCJvbkNoaWxkQ2hlY2tlZCIsIm9uQ2hpbGRVbmNoZWNrZWQiLCJyZW5kZXJDaGVja2JveGVzIiwic2VsZWN0QWxsUG9zaXRpb24iLCJDb25zdGFudHMiLCJTRUxFQ1RfQUxMX0JFRk9SRSIsInRvQmVSZW5kZXJlZCIsInVuc2hpZnQiLCJyZW5kZXJTZWxlY3RBbGwiLCJTRUxFQ1RfQUxMX0FGVEVSIiwiQ2hlY2tib3hHcm91cCIsInJlbmRlckNoaWxkcmVuIiwiYXJyYXlPZiIsImlzUmVxdWlyZWQiLCIkcG9ydGFsIiwiJHBhc3NlbmdlciIsImNyZWF0ZUVsZW1lbnQiLCJkZXN0aW5hdGlvbiIsImFwcGVuZENoaWxkIiwicmVuZGVyUG9ydGFsbGVkQ29udGVudCIsImlzVmFsaWRFbGVtZW50IiwicG9ydGFsSWQiLCJSZWFjdERPTSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInJlbW92ZUNoaWxkIiwiUG9ydGFsIiwiUE9SVEFMX0RBVEFfQVRUUklCVVRFIiwiQ29tcG9uZW50IiwiaW5zdGFuY2VPZiIsIkhUTUxFbGVtZW50IiwiYm9keSIsInByb3RvdHlwZSIsInNsaWNlIiwibW91bnRlZCIsInV1aWRIZWFkZXIiLCJ1dWlkQm9keSIsIm5hdGl2ZUV2ZW50IiwiY2FwdHVyZUZvY3VzIiwiY2xvc2VPbk91dHNpZGVGb2N1cyIsImlzUGFydE9mRGlhbG9nIiwic2V0VGltZW91dCIsIm9uQ2xvc2UiLCJleHBsaWNpdE9yaWdpbmFsVGFyZ2V0IiwicmVsYXRlZFRhcmdldCIsInByZXZpb3VzIiwiY2xvc2VPbkVzY0tleSIsImhhbmRsZU91dHNpZGVDbGljayIsImNsb3NlT25PdXRzaWRlQ2xpY2siLCJoYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwiLCJjbG9zZU9uT3V0c2lkZVNjcm9sbCIsIiR3cmFwcGVyIiwiY29uY2F0IiwicXVlcnlTZWxlY3RvckFsbCIsImRvbSIsImdldEVsZW1lbnRCeUlkIiwibm9kZVR5cGUiLCJFTEVNRU5UX05PREUiLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJlbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIiRkaWFsb2ciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYm9keVByb3BzIiwiZm9vdGVyIiwiZm9vdGVyUHJvcHMiLCJoZWFkZXIiLCJoZWFkZXJQcm9wcyIsImFyaWEtaGlkZGVuIiwid3JhcHBlclByb3BzIiwicmVuZGVyRm9jdXNCb3VuZGFyeSIsImJlZm9yZSIsIkRpYWxvZyIsInJvbGUiLCJhcmlhLWxhYmVsbGVkYnkiLCJhcmlhLWRlc2NyaWJlZGJ5IiwicmVuZGVySGVhZGVyIiwicmVuZGVyQm9keSIsInJlbmRlckZvb3RlciIsImFmdGVyIiwic3RyaW5nTnVtYmVyIiwiaW5zdGFuY2UiLCJnZXRDb21wdXRlZFN0eWxlIiwidG9JIiwiZm9udFNpemUiLCJjb250YWluZXJCb3giLCJoZWlnaHQiLCJ3aWR0aCIsImJveFNpemluZyIsImNvbnRhaW5lckhlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiY29udGFpbmVyV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImZsb29yIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJzdHlsZSIsIm1pbiIsIm1heEZvbnRTaXplIiwib3B0aW1pemVGb3JIZWlnaHQiLCJvcHRpbWl6ZUZvcldpZHRoIiwiaW5zdGFuY2VzIiwiZm9yRWFjaCIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsInNwbGljZSIsInJlc2NhbGUiLCJyZWdpc3Rlckluc3RhbmNlIiwidW5yZWdpc3Rlckluc3RhbmNlIiwiRml0dGVkVGV4dCIsIk51bWJlciIsIk1BWF9WQUxVRSIsInN0YXR1cyIsIkltYWdlIiwiTE9BRElORyIsInNyYyIsInJlc2V0UHJlbG9hZGVyIiwicHJlbG9hZCIsImxvYWRlciIsIm9ubG9hZCIsIm9uZXJyb3IiLCJMT0FERUQiLCJFUlJPUiIsImRpc3BsYXlBc0JhY2tncm91bmRJbWFnZSIsImltYWdlUHJvcHMiLCJ0aXRsZSIsImFsdCIsImJhY2tncm91bmRJbWFnZSIsIm9uTG9hZCIsIm9uRXJyb3IiLCJzdGF0dXNQcm9wcyIsImItaW1hZ2UtbG9hZGluZyIsImItaW1hZ2UtbG9hZGVkIiwiYi1pbWFnZS1lcnJvciIsInJlbmRlckltYWdlIiwicmVuZGVyU3RhdHVzIiwiaXNDb250cm9sbGVkIiwiaXNTdHJpbmciLCJpc0ZvY3VzZWQiLCJzZXRJbnB1dFZhbHVlIiwiZ2V0VmFsdWUiLCJmaWVsZCIsImhhbmRsZUJsdXIiLCJvbkJsdXIiLCJkZWZhdWx0VmFsdWUiLCJuZXh0VmFsdWUiLCJkaXNwYXRjaEV2ZW50IiwiYnViYmxlcyIsImhpZGVQbGFjZWhvbGRlck9uRm9jdXMiLCJpc05vbkVtcHR5IiwicGxhY2Vob2xkZXIiLCJnZXRQbGFjZWhvbGRlclRleHQiLCJJbnB1dCIsInJlbmRlclBsYWNlaG9sZGVyIiwib2JqMSIsIm9iajIiLCJjaGlsZFByb3BzIiwicG9ydGFsUHJvcHMiLCJNb2RhbCIsIiRtb2RhbCIsIm1hc2tQcm9wcyIsImV4dHJhY3RDaGlsZFByb3BzIiwibW9kYWxQcm9wcyIsIk1BWF9JTlRFR0VSIiwiTkFOIiwib2JqZWN0UHJvdG8iLCJ0b0ludGVnZXIiLCJpc09iamVjdExpa2UiLCJvYmplY3RUb1N0cmluZyIsInN5bWJvbFRhZyIsInRvTnVtYmVyIiwiSU5GSU5JVFkiLCJ0b0Zpbml0ZSIsInJlbWFpbmRlciIsInJlc3VsdCIsImlzU3ltYm9sIiwiaXNPYmplY3QiLCJ2YWx1ZU9mIiwib3RoZXIiLCJyZVRyaW0iLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwiaXNCaW5hcnkiLCJyZUlzQmFkSGV4IiwiaXNJbnRlZ2VyIiwiaW5kZXhPZk9wdGlvbkluRm9jdXMiLCJnZXRQcmV2aW91c09wdGlvbkluZGV4IiwiYWN0aXZlSXRlbUluZGV4IiwiZ2V0TmV4dE9wdGlvbkluZGV4IiwiaGFuZGxlT3B0aW9uQ2xpY2siLCJvcHRpb25zIiwib3B0aW9uIiwic2VsZWN0ZWQiLCJjdXJyZW50T3B0aW9uSW5kZXgiLCJuZXh0Iiwib25PcHRpb25TZWxlY3RlZCIsImRlZmluaXRpb24iLCJTZWdtZW50ZWRDb250cm9sIiwiaW50ZXJuYWxDaGlsZEtleXMiLCJiLXNlZ21lbnRlZC1jb250cm9sLW9wdGlvbi1zZWxlY3RlZCIsImhhbmRsZU9wdGlvbkJsdXIiLCJiaW5kIiwiaGFuZGxlT3B0aW9uRm9jdXMiLCJjb250ZW50IiwicmVuZGVyT3B0aW9ucyIsIm1pc3NpbmdTZWxlY3RlZCIsInNlZW5TZWxlY3RlZCIsIm11bHRpcGxlU2VsZWN0ZWQiLCJ4IiwiZGF0YSIsInRoZW4iLCJyZXNvbHZlZFBheWxvYWQiLCJjdXJyZW50UHJvcHMiLCJjbG9zdXJlUHJvbWlzZSIsImNvbnZlcnRUb0pTWEZ1bmMiLCJjb252ZXJ0RGF0YVRvSlNYT3JXYWl0IiwiZXh0cmFDbGFzc2VzIiwiYi1wYWdpbmF0aW9uLWl0ZW0tZXZlbiIsImV2ZW4iLCJiLXBhZ2luYXRpb24taXRlbS1vZGQiLCJiLXBhZ2luYXRpb24taXRlbS1sb2FkaW5nIiwiSXRlbSIsImdldENsYXNzZXMiLCJsb2FkaW5nQ29udGVudCIsImRhdGEtcGFnaW5hdGlvbi1pbmRleCIsImN1cnJlbnRQYWdlIiwiX3RoaXMzIiwiaW5pdGlhbFBhZ2UiLCJ0YXJnZXRJbmRleCIsIm51bUl0ZW1zUGVyUGFnZSIsImdldFBhZ2VGb3JJbmRleCIsImNlaWwiLCJpdGVtc1BlclBhZ2UiLCJ0b3RhbFBhZ2VzIiwidG90YWxJdGVtcyIsImZpcnN0VmlzaWJsZUl0ZW1JbmRleCIsInBhZ2VUb0luZGV4IiwiY29udHJvbHMiLCJGSVJTVCIsIm5leHRUYXJnZXRJbmRleCIsIlBSRVZJT1VTIiwiTkVYVCIsIkxBU1QiLCJpdGVtXzAiLCJpZGVudGlmaWVyIiwib2xkUHJvcHMiLCJfdGhpczQiLCJudW1QYWdlVG9nZ2xlcyIsInN0YXJ0UGFnZSIsInNob3dQYWdpbmF0aW9uU3RhdGUiLCJzaG93SnVtcFRvRmlyc3QiLCJqdW1wVG9GaXJzdENvbnRyb2xDb250ZW50IiwiUGFnaW5hdGlvbiIsInByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50IiwiZW5kUGFnZSIsImRhdGEtcGFnZS1udW1iZXIiLCJuZXh0UGFnZUNvbnRyb2xDb250ZW50Iiwic2hvd0p1bXBUb0xhc3QiLCJqdW1wVG9MYXN0Q29udHJvbENvbnRlbnQiLCJjdXN0b21Db250cm9sQ29udGVudCIsImZpcnN0SXRlbUluZGV4IiwibGFzdEl0ZW1JbmRleCIsImdlbmVyYXRlZEl0ZW1zIiwiZ2V0SXRlbSIsImxpc3RXcmFwcGVyUHJvcHMiLCJnZW5lcmF0ZUl0ZW1zIiwiX3RoaXM1IiwiaXRlbVRvSlNYQ29udmVydGVyRnVuYyIsImluZGV4T2Zmc2V0IiwiaXRlbUxvYWRpbmdDb250ZW50IiwicG9zaXRpb24iLCJoaWRlUGFnZXJJZk5vdE5lZWRlZCIsInRvZ2dsZVdyYXBwZXJQcm9wcyIsInRvTG93ZXJDYXNlIiwicG9zaXRpb25Mb3dlciIsInRvVXBwZXJDYXNlIiwicG9zaXRpb25DYXBpdGFsaXplZCIsImNyZWF0ZVBhZ2VCdXR0b25PcHRpb25zIiwicG9zaXRpb25zIiwiQUJPVkUiLCJyZW5kZXJDb250cm9scyIsInJlbmRlckl0ZW1zIiwiQkVMT1ciLCJyZW5kZXJWaWV3IiwibnVtYmVyT2ZQYWdlcyIsImlkZW50aXR5IiwibGVuIiwiZG9jdW1lbnRFbGVtZW50IiwiYXJyMSIsImFycjIiLCJmaWx0ZXIiLCJvYmoiLCJ2aWV3Qm94IiwieG1sbnMiLCJmaWxsIiwicG9pbnRzIiwiYWxpZ24iLCJhbmNob3IiLCJjYWNoZVZpZXdwb3J0Q2FydG9ncmFwaHkiLCJyb3VuZCIsImdldE5leHREaWFsb2dYUG9zaXRpb24iLCJnZXROZXh0RGlhbG9nWVBvc2l0aW9uIiwiZ2V0QWxpZ25tZW50Q29ycmVjdGlvbklmT3ZlcmZsb3dpbmciLCJkeCIsImR5IiwiYWxpZ25tZW50Q29ycmVjdGlvbiIsImRpZEFsaWdubWVudENoYW5nZSIsIiRjYXJldCIsImxlZnQiLCJnZXROZXh0Q2FyZXRYUG9zaXRpb24iLCJ0b3AiLCJnZXROZXh0Q2FyZXRZUG9zaXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwiZGlhbG9nIiwiYW5jaG9yWEFsaWduIiwicHJlc2V0IiwiYW5jaG9yWUFsaWduIiwic2VsZlhBbGlnbiIsInNlbGZZQWxpZ24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhbmNob3JMZWZ0IiwiYW5jaG9yUmVjdCIsImFuY2hvclRvcCIsImFuY2hvckhlaWdodCIsImFuY2hvcldpZHRoIiwiYm9keUxlZnQiLCJib2R5UmVjdCIsImJvZHlUb3AiLCJQb3BvdmVyIiwiTUlERExFIiwiU1RBUlQiLCJFTkQiLCJuZXh0WCIsImNhcmV0IiwiY2xpZW50V2lkdGgiLCJuZXh0WSIsImNsaWVudEhlaWdodCIsImFuY2hvclkiLCJ5IiwiYXV0b1JlcG9zaXRpb24iLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsInhNYXgiLCJjb3JyZWN0aW9ucyIsInlNYXgiLCJ0cmFuc2Zvcm1Qcm9wIiwibmV4dEFsaWdubWVudCIsImN1cnJlbnRBbGlnbm1lbnQiLCJjb25zdGFudCIsImdldENsYXNzQWxpZ25tZW50RnJhZ21lbnQiLCJjYXJldENvbXBvbmVudCIsImdldEZyYWciLCJMRUZUIiwiUklHSFQiLCJwcmVzZXRWYWx1ZXMiLCJ2YWx1ZXMiLCJERUZBVUxUX0NBUkVUX0NPTVBPTkVOVCIsIndpdGhvdXQiLCJleHBhbmRlZCIsImRpc3BhdGNoQ2FsbGJhY2siLCJ0b2dnbGVQcm9wcyIsIm5ld1Byb3BzIiwiUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlIiwiYi1kaXNjbG9zdXJlLWV4cGFuZGVkIiwidGVhc2VyRXhwYW5kZWQiLCJ0ZWFzZXIiLCJyZW5kZXJDb250ZW50Iiwib25FeHBhbmQiLCJvbkhpZGUiLCJvbkNhbmNlbCIsImNhbmNlbFByb3BzIiwicHJvZ3Jlc3NQcm9wcyIsImItcHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZSIsInByb2dyZXNzIiwidHdlZW5Qcm9wZXJ0eSIsIlByb2dyZXNzIiwicmVuZGVyUHJvZ3Jlc3MiLCJyZW5kZXJDYW5jZWwiLCJvblNlbGVjdGVkIiwiYi1yYWRpby1zZWxlY3RlZCIsIlJhZGlvIiwic3RyIiwibWF0Y2hPcGVyYXRvcnNSZSIsImNvbXB1dGVNYXRjaGVzIiwic2VsZWN0ZWRFbnRpdHlJbmRleCIsIm9uRW50aXR5SGlnaGxpZ2h0ZWQiLCJlbnRpdGllcyIsInVwZGF0ZUlucHV0U3RhdGUiLCJlbnRpdHlNYXRjaEluZGV4ZXMiLCJtYXRjaGVzIiwic2Nyb2xsVG9wIiwic2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkiLCJ0b3RhbE1hdGNoZXMiLCJtYXRjaGVzTm9kZSIsIm1hdGNoSW5kZXgiLCJtYXRjaE5vZGUiLCJvZmZzZXRUb3AiLCJtYXRjaE5vZGVZU3RhcnQiLCJtYXRjaE5vZGVZRW5kIiwibWF0Y2hlc05vZGVZRW5kIiwiZ2V0SW5wdXROb2RlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJlbnRpdHkiLCJ0ZXh0IiwiZW50aXR5Q29udGVudCIsInNwbGl0IiwiZXNjYXBlciIsImZyYWdzIiwidGhyZXNob2xkIiwibm9ybWFsaXplZFVzZXJUZXh0Iiwic2Vla1ZhbHVlIiwiaW5kZXhTdGFydCIsImluZGV4RW5kIiwiYWxnb3JpdGhtIiwiVHlwZWFoZWFkIiwiU1RBUlRTX1dJVEgiLCJtYXJrU3RhcnRzV2l0aE1hdGNoU3Vic3RyaW5nIiwibWFya0Z1enp5TWF0Y2hTdWJzdHJpbmciLCJtYXJrZXIiLCJ3YXJuZWRNYXJrZXIiLCJjb25zb2xlIiwid2FybiIsInVzZXJUZXh0Iiwibm9ybWFsaXplZCIsInJlc3VsdHMiLCJnZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzIiwiZ2V0RnV6enlNYXRjaEluZGV4ZXMiLCJtYXRjaGVyIiwid2FybmVkTWF0Y2hlciIsInByb3ZpZGVkRW50aXRpZXMiLCJjdXJyZW50VmFsdWUiLCJnZXRNYXRjaEluZGV4ZXMiLCJvZmZzY3JlZW5DbGFzcyIsImFyaWEtbGl2ZSIsImdldFNlbGVjdGVkRW50aXR5VGV4dCIsImhpbnQiLCJyYXciLCJwcm9jZXNzZWQiLCJoaW50UHJvcHMiLCJtYXRjaFdyYXBwZXJQcm9wcyIsInJlc3QiLCJiLXR5cGVhaGVhZC1tYXRjaC1zZWxlY3RlZCIsImhhbmRsZU1hdGNoQ2xpY2siLCJtYXJrTWF0Y2hTdWJzdHJpbmciLCJyZW5kZXJOb3RpZmljYXRpb24iLCJyZW5kZXJIaW50IiwiYXJpYS1jb250cm9scyIsInJlbmRlck1hdGNoZXMiLCJGVVpaWSIsImNsZWFyUGFydGlhbElucHV0T25TZWxlY3Rpb24iLCJvbkNvbXBsZXRlIiwib25FbnRpdHlTZWxlY3RlZCIsInJlc2V0TWF0Y2hlcyIsInNlbGVjdCIsInNldFZhbHVlIiwiZ2V0TWFya2luZ0Z1bmN0aW9uIiwiZ2V0TWF0Y2hpbmdGdW5jdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsImN1cnNvckF0RW5kT2ZJbnB1dCIsInNoaWZ0S2V5Iiwic2VsZWN0TWF0Y2giLCJhcnJheSIsInR5cGVhaGVhZCIsImFkZCIsInRva2VucyIsImhhbmRsZUFkZFRva2VuIiwiaGFuZGxlSW5wdXRDbGljayIsImNsZWFyU2VsZWN0aW9uIiwiaGFuZGxlSW5wdXRGb2N1cyIsIndoaWNoIiwic2VsZWN0UHJldmlvdXNUb2tlbiIsInNlbGVjdE5leHRUb2tlbiIsInRva2Vuc1NlbGVjdGVkIiwicmVtb3ZlIiwibWV0YUtleSIsIl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbiIsImhhbmRsZU5ld1NlbGVjdGlvbiIsInByZXZpb3VzU2VsZWN0ZWRJbmRleGVzIiwiY3VycmVudFNlbGVjdGVkSW5kZXhlcyIsImxhc3QiLCJpZHgiLCJpbmRleGVzIiwiaGFuZGxlUmVtb3ZlVG9rZW5zIiwiYXBwZW5kIiwiZmlyc3QiLCJzZWxlY3RUb2tlbiIsInNlbGVjdFRva2VucyIsInByZXZpb3VzVG9rZW4iLCJuZXh0VG9rZW4iLCJ0b2tlbkNsb3NlQ29tcG9uZW50IiwidG9rZW5DbG9zZVZpc2libGUiLCJoYW5kbGVUb2tlbkNsb3NlQ2xpY2siLCJiLXRva2VuZmllbGQtdG9rZW4tc2VsZWN0ZWQiLCJoYW5kbGVUb2tlbktleURvd24iLCJyZW5kZXJUb2tlbkNsb3NlIiwiVG9rZW5pemVkSW5wdXQiLCJyZW5kZXJUb2tlbnMiLCJUb29sdGlwIiwiYi10b29sdGlwLXBvc2l0aW9uLWFib3ZlIiwiYi10b29sdGlwLXBvc2l0aW9uLWJlbG93IiwiYi10b29sdGlwLXBvc2l0aW9uLWJlZm9yZSIsIkJFRk9SRSIsImItdG9vbHRpcC1wb3NpdGlvbi1hZnRlciIsIkFGVEVSIiwiZGF0YS10b29sdGlwIiwiYXJpYS1sYWJlbCJdLCJtYXBwaW5ncyI6Im1HQUFBLGdCQUFnQkEscUJBQXlCLHVCQ0dRQyxxRUFDN0MsZUFBY0MsS0FBS0QsR0FBUUUsT0FBTyxXQUE4QkMsRUFBTUMsR0FDbEUsR0FBSUMsRUFBWUMsUUFBUUYsTUFBVSxFQUFHLENBQ2pDRCxFQUFLQyxHQUFPSixFQUFPSSxHQUd2QixzdkRDZ0NKRyxPQUNJQyxpQkFBa0JDLEVBQUtDLE1BQU1DLDJCQXVEakNDLGNBQWdCLFNBQUNDLEdBQ2IsT0FBUUEsRUFBTVQsS0FDZCxJQUFLLFVBQ0QsR0FBSUssRUFBS0MsTUFBTUksT0FBU0MsRUFBbUJELEtBQUtFLFVBQ3pDUCxFQUFLQyxNQUFNSSxPQUFTQyxFQUFtQkQsS0FBS0csS0FBTSxDQUNyREosRUFBTUssZ0JBQ05ULEdBQUtVLFdBQVcsR0FHcEIsS0FFSixLQUFLLFlBQ0QsR0FBSVYsRUFBS0MsTUFBTUksT0FBU0MsRUFBbUJELEtBQUtN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
