(function(e,t,n){"use strict";var r="default"in t?t["default"]:t;var o="default"in n?n["default"]:n;var s=function(e){return typeof e==="function"};function i(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return Object.keys(e).reduce(function n(r,o){if(t.indexOf(o)===-1){r[o]=e[o]}return r},{})}var a=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol==="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var p=function(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}};var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||false;r.configurable=true;if("value"in r)r.writable=true;Object.defineProperty(e,r.key,r)}}return function(t,n,r){if(n)e(t.prototype,n);if(r)e(t,r);return t}}();var u=function(e,t,n){if(t in e){Object.defineProperty(e,t,{value:n,enumerable:true,configurable:true,writable:true})}else{e[t]=n}return e};var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n){if(Object.prototype.hasOwnProperty.call(n,r)){e[r]=n[r]}}}return e};var d=function(e,t){if(typeof t!=="function"&&t!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof t)}e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}});if(t)Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t};var f=function(e,t){var n={};for(var r in e){if(t.indexOf(r)>=0)continue;if(!Object.prototype.hasOwnProperty.call(e,r))continue;n[r]=e[r]}return n};var h=function(e,t){if(!e){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t&&(typeof t==="object"||typeof t==="function")?t:e};var y=function(e){d(t,e);function t(){var e;var n,o,i;p(this,t);for(var a=arguments.length,l=Array(a),u=0;u<a;u++){l[u]=arguments[u]}return i=(n=(o=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),o),o.state={activeChildIndex:o.props.defaultActiveChildIndex},o.handleKeyDown=function(e){switch(e.key){case"ArrowUp":if(o.props.mode===t.mode.VERTICAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(-1)}break;case"ArrowLeft":if(o.props.mode===t.mode.HORIZONTAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(-1)}break;case"ArrowDown":if(o.props.mode===t.mode.VERTICAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(1)}break;case"ArrowRight":if(o.props.mode===t.mode.HORIZONTAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(1)}break}if(s(o.props.onKeyDown)){o.props.onKeyDown(e)}},o.handleFocus=function(e){if(e.target.hasAttribute("data-focus-index")){var t=parseInt(e.target.getAttribute("data-focus-index"),10);var n=r.Children.toArray(o.props.children)[t];o.setState({activeChildIndex:t});if(n.props.onFocus){n.props.onFocus(e)}}},n),h(o,i)}l(t,[{key:"componentDidUpdate",value:function e(t,n){if(this.state.activeChildIndex!==n.activeChildIndex){this.setFocus(this.state.activeChildIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(this.state.activeChildIndex!==0){var n=t.children?r.Children.count(t.children):0;if(n===0){this.setState({activeChildIndex:0})}else if(this.state.activeChildIndex>=n){this.setState({activeChildIndex:n-1})}}}},{key:"setFocus",value:function e(t){var r=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:n.findDOMNode(this.refs.wrapper)).children[t];if(r&&r.hasAttribute("data-skip")){this.moveFocus(r.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1)}else if(r&&document.activeElement!==r){r.focus()}}},{key:"moveFocus",value:function e(t){var n=this.props.children?r.Children.count(this.props.children):0;var o=this.state.activeChildIndex+t;if(o>=n){o=0}else if(o<0){o=n-1}this.setState({activeChildIndex:o})}},{key:"children",value:function e(){var t=this;return r.Children.map(this.props.children,function(e,n){return r.cloneElement(e,{"data-focus-index":n,"data-skip":parseInt(e.props.tabIndex,10)===-1||undefined,key:e.key||n,tabIndex:t.state.activeChildIndex===n?0:-1})})}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"wrapper",onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children())}}]);return t}(r.PureComponent);y.mode={HORIZONTAL:"HORIZONTAL",VERTICAL:"VERTICAL",BOTH:"BOTH"};y.propTypes={component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),defaultActiveChildIndex:t.PropTypes.number,mode:t.PropTypes.oneOf([y.mode.BOTH,y.mode.HORIZONTAL,y.mode.VERTICAL])};y.defaultProps={component:"div",defaultActiveChildIndex:0,mode:y.mode.BOTH};y.internalKeys=Object.keys(y.defaultProps);function m(e,t){return t={exports:{}},e(t,t.exports),t.exports}var v=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var P=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.mounted=false,r.state={},n),h(r,o)}l(t,[{key:"convertDataToJSXOrWait",value:function e(){var t=this;var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props;var r=n.data;if(r instanceof Promise){this.setState({component:null});return r.then(function(e){if(t.mounted){t.setState(function(t,n){return{component:n.data===r?n.convertToJSXFunc(e):t.component}})}},function(){return t.setState({component:false})})}this.setState({component:n.convertToJSXFunc(r)})}},{key:"fireCallbackIfDataRendered",value:function e(){if(this.state.component){this.props.contentRenderedFunc()}}},{key:"componentWillMount",value:function e(){this.convertDataToJSXOrWait()}},{key:"componentDidMount",value:function e(){this.mounted=true;this.fireCallbackIfDataRendered()}},{key:"componentDidUpdate",value:function e(){this.fireCallbackIfDataRendered()}},{key:"componentWillReceiveProps",value:function e(t){this.convertDataToJSXOrWait(t)}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"getClasses",value:function e(t){return v("b-async",this.props.className,t,{"b-async-error":this.state.component===false,"b-async-loading":this.state.component===null})}},{key:"render",value:function e(){if(this.state.component===null||this.state.component===false){return r.createElement("div",c({},i(this.props,t.internalKeys),{className:this.getClasses()}),this.state.component===null?this.props.loadingContent:this.props.errorContent)}return r.cloneElement(this.state.component,c({},i(this.props,t.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className)}))}}]);return t}(r.PureComponent);P.propTypes={contentRenderedFunc:t.PropTypes.func,convertToJSXFunc:t.PropTypes.func,data:t.PropTypes.any,errorContent:t.PropTypes.node,loadingContent:t.PropTypes.node};P.defaultProps={contentRenderedFunc:function e(){},convertToJSXFunc:function e(t){return t},data:null,errorContent:"⚠️",loadingContent:null};P.internalKeys=Object.keys(P.defaultProps);var g=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});function b(){}var k=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.handleClick=function(e){if(r.props.disabled){return}r.toggleState(e);if(s(r.props.onClick)){r.props.onClick(e)}},r.handleKeyDown=function(e){if(r.props.disabled){return}switch(e.key){case"Enter":case"Space":e.preventDefault();r.toggleState(e)}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"toggleState",value:function e(t){this.props[this.props.pressed?"onUnpressed":"onPressed"](t)}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"button",className:g("b-button",this.props.className,{"b-button-pressable":typeof this.props.pressed!=="undefined","b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]);return t}(r.PureComponent);k.propTypes={children:t.PropTypes.node,component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),onClick:t.PropTypes.func,onPressed:t.PropTypes.func,onUnpressed:t.PropTypes.func,pressed:t.PropTypes.bool};k.defaultProps={children:null,component:"button",onClick:b,onPressed:b,onUnpressed:b,pressed:undefined};k.internalKeys=Object.keys(k.defaultProps);var T=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});function w(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(e){return(e^Math.random()*16>>e/4).toString(16)})}var O=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.id=w(),r.handleChange=function(e){if(r.props.inputProps.disabled){return}r.props[!r.props.inputProps.checked?"onChecked":"onUnchecked"](r.props.inputProps.name);if(s(r.props.inputProps.onChange)){r.props.inputProps.onChange(e)}},r.handleClick=function(e){if(r.props.inputProps.disabled){return}r.refs.input.focus();if(s(r.props.inputProps.onClick)){r.props.inputProps.onClick(e)}},n),h(r,o)}l(t,[{key:"componentDidMount",value:function e(){if(this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"componentDidUpdate",value:function e(t){if(t.inputProps.indeterminate!==this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"setIndeterminate",value:function e(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function e(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function e(){return r.createElement("input",c({},i(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:T("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function e(){if(this.props.label){return r.createElement("label",c({},this.props.labelProps,{ref:"label",className:T("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:T("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(r.PureComponent);O.propTypes={inputProps:t.PropTypes.shape({checked:t.PropTypes.bool,className:t.PropTypes.string,disabled:t.PropTypes.bool,id:t.PropTypes.string,indeterminate:t.PropTypes.bool,onChange:t.PropTypes.func,onClick:t.PropTypes.func,name:t.PropTypes.string,value:t.PropTypes.string}),label:t.PropTypes.node,labelProps:t.PropTypes.object,onChecked:t.PropTypes.func,onUnchecked:t.PropTypes.func};O.defaultProps={inputProps:{checked:false,indeterminate:false},label:null,labelProps:{},onChecked:b,onUnchecked:b};O.internalKeys=Object.keys(O.defaultProps);var C=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var x=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"allItemsChecked",value:function e(){return this.props.items.every(function(e){return e.inputProps.checked===true})}},{key:"anyItemsChecked",value:function e(){return this.props.items.some(function(e){return e.inputProps.checked===true})}},{key:"renderSelectAll",value:function e(){if(this.props.selectAll){var t=this.allItemsChecked();var n=this.props.selectAllProps.inputProps;return r.createElement(O,c({},this.props.selectAllProps,{ref:"select_all",key:"cb_select_all",className:C("b-checkbox-group-selectall",this.props.selectAllProps.className),inputProps:c({},n,{checked:t,indeterminate:!t&&this.anyItemsChecked(),name:n&&n.name?n.name:"cb_select_all"}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}}},{key:"renderCheckboxes",value:function e(){var t=this;return this.props.items.map(function(e){return r.createElement(O,c({},e,{key:e.inputProps.name,onChecked:t.props.onChildChecked,onUnchecked:t.props.onChildUnchecked}))})}},{key:"renderChildren",value:function e(){var n=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition){switch(this.props.selectAllPosition){case t.selectAllPosition.BEFORE:n.unshift(this.renderSelectAll());break;case t.selectAllPosition.AFTER:n.push(this.renderSelectAll());break}}return n}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"group",className:C("b-checkbox-group",this.props.className)}),this.renderChildren())}}]);return t}(r.PureComponent);x.selectAllPosition={BEFORE:w(),AFTER:w()};x.propTypes={items:t.PropTypes.arrayOf(O.propTypes.inputProps).isRequired,onAllChecked:t.PropTypes.func,onAllUnchecked:t.PropTypes.func,onChildChecked:t.PropTypes.func,onChildUnchecked:t.PropTypes.func,selectAll:t.PropTypes.bool,selectAllProps:t.PropTypes.shape({label:t.PropTypes.string,inputProps:t.PropTypes.object}),selectAllPosition:t.PropTypes.oneOf([x.selectAllPosition.BEFORE,x.selectAllPosition.AFTER])};x.defaultProps={items:[],onAllChecked:b,onAllUnchecked:b,onChildChecked:b,onChildUnchecked:b,selectAll:false,selectAllProps:{},selectAllPosition:x.selectAllPosition.BEFORE};x.internalKeys=Object.keys(x.defaultProps);var E=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var I=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.id=w(),r.$portal=null,r.$passenger=null,n),h(r,o)}l(t,[{key:"componentWillMount",value:function e(){this.$portal=document.createElement("div");this.props.destination.appendChild(this.$portal);this.renderPortalledContent()}},{key:"renderPortalledContent",value:function e(){var t=r.isValidElement(this.props.children)?this.props.children:r.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id;o.unstable_renderSubtreeIntoContainer(this,t,this.$portal);this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function e(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function e(){o.unmountComponentAtNode(this.$portal);this.props.destination.removeChild(this.$portal)}},{key:"render",value:function e(){return r.createElement("span",c({},i(this.props,t.internalKeys),u({},t.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]);return t}(r.Component);I.propTypes={children:r.PropTypes.node,destination:t.PropTypes.instanceOf(HTMLElement),portalId:t.PropTypes.string};I.defaultProps={children:null,destination:document.body,portalId:null};I.internalKeys=Object.keys(I.defaultProps);I.PORTAL_DATA_ATTRIBUTE="data-portal-id";var N=Array.prototype.slice;var S=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.mounted=false,r.uuidHeader=w(),r.uuidBody=w(),r.handleFocus=function(e){if(!r.props.captureFocus){if(r.shouldDialogCloseOnEvent("closeOnOutsideFocus",e)&&!r.isPartOfDialog(e.target)){return window.setTimeout(r.props.onClose,0)}return}var t=e.explicitOriginalTarget||e.relatedTarget;if(r.isPartOfDialog(t)&&!r.isPartOfDialog(e.target)){e.preventDefault();t.focus()}},r.handleKeyDown=function(e){if(e.key==="Escape"){if(r.shouldDialogCloseOnEvent("closeOnEscKey",e)){window.setTimeout(r.props.onClose,0)}}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},r.handleInsideClick=function(e){if(r.shouldDialogCloseOnEvent("closeOnInsideClick",e)){window.setTimeout(r.props.onClose,0)}},r.handleOutsideClick=function(e){if(r.shouldDialogCloseOnEvent("closeOnOutsideClick",e)&&!r.isPartOfDialog(e.target)){window.setTimeout(r.props.onClose,0)}},r.handleOutsideScrollWheel=function(e){if(r.shouldDialogCloseOnEvent("closeOnOutsideScroll",e)&&!r.isPartOfDialog(e.target)){window.setTimeout(r.props.onClose,0)}},n),h(r,o)}l(t,[{key:"isPartOfDialog",value:function e(t){if(!t||t===window){return false}var n=[this.$wrapper].concat(N.call(this.$wrapper.querySelectorAll("["+I.PORTAL_DATA_ATTRIBUTE+"]")).map(function(e){return document.getElementById(e.getAttribute(I.PORTAL_DATA_ATTRIBUTE))}));var r=t.nodeType!==Node.ELEMENT_NODE?t.parentNode:t;return n.some(function(e){return e.contains(r)})}},{key:"componentDidMount",value:function e(){window.addEventListener("click",this.handleOutsideClick,true);window.addEventListener("contextmenu",this.handleOutsideClick,true);window.addEventListener("focus",this.handleFocus,true);window.addEventListener("scroll",this.handleOutsideScrollWheel,true);window.addEventListener("wheel",this.handleOutsideScrollWheel,true);if(this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)){this.$dialog.focus()}}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("click",this.handleOutsideClick,true);window.removeEventListener("contextmenu",this.handleOutsideClick,true);window.removeEventListener("focus",this.handleFocus,true);window.removeEventListener("scroll",this.handleOutsideScrollWheel,true);window.removeEventListener("wheel",this.handleOutsideScrollWheel,true)}},{key:"shouldDialogCloseOnEvent",value:function e(t,n){return s(this.props[t])?this.props[t](n):this.props[t]}},{key:"renderBody",value:function e(){return r.createElement("div",c({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:E("b-dialog-body",this.props.bodyProps.className)}),this.props.children)}},{key:"renderFooter",value:function e(){if(this.props.footer){return r.createElement("footer",c({},this.props.footerProps,{className:E("b-dialog-footer",this.props.footerProps.className)}),this.props.footer)}}},{key:"renderHeader",value:function e(){if(this.props.header){return r.createElement("header",c({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:E("b-dialog-header",this.props.headerProps.className)}),this.props.header)}}},{key:"renderFocusBoundary",value:function e(){if(this.props.captureFocus){return r.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}}},{key:"render",value:function e(){var n=this;return r.createElement("div",c({},this.props.wrapperProps,{ref:function e(t){return n.$wrapper=t},className:E("b-dialog-wrapper",this.props.wrapperProps.className),tabIndex:"0"}),this.renderFocusBoundary(),this.props.before,r.createElement("div",c({},i(this.props,t.internalKeys),{ref:function e(t){return n.$dialog=t},className:E("b-dialog",this.props.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:"dialog","aria-labelledby":this.uuidHeader,"aria-describedby":this.uuidBody,tabIndex:"0"}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary())}}]);return t}(r.PureComponent);S.propTypes={after:t.PropTypes.node,before:t.PropTypes.node,bodyProps:t.PropTypes.object,captureFocus:t.PropTypes.bool,children:t.PropTypes.node,closeOnEscKey:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),closeOnInsideClick:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),closeOnOutsideClick:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),closeOnOutsideFocus:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),closeOnOutsideScroll:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),footer:t.PropTypes.node,footerProps:t.PropTypes.object,header:t.PropTypes.node,headerProps:t.PropTypes.object,onClose:t.PropTypes.func,wrapperProps:t.PropTypes.object};S.defaultProps={after:null,before:null,bodyProps:{},captureFocus:true,children:null,closeOnEscKey:false,closeOnInsideClick:false,closeOnOutsideClick:false,closeOnOutsideFocus:false,closeOnOutsideScroll:false,footer:null,footerProps:{},header:null,headerProps:{},onClose:b,wrapperProps:{}};S.internalKeys=Object.keys(S.defaultProps);var A=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var j=[];function R(e){return parseInt(e,10)}function D(e){var t=n.findDOMNode(e);var r=window.getComputedStyle(t.parentNode);var o=R(window.getComputedStyle(t).fontSize);var s=R(r.height);var i=R(r.width);if(r.boxSizing==="border-box"||r.boxSizing==="padding-box"){s-=R(r.paddingTop)+R(r.paddingBottom);i-=R(r.paddingLeft)+R(r.paddingRight)}var a=Math.floor(o/t.offsetHeight*s);var p=Math.floor(o/t.offsetWidth*i);t.style.fontSize=(Math.min(e.props.maxFontSize,a,p)||1)+"px"}function F(){j.forEach(function(e){return D(e)})}function _(e){if(j.length===0){window.addEventListener("resize",F,true)}j.push(e)}function L(e){j.splice(j.indexOf(e),1);if(j.length===0){window.removeEventListener("resize",F,true)}}var M=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"componentDidMount",value:function e(){D(this);_(this)}},{key:"componentDidUpdate",value:function e(){D(this)}},{key:"componentWillUnmount",value:function e(){L(this)}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{className:A("b-text",this.props.className)}),this.props.children)}}]);return t}(r.PureComponent);M.propTypes={component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),maxFontSize:t.PropTypes.number};M.defaultProps={component:"span",maxFontSize:Number.MAX_VALUE};M.internalKeys=Object.keys(M.defaultProps);var K=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var W=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.state={status:t.status.LOADING},n),h(r,o)}l(t,[{key:"componentWillReceiveProps",value:function e(n){if(n.src!==this.props.src){this.resetPreloader();this.setState({status:t.status.LOADING})}}},{key:"componentDidMount",value:function e(){this.preload()}},{key:"componentDidUpdate",value:function e(){this.preload()}},{key:"componentWillUnmount",value:function e(){this.resetPreloader()}},{key:"resetPreloader",value:function e(){this.loader.onload=null;this.loader.onerror=null;this.loader=null}},{key:"preload",value:function e(){var n=this;if(this.loader){return}this.loader=document.createElement("img");this.loader.onload=function(){return n.setState({status:t.status.LOADED})};this.loader.onerror=function(){return n.setState({status:t.status.ERROR})};this.loader.src=this.props.src}},{key:"renderImage",value:function e(){if(this.props.displayAsBackgroundImage){return r.createElement("div",c({},this.props.imageProps,{ref:"image",className:K("b-image",this.props.imageProps.className),title:this.props.alt,style:c({},this.props.imageProps.style,{backgroundImage:"url("+this.props.src+")"})}))}return r.createElement("img",c({},this.props.imageProps,{ref:"image",className:K("b-image",this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:b,onError:b}))}},{key:"renderStatus",value:function e(){return r.createElement("div",c({},this.props.statusProps,{ref:"status",className:K("b-image-status",this.props.statusProps.className,{"b-image-loading":this.state.status===t.status.LOADING,"b-image-loaded":this.state.status===t.status.LOADED,"b-image-error":this.state.status===t.status.ERROR}),role:"presentation"}))}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:K("b-image-wrapper",this.props.className)}),this.renderImage(),this.renderStatus())}}]);return t}(r.PureComponent);W.status={LOADING:"LOADING",LOADED:"LOADED",ERROR:"ERROR"};W.propTypes={alt:t.PropTypes.string,displayAsBackgroundImage:t.PropTypes.bool,imageProps:t.PropTypes.object,src:t.PropTypes.string.isRequired,statusProps:t.PropTypes.object};W.defaultProps={alt:null,displayAsBackgroundImage:false,imageProps:{},src:"about:blank",statusProps:{}};W.internalKeys=Object.keys(W.defaultProps);var B=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var V=function(e){return typeof e==="string"};var H=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={input:"",isControlled:V(r.props.inputProps.value),isFocused:false},r.setInputValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return r.setState({input:e})},r.getValue=function(){return r.refs.field.value},r.handleBlur=function(e){r.setState({isFocused:false});if(s(r.props.inputProps.onBlur)===true){r.props.inputProps.onBlur(e)}},r.handleFocus=function(e){r.setState({isFocused:true});if(s(r.props.inputProps.onFocus)===true){r.props.inputProps.onFocus(e)}},r.handleChange=function(e){if(r.state.isControlled===false){r.setInputValue(e.target.value)}if(s(r.props.inputProps.onChange)===true){r.props.inputProps.onChange(e)}},n),h(r,o)}l(t,[{key:"componentWillMount",value:function e(){if(this.state.isControlled===true){return this.setInputValue(this.props.inputProps.value)}this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function e(t){if(t.inputProps.value!==this.props.inputProps.value){this.setInputValue(t.inputProps.value)}}},{key:"setValue",value:function e(t){this.setInputValue(t);this.refs.field.value=t;if(this.state.isControlled===true){this.refs.field.dispatchEvent(new Event("input",{bubbles:true}));this.refs.field.dispatchEvent(new Event("change",{bubbles:true}))}}},{key:"getPlaceholderText",value:function e(){var t=this.state.input!=="";var n=this.props.hidePlaceholderOnFocus===true?this.state.isFocused===false&&t===false:t===false;return n?this.props.inputProps.placeholder:""}},{key:"renderPlaceholder",value:function e(){return r.createElement("div",{ref:"placeholder",className:"b-input-placeholder b-input"},this.getPlaceholderText())}},{key:"render",value:function e(){var n=this.props;return r.createElement("div",c({},i(n,t.internalKeys),{ref:"wrapper",className:B("b-input-wrapper",n.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),r.createElement("input",c({},n.inputProps,{ref:"field",className:B("b-input",n.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})))}}]);return t}(r.PureComponent);H.propTypes={hidePlaceholderOnFocus:t.PropTypes.bool,inputProps:t.PropTypes.shape({defaultValue:t.PropTypes.string,onBlur:t.PropTypes.func,onFocus:t.PropTypes.func,onChange:t.PropTypes.func,placeholder:t.PropTypes.string,type:t.PropTypes.string,value:t.PropTypes.string})};H.defaultProps={hidePlaceholderOnFocus:true,inputProps:{type:"text"}};H.internalKeys=Object.keys(H.defaultProps);var U=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){
var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});function $(e,t){return Object.keys(t).reduce(function(t,n){if(n in e){t[n]=e[n]}return t},{})}var z=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"render",value:function e(){var n=this;var o=this.props;return r.createElement(I,o.portalProps,r.createElement("div",c({},i(o,t.internalKeys),{ref:function e(t){return n.$modal=t},className:U("b-modal-wrapper",o.className)}),r.createElement("div",c({},o.maskProps,{className:U("b-modal-mask",o.maskProps.className)})),r.createElement(S,c({},$(o,S.defaultProps),o.modalProps,{className:U("b-modal",o.modalProps.className)}),o.children)))}}]);return t}(r.PureComponent);z.propTypes=c({},S.propTypes,{maskProps:t.PropTypes.object,modalProps:t.PropTypes.object,portalProps:t.PropTypes.shape(I.propTypes)});z.defaultProps=c({},S.defaultProps,{captureFocus:true,maskProps:{},modalProps:{},portalProps:{}});z.internalKeys=Object.keys(z.defaultProps);var X=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Z=1/0;var J=1.7976931348623157e308;var q=0/0;var Y="[object Symbol]";var G=/^\s+|\s+$/g;var Q=/^[-+]0x[0-9a-f]+$/i;var ee=/^0b[01]+$/i;var te=/^0o[0-7]+$/i;var ne=parseInt;var re=Object.prototype;var oe=re.toString;function se(e){return typeof e=="number"&&e==ue(e)}function ie(e){var t=typeof e==="undefined"?"undefined":a(e);return!!e&&(t=="object"||t=="function")}function ae(e){return!!e&&(typeof e==="undefined"?"undefined":a(e))=="object"}function pe(e){return(typeof e==="undefined"?"undefined":a(e))=="symbol"||ae(e)&&oe.call(e)==Y}function le(e){if(!e){return e===0?e:0}e=ce(e);if(e===Z||e===-Z){var t=e<0?-1:1;return t*J}return e===e?e:0}function ue(e){var t=le(e),n=t%1;return t===t?n?t-n:t:0}function ce(e){if(typeof e=="number"){return e}if(pe(e)){return q}if(ie(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=ie(t)?t+"":t}if(typeof e!="string"){return e===0?e:+e}e=e.replace(G,"");var n=ee.test(e);return n||te.test(e)?ne(e.slice(2),n?2:8):Q.test(e)?q:+e}var de=se;var fe=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var he=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={indexOfOptionInFocus:null},r.handleKeyDown=function(e){var t=e.key;var n=r.state.indexOfOptionInFocus;if(t==="ArrowLeft"){r.setFocus(r.getPreviousOptionIndex(n));e.preventDefault()}else if(t==="ArrowRight"){r.setFocus(r.getNextOptionIndex(n));e.preventDefault()}else if(t==="Enter"){r.handleOptionClick(r.props.options[n]);e.preventDefault()}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"currentValue",value:function e(){var t=void 0;this.props.options.some(function(e){if(e.selected){t=e.value;return true}});return t}},{key:"setFocus",value:function e(t){n.findDOMNode(this.refs["option_$"+t]).focus()}},{key:"getNextOptionIndex",value:function e(t){var n=t+1;return n<this.props.options.length?n:0}},{key:"getPreviousOptionIndex",value:function e(t){var n=t-1;return n<0?this.props.options.length-1:n}},{key:"handleOptionBlur",value:function e(t,n){if(this.state.indexOfOptionInFocus===this.props.options.indexOf(t)){this.setState({indexOfOptionInFocus:null})}if(s(t.onBlur)){t.onBlur(n)}}},{key:"handleOptionClick",value:function e(t,n){this.props.onOptionSelected(t.value);if(s(t.onClick)){t.onClick(n)}}},{key:"handleOptionFocus",value:function e(t,n){this.setState({indexOfOptionInFocus:this.props.options.indexOf(t)});if(s(t.onFocus)){t.onFocus(n)}}},{key:"renderOptions",value:function e(){var n=this;return this.props.options.map(function(e,o){return r.createElement(k,c({},i(e,t.internalChildKeys),{role:"radio","aria-checked":String(e.selected),ref:"option_$"+o,key:e.value,className:fe("b-segmented-control-option",e.className,{"b-segmented-control-option-selected":e.selected}),tabIndex:e.selected?"0":"-1",onBlur:n.handleOptionBlur.bind(n,e),onPressed:n.handleOptionClick.bind(n,e),onFocus:n.handleOptionFocus.bind(n,e)}),e.content)})}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",role:"radiogroup",className:fe("b-segmented-control",this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions())}}]);return t}(r.PureComponent);he.propTypes={onOptionSelected:t.PropTypes.func,options:function e(t){if(t.options.length<2){throw new Error("Must provide at least two options.")}var n=t.options.some(function(e){if(!("selected"in e)){return true}});if(n){throw new Error("Must provide a `selected` prop for each option.")}var r=false;var o=t.options.some(function(e){if(e.selected){if(r){return true}r=true}});if(o){throw new Error("Encountered multiple options with `selected: true`. There can be only one.")}if(t.options.some(function(e){return typeof e.value==="undefined"})){throw new Error("Must provide a `value` prop for each option.")}}};he.defaultProps={onOptionSelected:b,options:[]};he.internalKeys=Object.keys(he.defaultProps);he.internalChildKeys=["content","value","selected"];var ye=function e(t){return t};var me=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),r.state={currentPage:r.props.initialPage,targetIndex:(r.props.initialPage-1)*r.props.numItemsPerPage},r.currentPage=function(){return r.state.currentPage},r.getPageForIndex=function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:r.props.numItemsPerPage;return Math.ceil((e+1)/t)},r.totalPages=function(){return Math.ceil(r.props.totalItems/r.props.numItemsPerPage)},r.firstVisibleItemIndex=function(){return(r.currentPage()-1)*r.props.numItemsPerPage},r.pageToIndex=function(e){if(e<0||e>=r.props.totalItems){return new Error("Cannot page to invalid index "+e+".")}r.setState({currentPage:r.getPageForIndex(e),targetIndex:e})},r.handleClick=function(e){var n=void 0;switch(e){case t.controls.FIRST:n=0;break;case t.controls.PREVIOUS:n=r.firstVisibleItemIndex()-r.props.numItemsPerPage;break;case t.controls.NEXT:n=r.firstVisibleItemIndex()+r.props.numItemsPerPage;break;case t.controls.LAST:n=r.props.totalItems-1;break;default:n=parseInt(e,10)*r.props.numItemsPerPage-1}r.setState({currentPage:r.getPageForIndex(n),targetIndex:n})},n),h(r,o)}l(t,[{key:"componentDidUpdate",value:function e(t,r){if(r.currentPage!==this.currentPage()){n.findDOMNode(this.refs.item_0).focus()}}},{key:"componentWillReceiveProps",value:function e(){var t=this;var n=this.props;this.setState(function(e,r){if(r.identifier!==n.identifier){return{currentPage:1,targetIndex:0}}return{currentPage:t.getPageForIndex(e.targetIndex,r.numItemsPerPage),targetIndex:e.targetIndex}})}},{key:"createPageButtonOptions",value:function e(){var n=[];var r=this.currentPage();var o=this.props.numPageToggles;var i=this.totalPages();var a=r-(r-1)%o;var p=Math.min(a+o-1,i);if(this.props.showPaginationState){n.push({selected:false,content:s(this.props.showPaginationState)?this.props.showPaginationState(r,i):r+" of "+i,value:"",disabled:true,className:"b-pagination-control b-pagination-control-state"})}if(this.props.showJumpToFirst){n.push({selected:false,content:this.props.jumpToFirstControlContent,value:t.controls.FIRST,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-first"})}n.push({selected:false,content:this.props.previousPageControlContent,value:t.controls.PREVIOUS,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-previous"});for(var l=a;l<=p;l++){n.push({className:"b-pagination-control","data-page-number":l,selected:l===this.currentPage(),content:l,value:l})}n.push({selected:false,content:this.props.nextPageControlContent,value:t.controls.NEXT,disabled:this.currentPage()===i,className:"b-pagination-control b-pagination-control-next"});if(this.props.showJumpToLast){n.push({selected:false,content:this.props.jumpToLastControlContent,value:t.controls.LAST,disabled:this.currentPage()===i,className:"b-pagination-control b-pagination-control-last"})}if(this.props.customControlContent){n.push({selected:false,content:this.props.customControlContent,value:w(),disabled:true,className:"b-pagination-control b-pagination-control-custom"})}return n}},{key:"generateItems",value:function e(){var t=[];var n=this.firstVisibleItemIndex();var r=Math.min(this.props.totalItems,n+this.props.numItemsPerPage)-1;for(var o=n;o<=r;o+=1){t.push({data:this.props.getItem(o)})}return t}},{key:"renderItems",value:function e(){var t=this;var n=this.props.listWrapperProps;var o=this.props.numItemsPerPage*(this.currentPage()-1);return r.createElement(y,c({},n,{ref:"itemList",className:X("b-pagination-items",n.className)}),this.generateItems().map(function(e,n){return r.createElement(P,{ref:"item_"+n,key:n,className:X("b-pagination-item",{"b-pagination-item-even":n%2===0,"b-pagination-item-odd":n%2!==0}),convertToJSXFunc:t.props.itemToJSXConverterFunc,data:e.data,"data-pagination-index":o+n,loadingContent:t.props.itemLoadingContent})}))}},{key:"renderControls",value:function e(t){if(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage){return}var n=this.props.toggleWrapperProps;var o=t.toLowerCase();var s=o[0].toUpperCase()+o.slice(1);return r.createElement(he,c({},n,{ref:"segmentedControl"+s,className:X("b-pagination-controls",n.className,u({},"b-pagination-controls-"+o,true)),options:this.createPageButtonOptions(),onOptionSelected:this.handleClick}))}},{key:"renderView",value:function e(){var n=this.props;var o=t.positions;return r.createElement("div",{ref:"paginatedView",className:"b-pagination"},n.position===o.ABOVE||n.position===o.BOTH?this.renderControls(o.ABOVE):b,n.before,this.renderItems(),n.after,n.position===o.BELOW||n.position===o.BOTH?this.renderControls(o.BELOW):b)}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:X("b-pagination-wrapper",this.props.className)}),this.renderView())}}]);return t}(r.PureComponent);me.controls={FIRST:"FIRST",PREVIOUS:"PREVIOUS",NEXT:"NEXT",LAST:"LAST"};me.positions={ABOVE:"ABOVE",BELOW:"BELOW",BOTH:"BOTH"};me.propTypes={after:t.PropTypes.node,before:t.PropTypes.node,customControlContent:t.PropTypes.node,getItem:t.PropTypes.func,hidePagerIfNotNeeded:t.PropTypes.bool,identifier:t.PropTypes.string.isRequired,initialPage:function e(t){if(de(t.initialPage)===false){return new Error("`initialPage` must be an integer.")}var n=Math.ceil(t.totalItems/t.numItemsPerPage);if(t.initialPage<1||t.initialPage>n){return new Error("`initialPage` must be between 1 and "+n+".")}},itemLoadingContent:t.PropTypes.node,itemToJSXConverterFunc:t.PropTypes.func,jumpToFirstControlContent:t.PropTypes.node,jumpToLastControlContent:t.PropTypes.node,listWrapperProps:t.PropTypes.object,nextPageControlContent:t.PropTypes.node,numItemsPerPage:function e(t){if(de(t.numItemsPerPage)===false){return new Error("`numItemsPerPage` must be an integer.")}else if(t.numItemsPerPage<1){return new Error("`numItemsPerPage` must be greater than zero.")}},numPageToggles:t.PropTypes.number,position:t.PropTypes.oneOf(Object.keys(me.positions)),previousPageControlContent:t.PropTypes.node,showJumpToFirst:t.PropTypes.bool,showJumpToLast:t.PropTypes.bool,showPaginationState:t.PropTypes.oneOfType([t.PropTypes.bool,t.PropTypes.func]),toggleWrapperProps:t.PropTypes.object,totalItems:t.PropTypes.number.isRequired};me.defaultProps={after:null,before:null,customControlContent:null,getItem:b,hidePagerIfNotNeeded:false,identifier:w(),initialPage:1,itemLoadingContent:null,itemToJSXConverterFunc:ye,jumpToFirstControlContent:"« First",jumpToLastControlContent:"Last »",listWrapperProps:{},nextPageControlContent:"Next ›",numItemsPerPage:10,numPageToggles:5,position:me.positions.ABOVE,previousPageControlContent:"‹ Previous",showJumpToFirst:true,showJumpToLast:true,showPaginationState:true,toggleWrapperProps:{},totalItems:null};me.internalKeys=Object.keys(me.defaultProps);var ve=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Pe=function e(){var t=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"];for(var n=0,r=t.length;n<r;n++){if(t[n]in document.documentElement.style){return t[n]}}return false}();function ge(e){switch(e[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function be(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}var ke=/\s?b-popover-(anchor|self)-(start|middle|end)/g;var Te=r.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},r.createElement("g",null,r.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),r.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"})));var we=0;var Oe=1;var Ce=2;var xe=[{name:"NNW",ax:we,ay:we,dx:we,dy:Ce},{name:"N",ax:Oe,ay:we,dx:Oe,dy:Ce},{name:"NNE",ax:Ce,ay:we,dx:Ce,dy:Ce},{name:"ENE",ax:Ce,ay:we,dx:we,dy:we},{name:"E",ax:Ce,ay:Oe,dx:we,dy:Oe},{name:"ESE",ax:Ce,ay:Ce,dx:we,dy:Ce},{name:"SSE",ax:Ce,ay:Ce,dx:Ce,dy:we},{name:"S",ax:Oe,ay:Ce,dx:Oe,dy:we},{name:"SSW",ax:we,ay:Ce,dx:we,dy:we},{name:"WSW",ax:we,ay:Ce,dx:Ce,dy:Ce},{name:"W",ax:we,ay:Oe,dx:Ce,dy:Oe},{name:"WNW",ax:we,ay:we,dx:Ce,dy:we}];var Ee=function(e){d(t,e);function t(){var e;var r,o,s;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return s=(r=(o=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),o),o.align=function(){var e=o.props.anchor instanceof HTMLElement?o.props.anchor:n.findDOMNode(o.props.anchor);var r=o.props.caretAnchor?o.props.caretAnchor instanceof HTMLElement?o.props.caretAnchor:n.findDOMNode(o.props.caretAnchor):e;o.cacheViewportCartography(e,r);var s=o.getValidAlignmentPreset();var i=t.getAlignmentClassFragment;o.dialog.$wrapper.className=o.dialog.$wrapper.className.replace(ke,"")+(" b-popover-anchor-x-"+i(s.ax))+(" b-popover-anchor-y-"+i(s.ay))+(" b-popover-self-x-"+i(s.dx))+(" b-popover-self-y-"+i(s.dy));var a=Math.round(o.getNextDialogXPosition(s));var p=Math.round(o.getNextDialogYPosition(s));o.dialog.$wrapper.style[Pe]="translate("+a+"px, "+p+"px)";var l=s.name[0];var u=l==="N"||l==="S";o.$caret.style[u?"left":"top"]=Math.round(o.getNextCaretXPosition(s))+"px";o.$caret.style[u?"top":"left"]="0px"},r),h(o,s)}l(t,[{key:"cacheViewportCartography",value:function e(t,n){var r=document.body.getBoundingClientRect();this.anchorRect=t.getBoundingClientRect();this.caretAnchorRect=n.getBoundingClientRect();this.bodyLeft=r.left*-1;this.bodyTop=r.top*-1}},{key:"getNextCaretXPosition",value:function e(t){var n=t.name,r=t.ax,o=t.dx,s=t.ay,i=t.dy;var a=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var p=0;if(n[0]==="N"||n[0]==="S"){p=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2;if(o===Oe){p+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2}else if(o===Ce){p+=this.dialog.$wrapper.clientWidth-this.anchorRect.width}}else{p=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2;if(i===Oe){p+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2}else if(i===Ce){p+=this.dialog.$wrapper.clientHeight-this.anchorRect.height}}p-=a.clientWidth/2;return p}},{key:"getNextDialogXPosition",value:function e(t){var n=t.ax,r=t.dx;var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var s=this.anchorRect.left+this.bodyLeft;switch(n){case Oe:s+=this.anchorRect.width/2;break;case Ce:s+=this.anchorRect.width;break}switch(r){case Oe:s-=o.clientWidth/2;break;case Ce:s-=o.clientWidth;break}return s}},{key:"getNextDialogYPosition",value:function e(t){var n=t.ay,r=t.dy;var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var s=this.anchorRect.top+this.bodyTop;switch(n){case Oe:s+=this.anchorRect.height/2;break;case Ce:s+=this.anchorRect.height;break}switch(r){case Oe:s-=o.clientHeight/2;break;case Ce:s-=o.clientHeight;break}return s}},{key:"isPositionValid",value:function e(t,n,r){var o=t.name,s=t.ax,i=t.ay,a=t.dx,p=t.dy;var l=o[0];if(l==="N"||l==="S"){if(l==="N"&&this.anchorRect.top-n<0){return false}else if(l==="S"&&this.anchorRect.bottom+n>window.innerHeight){return false}if(s===we){return!(this.anchorRect.left+r>window.innerWidth||this.anchorRect.left<0)}else if(s===Oe){return!(this.anchorRect.left-r/2<0||this.anchorRect.left+r/2>window.innerWidth)}return!(this.anchorRect.left-r<0||this.anchorRect.right>window.innerWidth)}else if(l==="W"||l==="E"){if(l==="W"&&this.anchorRect.left-r<0){return false}else if(l==="E"&&this.anchorRect.right+r>window.innerWidth){return false}if(i===we){return!(this.anchorRect.top+n>window.innerHeight||this.anchorRect.top<0)}else if(i===Oe){return!(this.anchorRect.top+this.anchorRect.height/2-n/2<0||this.anchorRect.top+this.anchorRect.height/2+n/2>window.innerHeight)}return!(this.anchorRect.top-n<0||this.anchorRect.bottom>window.innerHeight)}return true}},{key:"getValidAlignmentPreset",value:function e(){var t=this;var n=this.dialog.$wrapper.clientWidth;var r=this.dialog.$wrapper.clientHeight;var o=xe.filter(function(e){return t.isPositionValid(e,r,n)});if(o.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!o.length){return this.props.preset}var s=o.filter(function(e){var n=e.name;return n[0]===t.props.preset.name[0]});if(s.length){return s[0]}var i=ge(this.props.preset.name);var a=o.filter(function(e){var t=e.name;return t[0]===i});if(a.length){return a[0]}return o[0]}},{key:"componentDidMount",value:function e(){this.align();window.addEventListener("resize",this.align,true)}},{key:"componentDidUpdate",value:function e(){this.align()}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("resize",this.align,true)}},{key:"render",value:function e(){var n=this;var o=this.props;return r.createElement(I,o.portalProps,r.createElement(S,c({},i(o,t.internalKeys),{ref:function e(t){return n.dialog=t},before:r.cloneElement(o.caretComponent,{ref:function e(t){return n.$caret=t},className:ve("b-popover-caret",o.caretComponent.props.className)}),wrapperProps:c({},o.wrapperProps,{className:ve("b-popover",o.wrapperProps.className)})})))}}],[{key:"getAlignmentClassFragment",value:function e(t){switch(t){case we:return"start";case Oe:return"middle";case Ce:return"end"}}}]);return t}(r.PureComponent);Ee.preset=xe.reduce(function(e,t){return e[t.name]=t,e},{});Ee.propTypes=c({},S.propTypes,{anchor:t.PropTypes.oneOfType([t.PropTypes.instanceOf(HTMLElement),t.PropTypes.element]).isRequired,autoReposition:t.PropTypes.bool,caretAnchor:t.PropTypes.oneOfType([t.PropTypes.instanceOf(HTMLElement),t.PropTypes.element]),caretComponent:t.PropTypes.element,portalProps:t.PropTypes.shape(I.PropTypes),preset:t.PropTypes.oneOf([Ee.preset.NNW,Ee.preset.N,Ee.preset.NNE,Ee.preset.ENE,Ee.preset.E,Ee.preset.ESE,Ee.preset.SSE,Ee.preset.S,Ee.preset.SSW,Ee.preset.WSW,Ee.preset.W,Ee.preset.WNW]),wrapperProps:t.PropTypes.object});Ee.defaultProps=c({},S.defaultProps,{anchor:undefined,autoReposition:true,captureFocus:false,caretAnchor:undefined,caretComponent:Te,closeOnEscKey:true,closeOnOutsideClick:true,closeOnOutsideScroll:true,portalProps:{},preset:Ee.preset.S,wrapperProps:{}});Ee.internalKeys=be(Object.keys(Ee.defaultProps),S.internalKeys);var Ie=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Ne=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={expanded:r.props.expanded},r.dispatchCallback=function(){r.props[r.state.expanded?"onExpand":"onHide"]()},r.handleClick=function(e){r.setState({expanded:!r.state.expanded},r.dispatchCallback);if(s(r.props.toggleProps.onClick)){r.props.toggleProps.onClick(e)}},r.handleKeyDown=function(e){switch(e.key){case"Enter":e.preventDefault();r.setState({expanded:!r.state.expanded},r.dispatchCallback)}if(s(r.props.toggleProps.onKeyDown)){r.props.toggleProps.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"componentWillReceiveProps",value:function e(t){if(t.expanded!==this.props.expanded){this.setState({expanded:t.expanded},this.dispatchCallback)}}},{key:"renderContent",value:function e(){if(this.state.expanded){return r.createElement("div",{ref:"content",className:"b-disclosure-content"},s(this.props.children)?this.props.children():this.props.children)}}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"wrapper",className:Ie("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),r.createElement("div",c({},this.props.toggleProps,{ref:"toggle",className:Ie("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent())}}]);return t}(r.PureComponent);Ne.propTypes={children:t.PropTypes.any,component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),expanded:t.PropTypes.bool,onExpand:t.PropTypes.func,onHide:t.PropTypes.func,teaser:t.PropTypes.node,teaserExpanded:t.PropTypes.node,toggleProps:t.PropTypes.object};Ne.defaultProps={children:null,component:"div",expanded:false,onExpand:b,onHide:b,teaser:null,teaserExpanded:null,toggleProps:{}};Ne.internalKeys=Object.keys(Ne.defaultProps);var Se=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Ae=function(e){d(t,e);function t(){p(this,t);return h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}l(t,[{key:"renderLabel",value:function e(){if(this.props.label){return r.createElement("div",c({},this.props.labelProps,{ref:"label",className:Se("b-progress-label",this.props.labelProps.className)}),this.props.label)}}},{key:"renderCancel",value:function e(){if(this.props.onCancel){return r.createElement(k,c({},this.props.cancelProps,{ref:"cancel",className:Se("b-progress-cancel",this.props.cancelProps.className),onPressed:this.props.onCancel}))}}},{key:"renderProgress",value:function e(){return r.createElement("div",c({},this.props.progressProps,{ref:"progress",className:Se("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":typeof this.props.progress==="undefined"}),role:"presentation",style:c({},this.props.progressProps.style,u({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function e(){return r.createElement(this.props.component,c({},i(this.props,t.internalKeys),{ref:"wrapper",className:Se("b-progress-wrapper",this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel())}}]);return t}(r.PureComponent);Ae.propTypes={cancelProps:t.PropTypes.object,component:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.func]),label:t.PropTypes.node,labelProps:t.PropTypes.object,onCancel:t.PropTypes.func,progress:t.PropTypes.oneOfType([t.PropTypes.string,t.PropTypes.number]),progressProps:t.PropTypes.object,tweenProperty:t.PropTypes.string};Ae.defaultProps={cancelProps:{},component:"div",label:null,labelProps:{},onCancel:null,progress:undefined,progressProps:{},tweenProperty:"width"};Ae.internalKeys=Object.keys(Ae.defaultProps);var je=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Re=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.uuid=w(),r.handleChange=function(e){if(e.target.checked){r.props.onSelected(e.target.value)}if(s(r.props.inputProps.onChange)){r.props.inputProps.onChange(e)}},n),h(r,o)}l(t,[{key:"renderInput",value:function e(){return r.createElement("input",c({},this.props.inputProps,{ref:"input",type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:je("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function e(){if(this.props.label){return r.createElement("label",c({},this.props.labelProps,{ref:"label",className:je("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label)}}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:je("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(r.PureComponent);Re.propTypes={inputProps:t.PropTypes.object,label:t.PropTypes.node,labelProps:t.PropTypes.object,name:t.PropTypes.string.isRequired,onSelected:t.PropTypes.func,selected:t.PropTypes.bool,value:t.PropTypes.string.isRequired};Re.defaultProps={inputProps:{},label:null,labelProps:{},name:"",onSelected:b,selected:false,value:""};Re.internalKeys=Object.keys(Re.defaultProps);var De=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Fe=m(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":a(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var i in o){if(t.call(o,i)&&o[i]){e.push(i)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&a(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var _e=/[|\\{}()[\]^$+*?.]/g;var Le=function e(t){if(typeof t!=="string"){throw new TypeError("Expected a string")}return t.replace(_e,"\\$&")};var Me=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r),Ke.call(r),n),h(r,o)}l(t,[{key:"componentWillMount",value:function e(){if(this.props.inputProps.value||this.props.inputProps.defaultValue){this.computeMatches()}}},{key:"componentDidMount",value:function e(){this.mounted=true;if(this.state.selectedEntityIndex>=0){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(t.entities!==this.props.entities){this.computeMatches(t.entities)}if(t.inputProps.value!==this.props.inputProps.value){this.updateInputState(t.inputProps.value);this.computeMatches()}}},{key:"componentDidUpdate",value:function e(t,n){if(this.state.entityMatchIndexes.length&&!n.entityMatchIndexes.length){this.refs.matches.scrollTop=0}if(this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==t.entities[n.selectedEntityIndex]){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"handleMatchClick",value:function e(t){this.setState({selectedEntityIndex:t},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function e(t){var n=this.state.entityMatchIndexes;var r=n.length;var o=n.indexOf(this.state.selectedEntityIndex)+t;if(r){if(o<0){o=r-1}else if(o>=r){o=0}var s=n[o];var i=this.refs.matches;var a=i.scrollTop+i.clientHeight;var p=this.refs["match_$"+s];var l=p.offsetTop;var u=l+p.clientHeight;if(u>=a){i.scrollTop+=u-a;
}else if(l<=i.scrollTop){i.scrollTop=l}this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function e(){var t=this.getInputNode();return t.selectionStart===t.selectionEnd&&t.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function e(t,n){var o=n.text;var s=o.split(new RegExp("("+Le(t)+")","ig"));var i=t.toLowerCase();var a=s.length;var p=-1;while(++p<a){if(s[p].toLowerCase()===i){s[p]=r.createElement("mark",{key:p,className:"b-typeahead-match-highlight"},s[p])}}return s}},{key:"markStartsWithMatchSubstring",value:function e(t,n){var o=n.text;var s=t.toLowerCase();var i=o.toLowerCase().indexOf(s);var a=i+s.length;return[r.createElement("span",{key:"0"},o.slice(0,i)),r.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},o.slice(i,a)),r.createElement("span",{key:"2"},o.slice(a))]}},{key:"getMarkingFunction",value:function e(){if(V(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.markStartsWithMatchSubstring}return this.markFuzzyMatchSubstring}else if(s(this.props.algorithm.marker)){return this.props.algorithm.marker}if(this.warnedMarker===undefined){this.warnedMarker=true;console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")}return this.markFuzzyMatchSubstring}},{key:"getFuzzyMatchIndexes",value:function e(t,n){var r=t.toLowerCase();return n.reduce(function e(t,n,o){return n.text.toLowerCase().indexOf(r)!==-1?t.push(o)&&t:t},[])}},{key:"getStartsWithMatchIndexes",value:function e(t,n){var r=t.toLowerCase();return n.reduce(function e(t,n,o){if(n.text.toLowerCase().indexOf(r)===0){t.push(o)}return t},[])}},{key:"getMatchingFunction",value:function e(){if(V(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.getStartsWithMatchIndexes}return this.getFuzzyMatchIndexes}else if(s(this.props.algorithm.matcher)){return this.props.algorithm.matcher}if(this.warnedMatcher===undefined){this.warnedMatcher=true;console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")}return this.getFuzzyMatchIndexes}},{key:"computeMatches",value:function e(t){var n=this;this.setState(function(e,r){var o=t||r.entities;var s=e.input;var i=s===""?[]:n.getMatchIndexes(s,o);return{selectedEntityIndex:i.length?i[0]:-1,entityMatchIndexes:i}})}},{key:"renderNotification",value:function e(){return r.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function e(){if(this.props.hint){var t=this.state.input;var n=this.getSelectedEntityText();var o="";if(n&&n.toLowerCase().indexOf(t.toLowerCase())===0){o=n.replace(new RegExp(t,"i"),t)}return r.createElement("div",c({},this.props.hintProps,{ref:"hint",className:Fe("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),o)}}},{key:"renderMatches",value:function e(){var t=this;if(this.state.entityMatchIndexes.length){var n=this.props.matchWrapperProps;return r.createElement("div",c({},n,{ref:"matches",className:Fe("b-typeahead-match-wrapper",n.className)}),this.state.entityMatchIndexes.map(function(e){var n=t.props.entities[e];var o=n.className,s=n.text,i=f(n,["className","text"]);return r.createElement("div",c({},i,{ref:"match_$"+e,className:Fe("b-typeahead-match",o,{"b-typeahead-match-selected":t.state.selectedEntityIndex===e}),key:s,onClick:t.handleMatchClick.bind(t,e)}),t.markMatchSubstring(t.state.input,n))}))}}},{key:"render",value:function e(){var n=this.props,o=this.state;return r.createElement("div",c({},i(n,t.internalKeys),{ref:"wrapper",className:Fe("b-typeahead-wrapper",n.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),r.createElement(H,c({},$(n,H.defaultProps),{ref:"input","aria-controls":o.id,inputProps:c({},n.inputProps,{className:Fe("b-typeahead",n.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]);return t}(r.PureComponent);Me.mode={STARTS_WITH:w(),FUZZY:w()};Me.propTypes=c({},H.propTypes,{algorithm:t.PropTypes.oneOfType([t.PropTypes.oneOf([Me.mode.STARTS_WITH,Me.mode.FUZZY]),t.PropTypes.shape({marker:t.PropTypes.oneOfType([t.PropTypes.func,t.PropTypes.oneOf([Me.mode.STARTS_WITH,Me.mode.FUZZY])]),matcher:t.PropTypes.oneOfType([t.PropTypes.func,t.PropTypes.oneOf([Me.mode.STARTS_WITH,Me.mode.FUZZY])])})]),clearOnSelection:t.PropTypes.bool,entities:t.PropTypes.arrayOf(t.PropTypes.shape({text:t.PropTypes.string.isRequired})),hint:t.PropTypes.bool,hintProps:t.PropTypes.object,matchWrapperProps:t.PropTypes.object,offscreenClass:t.PropTypes.string,onComplete:t.PropTypes.func,onEntityHighlighted:t.PropTypes.func,onEntitySelected:t.PropTypes.func});Me.defaultProps=c({},H.defaultProps,{algorithm:Me.mode.FUZZY,clearOnSelection:false,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:b,onEntityHighlighted:b,onEntitySelected:b});Me.internalKeys=Object.keys(Me.defaultProps);var Ke=function e(){var t=this;this.state={entityMatchIndexes:[],id:w(),isControlled:V(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1};this.mounted=false;this.updateInputState=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return t.setState({input:e})};this.getSelectedEntityText=function(){var e=t.props.entities[t.state.selectedEntityIndex];return e?e.text:""};this.resetMatches=function(){if(t.mounted){t.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})}};this.getInputNode=function(){return t.refs.input.refs.field};this.select=function(){var e=t.getInputNode();e.selectionStart=0;e.selectionEnd=t.getValue().length};this.focus=function(){return t.getInputNode().focus()};this.getValue=function(){return t.refs.input.getValue()};this.setValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";t.refs.input.setValue(e);t.updateInputState(e);t.resetMatches();t.focus()};this.setValueWithSelectedEntity=function(){t.props.onEntitySelected(t.state.selectedEntityIndex);if(t.props.clearOnSelection){t.setValue("")}else{t.setValue(t.getSelectedEntityText())}window.setTimeout(t.resetMatches,0)};this.markMatchSubstring=function(){return t.getMarkingFunction().apply(undefined,arguments)};this.getMatchIndexes=function(){return t.getMatchingFunction().apply(undefined,arguments)};this.handleChange=function(e){if(t.state.isControlled===false){t.updateInputState(e.target.value);t.computeMatches()}if(s(t.props.inputProps.onChange)){t.props.inputProps.onChange(e)}};this.handleKeyDown=function(e){switch(e.key){case"ArrowLeft":if(e.target.selectionStart>1){e.stopPropagation()}break;case"Tab":case"ArrowRight":if(t.state.selectedEntityIndex!==-1&&t.cursorAtEndOfInput()&&t.getInputNode()===e.target&&!e.shiftKey){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}break;case"ArrowUp":e.nativeEvent.preventDefault();t.selectMatch(-1);t.focus();break;case"ArrowDown":e.nativeEvent.preventDefault();t.selectMatch(1);t.focus();break;case"Escape":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){t.resetMatches()}break;case"Enter":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}else{t.props.onComplete(t.state.input,e)}break}if(s(t.props.onKeyDown)){t.props.onKeyDown(e)}}};var We=function e(t){return t[0]};var Be=function e(t){return t[t.length-1]};var Ve=function(e){d(t,e);function t(){var e;var n,r,o;p(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++){a[l]=arguments[l]}return o=(n=(r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.focus=function(){return r.refs.typeahead.focus()},r.getInputNode=function(){return r.refs.typeahead.getInputNode()},r.getSelectedEntityText=function(){return r.refs.typeahead.getSelectedEntityText()},r.getValue=function(){return r.refs.typeahead.getValue()},r.select=function(){return r.refs.typeahead.select()},r.setValue=function(e){return r.refs.typeahead.setValue(e)},r.add=function(e){if(r.props.tokens.indexOf(e)===-1){r.props.handleAddToken(e)}},r.handleInputClick=function(e){r.clearSelection();if(s(r.props.inputProps.onClick)){r.props.inputProps.onClick(e)}},r.handleInputFocus=function(e){r.clearSelection();if(s(r.props.inputProps.onFocus)){r.props.inputProps.onFocus(e)}},r.handleKeyDown=function(e){switch(e.which){case 37:r.selectPreviousToken(e.shiftKey);break;case 39:r.selectNextToken(e.shiftKey);break;case 8:if(r.props.tokensSelected.length){r.remove(r.props.tokensSelected);r.focus()}break;case 65:if(e.metaKey){e.preventDefault();r.focus();r.select();r._suppressNextTokenSelection=true;r.props.handleNewSelection(r.props.tokens)}}if(s(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),h(r,o)}l(t,[{key:"componentDidUpdate",value:function e(t){var n=t.tokensSelected;var r=this.props.tokensSelected;if(this.props.tokens.length>t.tokens.length){this.setValue("")}if(this._suppressNextTokenSelection){this._suppressNextTokenSelection=false;return}if(n!==r&&r.length!==0){if(r.length===1||r[0]!==n[0]){return this.refs["token_"+r[0]].focus()}else if(Be(r)!==Be(n)){return this.refs["token_"+Be(r)].focus()}this.refs["token_"+r[0]].focus()}}},{key:"remove",value:function e(t){var n=this;var r=(Array.isArray(t)?t:[t]).filter(function(e){return n.props.tokens.indexOf(e)!==-1});if(r.length){this.props.handleRemoveTokens(r)}}},{key:"selectToken",value:function e(t){this.props.handleNewSelection([t])}},{key:"selectTokens",value:function e(t){this.props.handleNewSelection(t)}},{key:"selectPreviousToken",value:function e(t){var n=this.props.tokensSelected;var r=this.props.tokens;if(n.length===1&&We(n)===We(r)){return}if(n.length===0){this.selectToken(Be(r))}else{var o=r[r.indexOf(We(n))-1];this.selectTokens(t?[o].concat(n):[o])}}},{key:"selectNextToken",value:function e(t){var n=this.props.tokensSelected;var r=this.props.tokens;if(n.length===0){return}if(Be(n)===Be(r)){this.clearSelection();this.focus()}else{var o=r[r.indexOf(Be(n))+1];this.selectTokens(t?n.concat(o):[o])}}},{key:"clearSelection",value:function e(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function e(t,n){n.stopPropagation();this.remove(t);this.focus();if(this.props.tokenCloseComponent.props.onClick){this.props.tokenCloseComponent.props.onClick(n)}}},{key:"renderTokenClose",value:function e(t){if(this.props.tokenCloseVisible){return r.cloneElement(this.props.tokenCloseComponent,{className:De("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,t)})}}},{key:"handleTokenKeyDown",value:function e(t,n){switch(n.which){case 13:case 32:this.selectToken(t);n.preventDefault();break;case 8:this.remove(t);this.focus();n.preventDefault();break}}},{key:"renderTokens",value:function e(){var t=this;return r.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(e){return r.createElement("div",{ref:"token_"+e,key:e,className:De("b-tokenfield-token",{"b-tokenfield-token-selected":t.props.tokensSelected.indexOf(e)!==-1}),onClick:t.selectToken.bind(t,e),onKeyDown:t.handleTokenKeyDown.bind(t,e),tabIndex:"0"},t.props.entities[e].text,t.renderTokenClose(e))}))}},{key:"render",value:function e(){return r.createElement("div",c({},i(this.props,t.internalKeys),{ref:"wrapper",className:De("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),r.createElement(Me,c({},$(this.props,Me.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:true,inputProps:c({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]);return t}(r.PureComponent);Ve.propTypes=c({},Me.propTypes,{handleAddToken:t.PropTypes.func,handleRemoveTokens:t.PropTypes.func,handleNewSelection:t.PropTypes.func,tokenCloseComponent:t.PropTypes.element,tokenCloseVisible:t.PropTypes.bool,tokens:t.PropTypes.arrayOf(t.PropTypes.number),tokensSelected:t.PropTypes.arrayOf(t.PropTypes.number)});Ve.defaultProps=c({},Me.defaultProps,{handleAddToken:b,handleRemoveTokens:b,handleNewSelection:b,tokenCloseComponent:r.createElement("div",null,"X"),tokenCloseVisible:true,tokens:[],tokensSelected:[]});Ve.internalKeys=Object.keys(Ve.defaultProps);e.ArrowKeyNavigation=y;e.Async=P;e.Button=k;e.Checkbox=O;e.CheckboxGroup=x;e.Dialog=S;e.FittedText=M;e.Image=W;e.Input=H;e.Modal=z;e.Pagination=me;e.Popover=Ee;e.Portal=I;e.ProgressiveDisclosure=Ne;e.Progress=Ae;e.Radio=Re;e.SegmentedControl=he;e.TokenizedInput=Ve;e.Typeahead=Me})(this.Boundless=this.Boundless||{},React,ReactDOM);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
