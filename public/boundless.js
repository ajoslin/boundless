"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _interopDefault(e){return e&&typeof e==="object"&&"default"in e?e["default"]:e}var React=require("react");var React__default=_interopDefault(React);var ReactDOM=require("react-dom");var ReactDOM__default=_interopDefault(ReactDOM);var isFunction=function(e){return typeof e==="function"};function omitKeysFromSourceObject(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return Object.keys(e).reduce(function n(r,o){if(t.indexOf(o)===-1){r[o]=e[o]}return r},{})}var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol==="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var classCallCheck=function(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}};var createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||false;r.configurable=true;if("value"in r)r.writable=true;Object.defineProperty(e,r.key,r)}}return function(t,n,r){if(n)e(t.prototype,n);if(r)e(t,r);return t}}();var defineProperty=function(e,t,n){if(t in e){Object.defineProperty(e,t,{value:n,enumerable:true,configurable:true,writable:true})}else{e[t]=n}return e};var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n){if(Object.prototype.hasOwnProperty.call(n,r)){e[r]=n[r]}}}return e};var inherits=function(e,t){if(typeof t!=="function"&&t!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof t)}e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}});if(t)Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t};var objectWithoutProperties=function(e,t){var n={};for(var r in e){if(t.indexOf(r)>=0)continue;if(!Object.prototype.hasOwnProperty.call(e,r))continue;n[r]=e[r]}return n};var possibleConstructorReturn=function(e,t){if(!e){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t&&(typeof t==="object"||typeof t==="function")?t:e};var ArrowKeyNavigation=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={activeChildIndex:r.props.defaultActiveChildIndex},r.handleKeyDown=function(e){switch(e.key){case"ArrowUp":if(r.props.mode===t.mode.VERTICAL||r.props.mode===t.mode.BOTH){e.preventDefault();r.moveFocus(-1)}break;case"ArrowLeft":if(r.props.mode===t.mode.HORIZONTAL||r.props.mode===t.mode.BOTH){e.preventDefault();r.moveFocus(-1)}break;case"ArrowDown":if(r.props.mode===t.mode.VERTICAL||r.props.mode===t.mode.BOTH){e.preventDefault();r.moveFocus(1)}break;case"ArrowRight":if(r.props.mode===t.mode.HORIZONTAL||r.props.mode===t.mode.BOTH){e.preventDefault();r.moveFocus(1)}break}if(isFunction(r.props.onKeyDown)){r.props.onKeyDown(e)}},r.handleFocus=function(e){if(e.target.hasAttribute("data-focus-index")){var t=parseInt(e.target.getAttribute("data-focus-index"),10);var n=React__default.Children.toArray(r.props.children)[t];r.setState({activeChildIndex:t});if(n.props.onFocus){n.props.onFocus(e)}}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentDidUpdate",value:function e(t,n){if(this.state.activeChildIndex!==n.activeChildIndex){this.setFocus(this.state.activeChildIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(this.state.activeChildIndex!==0){var n=t.children?React__default.Children.count(t.children):0;if(n===0){this.setState({activeChildIndex:0})}else if(this.state.activeChildIndex>=n){this.setState({activeChildIndex:n-1})}}}},{key:"setFocus",value:function e(t){var n=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:ReactDOM.findDOMNode(this.refs.wrapper)).children[t];if(n&&n.hasAttribute("data-skip")){this.moveFocus(n.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1)}else if(n&&document.activeElement!==n){n.focus()}}},{key:"moveFocus",value:function e(t){var n=this.props.children?React__default.Children.count(this.props.children):0;var r=this.state.activeChildIndex+t;if(r>=n){r=0}else if(r<0){r=n-1}this.setState({activeChildIndex:r})}},{key:"children",value:function e(){var t=this;return React__default.Children.map(this.props.children,function(e,n){return React__default.cloneElement(e,{"data-focus-index":n,"data-skip":parseInt(e.props.tabIndex,10)===-1||undefined,key:e.key||n,tabIndex:t.state.activeChildIndex===n?0:-1})})}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children())}}]);return t}(React__default.PureComponent);ArrowKeyNavigation.mode={HORIZONTAL:"HORIZONTAL",VERTICAL:"VERTICAL",BOTH:"BOTH"};ArrowKeyNavigation.propTypes={component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),defaultActiveChildIndex:React.PropTypes.number,mode:React.PropTypes.oneOf([ArrowKeyNavigation.mode.BOTH,ArrowKeyNavigation.mode.HORIZONTAL,ArrowKeyNavigation.mode.VERTICAL])};ArrowKeyNavigation.defaultProps={component:"div",defaultActiveChildIndex:0,mode:ArrowKeyNavigation.mode.BOTH};ArrowKeyNavigation.internalKeys=Object.keys(ArrowKeyNavigation.defaultProps);function createCommonjsModule(e,t){return t={exports:{}},e(t,t.exports),t.exports}var index=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Async=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.mounted=false,r.state={},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"convertDataToJSXOrWait",value:function e(){var t=this;var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props;var r=n.data;if(r instanceof Promise){this.setState({component:null});return r.then(function(e){if(t.mounted){t.setState(function(t,n){return{component:n.data===r?n.convertToJSXFunc(e):t.component}})}},function(){return t.setState({component:false})})}this.setState({component:n.convertToJSXFunc(r)})}},{key:"fireCallbackIfDataRendered",value:function e(){if(this.state.component){this.props.contentRenderedFunc()}}},{key:"componentWillMount",value:function e(){this.convertDataToJSXOrWait()}},{key:"componentDidMount",value:function e(){this.mounted=true;this.fireCallbackIfDataRendered()}},{key:"componentDidUpdate",value:function e(){this.fireCallbackIfDataRendered()}},{key:"componentWillReceiveProps",value:function e(t){this.convertDataToJSXOrWait(t)}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"getClasses",value:function e(t){return index("b-async",this.props.className,t,{"b-async-error":this.state.component===false,"b-async-loading":this.state.component===null})}},{key:"render",value:function e(){if(this.state.component===null||this.state.component===false){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:this.getClasses()}),this.state.component===null?this.props.loadingContent:this.props.errorContent)}return React__default.cloneElement(this.state.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className)}))}}]);return t}(React__default.PureComponent);Async.propTypes={contentRenderedFunc:React.PropTypes.func,convertToJSXFunc:React.PropTypes.func,data:React.PropTypes.any,errorContent:React.PropTypes.node,loadingContent:React.PropTypes.node};Async.defaultProps={contentRenderedFunc:function e(){},convertToJSXFunc:function e(t){return t},data:null,errorContent:"⚠️",loadingContent:null};Async.internalKeys=Object.keys(Async.defaultProps);var index$1=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});function noop(){}var Button=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.handleClick=function(e){if(r.props.disabled){return}r.toggleState(e);if(isFunction(r.props.onClick)){r.props.onClick(e)}},r.handleKeyDown=function(e){if(r.props.disabled){return}switch(e.key){case"Enter":case"Space":e.preventDefault();r.toggleState(e)}if(isFunction(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"toggleState",value:function e(t){this.props[this.props.pressed?"onUnpressed":"onPressed"](t)}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"button",className:index$1("b-button",this.props.className,{"b-button-pressable":typeof this.props.pressed!=="undefined","b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]);return t}(React__default.PureComponent);Button.propTypes={children:React.PropTypes.node,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),onClick:React.PropTypes.func,onPressed:React.PropTypes.func,onUnpressed:React.PropTypes.func,pressed:React.PropTypes.bool};Button.defaultProps={children:null,component:"button",onClick:noop,onPressed:noop,onUnpressed:noop,pressed:undefined};Button.internalKeys=Object.keys(Button.defaultProps);var index$2=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});function uuid(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(e){return(e^Math.random()*16>>e/4).toString(16)})}var Checkbox=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.id=uuid(),r.handleChange=function(e){if(r.props.inputProps.disabled){return}r.props[!r.props.inputProps.checked?"onChecked":"onUnchecked"](r.props.inputProps.name);if(isFunction(r.props.inputProps.onChange)){r.props.inputProps.onChange(e)}},r.handleClick=function(e){if(r.props.inputProps.disabled){return}r.refs.input.focus();if(isFunction(r.props.inputProps.onClick)){r.props.inputProps.onClick(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentDidMount",value:function e(){if(this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"componentDidUpdate",value:function e(t){if(t.inputProps.indeterminate!==this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"setIndeterminate",value:function e(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function e(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function e(){return React__default.createElement("input",_extends({},omitKeysFromSourceObject(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:index$2("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function e(){if(this.props.label){return React__default.createElement("label",_extends({},this.props.labelProps,{ref:"label",className:index$2("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$2("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(React__default.PureComponent);Checkbox.propTypes={inputProps:React.PropTypes.shape({checked:React.PropTypes.bool,className:React.PropTypes.string,disabled:React.PropTypes.bool,id:React.PropTypes.string,indeterminate:React.PropTypes.bool,onChange:React.PropTypes.func,onClick:React.PropTypes.func,name:React.PropTypes.string,value:React.PropTypes.string}),label:React.PropTypes.node,labelProps:React.PropTypes.object,onChecked:React.PropTypes.func,onUnchecked:React.PropTypes.func};Checkbox.defaultProps={inputProps:{checked:false,indeterminate:false},label:null,labelProps:{},onChecked:noop,onUnchecked:noop};Checkbox.internalKeys=Object.keys(Checkbox.defaultProps);var index$3=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var CheckboxGroup=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"allItemsChecked",value:function e(){return this.props.items.every(function(e){return e.inputProps.checked===true})}},{key:"anyItemsChecked",value:function e(){return this.props.items.some(function(e){return e.inputProps.checked===true})}},{key:"renderSelectAll",value:function e(){if(this.props.selectAll){var t=this.allItemsChecked();var n=this.props.selectAllProps.inputProps;return React__default.createElement(Checkbox,_extends({},this.props.selectAllProps,{ref:"select_all",key:"cb_select_all",className:index$3("b-checkbox-group-selectall",this.props.selectAllProps.className),inputProps:_extends({},n,{checked:t,indeterminate:!t&&this.anyItemsChecked(),name:n&&n.name?n.name:"cb_select_all"}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}}},{key:"renderCheckboxes",value:function e(){var t=this;return this.props.items.map(function(e){return React__default.createElement(Checkbox,_extends({},e,{key:e.inputProps.name,onChecked:t.props.onChildChecked,onUnchecked:t.props.onChildUnchecked}))})}},{key:"renderChildren",value:function e(){var n=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition){switch(this.props.selectAllPosition){case t.selectAllPosition.BEFORE:n.unshift(this.renderSelectAll());break;case t.selectAllPosition.AFTER:n.push(this.renderSelectAll());break}}return n}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"group",className:index$3("b-checkbox-group",this.props.className)}),this.renderChildren())}}]);return t}(React__default.PureComponent);CheckboxGroup.selectAllPosition={BEFORE:uuid(),AFTER:uuid()};CheckboxGroup.propTypes={items:React.PropTypes.arrayOf(Checkbox.propTypes.inputProps).isRequired,onAllChecked:React.PropTypes.func,onAllUnchecked:React.PropTypes.func,onChildChecked:React.PropTypes.func,onChildUnchecked:React.PropTypes.func,selectAll:React.PropTypes.bool,selectAllProps:React.PropTypes.shape({label:React.PropTypes.string,inputProps:React.PropTypes.object}),selectAllPosition:React.PropTypes.oneOf([CheckboxGroup.selectAllPosition.BEFORE,CheckboxGroup.selectAllPosition.AFTER])};CheckboxGroup.defaultProps={items:[],onAllChecked:noop,onAllUnchecked:noop,onChildChecked:noop,onChildUnchecked:noop,selectAll:false,selectAllProps:{},selectAllPosition:CheckboxGroup.selectAllPosition.BEFORE};CheckboxGroup.internalKeys=Object.keys(CheckboxGroup.defaultProps);var index$4=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Portal=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.id=uuid(),r.$portal=null,r.$passenger=null,n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentWillMount",value:function e(){this.$portal=document.createElement("div");this.props.destination.appendChild(this.$portal);this.renderPortalledContent()}},{key:"renderPortalledContent",value:function e(){var t=React__default.isValidElement(this.props.children)?this.props.children:React__default.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id;ReactDOM__default.unstable_renderSubtreeIntoContainer(this,t,this.$portal);this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function e(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function e(){ReactDOM__default.unmountComponentAtNode(this.$portal);this.props.destination.removeChild(this.$portal)}},{key:"render",value:function e(){return React__default.createElement("span",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),defineProperty({},t.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]);return t}(React__default.Component);Portal.propTypes={children:React__default.PropTypes.node,destination:React.PropTypes.instanceOf(HTMLElement),portalId:React.PropTypes.string};Portal.defaultProps={children:null,destination:document.body,portalId:null};Portal.internalKeys=Object.keys(Portal.defaultProps);Portal.PORTAL_DATA_ATTRIBUTE="data-portal-id";var toArray$1=Array.prototype.slice;var Dialog=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.mounted=false,r.uuidHeader=uuid(),r.uuidBody=uuid(),r.handleFocus=function(e){if(!r.props.captureFocus){if(r.shouldDialogCloseOnEvent("closeOnOutsideFocus",e)&&!r.isPartOfDialog(e.target)){return window.setTimeout(r.props.onClose,0)}return}var t=e.explicitOriginalTarget||e.relatedTarget;if(r.isPartOfDialog(t)&&!r.isPartOfDialog(e.target)){e.preventDefault();t.focus()}},r.handleKeyDown=function(e){if(e.key==="Escape"){if(r.shouldDialogCloseOnEvent("closeOnEscKey",e)){window.setTimeout(r.props.onClose,0)}}if(isFunction(r.props.onKeyDown)){r.props.onKeyDown(e)}},r.handleInsideClick=function(e){if(r.shouldDialogCloseOnEvent("closeOnInsideClick",e)){window.setTimeout(r.props.onClose,0)}},r.handleOutsideClick=function(e){if(r.shouldDialogCloseOnEvent("closeOnOutsideClick",e)&&!r.isPartOfDialog(e.target)){window.setTimeout(r.props.onClose,0)}},r.handleOutsideScrollWheel=function(e){if(r.shouldDialogCloseOnEvent("closeOnOutsideScroll",e)&&!r.isPartOfDialog(e.target)){window.setTimeout(r.props.onClose,0)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"isPartOfDialog",value:function e(t){if(!t||t===window){return false}var n=[this.$wrapper].concat(toArray$1.call(this.$wrapper.querySelectorAll("["+Portal.PORTAL_DATA_ATTRIBUTE+"]")).map(function(e){return document.getElementById(e.getAttribute(Portal.PORTAL_DATA_ATTRIBUTE))}));var r=t.nodeType!==Node.ELEMENT_NODE?t.parentNode:t;return n.some(function(e){return e.contains(r)})}},{key:"componentDidMount",value:function e(){window.addEventListener("click",this.handleOutsideClick,true);window.addEventListener("contextmenu",this.handleOutsideClick,true);window.addEventListener("focus",this.handleFocus,true);window.addEventListener("scroll",this.handleOutsideScrollWheel,true);window.addEventListener("wheel",this.handleOutsideScrollWheel,true);if(this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)){this.$dialog.focus()}}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("click",this.handleOutsideClick,true);window.removeEventListener("contextmenu",this.handleOutsideClick,true);window.removeEventListener("focus",this.handleFocus,true);window.removeEventListener("scroll",this.handleOutsideScrollWheel,true);window.removeEventListener("wheel",this.handleOutsideScrollWheel,true)}},{key:"shouldDialogCloseOnEvent",value:function e(t,n){return isFunction(this.props[t])?this.props[t](n):this.props[t]}},{key:"renderBody",value:function e(){return React__default.createElement("div",_extends({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:index$4("b-dialog-body",this.props.bodyProps.className)}),this.props.children)}},{key:"renderFooter",value:function e(){if(this.props.footer){return React__default.createElement("footer",_extends({},this.props.footerProps,{className:index$4("b-dialog-footer",this.props.footerProps.className)}),this.props.footer)}}},{key:"renderHeader",value:function e(){if(this.props.header){return React__default.createElement("header",_extends({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:index$4("b-dialog-header",this.props.headerProps.className)}),this.props.header)}}},{key:"renderFocusBoundary",value:function e(){if(this.props.captureFocus){return React__default.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}}},{key:"render",value:function e(){var n=this;return React__default.createElement("div",_extends({},this.props.wrapperProps,{ref:function e(t){return n.$wrapper=t},className:index$4("b-dialog-wrapper",this.props.wrapperProps.className),tabIndex:"0"}),this.renderFocusBoundary(),this.props.before,React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:function e(t){return n.$dialog=t},className:index$4("b-dialog",this.props.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:"dialog","aria-labelledby":this.uuidHeader,"aria-describedby":this.uuidBody,tabIndex:"0"}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary())}}]);return t}(React__default.PureComponent);Dialog.propTypes={after:React.PropTypes.node,before:React.PropTypes.node,bodyProps:React.PropTypes.object,captureFocus:React.PropTypes.bool,children:React.PropTypes.node,closeOnEscKey:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),closeOnInsideClick:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),closeOnOutsideClick:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),closeOnOutsideFocus:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),closeOnOutsideScroll:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),footer:React.PropTypes.node,footerProps:React.PropTypes.object,header:React.PropTypes.node,headerProps:React.PropTypes.object,onClose:React.PropTypes.func,wrapperProps:React.PropTypes.object};Dialog.defaultProps={after:null,before:null,bodyProps:{},captureFocus:true,children:null,closeOnEscKey:false,closeOnInsideClick:false,closeOnOutsideClick:false,closeOnOutsideFocus:false,closeOnOutsideScroll:false,footer:null,footerProps:{},header:null,headerProps:{},onClose:noop,wrapperProps:{}};Dialog.internalKeys=Object.keys(Dialog.defaultProps);var index$5=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var instances=[];function toI(e){return parseInt(e,10)}function rescale(e){var t=ReactDOM.findDOMNode(e);var n=window.getComputedStyle(t.parentNode);var r=toI(window.getComputedStyle(t).fontSize);var o=toI(n.height);var s=toI(n.width);if(n.boxSizing==="border-box"||n.boxSizing==="padding-box"){o-=toI(n.paddingTop)+toI(n.paddingBottom);s-=toI(n.paddingLeft)+toI(n.paddingRight)}var a=Math.floor(r/t.offsetHeight*o);var i=Math.floor(r/t.offsetWidth*s);t.style.fontSize=(Math.min(e.props.maxFontSize,a,i)||1)+"px"}function handleWindowResize(){instances.forEach(function(e){return rescale(e)})}function registerInstance(e){if(instances.length===0){window.addEventListener("resize",handleWindowResize,true)}instances.push(e)}function unregisterInstance(e){instances.splice(instances.indexOf(e),1);if(instances.length===0){window.removeEventListener("resize",handleWindowResize,true)}}var FittedText=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"componentDidMount",value:function e(){rescale(this);registerInstance(this)}},{key:"componentDidUpdate",value:function e(){rescale(this)}},{key:"componentWillUnmount",value:function e(){unregisterInstance(this)}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:index$5("b-text",this.props.className)}),this.props.children)}}]);return t}(React__default.PureComponent);FittedText.propTypes={component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),maxFontSize:React.PropTypes.number};FittedText.defaultProps={component:"span",maxFontSize:Number.MAX_VALUE};FittedText.internalKeys=Object.keys(FittedText.defaultProps);var index$6=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Image=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={status:t.status.LOADING},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentWillReceiveProps",value:function e(n){if(n.src!==this.props.src){this.resetPreloader();this.setState({status:t.status.LOADING})}}},{key:"componentDidMount",value:function e(){this.preload()}},{key:"componentDidUpdate",value:function e(){this.preload()}},{key:"componentWillUnmount",value:function e(){this.resetPreloader()}},{key:"resetPreloader",value:function e(){this.loader.onload=null;this.loader.onerror=null;this.loader=null}},{key:"preload",value:function e(){var n=this;if(this.loader){return}this.loader=document.createElement("img");this.loader.onload=function(){return n.setState({status:t.status.LOADED})};this.loader.onerror=function(){return n.setState({status:t.status.ERROR})};this.loader.src=this.props.src}},{key:"renderImage",value:function e(){if(this.props.displayAsBackgroundImage){return React__default.createElement("div",_extends({},this.props.imageProps,{ref:"image",className:index$6("b-image",this.props.imageProps.className),title:this.props.alt,style:_extends({},this.props.imageProps.style,{backgroundImage:"url("+this.props.src+")"})}))}return React__default.createElement("img",_extends({},this.props.imageProps,{ref:"image",className:index$6("b-image",this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:noop,onError:noop}))}},{key:"renderStatus",value:function e(){return React__default.createElement("div",_extends({},this.props.statusProps,{ref:"status",className:index$6("b-image-status",this.props.statusProps.className,{"b-image-loading":this.state.status===t.status.LOADING,"b-image-loaded":this.state.status===t.status.LOADED,"b-image-error":this.state.status===t.status.ERROR}),role:"presentation"}))}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$6("b-image-wrapper",this.props.className)}),this.renderImage(),this.renderStatus())}}]);return t}(React__default.PureComponent);Image.status={LOADING:"LOADING",LOADED:"LOADED",ERROR:"ERROR"};Image.propTypes={alt:React.PropTypes.string,displayAsBackgroundImage:React.PropTypes.bool,imageProps:React.PropTypes.object,src:React.PropTypes.string.isRequired,statusProps:React.PropTypes.object};Image.defaultProps={alt:null,displayAsBackgroundImage:false,imageProps:{},src:"about:blank",statusProps:{}
};Image.internalKeys=Object.keys(Image.defaultProps);var index$7=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var isString=function(e){return typeof e==="string"};var Input=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={input:"",isControlled:isString(r.props.inputProps.value),isFocused:false},r.setInputValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return r.setState({input:e})},r.getValue=function(){return r.refs.field.value},r.handleBlur=function(e){r.setState({isFocused:false});if(isFunction(r.props.inputProps.onBlur)===true){r.props.inputProps.onBlur(e)}},r.handleFocus=function(e){r.setState({isFocused:true});if(isFunction(r.props.inputProps.onFocus)===true){r.props.inputProps.onFocus(e)}},r.handleChange=function(e){if(r.state.isControlled===false){r.setInputValue(e.target.value)}if(isFunction(r.props.inputProps.onChange)===true){r.props.inputProps.onChange(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentWillMount",value:function e(){if(this.state.isControlled===true){return this.setInputValue(this.props.inputProps.value)}this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function e(t){if(t.inputProps.value!==this.props.inputProps.value){this.setInputValue(t.inputProps.value)}}},{key:"setValue",value:function e(t){this.setInputValue(t);this.refs.field.value=t;if(this.state.isControlled===true){this.refs.field.dispatchEvent(new Event("input",{bubbles:true}));this.refs.field.dispatchEvent(new Event("change",{bubbles:true}))}}},{key:"getPlaceholderText",value:function e(){var t=this.state.input!=="";var n=this.props.hidePlaceholderOnFocus===true?this.state.isFocused===false&&t===false:t===false;return n?this.props.inputProps.placeholder:""}},{key:"renderPlaceholder",value:function e(){return React__default.createElement("div",{ref:"placeholder",className:"b-input-placeholder b-input"},this.getPlaceholderText())}},{key:"render",value:function e(){var n=this.props;return React__default.createElement("div",_extends({},omitKeysFromSourceObject(n,t.internalKeys),{ref:"wrapper",className:index$7("b-input-wrapper",n.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),React__default.createElement("input",_extends({},n.inputProps,{ref:"field",className:index$7("b-input",n.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})))}}]);return t}(React__default.PureComponent);Input.propTypes={hidePlaceholderOnFocus:React.PropTypes.bool,inputProps:React.PropTypes.shape({defaultValue:React.PropTypes.string,onBlur:React.PropTypes.func,onFocus:React.PropTypes.func,onChange:React.PropTypes.func,placeholder:React.PropTypes.string,type:React.PropTypes.string,value:React.PropTypes.string})};Input.defaultProps={hidePlaceholderOnFocus:true,inputProps:{type:"text"}};Input.internalKeys=Object.keys(Input.defaultProps);var index$8=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});function getIntersection(e,t){return Object.keys(t).reduce(function(t,n){if(n in e){t[n]=e[n]}return t},{})}var Modal=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"render",value:function e(){var n=this;var r=this.props;return React__default.createElement(Portal,r.portalProps,React__default.createElement("div",_extends({},omitKeysFromSourceObject(r,t.internalKeys),{ref:function e(t){return n.$modal=t},className:index$8("b-modal-wrapper",r.className)}),React__default.createElement("div",_extends({},r.maskProps,{className:index$8("b-modal-mask",r.maskProps.className)})),React__default.createElement(Dialog,_extends({},getIntersection(r,Dialog.defaultProps),r.modalProps,{className:index$8("b-modal",r.modalProps.className)}),r.children)))}}]);return t}(React__default.PureComponent);Modal.propTypes=_extends({},Dialog.propTypes,{maskProps:React.PropTypes.object,modalProps:React.PropTypes.object,portalProps:React.PropTypes.shape(Portal.propTypes)});Modal.defaultProps=_extends({},Dialog.defaultProps,{captureFocus:true,maskProps:{},modalProps:{},portalProps:{}});Modal.internalKeys=Object.keys(Modal.defaultProps);var index$9=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var INFINITY=1/0;var MAX_INTEGER=1.7976931348623157e308;var NAN=0/0;var symbolTag="[object Symbol]";var reTrim=/^\s+|\s+$/g;var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;var reIsBinary=/^0b[01]+$/i;var reIsOctal=/^0o[0-7]+$/i;var freeParseInt=parseInt;var objectProto=Object.prototype;var objectToString=objectProto.toString;function isInteger(e){return typeof e=="number"&&e==toInteger(e)}function isObject(e){var t=typeof e==="undefined"?"undefined":_typeof(e);return!!e&&(t=="object"||t=="function")}function isObjectLike(e){return!!e&&(typeof e==="undefined"?"undefined":_typeof(e))=="object"}function isSymbol(e){return(typeof e==="undefined"?"undefined":_typeof(e))=="symbol"||isObjectLike(e)&&objectToString.call(e)==symbolTag}function toFinite(e){if(!e){return e===0?e:0}e=toNumber(e);if(e===INFINITY||e===-INFINITY){var t=e<0?-1:1;return t*MAX_INTEGER}return e===e?e:0}function toInteger(e){var t=toFinite(e),n=t%1;return t===t?n?t-n:t:0}function toNumber(e){if(typeof e=="number"){return e}if(isSymbol(e)){return NAN}if(isObject(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=isObject(t)?t+"":t}if(typeof e!="string"){return e===0?e:+e}e=e.replace(reTrim,"");var n=reIsBinary.test(e);return n||reIsOctal.test(e)?freeParseInt(e.slice(2),n?2:8):reIsBadHex.test(e)?NAN:+e}var index$10=isInteger;var index$11=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var SegmentedControl=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={indexOfOptionInFocus:null},r.handleKeyDown=function(e){var t=e.key;var n=r.state.indexOfOptionInFocus;if(t==="ArrowLeft"){r.setFocus(r.getPreviousOptionIndex(n));e.preventDefault()}else if(t==="ArrowRight"){r.setFocus(r.getNextOptionIndex(n));e.preventDefault()}else if(t==="Enter"){r.handleOptionClick(r.props.options[n]);e.preventDefault()}if(isFunction(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"currentValue",value:function e(){var t=void 0;this.props.options.some(function(e){if(e.selected){t=e.value;return true}});return t}},{key:"setFocus",value:function e(t){ReactDOM.findDOMNode(this.refs["option_$"+t]).focus()}},{key:"getNextOptionIndex",value:function e(t){var n=t+1;return n<this.props.options.length?n:0}},{key:"getPreviousOptionIndex",value:function e(t){var n=t-1;return n<0?this.props.options.length-1:n}},{key:"handleOptionBlur",value:function e(t,n){if(this.state.indexOfOptionInFocus===this.props.options.indexOf(t)){this.setState({indexOfOptionInFocus:null})}if(isFunction(t.onBlur)){t.onBlur(n)}}},{key:"handleOptionClick",value:function e(t,n){this.props.onOptionSelected(t.value);if(isFunction(t.onClick)){t.onClick(n)}}},{key:"handleOptionFocus",value:function e(t,n){this.setState({indexOfOptionInFocus:this.props.options.indexOf(t)});if(isFunction(t.onFocus)){t.onFocus(n)}}},{key:"renderOptions",value:function e(){var n=this;return this.props.options.map(function(e,r){return React__default.createElement(Button,_extends({},omitKeysFromSourceObject(e,t.internalChildKeys),{role:"radio","aria-checked":String(e.selected),ref:"option_$"+r,key:e.value,className:index$11("b-segmented-control-option",e.className,{"b-segmented-control-option-selected":e.selected}),tabIndex:e.selected?"0":"-1",onBlur:n.handleOptionBlur.bind(n,e),onPressed:n.handleOptionClick.bind(n,e),onFocus:n.handleOptionFocus.bind(n,e)}),e.content)})}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",role:"radiogroup",className:index$11("b-segmented-control",this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions())}}]);return t}(React__default.PureComponent);SegmentedControl.propTypes={onOptionSelected:React.PropTypes.func,options:function e(t){if(t.options.length<2){throw new Error("Must provide at least two options.")}var n=t.options.some(function(e){if(!("selected"in e)){return true}});if(n){throw new Error("Must provide a `selected` prop for each option.")}var r=false;var o=t.options.some(function(e){if(e.selected){if(r){return true}r=true}});if(o){throw new Error("Encountered multiple options with `selected: true`. There can be only one.")}if(t.options.some(function(e){return typeof e.value==="undefined"})){throw new Error("Must provide a `value` prop for each option.")}}};SegmentedControl.defaultProps={onOptionSelected:noop,options:[]};SegmentedControl.internalKeys=Object.keys(SegmentedControl.defaultProps);SegmentedControl.internalChildKeys=["content","value","selected"];var identity=function e(t){return t};var Pagination=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={currentPage:r.props.initialPage,targetIndex:(r.props.initialPage-1)*r.props.numItemsPerPage},r.currentPage=function(){return r.state.currentPage},r.getPageForIndex=function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:r.props.numItemsPerPage;return Math.ceil((e+1)/t)},r.totalPages=function(){return Math.ceil(r.props.totalItems/r.props.numItemsPerPage)},r.firstVisibleItemIndex=function(){return(r.currentPage()-1)*r.props.numItemsPerPage},r.pageToIndex=function(e){if(e<0||e>=r.props.totalItems){return new Error("Cannot page to invalid index "+e+".")}r.setState({currentPage:r.getPageForIndex(e),targetIndex:e})},r.handleClick=function(e){var n=void 0;switch(e){case t.controls.FIRST:n=0;break;case t.controls.PREVIOUS:n=r.firstVisibleItemIndex()-r.props.numItemsPerPage;break;case t.controls.NEXT:n=r.firstVisibleItemIndex()+r.props.numItemsPerPage;break;case t.controls.LAST:n=r.props.totalItems-1;break;default:n=parseInt(e,10)*r.props.numItemsPerPage-1}r.setState({currentPage:r.getPageForIndex(n),targetIndex:n})},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentDidUpdate",value:function e(t,n){if(n.currentPage!==this.currentPage()){ReactDOM.findDOMNode(this.refs.item_0).focus()}}},{key:"componentWillReceiveProps",value:function e(){var t=this;var n=this.props;this.setState(function(e,r){if(r.identifier!==n.identifier){return{currentPage:1,targetIndex:0}}return{currentPage:t.getPageForIndex(e.targetIndex,r.numItemsPerPage),targetIndex:e.targetIndex}})}},{key:"createPageButtonOptions",value:function e(){var n=[];var r=this.currentPage();var o=this.props.numPageToggles;var s=this.totalPages();var a=r-(r-1)%o;var i=Math.min(a+o-1,s);if(this.props.showPaginationState){n.push({selected:false,content:isFunction(this.props.showPaginationState)?this.props.showPaginationState(r,s):r+" of "+s,value:"",disabled:true,className:"b-pagination-control b-pagination-control-state"})}if(this.props.showJumpToFirst){n.push({selected:false,content:this.props.jumpToFirstControlContent,value:t.controls.FIRST,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-first"})}n.push({selected:false,content:this.props.previousPageControlContent,value:t.controls.PREVIOUS,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-previous"});for(var p=a;p<=i;p++){n.push({className:"b-pagination-control","data-page-number":p,selected:p===this.currentPage(),content:p,value:p})}n.push({selected:false,content:this.props.nextPageControlContent,value:t.controls.NEXT,disabled:this.currentPage()===s,className:"b-pagination-control b-pagination-control-next"});if(this.props.showJumpToLast){n.push({selected:false,content:this.props.jumpToLastControlContent,value:t.controls.LAST,disabled:this.currentPage()===s,className:"b-pagination-control b-pagination-control-last"})}if(this.props.customControlContent){n.push({selected:false,content:this.props.customControlContent,value:uuid(),disabled:true,className:"b-pagination-control b-pagination-control-custom"})}return n}},{key:"generateItems",value:function e(){var t=[];var n=this.firstVisibleItemIndex();var r=Math.min(this.props.totalItems,n+this.props.numItemsPerPage)-1;for(var o=n;o<=r;o+=1){t.push({data:this.props.getItem(o)})}return t}},{key:"renderItems",value:function e(){var t=this;var n=this.props.listWrapperProps;var r=this.props.numItemsPerPage*(this.currentPage()-1);return React__default.createElement(ArrowKeyNavigation,_extends({},n,{ref:"itemList",className:index$9("b-pagination-items",n.className)}),this.generateItems().map(function(e,n){return React__default.createElement(Async,{ref:"item_"+n,key:n,className:index$9("b-pagination-item",{"b-pagination-item-even":n%2===0,"b-pagination-item-odd":n%2!==0}),convertToJSXFunc:t.props.itemToJSXConverterFunc,data:e.data,"data-pagination-index":r+n,loadingContent:t.props.itemLoadingContent})}))}},{key:"renderControls",value:function e(t){if(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage){return}var n=this.props.toggleWrapperProps;var r=t.toLowerCase();var o=r[0].toUpperCase()+r.slice(1);return React__default.createElement(SegmentedControl,_extends({},n,{ref:"segmentedControl"+o,className:index$9("b-pagination-controls",n.className,defineProperty({},"b-pagination-controls-"+r,true)),options:this.createPageButtonOptions(),onOptionSelected:this.handleClick}))}},{key:"renderView",value:function e(){var n=this.props;var r=t.positions;return React__default.createElement("div",{ref:"paginatedView",className:"b-pagination"},n.position===r.ABOVE||n.position===r.BOTH?this.renderControls(r.ABOVE):noop,n.before,this.renderItems(),n.after,n.position===r.BELOW||n.position===r.BOTH?this.renderControls(r.BELOW):noop)}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$9("b-pagination-wrapper",this.props.className)}),this.renderView())}}]);return t}(React__default.PureComponent);Pagination.controls={FIRST:"FIRST",PREVIOUS:"PREVIOUS",NEXT:"NEXT",LAST:"LAST"};Pagination.positions={ABOVE:"ABOVE",BELOW:"BELOW",BOTH:"BOTH"};Pagination.propTypes={after:React.PropTypes.node,before:React.PropTypes.node,customControlContent:React.PropTypes.node,getItem:React.PropTypes.func,hidePagerIfNotNeeded:React.PropTypes.bool,identifier:React.PropTypes.string.isRequired,initialPage:function e(t){if(index$10(t.initialPage)===false){return new Error("`initialPage` must be an integer.")}var n=Math.ceil(t.totalItems/t.numItemsPerPage);if(t.initialPage<1||t.initialPage>n){return new Error("`initialPage` must be between 1 and "+n+".")}},itemLoadingContent:React.PropTypes.node,itemToJSXConverterFunc:React.PropTypes.func,jumpToFirstControlContent:React.PropTypes.node,jumpToLastControlContent:React.PropTypes.node,listWrapperProps:React.PropTypes.object,nextPageControlContent:React.PropTypes.node,numItemsPerPage:function e(t){if(index$10(t.numItemsPerPage)===false){return new Error("`numItemsPerPage` must be an integer.")}else if(t.numItemsPerPage<1){return new Error("`numItemsPerPage` must be greater than zero.")}},numPageToggles:React.PropTypes.number,position:React.PropTypes.oneOf(Object.keys(Pagination.positions)),previousPageControlContent:React.PropTypes.node,showJumpToFirst:React.PropTypes.bool,showJumpToLast:React.PropTypes.bool,showPaginationState:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),toggleWrapperProps:React.PropTypes.object,totalItems:React.PropTypes.number.isRequired};Pagination.defaultProps={after:null,before:null,customControlContent:null,getItem:noop,hidePagerIfNotNeeded:false,identifier:uuid(),initialPage:1,itemLoadingContent:null,itemToJSXConverterFunc:identity,jumpToFirstControlContent:"« First",jumpToLastControlContent:"Last »",listWrapperProps:{},nextPageControlContent:"Next ›",numItemsPerPage:10,numPageToggles:5,position:Pagination.positions.ABOVE,previousPageControlContent:"‹ Previous",showJumpToFirst:true,showJumpToLast:true,showPaginationState:true,toggleWrapperProps:{},totalItems:null};Pagination.internalKeys=Object.keys(Pagination.defaultProps);var index$12=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var transformProp=function e(){var t=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"];for(var n=0,r=t.length;n<r;n++){if(t[n]in document.documentElement.style){return t[n]}}return false}();function getOppositeCardinal(e){switch(e[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function without(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}var CLASS_REMOVAL_REGEX=/\s?b-popover-(anchor|self)-(start|middle|end)/g;var DEFAULT_CARET_COMPONENT=React__default.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},React__default.createElement("g",null,React__default.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),React__default.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"})));var START=0;var MIDDLE=1;var END=2;var combinations=[{name:"NNW",ax:START,ay:START,dx:START,dy:END},{name:"N",ax:MIDDLE,ay:START,dx:MIDDLE,dy:END},{name:"NNE",ax:END,ay:START,dx:END,dy:END},{name:"ENE",ax:END,ay:START,dx:START,dy:START},{name:"E",ax:END,ay:MIDDLE,dx:START,dy:MIDDLE},{name:"ESE",ax:END,ay:END,dx:START,dy:END},{name:"SSE",ax:END,ay:END,dx:END,dy:START},{name:"S",ax:MIDDLE,ay:END,dx:MIDDLE,dy:START},{name:"SSW",ax:START,ay:END,dx:START,dy:START},{name:"WSW",ax:START,ay:END,dx:END,dy:END},{name:"W",ax:START,ay:MIDDLE,dx:END,dy:MIDDLE},{name:"WNW",ax:START,ay:START,dx:END,dy:START}];var Popover=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.align=function(){var e=r.props.anchor instanceof HTMLElement?r.props.anchor:ReactDOM.findDOMNode(r.props.anchor);var n=r.props.caretAnchor?r.props.caretAnchor instanceof HTMLElement?r.props.caretAnchor:ReactDOM.findDOMNode(r.props.caretAnchor):e;r.cacheViewportCartography(e,n);var o=r.getValidAlignmentPreset();var s=t.getAlignmentClassFragment;r.dialog.$wrapper.className=r.dialog.$wrapper.className.replace(CLASS_REMOVAL_REGEX,"")+(" b-popover-anchor-x-"+s(o.ax))+(" b-popover-anchor-y-"+s(o.ay))+(" b-popover-self-x-"+s(o.dx))+(" b-popover-self-y-"+s(o.dy));var a=Math.round(r.getNextDialogXPosition(o));var i=Math.round(r.getNextDialogYPosition(o));r.dialog.$wrapper.style[transformProp]="translate("+a+"px, "+i+"px)";var p=o.name[0];var c=p==="N"||p==="S";r.$caret.style[c?"left":"top"]=Math.round(r.getNextCaretXPosition(o))+"px";r.$caret.style[c?"top":"left"]="0px"},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"cacheViewportCartography",value:function e(t,n){var r=document.body.getBoundingClientRect();this.anchorRect=t.getBoundingClientRect();this.caretAnchorRect=n.getBoundingClientRect();this.bodyLeft=r.left*-1;this.bodyTop=r.top*-1}},{key:"getNextCaretXPosition",value:function e(t){var n=t.name,r=t.ax,o=t.dx,s=t.ay,a=t.dy;var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var p=0;if(n[0]==="N"||n[0]==="S"){p=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2;if(o===MIDDLE){p+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2}else if(o===END){p+=this.dialog.$wrapper.clientWidth-this.anchorRect.width}}else{p=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2;if(a===MIDDLE){p+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2}else if(a===END){p+=this.dialog.$wrapper.clientHeight-this.anchorRect.height}}p-=i.clientWidth/2;return p}},{key:"getNextDialogXPosition",value:function e(t){var n=t.ax,r=t.dx;var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var s=this.anchorRect.left+this.bodyLeft;switch(n){case MIDDLE:s+=this.anchorRect.width/2;break;case END:s+=this.anchorRect.width;break}switch(r){case MIDDLE:s-=o.clientWidth/2;break;case END:s-=o.clientWidth;break}return s}},{key:"getNextDialogYPosition",value:function e(t){var n=t.ay,r=t.dy;var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var s=this.anchorRect.top+this.bodyTop;switch(n){case MIDDLE:s+=this.anchorRect.height/2;break;case END:s+=this.anchorRect.height;break}switch(r){case MIDDLE:s-=o.clientHeight/2;break;case END:s-=o.clientHeight;break}return s}},{key:"isPositionValid",value:function e(t,n,r){var o=t.name,s=t.ax,a=t.ay,i=t.dx,p=t.dy;var c=o[0];if(c==="N"||c==="S"){if(c==="N"&&this.anchorRect.top-n<0){return false}else if(c==="S"&&this.anchorRect.bottom+n>window.innerHeight){return false}if(s===START){return!(this.anchorRect.left+r>window.innerWidth||this.anchorRect.left<0)}else if(s===MIDDLE){return!(this.anchorRect.left-r/2<0||this.anchorRect.left+r/2>window.innerWidth)}return!(this.anchorRect.left-r<0||this.anchorRect.right>window.innerWidth)}else if(c==="W"||c==="E"){if(c==="W"&&this.anchorRect.left-r<0){return false}else if(c==="E"&&this.anchorRect.right+r>window.innerWidth){return false}if(a===START){return!(this.anchorRect.top+n>window.innerHeight||this.anchorRect.top<0)}else if(a===MIDDLE){return!(this.anchorRect.top+this.anchorRect.height/2-n/2<0||this.anchorRect.top+this.anchorRect.height/2+n/2>window.innerHeight)}return!(this.anchorRect.top-n<0||this.anchorRect.bottom>window.innerHeight)}return true}},{key:"getValidAlignmentPreset",value:function e(){var t=this;var n=this.dialog.$wrapper.clientWidth;var r=this.dialog.$wrapper.clientHeight;var o=combinations.filter(function(e){return t.isPositionValid(e,r,n)});if(o.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!o.length){return this.props.preset}var s=o.filter(function(e){var n=e.name;return n[0]===t.props.preset.name[0]});if(s.length){return s[0]}var a=getOppositeCardinal(this.props.preset.name);var i=o.filter(function(e){var t=e.name;return t[0]===a});if(i.length){return i[0]}return o[0]}},{key:"componentDidMount",value:function e(){this.align();window.addEventListener("resize",this.align,true)}},{key:"componentDidUpdate",value:function e(){this.align()}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("resize",this.align,true)}},{key:"render",value:function e(){var n=this;var r=this.props;return React__default.createElement(Portal,r.portalProps,React__default.createElement(Dialog,_extends({},omitKeysFromSourceObject(r,t.internalKeys),{ref:function e(t){return n.dialog=t},before:React__default.cloneElement(r.caretComponent,{ref:function e(t){return n.$caret=t},className:index$12("b-popover-caret",r.caretComponent.props.className)}),wrapperProps:_extends({},r.wrapperProps,{className:index$12("b-popover",r.wrapperProps.className)})})))}}],[{key:"getAlignmentClassFragment",value:function e(t){switch(t){case START:return"start";case MIDDLE:return"middle";case END:return"end"}}}]);return t}(React__default.PureComponent);Popover.preset=combinations.reduce(function(e,t){return e[t.name]=t,e},{});Popover.propTypes=_extends({},Dialog.propTypes,{anchor:React.PropTypes.oneOfType([React.PropTypes.instanceOf(HTMLElement),React.PropTypes.element]).isRequired,autoReposition:React.PropTypes.bool,caretAnchor:React.PropTypes.oneOfType([React.PropTypes.instanceOf(HTMLElement),React.PropTypes.element]),caretComponent:React.PropTypes.element,portalProps:React.PropTypes.shape(Portal.PropTypes),preset:React.PropTypes.oneOf([Popover.preset.NNW,Popover.preset.N,Popover.preset.NNE,Popover.preset.ENE,Popover.preset.E,Popover.preset.ESE,Popover.preset.SSE,Popover.preset.S,Popover.preset.SSW,Popover.preset.WSW,Popover.preset.W,Popover.preset.WNW]),wrapperProps:React.PropTypes.object});Popover.defaultProps=_extends({},Dialog.defaultProps,{anchor:undefined,autoReposition:true,captureFocus:false,caretAnchor:undefined,caretComponent:DEFAULT_CARET_COMPONENT,closeOnEscKey:true,closeOnOutsideClick:true,closeOnOutsideScroll:true,portalProps:{},preset:Popover.preset.S,wrapperProps:{}});Popover.internalKeys=without(Object.keys(Popover.defaultProps),Dialog.internalKeys);var index$13=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var ProgressiveDisclosure=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.state={expanded:r.props.expanded},r.dispatchCallback=function(){r.props[r.state.expanded?"onExpand":"onHide"]()},r.handleClick=function(e){r.setState({expanded:!r.state.expanded},r.dispatchCallback);if(isFunction(r.props.toggleProps.onClick)){r.props.toggleProps.onClick(e)}},r.handleKeyDown=function(e){switch(e.key){case"Enter":e.preventDefault();r.setState({expanded:!r.state.expanded},r.dispatchCallback)}if(isFunction(r.props.toggleProps.onKeyDown)){r.props.toggleProps.onKeyDown(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentWillReceiveProps",value:function e(t){if(t.expanded!==this.props.expanded){this.setState({expanded:t.expanded},this.dispatchCallback)}}},{key:"renderContent",value:function e(){if(this.state.expanded){return React__default.createElement("div",{ref:"content",className:"b-disclosure-content"},isFunction(this.props.children)?this.props.children():this.props.children)}}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$13("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),React__default.createElement("div",_extends({},this.props.toggleProps,{ref:"toggle",className:index$13("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent())}}]);return t}(React__default.PureComponent);ProgressiveDisclosure.propTypes={children:React.PropTypes.any,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),expanded:React.PropTypes.bool,onExpand:React.PropTypes.func,onHide:React.PropTypes.func,teaser:React.PropTypes.node,teaserExpanded:React.PropTypes.node,toggleProps:React.PropTypes.object};ProgressiveDisclosure.defaultProps={children:null,component:"div",expanded:false,onExpand:noop,onHide:noop,teaser:null,teaserExpanded:null,toggleProps:{}};ProgressiveDisclosure.internalKeys=Object.keys(ProgressiveDisclosure.defaultProps);var index$14=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Progress=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"renderLabel",value:function e(){if(this.props.label){return React__default.createElement("div",_extends({},this.props.labelProps,{ref:"label",className:index$14("b-progress-label",this.props.labelProps.className)}),this.props.label)}}},{key:"renderCancel",value:function e(){
if(this.props.onCancel){return React__default.createElement(Button,_extends({},this.props.cancelProps,{ref:"cancel",className:index$14("b-progress-cancel",this.props.cancelProps.className),onPressed:this.props.onCancel}))}}},{key:"renderProgress",value:function e(){return React__default.createElement("div",_extends({},this.props.progressProps,{ref:"progress",className:index$14("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":typeof this.props.progress==="undefined"}),role:"presentation",style:_extends({},this.props.progressProps.style,defineProperty({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$14("b-progress-wrapper",this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel())}}]);return t}(React__default.PureComponent);Progress.propTypes={cancelProps:React.PropTypes.object,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),label:React.PropTypes.node,labelProps:React.PropTypes.object,onCancel:React.PropTypes.func,progress:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.number]),progressProps:React.PropTypes.object,tweenProperty:React.PropTypes.string};Progress.defaultProps={cancelProps:{},component:"div",label:null,labelProps:{},onCancel:null,progress:undefined,progressProps:{},tweenProperty:"width"};Progress.internalKeys=Object.keys(Progress.defaultProps);var index$15=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var Radio=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.uuid=uuid(),r.handleChange=function(e){if(e.target.checked){r.props.onSelected(e.target.value)}if(isFunction(r.props.inputProps.onChange)){r.props.inputProps.onChange(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"renderInput",value:function e(){return React__default.createElement("input",_extends({},this.props.inputProps,{ref:"input",type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:index$15("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function e(){if(this.props.label){return React__default.createElement("label",_extends({},this.props.labelProps,{ref:"label",className:index$15("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label)}}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$15("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(React__default.PureComponent);Radio.propTypes={inputProps:React.PropTypes.object,label:React.PropTypes.node,labelProps:React.PropTypes.object,name:React.PropTypes.string.isRequired,onSelected:React.PropTypes.func,selected:React.PropTypes.bool,value:React.PropTypes.string.isRequired};Radio.defaultProps={inputProps:{},label:null,labelProps:{},name:"",onSelected:noop,selected:false,value:""};Radio.internalKeys=Object.keys(Radio.defaultProps);var index$16=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var index$17=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var r=0;r<arguments.length;r++){var o=arguments[r];if(!o)continue;var s=typeof o==="undefined"?"undefined":_typeof(o);if(s==="string"||s==="number"){e.push(o)}else if(Array.isArray(o)){e.push(n.apply(null,o))}else if(s==="object"){for(var a in o){if(t.call(o,a)&&o[a]){e.push(a)}}}}return e.join(" ")}if("object"!=="undefined"&&e.exports){e.exports=n}else if(typeof undefined==="function"&&_typeof(undefined.amd)==="object"&&undefined.amd){undefined("classnames",[],function(){return n})}else{window.classNames=n}})()});var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;var index$18=function e(t){if(typeof t!=="string"){throw new TypeError("Expected a string")}return t.replace(matchOperatorsRe,"\\$&")};var Typeahead=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),_initialiseProps.call(r),n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentWillMount",value:function e(){if(this.props.inputProps.value||this.props.inputProps.defaultValue){this.computeMatches()}}},{key:"componentDidMount",value:function e(){this.mounted=true;if(this.state.selectedEntityIndex>=0){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(t.entities!==this.props.entities){this.computeMatches(t.entities)}if(t.inputProps.value!==this.props.inputProps.value){this.updateInputState(t.inputProps.value);this.computeMatches()}}},{key:"componentDidUpdate",value:function e(t,n){if(this.state.entityMatchIndexes.length&&!n.entityMatchIndexes.length){this.refs.matches.scrollTop=0}if(this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==t.entities[n.selectedEntityIndex]){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"handleMatchClick",value:function e(t){this.setState({selectedEntityIndex:t},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function e(t){var n=this.state.entityMatchIndexes;var r=n.length;var o=n.indexOf(this.state.selectedEntityIndex)+t;if(r){if(o<0){o=r-1}else if(o>=r){o=0}var s=n[o];var a=this.refs.matches;var i=a.scrollTop+a.clientHeight;var p=this.refs["match_$"+s];var c=p.offsetTop;var l=c+p.clientHeight;if(l>=i){a.scrollTop+=l-i}else if(c<=a.scrollTop){a.scrollTop=c}this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function e(){var t=this.getInputNode();return t.selectionStart===t.selectionEnd&&t.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function e(t,n){var r=n.text;var o=r.split(new RegExp("("+index$18(t)+")","ig"));var s=t.toLowerCase();var a=o.length;var i=-1;while(++i<a){if(o[i].toLowerCase()===s){o[i]=React__default.createElement("mark",{key:i,className:"b-typeahead-match-highlight"},o[i])}}return o}},{key:"markStartsWithMatchSubstring",value:function e(t,n){var r=n.text;var o=t.toLowerCase();var s=r.toLowerCase().indexOf(o);var a=s+o.length;return[React__default.createElement("span",{key:"0"},r.slice(0,s)),React__default.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},r.slice(s,a)),React__default.createElement("span",{key:"2"},r.slice(a))]}},{key:"getMarkingFunction",value:function e(){if(isString(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.markStartsWithMatchSubstring}return this.markFuzzyMatchSubstring}else if(isFunction(this.props.algorithm.marker)){return this.props.algorithm.marker}if(this.warnedMarker===undefined){this.warnedMarker=true;console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")}return this.markFuzzyMatchSubstring}},{key:"getFuzzyMatchIndexes",value:function e(t,n){var r=t.toLowerCase();return n.reduce(function e(t,n,o){return n.text.toLowerCase().indexOf(r)!==-1?t.push(o)&&t:t},[])}},{key:"getStartsWithMatchIndexes",value:function e(t,n){var r=t.toLowerCase();return n.reduce(function e(t,n,o){if(n.text.toLowerCase().indexOf(r)===0){t.push(o)}return t},[])}},{key:"getMatchingFunction",value:function e(){if(isString(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.getStartsWithMatchIndexes}return this.getFuzzyMatchIndexes}else if(isFunction(this.props.algorithm.matcher)){return this.props.algorithm.matcher}if(this.warnedMatcher===undefined){this.warnedMatcher=true;console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")}return this.getFuzzyMatchIndexes}},{key:"computeMatches",value:function e(t){var n=this;this.setState(function(e,r){var o=t||r.entities;var s=e.input;var a=s===""?[]:n.getMatchIndexes(s,o);return{selectedEntityIndex:a.length?a[0]:-1,entityMatchIndexes:a}})}},{key:"renderNotification",value:function e(){return React__default.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function e(){if(this.props.hint){var t=this.state.input;var n=this.getSelectedEntityText();var r="";if(n&&n.toLowerCase().indexOf(t.toLowerCase())===0){r=n.replace(new RegExp(t,"i"),t)}return React__default.createElement("div",_extends({},this.props.hintProps,{ref:"hint",className:index$17("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),r)}}},{key:"renderMatches",value:function e(){var t=this;if(this.state.entityMatchIndexes.length){var n=this.props.matchWrapperProps;return React__default.createElement("div",_extends({},n,{ref:"matches",className:index$17("b-typeahead-match-wrapper",n.className)}),this.state.entityMatchIndexes.map(function(e){var n=t.props.entities[e];var r=n.className,o=n.text,s=objectWithoutProperties(n,["className","text"]);return React__default.createElement("div",_extends({},s,{ref:"match_$"+e,className:index$17("b-typeahead-match",r,{"b-typeahead-match-selected":t.state.selectedEntityIndex===e}),key:o,onClick:t.handleMatchClick.bind(t,e)}),t.markMatchSubstring(t.state.input,n))}))}}},{key:"render",value:function e(){var n=this.props,r=this.state;return React__default.createElement("div",_extends({},omitKeysFromSourceObject(n,t.internalKeys),{ref:"wrapper",className:index$17("b-typeahead-wrapper",n.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),React__default.createElement(Input,_extends({},getIntersection(n,Input.defaultProps),{ref:"input","aria-controls":r.id,inputProps:_extends({},n.inputProps,{className:index$17("b-typeahead",n.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]);return t}(React__default.PureComponent);Typeahead.mode={STARTS_WITH:uuid(),FUZZY:uuid()};Typeahead.propTypes=_extends({},Input.propTypes,{algorithm:React.PropTypes.oneOfType([React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY]),React.PropTypes.shape({marker:React.PropTypes.oneOfType([React.PropTypes.func,React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])]),matcher:React.PropTypes.oneOfType([React.PropTypes.func,React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])])})]),clearOnSelection:React.PropTypes.bool,entities:React.PropTypes.arrayOf(React.PropTypes.shape({text:React.PropTypes.string.isRequired})),hint:React.PropTypes.bool,hintProps:React.PropTypes.object,matchWrapperProps:React.PropTypes.object,offscreenClass:React.PropTypes.string,onComplete:React.PropTypes.func,onEntityHighlighted:React.PropTypes.func,onEntitySelected:React.PropTypes.func});Typeahead.defaultProps=_extends({},Input.defaultProps,{algorithm:Typeahead.mode.FUZZY,clearOnSelection:false,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:noop,onEntityHighlighted:noop,onEntitySelected:noop});Typeahead.internalKeys=Object.keys(Typeahead.defaultProps);var _initialiseProps=function e(){var t=this;this.state={entityMatchIndexes:[],id:uuid(),isControlled:isString(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1};this.mounted=false;this.updateInputState=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return t.setState({input:e})};this.getSelectedEntityText=function(){var e=t.props.entities[t.state.selectedEntityIndex];return e?e.text:""};this.resetMatches=function(){if(t.mounted){t.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})}};this.getInputNode=function(){return t.refs.input.refs.field};this.select=function(){var e=t.getInputNode();e.selectionStart=0;e.selectionEnd=t.getValue().length};this.focus=function(){return t.getInputNode().focus()};this.getValue=function(){return t.refs.input.getValue()};this.setValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";t.refs.input.setValue(e);t.updateInputState(e);t.resetMatches();t.focus()};this.setValueWithSelectedEntity=function(){t.props.onEntitySelected(t.state.selectedEntityIndex);if(t.props.clearOnSelection){t.setValue("")}else{t.setValue(t.getSelectedEntityText())}window.setTimeout(t.resetMatches,0)};this.markMatchSubstring=function(){return t.getMarkingFunction().apply(undefined,arguments)};this.getMatchIndexes=function(){return t.getMatchingFunction().apply(undefined,arguments)};this.handleChange=function(e){if(t.state.isControlled===false){t.updateInputState(e.target.value);t.computeMatches()}if(isFunction(t.props.inputProps.onChange)){t.props.inputProps.onChange(e)}};this.handleKeyDown=function(e){switch(e.key){case"ArrowLeft":if(e.target.selectionStart>1){e.stopPropagation()}break;case"Tab":case"ArrowRight":if(t.state.selectedEntityIndex!==-1&&t.cursorAtEndOfInput()&&t.getInputNode()===e.target&&!e.shiftKey){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}break;case"ArrowUp":e.nativeEvent.preventDefault();t.selectMatch(-1);t.focus();break;case"ArrowDown":e.nativeEvent.preventDefault();t.selectMatch(1);t.focus();break;case"Escape":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){t.resetMatches()}break;case"Enter":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}else{t.props.onComplete(t.state.input,e)}break}if(isFunction(t.props.onKeyDown)){t.props.onKeyDown(e)}}};var first=function e(t){return t[0]};var last=function e(t){return t[t.length-1]};var TokenizedInput=function(e){inherits(t,e);function t(){var e;var n,r,o;classCallCheck(this,t);for(var s=arguments.length,a=Array(s),i=0;i<s;i++){a[i]=arguments[i]}return o=(n=(r=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r),r.focus=function(){return r.refs.typeahead.focus()},r.getInputNode=function(){return r.refs.typeahead.getInputNode()},r.getSelectedEntityText=function(){return r.refs.typeahead.getSelectedEntityText()},r.getValue=function(){return r.refs.typeahead.getValue()},r.select=function(){return r.refs.typeahead.select()},r.setValue=function(e){return r.refs.typeahead.setValue(e)},r.add=function(e){if(r.props.tokens.indexOf(e)===-1){r.props.handleAddToken(e)}},r.handleInputClick=function(e){r.clearSelection();if(isFunction(r.props.inputProps.onClick)){r.props.inputProps.onClick(e)}},r.handleInputFocus=function(e){r.clearSelection();if(isFunction(r.props.inputProps.onFocus)){r.props.inputProps.onFocus(e)}},r.handleKeyDown=function(e){switch(e.which){case 37:r.selectPreviousToken(e.shiftKey);break;case 39:r.selectNextToken(e.shiftKey);break;case 8:if(r.props.tokensSelected.length){r.remove(r.props.tokensSelected);r.focus()}break;case 65:if(e.metaKey){e.preventDefault();r.focus();r.select();r._suppressNextTokenSelection=true;r.props.handleNewSelection(r.props.tokens)}}if(isFunction(r.props.onKeyDown)){r.props.onKeyDown(e)}},n),possibleConstructorReturn(r,o)}createClass(t,[{key:"componentDidUpdate",value:function e(t){var n=t.tokensSelected;var r=this.props.tokensSelected;if(this.props.tokens.length>t.tokens.length){this.setValue("")}if(this._suppressNextTokenSelection){this._suppressNextTokenSelection=false;return}if(n!==r&&r.length!==0){if(r.length===1||r[0]!==n[0]){return this.refs["token_"+r[0]].focus()}else if(last(r)!==last(n)){return this.refs["token_"+last(r)].focus()}this.refs["token_"+r[0]].focus()}}},{key:"remove",value:function e(t){var n=this;var r=(Array.isArray(t)?t:[t]).filter(function(e){return n.props.tokens.indexOf(e)!==-1});if(r.length){this.props.handleRemoveTokens(r)}}},{key:"selectToken",value:function e(t){this.props.handleNewSelection([t])}},{key:"selectTokens",value:function e(t){this.props.handleNewSelection(t)}},{key:"selectPreviousToken",value:function e(t){var n=this.props.tokensSelected;var r=this.props.tokens;if(n.length===1&&first(n)===first(r)){return}if(n.length===0){this.selectToken(last(r))}else{var o=r[r.indexOf(first(n))-1];this.selectTokens(t?[o].concat(n):[o])}}},{key:"selectNextToken",value:function e(t){var n=this.props.tokensSelected;var r=this.props.tokens;if(n.length===0){return}if(last(n)===last(r)){this.clearSelection();this.focus()}else{var o=r[r.indexOf(last(n))+1];this.selectTokens(t?n.concat(o):[o])}}},{key:"clearSelection",value:function e(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function e(t,n){n.stopPropagation();this.remove(t);this.focus();if(this.props.tokenCloseComponent.props.onClick){this.props.tokenCloseComponent.props.onClick(n)}}},{key:"renderTokenClose",value:function e(t){if(this.props.tokenCloseVisible){return React__default.cloneElement(this.props.tokenCloseComponent,{className:index$16("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,t)})}}},{key:"handleTokenKeyDown",value:function e(t,n){switch(n.which){case 13:case 32:this.selectToken(t);n.preventDefault();break;case 8:this.remove(t);this.focus();n.preventDefault();break}}},{key:"renderTokens",value:function e(){var t=this;return React__default.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(e){return React__default.createElement("div",{ref:"token_"+e,key:e,className:index$16("b-tokenfield-token",{"b-tokenfield-token-selected":t.props.tokensSelected.indexOf(e)!==-1}),onClick:t.selectToken.bind(t,e),onKeyDown:t.handleTokenKeyDown.bind(t,e),tabIndex:"0"},t.props.entities[e].text,t.renderTokenClose(e))}))}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$16("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),React__default.createElement(Typeahead,_extends({},getIntersection(this.props,Typeahead.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:true,inputProps:_extends({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]);return t}(React__default.PureComponent);TokenizedInput.propTypes=_extends({},Typeahead.propTypes,{handleAddToken:React.PropTypes.func,handleRemoveTokens:React.PropTypes.func,handleNewSelection:React.PropTypes.func,tokenCloseComponent:React.PropTypes.element,tokenCloseVisible:React.PropTypes.bool,tokens:React.PropTypes.arrayOf(React.PropTypes.number),tokensSelected:React.PropTypes.arrayOf(React.PropTypes.number)});TokenizedInput.defaultProps=_extends({},Typeahead.defaultProps,{handleAddToken:noop,handleRemoveTokens:noop,handleNewSelection:noop,tokenCloseComponent:React__default.createElement("div",null,"X"),tokenCloseVisible:true,tokens:[],tokensSelected:[]});TokenizedInput.internalKeys=Object.keys(TokenizedInput.defaultProps);exports.ArrowKeyNavigation=ArrowKeyNavigation;exports.Async=Async;exports.Button=Button;exports.Checkbox=Checkbox;exports.CheckboxGroup=CheckboxGroup;exports.Dialog=Dialog;exports.FittedText=FittedText;exports.Image=Image;exports.Input=Input;exports.Modal=Modal;exports.Pagination=Pagination;exports.Popover=Popover;exports.Portal=Portal;exports.ProgressiveDisclosure=ProgressiveDisclosure;exports.Progress=Progress;exports.Radio=Radio;exports.SegmentedControl=SegmentedControl;exports.TokenizedInput=TokenizedInput;exports.Typeahead=Typeahead;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
