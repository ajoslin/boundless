!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],t):"object"==typeof exports?exports.Boundless=t(require(void 0),require(void 0)):e.Boundless=t(e.React,e.ReactDOM)}(this,function(e,t){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=32)}([function(e,t,n){"use strict";function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.keys(e).reduce(function(n,o){return t.indexOf(o)===-1&&(n[o]=e[o]),n},{})}t.a=o},function(t,n){t.exports=e},function(e,t,n){var o,r,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){"use strict";function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o="undefined"==typeof n?"undefined":s(n);if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n))e.push(i.apply(null,n));else if("object"===o)for(var r in n)a.call(n,r)&&n[r]&&e.push(r)}}return e.join(" ")}var a={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=i:"object"===s(n(18))&&n(18)?(o=[],r=function(){return i}.apply(t,o),!(void 0!==r&&(e.exports=r))):window.classNames=i}()},function(e,t,n){"use strict";t.a=function(e){return"function"==typeof e}},function(e,t,n){"use strict";function o(){}t.a=o},function(e,t,n){"use strict";function o(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(e){return(e^16*Math.random()>>e/4).toString(16)})}t.a=o},function(e,n){e.exports=t},function(e,t,n){"use strict";function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(6),l=n.n(c),u=n(0),f=n(5),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),y=function(e){function t(){var e,o,i,a;r(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return o=i=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.id=n.i(f.a)(),i.$portal=null,i.$passenger=null,a=o,s(i,a)}return i(t,e),d(t,[{key:"componentWillMount",value:function(){this.$portal=document.createElement("div"),this.props.destination.appendChild(this.$portal),this.renderPortalledContent()}},{key:"renderPortalledContent",value:function(){var e=p.a.isValidElement(this.props.children)?this.props.children:p.a.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id,l.a.unstable_renderSubtreeIntoContainer(this,e,this.$portal),this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function(){l.a.unmountComponentAtNode(this.$portal),this.props.destination.removeChild(this.$portal)}},{key:"render",value:function(){return p.a.createElement("span",h({},n.i(u.a)(this.props,t.internalKeys),o({},t.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]),t}(p.a.Component);y.propTypes={children:p.a.PropTypes.node,destination:a.PropTypes.instanceOf(HTMLElement),portalId:a.PropTypes.string},y.defaultProps={children:null,destination:document.body,portalId:null},y.internalKeys=Object.keys(y.defaultProps),y.PORTAL_DATA_ATTRIBUTE="data-portal-id",t.a=y},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),y=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.handleClick=function(e){i.props.disabled||(i.toggleState(e),n.i(l.a)(i.props.onClick)&&i.props.onClick(e))},i.handleKeyDown=function(e){if(!i.props.disabled){switch(e.key){case"Enter":case"Space":e.preventDefault(),i.toggleState(e)}n.i(l.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)}},a=s,r(i,a)}return s(t,e),d(t,[{key:"toggleState",value:function(e){this.props[this.props.pressed?"onUnpressed":"onPressed"](e)}},{key:"render",value:function(){return a.a.createElement(this.props.component,h({},n.i(f.a)(this.props,t.internalKeys),{ref:"button",className:c()("b-button",this.props.className,{"b-button-pressable":"undefined"!=typeof this.props.pressed,"b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]),t}(a.a.PureComponent);y.propTypes={children:i.PropTypes.node,component:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.func]),onClick:i.PropTypes.func,onPressed:i.PropTypes.func,onUnpressed:i.PropTypes.func,pressed:i.PropTypes.bool},y.defaultProps={children:null,component:"button",onClick:u.a,onPressed:u.a,onUnpressed:u.a,pressed:void 0},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(7),u=n(3),f=n(4),h=n(0),d=n(5),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),b=Array.prototype.slice,P=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.mounted=!1,i.uuidHeader=n.i(d.a)(),i.uuidBody=n.i(d.a)(),i.handleFocus=function(e){if(i.props.captureFocus){var t=e.explicitOriginalTarget||e.relatedTarget;i.isPartOfDialog(t)&&!i.isPartOfDialog(e.target)&&(e.preventDefault(),t.focus())}else if(i.shouldDialogCloseOnEvent("closeOnOutsideFocus",e)&&!i.isPartOfDialog(e.target))return window.setTimeout(i.props.onClose,0)},i.handleKeyDown=function(e){"Escape"===e.key&&i.shouldDialogCloseOnEvent("closeOnEscKey",e)&&window.setTimeout(i.props.onClose,0),n.i(u.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},i.handleInsideClick=function(e){i.shouldDialogCloseOnEvent("closeOnInsideClick",e)&&window.setTimeout(i.props.onClose,0)},i.handleOutsideClick=function(e){i.shouldDialogCloseOnEvent("closeOnOutsideClick",e)&&!i.isPartOfDialog(e.target)&&window.setTimeout(i.props.onClose,0)},i.handleOutsideScrollWheel=function(e){i.shouldDialogCloseOnEvent("closeOnOutsideScroll",e)&&!i.isPartOfDialog(e.target)&&window.setTimeout(i.props.onClose,0)},a=s,r(i,a)}return s(t,e),m(t,[{key:"isPartOfDialog",value:function(e){if(!e||e===window)return!1;var t=[this.$wrapper].concat(b.call(this.$wrapper.querySelectorAll("["+l.a.PORTAL_DATA_ATTRIBUTE+"]")).map(function(e){return document.getElementById(e.getAttribute(l.a.PORTAL_DATA_ATTRIBUTE))})),n=e.nodeType!==Node.ELEMENT_NODE?e.parentNode:e;return t.some(function(e){return e.contains(n)})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick,!0),window.addEventListener("contextmenu",this.handleOutsideClick,!0),window.addEventListener("focus",this.handleFocus,!0),window.addEventListener("scroll",this.handleOutsideScrollWheel,!0),window.addEventListener("wheel",this.handleOutsideScrollWheel,!0),this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)&&this.$dialog.focus()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick,!0),window.removeEventListener("contextmenu",this.handleOutsideClick,!0),window.removeEventListener("focus",this.handleFocus,!0),window.removeEventListener("scroll",this.handleOutsideScrollWheel,!0),window.removeEventListener("wheel",this.handleOutsideScrollWheel,!0)}},{key:"shouldDialogCloseOnEvent",value:function(e,t){return n.i(u.a)(this.props[e])?this.props[e](t):this.props[e]}},{key:"renderBody",value:function(){return a.a.createElement("div",y({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:c()("b-dialog-body",this.props.bodyProps.className)}),this.props.children)}},{key:"renderFooter",value:function(){if(this.props.footer)return a.a.createElement("footer",y({},this.props.footerProps,{className:c()("b-dialog-footer",this.props.footerProps.className)}),this.props.footer)}},{key:"renderHeader",value:function(){if(this.props.header)return a.a.createElement("header",y({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:c()("b-dialog-header",this.props.headerProps.className)}),this.props.header)}},{key:"renderFocusBoundary",value:function(){if(this.props.captureFocus)return a.a.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}},{key:"render",value:function(){var e=this;return a.a.createElement("div",y({},this.props.wrapperProps,{ref:function(t){return e.$wrapper=t},className:c()("b-dialog-wrapper",this.props.wrapperProps.className),tabIndex:"0"}),this.renderFocusBoundary(),this.props.before,a.a.createElement("div",y({},n.i(h.a)(this.props,t.internalKeys),{ref:function(t){return e.$dialog=t},className:c()("b-dialog",this.props.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:"dialog","aria-labelledby":this.uuidHeader,"aria-describedby":this.uuidBody,tabIndex:"0"}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary())}}]),t}(a.a.PureComponent);P.propTypes={after:i.PropTypes.node,before:i.PropTypes.node,bodyProps:i.PropTypes.object,captureFocus:i.PropTypes.bool,children:i.PropTypes.node,closeOnEscKey:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnInsideClick:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnOutsideClick:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnOutsideFocus:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnOutsideScroll:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),footer:i.PropTypes.node,footerProps:i.PropTypes.object,header:i.PropTypes.node,headerProps:i.PropTypes.object,onClose:i.PropTypes.func,wrapperProps:i.PropTypes.object},P.defaultProps={after:null,before:null,bodyProps:{},captureFocus:!0,children:null,closeOnEscKey:!1,closeOnInsideClick:!1,closeOnOutsideClick:!1,closeOnOutsideFocus:!1,closeOnOutsideScroll:!1,footer:null,footerProps:{},header:null,headerProps:{},onClose:f.a,wrapperProps:{}},P.internalKeys=Object.keys(P.defaultProps),t.a=P},function(e,t,n){"use strict";function o(e,t){return Object.keys(t).reduce(function(t,n){return n in e&&(t[n]=e[n]),t},{})}t.a=o},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(6),c=(n.n(p),n(3)),l=n(0),u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),h=function(e){function t(){var e,s,i,p;o(this,t);for(var l=arguments.length,u=Array(l),f=0;f<l;f++)u[f]=arguments[f];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),i.state={activeChildIndex:i.props.defaultActiveChildIndex},i.handleKeyDown=function(e){switch(e.key){case"ArrowUp":i.props.mode!==t.mode.VERTICAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(-1));break;case"ArrowLeft":i.props.mode!==t.mode.HORIZONTAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(-1));break;case"ArrowDown":i.props.mode!==t.mode.VERTICAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(1));break;case"ArrowRight":i.props.mode!==t.mode.HORIZONTAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(1))}n.i(c.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},i.handleFocus=function(e){if(e.target.hasAttribute("data-focus-index")){var t=parseInt(e.target.getAttribute("data-focus-index"),10),n=a.a.Children.toArray(i.props.children)[t];i.setState({activeChildIndex:t}),n.props.onFocus&&n.props.onFocus(e)}},p=s,r(i,p)}return s(t,e),f(t,[{key:"componentDidUpdate",value:function(e,t){this.state.activeChildIndex!==t.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"componentWillReceiveProps",value:function(e){if(0!==this.state.activeChildIndex){var t=e.children?a.a.Children.count(e.children):0;0===t?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=t&&this.setState({activeChildIndex:t-1})}}},{key:"setFocus",value:function(e){var t=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:n.i(p.findDOMNode)(this.refs.wrapper)).children[e];t&&t.hasAttribute("data-skip")?this.moveFocus(t.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):t&&document.activeElement!==t&&t.focus()}},{key:"moveFocus",value:function(e){var t=this.props.children?a.a.Children.count(this.props.children):0,n=this.state.activeChildIndex+e;n>=t?n=0:n<0&&(n=t-1),this.setState({activeChildIndex:n})}},{key:"children",value:function(){var e=this;return a.a.Children.map(this.props.children,function(t,n){return a.a.cloneElement(t,{"data-focus-index":n,"data-skip":parseInt(t.props.tabIndex,10)===-1||void 0,key:t.key||n,tabIndex:e.state.activeChildIndex===n?0:-1})})}},{key:"render",value:function(){return a.a.createElement(this.props.component,u({},n.i(l.a)(this.props,t.internalKeys),{ref:"wrapper",onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children())}}]),t}(a.a.PureComponent);h.mode={HORIZONTAL:"HORIZONTAL",VERTICAL:"VERTICAL",BOTH:"BOTH"},h.propTypes={component:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.func]),defaultActiveChildIndex:i.PropTypes.number,mode:i.PropTypes.oneOf([h.mode.BOTH,h.mode.HORIZONTAL,h.mode.VERTICAL])},h.defaultProps={component:"div",defaultActiveChildIndex:0,mode:h.mode.BOTH},h.internalKeys=Object.keys(h.defaultProps),t.a=h},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(0),u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),h=function(e){function t(){var e,n,s,i;o(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=s=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.mounted=!1,s.state={},i=n,r(s,i)}return s(t,e),f(t,[{key:"convertDataToJSXOrWait",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,n=t.data;return n instanceof Promise?(this.setState({component:null}),n.then(function(t){e.mounted&&e.setState(function(e,o){return{component:o.data===n?o.convertToJSXFunc(t):e.component}})},function(){return e.setState({component:!1})})):void this.setState({component:t.convertToJSXFunc(n)})}},{key:"fireCallbackIfDataRendered",value:function(){this.state.component&&this.props.contentRenderedFunc()}},{key:"componentWillMount",value:function(){this.convertDataToJSXOrWait()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.fireCallbackIfDataRendered()}},{key:"componentDidUpdate",value:function(){this.fireCallbackIfDataRendered()}},{key:"componentWillReceiveProps",value:function(e){this.convertDataToJSXOrWait(e)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"getClasses",value:function(e){return c()("b-async",this.props.className,e,{"b-async-error":this.state.component===!1,"b-async-loading":null===this.state.component})}},{key:"render",value:function(){return null===this.state.component||this.state.component===!1?a.a.createElement("div",u({},n.i(l.a)(this.props,t.internalKeys),{className:this.getClasses()}),null===this.state.component?this.props.loadingContent:this.props.errorContent):a.a.cloneElement(this.state.component,u({},n.i(l.a)(this.props,t.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className)}))}}]),t}(a.a.PureComponent);h.propTypes={contentRenderedFunc:i.PropTypes.func,convertToJSXFunc:i.PropTypes.func,data:i.PropTypes.any,errorContent:i.PropTypes.node,loadingContent:i.PropTypes.node},h.defaultProps={contentRenderedFunc:function(){},convertToJSXFunc:function(e){return e},data:null,errorContent:"⚠️",loadingContent:null},h.internalKeys=Object.keys(h.defaultProps),t.a=h},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=n(5),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),m=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.id=n.i(h.a)(),i.handleChange=function(e){i.props.inputProps.disabled||(i.props[i.props.inputProps.checked?"onUnchecked":"onChecked"](i.props.inputProps.name),n.i(l.a)(i.props.inputProps.onChange)&&i.props.inputProps.onChange(e))},i.handleClick=function(e){i.props.inputProps.disabled||(i.refs.input.focus(),n.i(l.a)(i.props.inputProps.onClick)&&i.props.inputProps.onClick(e))},a=s,r(i,a)}return s(t,e),y(t,[{key:"componentDidMount",value:function(){this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"componentDidUpdate",value:function(e){e.inputProps.indeterminate!==this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"setIndeterminate",value:function(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function(){return a.a.createElement("input",d({},n.i(f.a)(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:c()("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function(){if(this.props.label)return a.a.createElement("label",d({},this.props.labelProps,{ref:"label",className:c()("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}},{key:"render",value:function(){return a.a.createElement("div",d({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),t}(a.a.PureComponent);m.propTypes={inputProps:i.PropTypes.shape({checked:i.PropTypes.bool,className:i.PropTypes.string,disabled:i.PropTypes.bool,id:i.PropTypes.string,indeterminate:i.PropTypes.bool,onChange:i.PropTypes.func,onClick:i.PropTypes.func,name:i.PropTypes.string,value:i.PropTypes.string}),label:i.PropTypes.node,labelProps:i.PropTypes.object,onChecked:i.PropTypes.func,onUnchecked:i.PropTypes.func},m.defaultProps={inputProps:{checked:!1,indeterminate:!1},label:null,labelProps:{},onChecked:u.a,onUnchecked:u.a},m.internalKeys=Object.keys(m.defaultProps),t.a=m},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(17),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),y=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),f=0;f<p;f++)c[f]=arguments[f];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.state={input:"",isControlled:n.i(u.a)(i.props.inputProps.value),isFocused:!1},i.setInputValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return i.setState({input:e})},i.getValue=function(){return i.refs.field.value},i.handleBlur=function(e){i.setState({isFocused:!1}),n.i(l.a)(i.props.inputProps.onBlur)===!0&&i.props.inputProps.onBlur(e)},i.handleFocus=function(e){i.setState({isFocused:!0}),n.i(l.a)(i.props.inputProps.onFocus)===!0&&i.props.inputProps.onFocus(e)},i.handleChange=function(e){i.state.isControlled===!1&&i.setInputValue(e.target.value),n.i(l.a)(i.props.inputProps.onChange)===!0&&i.props.inputProps.onChange(e)},a=s,r(i,a)}return s(t,e),d(t,[{key:"componentWillMount",value:function(){return this.state.isControlled===!0?this.setInputValue(this.props.inputProps.value):void this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function(e){e.inputProps.value!==this.props.inputProps.value&&this.setInputValue(e.inputProps.value)}},{key:"setValue",value:function(e){this.setInputValue(e),this.refs.field.value=e,this.state.isControlled===!0&&(this.refs.field.dispatchEvent(new Event("input",{bubbles:!0})),this.refs.field.dispatchEvent(new Event("change",{bubbles:!0})))}},{key:"getPlaceholderText",value:function(){var e=""!==this.state.input,t=this.props.hidePlaceholderOnFocus===!0?this.state.isFocused===!1&&e===!1:e===!1;return t?this.props.inputProps.placeholder:""}},{key:"renderPlaceholder",value:function(){return a.a.createElement("div",{ref:"placeholder",className:"b-input-placeholder b-input"},this.getPlaceholderText())}},{key:"render",value:function(){var e=this.props;return a.a.createElement("div",h({},n.i(f.a)(e,t.internalKeys),{ref:"wrapper",className:c()("b-input-wrapper",e.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),a.a.createElement("input",h({},e.inputProps,{ref:"field",className:c()("b-input",e.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})))}}]),t}(a.a.PureComponent);y.propTypes={hidePlaceholderOnFocus:i.PropTypes.bool,inputProps:i.PropTypes.shape({defaultValue:i.PropTypes.string,onBlur:i.PropTypes.func,onFocus:i.PropTypes.func,onChange:i.PropTypes.func,placeholder:i.PropTypes.string,type:i.PropTypes.string,value:i.PropTypes.string})},y.defaultProps={hidePlaceholderOnFocus:!0,inputProps:{type:"text"}},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(6),c=(n.n(p),n(2)),l=n.n(c),u=n(8),f=n(3),h=n(4),d=n(0),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),b=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.state={indexOfOptionInFocus:null},i.handleKeyDown=function(e){var t=e.key,o=i.state.indexOfOptionInFocus;"ArrowLeft"===t?(i.setFocus(i.getPreviousOptionIndex(o)),e.preventDefault()):"ArrowRight"===t?(i.setFocus(i.getNextOptionIndex(o)),e.preventDefault()):"Enter"===t&&(i.handleOptionClick(i.props.options[o]),e.preventDefault()),n.i(f.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},a=s,r(i,a)}return s(t,e),m(t,[{key:"currentValue",value:function(){var e=void 0;return this.props.options.some(function(t){if(t.selected)return e=t.value,!0}),e}},{key:"setFocus",value:function(e){n.i(p.findDOMNode)(this.refs["option_$"+e]).focus()}},{key:"getNextOptionIndex",value:function(e){var t=e+1;return t<this.props.options.length?t:0}},{key:"getPreviousOptionIndex",value:function(e){var t=e-1;return t<0?this.props.options.length-1:t}},{key:"handleOptionBlur",value:function(e,t){this.state.indexOfOptionInFocus===this.props.options.indexOf(e)&&this.setState({indexOfOptionInFocus:null}),n.i(f.a)(e.onBlur)&&e.onBlur(t)}},{key:"handleOptionClick",value:function(e,t){this.props.onOptionSelected(e.value),n.i(f.a)(e.onClick)&&e.onClick(t)}},{key:"handleOptionFocus",value:function(e,t){this.setState({indexOfOptionInFocus:this.props.options.indexOf(e)}),n.i(f.a)(e.onFocus)&&e.onFocus(t)}},{key:"renderOptions",value:function(){var e=this;return this.props.options.map(function(o,r){return a.a.createElement(u.a,y({},n.i(d.a)(o,t.internalChildKeys),{role:"radio","aria-checked":String(o.selected),ref:"option_$"+r,key:o.value,className:l()("b-segmented-control-option",o.className,{"b-segmented-control-option-selected":o.selected}),tabIndex:o.selected?"0":"-1",onBlur:e.handleOptionBlur.bind(e,o),onPressed:e.handleOptionClick.bind(e,o),onFocus:e.handleOptionFocus.bind(e,o)}),o.content)})}},{key:"render",value:function(){return a.a.createElement("div",y({},n.i(d.a)(this.props,t.internalKeys),{ref:"wrapper",role:"radiogroup",className:l()("b-segmented-control",this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions())}}]),t}(a.a.PureComponent);b.propTypes={onOptionSelected:i.PropTypes.func,options:function(e){if(e.options.length<2)throw new Error("Must provide at least two options.");var t=e.options.some(function(e){if(!("selected"in e))return!0});if(t)throw new Error("Must provide a `selected` prop for each option.");var n=!1,o=e.options.some(function(e){if(e.selected){if(n)return!0;n=!0;
}});if(o)throw new Error("Encountered multiple options with `selected: true`. There can be only one.");if(e.options.some(function(e){return"undefined"==typeof e.value}))throw new Error("Must provide a `value` prop for each option.")}},b.defaultProps={onOptionSelected:h.a,options:[]},b.internalKeys=Object.keys(b.defaultProps),b.internalChildKeys=["content","value","selected"],t.a=b},function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(2),l=n.n(c),u=n(30),f=n.n(u),h=n(14),d=n(10),y=n(3),m=n(17),b=n(4),P=n(0),v=n(5),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),T=function(e){function t(){var e,n,o,i;r(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=o=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),w.call(o),i=n,s(o,i)}return i(t,e),O(t,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(e){e.entities!==this.props.entities&&this.computeMatches(e.entities),e.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(e.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(e,t){this.state.entityMatchIndexes.length&&!t.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==e.entities[t.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(e){this.setState({selectedEntityIndex:e},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(e){var t=this.state.entityMatchIndexes,n=t.length,o=t.indexOf(this.state.selectedEntityIndex)+e;if(n){o<0?o=n-1:o>=n&&(o=0);var r=t[o],s=this.refs.matches,i=s.scrollTop+s.clientHeight,a=this.refs["match_$"+r],p=a.offsetTop,c=p+a.clientHeight;c>=i?s.scrollTop+=c-i:p<=s.scrollTop&&(s.scrollTop=p),this.setState({selectedEntityIndex:r})}}},{key:"cursorAtEndOfInput",value:function(){var e=this.getInputNode();return e.selectionStart===e.selectionEnd&&e.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(e,t){for(var n=t.text,o=n.split(new RegExp("("+f()(e)+")","ig")),r=e.toLowerCase(),s=o.length,i=-1;++i<s;)o[i].toLowerCase()===r&&(o[i]=p.a.createElement("mark",{key:i,className:"b-typeahead-match-highlight"},o[i]));return o}},{key:"markStartsWithMatchSubstring",value:function(e,t){var n=t.text,o=e.toLowerCase(),r=n.toLowerCase().indexOf(o),s=r+o.length;return[p.a.createElement("span",{key:"0"},n.slice(0,r)),p.a.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},n.slice(r,s)),p.a.createElement("span",{key:"2"},n.slice(s))]}},{key:"getMarkingFunction",value:function(){return n.i(m.a)(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:n.i(y.a)(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,o){return t.text.toLowerCase().indexOf(n)!==-1?e.push(o)&&e:e},[])}},{key:"getStartsWithMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,o){return 0===t.text.toLowerCase().indexOf(n)&&e.push(o),e},[])}},{key:"getMatchingFunction",value:function(){return n.i(m.a)(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:n.i(y.a)(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(e){var t=this;this.setState(function(n,o){var r=e||o.entities,s=n.input,i=""===s?[]:t.getMatchIndexes(s,r);return{selectedEntityIndex:i.length?i[0]:-1,entityMatchIndexes:i}})}},{key:"renderNotification",value:function(){return p.a.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var e=this.state.input,t=this.getSelectedEntityText(),n="";return t&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(n=t.replace(new RegExp(e,"i"),e)),p.a.createElement("div",g({},this.props.hintProps,{ref:"hint",className:l()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),n)}}},{key:"renderMatches",value:function(){var e=this;if(this.state.entityMatchIndexes.length){var t=this.props.matchWrapperProps;return p.a.createElement("div",g({},t,{ref:"matches",className:l()("b-typeahead-match-wrapper",t.className)}),this.state.entityMatchIndexes.map(function(t){var n=e.props.entities[t],r=n.className,s=n.text,i=o(n,["className","text"]);return p.a.createElement("div",g({},i,{ref:"match_$"+t,className:l()("b-typeahead-match",r,{"b-typeahead-match-selected":e.state.selectedEntityIndex===t}),key:s,onClick:e.handleMatchClick.bind(e,t)}),e.markMatchSubstring(e.state.input,n))}))}}},{key:"render",value:function(){var e=this.props,o=this.state;return p.a.createElement("div",g({},n.i(P.a)(e,t.internalKeys),{ref:"wrapper",className:l()("b-typeahead-wrapper",e.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),p.a.createElement(h.a,g({},n.i(d.a)(e,h.a.defaultProps),{ref:"input","aria-controls":o.id,inputProps:g({},e.inputProps,{className:l()("b-typeahead",e.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),t}(p.a.PureComponent);T.mode={STARTS_WITH:n.i(v.a)(),FUZZY:n.i(v.a)()},T.propTypes=g({},h.a.propTypes,{algorithm:a.PropTypes.oneOfType([a.PropTypes.oneOf([T.mode.STARTS_WITH,T.mode.FUZZY]),a.PropTypes.shape({marker:a.PropTypes.oneOfType([a.PropTypes.func,a.PropTypes.oneOf([T.mode.STARTS_WITH,T.mode.FUZZY])]),matcher:a.PropTypes.oneOfType([a.PropTypes.func,a.PropTypes.oneOf([T.mode.STARTS_WITH,T.mode.FUZZY])])})]),clearOnSelection:a.PropTypes.bool,entities:a.PropTypes.arrayOf(a.PropTypes.shape({text:a.PropTypes.string.isRequired})),hint:a.PropTypes.bool,hintProps:a.PropTypes.object,matchWrapperProps:a.PropTypes.object,offscreenClass:a.PropTypes.string,onComplete:a.PropTypes.func,onEntityHighlighted:a.PropTypes.func,onEntitySelected:a.PropTypes.func}),T.defaultProps=g({},h.a.defaultProps,{algorithm:T.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:b.a,onEntityHighlighted:b.a,onEntitySelected:b.a}),T.internalKeys=Object.keys(T.defaultProps);var w=function(){var e=this;this.state={entityMatchIndexes:[],id:n.i(v.a)(),isControlled:n.i(m.a)(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.setState({input:t})},this.getSelectedEntityText=function(){var t=e.props.entities[e.state.selectedEntityIndex];return t?t.text:""},this.resetMatches=function(){e.mounted&&e.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return e.refs.input.refs.field},this.select=function(){var t=e.getInputNode();t.selectionStart=0,t.selectionEnd=e.getValue().length},this.focus=function(){return e.getInputNode().focus()},this.getValue=function(){return e.refs.input.getValue()},this.setValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";e.refs.input.setValue(t),e.updateInputState(t),e.resetMatches(),e.focus()},this.setValueWithSelectedEntity=function(){e.props.onEntitySelected(e.state.selectedEntityIndex),e.props.clearOnSelection?e.setValue(""):e.setValue(e.getSelectedEntityText()),window.setTimeout(e.resetMatches,0)},this.markMatchSubstring=function(){return e.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return e.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(t){e.state.isControlled===!1&&(e.updateInputState(t.target.value),e.computeMatches()),n.i(y.a)(e.props.inputProps.onChange)&&e.props.inputProps.onChange(t)},this.handleKeyDown=function(t){switch(t.key){case"ArrowLeft":t.target.selectionStart>1&&t.stopPropagation();break;case"Tab":case"ArrowRight":e.state.selectedEntityIndex!==-1&&e.cursorAtEndOfInput()&&e.getInputNode()===t.target&&!t.shiftKey&&(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity());break;case"ArrowUp":t.nativeEvent.preventDefault(),e.selectMatch(-1),e.focus();break;case"ArrowDown":t.nativeEvent.preventDefault(),e.selectMatch(1),e.focus();break;case"Escape":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target&&e.resetMatches();break;case"Enter":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target?(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity()):e.props.onComplete(e.state.input,t)}n.i(y.a)(e.props.onKeyDown)&&e.props.onKeyDown(t)}};t.a=T},function(e,t,n){"use strict";t.a=function(e){return"string"==typeof e}},function(e,t){(function(t){e.exports=t}).call(t,{})},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(13),u=n(0),f=n(4),h=n(5),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),m=function(e){function t(){return o(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),y(t,[{key:"allItemsChecked",value:function(){return this.props.items.every(function(e){return e.inputProps.checked===!0})}},{key:"anyItemsChecked",value:function(){return this.props.items.some(function(e){return e.inputProps.checked===!0})}},{key:"renderSelectAll",value:function(){if(this.props.selectAll){var e=this.allItemsChecked(),t=this.props.selectAllProps.inputProps;return a.a.createElement(l.a,d({},this.props.selectAllProps,{ref:"select_all",key:"cb_select_all",className:c()("b-checkbox-group-selectall",this.props.selectAllProps.className),inputProps:d({},t,{checked:e,indeterminate:!e&&this.anyItemsChecked(),name:t&&t.name?t.name:"cb_select_all"}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}}},{key:"renderCheckboxes",value:function(){var e=this;return this.props.items.map(function(t){return a.a.createElement(l.a,d({},t,{key:t.inputProps.name,onChecked:e.props.onChildChecked,onUnchecked:e.props.onChildUnchecked}))})}},{key:"renderChildren",value:function(){var e=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition)switch(this.props.selectAllPosition){case t.selectAllPosition.BEFORE:e.unshift(this.renderSelectAll());break;case t.selectAllPosition.AFTER:e.push(this.renderSelectAll())}return e}},{key:"render",value:function(){return a.a.createElement("div",d({},n.i(u.a)(this.props,t.internalKeys),{ref:"group",className:c()("b-checkbox-group",this.props.className)}),this.renderChildren())}}]),t}(a.a.PureComponent);m.selectAllPosition={BEFORE:n.i(h.a)(),AFTER:n.i(h.a)()},m.propTypes={items:i.PropTypes.arrayOf(l.a.propTypes.inputProps).isRequired,onAllChecked:i.PropTypes.func,onAllUnchecked:i.PropTypes.func,onChildChecked:i.PropTypes.func,onChildUnchecked:i.PropTypes.func,selectAll:i.PropTypes.bool,selectAllProps:i.PropTypes.shape({label:i.PropTypes.string,inputProps:i.PropTypes.object}),selectAllPosition:i.PropTypes.oneOf([m.selectAllPosition.BEFORE,m.selectAllPosition.AFTER])},m.defaultProps={items:[],onAllChecked:f.a,onAllUnchecked:f.a,onChildChecked:f.a,onChildUnchecked:f.a,selectAll:!1,selectAllProps:{},selectAllPosition:m.selectAllPosition.BEFORE},m.internalKeys=Object.keys(m.defaultProps),t.a=m},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return parseInt(e,10)}function a(e){var t=n.i(h.findDOMNode)(e),o=window.getComputedStyle(t.parentNode),r=i(window.getComputedStyle(t).fontSize),s=i(o.height),a=i(o.width);"border-box"!==o.boxSizing&&"padding-box"!==o.boxSizing||(s-=i(o.paddingTop)+i(o.paddingBottom),a-=i(o.paddingLeft)+i(o.paddingRight));var p=Math.floor(r/t.offsetHeight*s),c=Math.floor(r/t.offsetWidth*a);t.style.fontSize=(Math.min(e.props.maxFontSize,p,c)||1)+"px"}function p(){v.forEach(function(e){return a(e)})}function c(e){0===v.length&&window.addEventListener("resize",p,!0),v.push(e)}function l(e){v.splice(v.indexOf(e),1),0===v.length&&window.removeEventListener("resize",p,!0)}var u=n(1),f=n.n(u),h=n(6),d=(n.n(h),n(2)),y=n.n(d),m=n(0),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},P=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),v=[],g=function(e){function t(){return o(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),P(t,[{key:"componentDidMount",value:function(){a(this),c(this)}},{key:"componentDidUpdate",value:function(){a(this)}},{key:"componentWillUnmount",value:function(){l(this)}},{key:"render",value:function(){return f.a.createElement(this.props.component,b({},n.i(m.a)(this.props,t.internalKeys),{className:y()("b-text",this.props.className)}),this.props.children)}}]),t}(f.a.PureComponent);g.propTypes={component:u.PropTypes.oneOfType([u.PropTypes.string,u.PropTypes.func]),maxFontSize:u.PropTypes.number},g.defaultProps={component:"span",maxFontSize:Number.MAX_VALUE},g.internalKeys=Object.keys(g.defaultProps),t.a=g},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(4),u=n(0),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},h=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),d=function(e){function t(){var e,n,s,i;o(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=s=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.state={status:t.status.LOADING},i=n,r(s,i)}return s(t,e),h(t,[{key:"componentWillReceiveProps",value:function(e){e.src!==this.props.src&&(this.resetPreloader(),this.setState({status:t.status.LOADING}))}},{key:"componentDidMount",value:function(){this.preload()}},{key:"componentDidUpdate",value:function(){this.preload()}},{key:"componentWillUnmount",value:function(){this.resetPreloader()}},{key:"resetPreloader",value:function(){this.loader.onload=null,this.loader.onerror=null,this.loader=null}},{key:"preload",value:function(){var e=this;this.loader||(this.loader=document.createElement("img"),this.loader.onload=function(){return e.setState({status:t.status.LOADED})},this.loader.onerror=function(){return e.setState({status:t.status.ERROR})},this.loader.src=this.props.src)}},{key:"renderImage",value:function(){return this.props.displayAsBackgroundImage?a.a.createElement("div",f({},this.props.imageProps,{ref:"image",className:c()("b-image",this.props.imageProps.className),title:this.props.alt,style:f({},this.props.imageProps.style,{backgroundImage:"url("+this.props.src+")"})})):a.a.createElement("img",f({},this.props.imageProps,{ref:"image",className:c()("b-image",this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:l.a,onError:l.a}))}},{key:"renderStatus",value:function(){return a.a.createElement("div",f({},this.props.statusProps,{ref:"status",className:c()("b-image-status",this.props.statusProps.className,{"b-image-loading":this.state.status===t.status.LOADING,"b-image-loaded":this.state.status===t.status.LOADED,"b-image-error":this.state.status===t.status.ERROR}),role:"presentation"}))}},{key:"render",value:function(){return a.a.createElement("div",f({},n.i(u.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-image-wrapper",this.props.className)}),this.renderImage(),this.renderStatus())}}]),t}(a.a.PureComponent);d.status={LOADING:"LOADING",LOADED:"LOADED",ERROR:"ERROR"},d.propTypes={alt:i.PropTypes.string,displayAsBackgroundImage:i.PropTypes.bool,imageProps:i.PropTypes.object,src:i.PropTypes.string.isRequired,statusProps:i.PropTypes.object},d.defaultProps={alt:null,displayAsBackgroundImage:!1,imageProps:{},src:"about:blank",statusProps:{}},d.internalKeys=Object.keys(d.defaultProps),t.a=d},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(9),u=n(7),f=n(10),h=n(0),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),m=function(e){function t(){return o(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),y(t,[{key:"render",value:function(){var e=this,o=this.props;return a.a.createElement(u.a,o.portalProps,a.a.createElement("div",d({},n.i(h.a)(o,t.internalKeys),{ref:function(t){return e.$modal=t},className:c()("b-modal-wrapper",o.className)}),a.a.createElement("div",d({},o.maskProps,{className:c()("b-modal-mask",o.maskProps.className)})),a.a.createElement(l.a,d({},n.i(f.a)(o,l.a.defaultProps),o.modalProps,{className:c()("b-modal",o.modalProps.className)}),o.children)))}}]),t}(a.a.PureComponent);m.propTypes=d({},l.a.propTypes,{maskProps:i.PropTypes.object,modalProps:i.PropTypes.object,portalProps:i.PropTypes.shape(u.a.propTypes)}),m.defaultProps=d({},l.a.defaultProps,{captureFocus:!0,maskProps:{},modalProps:{},portalProps:{}}),m.internalKeys=Object.keys(m.defaultProps),t.a=m},function(e,t,n){"use strict";function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(6),l=(n.n(c),n(2)),u=n.n(l),f=n(29),h=n.n(f),d=n(12),y=n(15),m=n(11),b=n(3),P=n(4),v=n(0),g=n(5),O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},T=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),w=function(e){return e},k=function(e){function t(){var e,n,o,i;r(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=o=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),o.state={currentPage:o.props.initialPage,targetIndex:(o.props.initialPage-1)*o.props.numItemsPerPage},o.currentPage=function(){return o.state.currentPage},o.getPageForIndex=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.props.numItemsPerPage;return Math.ceil((e+1)/t)},o.totalPages=function(){return Math.ceil(o.props.totalItems/o.props.numItemsPerPage)},o.firstVisibleItemIndex=function(){return(o.currentPage()-1)*o.props.numItemsPerPage},o.pageToIndex=function(e){return e<0||e>=o.props.totalItems?new Error("Cannot page to invalid index "+e+"."):void o.setState({currentPage:o.getPageForIndex(e),targetIndex:e})},o.handleClick=function(e){var n=void 0;switch(e){case t.controls.FIRST:n=0;break;case t.controls.PREVIOUS:n=o.firstVisibleItemIndex()-o.props.numItemsPerPage;break;case t.controls.NEXT:n=o.firstVisibleItemIndex()+o.props.numItemsPerPage;break;case t.controls.LAST:n=o.props.totalItems-1;break;default:n=parseInt(e,10)*o.props.numItemsPerPage-1}o.setState({currentPage:o.getPageForIndex(n),targetIndex:n})},i=n,s(o,i)}return i(t,e),T(t,[{key:"componentDidUpdate",value:function(e,t){t.currentPage!==this.currentPage()&&n.i(c.findDOMNode)(this.refs.item_0).focus()}},{key:"componentWillReceiveProps",value:function(){var e=this,t=this.props;this.setState(function(n,o){return o.identifier!==t.identifier?{currentPage:1,targetIndex:0}:{currentPage:e.getPageForIndex(n.targetIndex,o.numItemsPerPage),targetIndex:n.targetIndex}})}},{key:"createPageButtonOptions",value:function(){var e=[],o=this.currentPage(),r=this.props.numPageToggles,s=this.totalPages(),i=o-(o-1)%r,a=Math.min(i+r-1,s);this.props.showPaginationState&&e.push({selected:!1,content:n.i(b.a)(this.props.showPaginationState)?this.props.showPaginationState(o,s):o+" of "+s,value:"",disabled:!0,className:"b-pagination-control b-pagination-control-state"}),this.props.showJumpToFirst&&e.push({selected:!1,content:this.props.jumpToFirstControlContent,value:t.controls.FIRST,disabled:1===this.currentPage(),className:"b-pagination-control b-pagination-control-first"}),e.push({selected:!1,content:this.props.previousPageControlContent,value:t.controls.PREVIOUS,disabled:1===this.currentPage(),className:"b-pagination-control b-pagination-control-previous"});for(var p=i;p<=a;p++)e.push({className:"b-pagination-control","data-page-number":p,selected:p===this.currentPage(),content:p,value:p});return e.push({selected:!1,content:this.props.nextPageControlContent,value:t.controls.NEXT,disabled:this.currentPage()===s,className:"b-pagination-control b-pagination-control-next"}),this.props.showJumpToLast&&e.push({selected:!1,content:this.props.jumpToLastControlContent,value:t.controls.LAST,disabled:this.currentPage()===s,className:"b-pagination-control b-pagination-control-last"}),this.props.customControlContent&&e.push({selected:!1,content:this.props.customControlContent,value:n.i(g.a)(),disabled:!0,className:"b-pagination-control b-pagination-control-custom"}),e}},{key:"generateItems",value:function(){for(var e=[],t=this.firstVisibleItemIndex(),n=Math.min(this.props.totalItems,t+this.props.numItemsPerPage)-1,o=t;o<=n;o+=1)e.push({data:this.props.getItem(o)});return e}},{key:"renderItems",value:function(){var e=this,t=this.props.listWrapperProps,n=this.props.numItemsPerPage*(this.currentPage()-1);return p.a.createElement(m.a,O({},t,{ref:"itemList",className:u()("b-pagination-items",t.className)}),this.generateItems().map(function(t,o){return p.a.createElement(d.a,{ref:"item_"+o,key:o,className:u()("b-pagination-item",{"b-pagination-item-even":o%2===0,"b-pagination-item-odd":o%2!==0}),convertToJSXFunc:e.props.itemToJSXConverterFunc,data:t.data,"data-pagination-index":n+o,loadingContent:e.props.itemLoadingContent})}))}},{key:"renderControls",value:function(e){if(!(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage)){var t=this.props.toggleWrapperProps,n=e.toLowerCase(),r=n[0].toUpperCase()+n.slice(1);return p.a.createElement(y.a,O({},t,{ref:"segmentedControl"+r,className:u()("b-pagination-controls",t.className,o({},"b-pagination-controls-"+n,!0)),options:this.createPageButtonOptions(),onOptionSelected:this.handleClick}))}}},{key:"renderView",value:function(){var e=this.props,n=t.positions;return p.a.createElement("div",{ref:"paginatedView",className:"b-pagination"},e.position===n.ABOVE||e.position===n.BOTH?this.renderControls(n.ABOVE):P.a,e.before,this.renderItems(),e.after,e.position===n.BELOW||e.position===n.BOTH?this.renderControls(n.BELOW):P.a)}},{key:"render",value:function(){return p.a.createElement("div",O({},n.i(v.a)(this.props,t.internalKeys),{ref:"wrapper",className:u()("b-pagination-wrapper",this.props.className)}),this.renderView())}}]),t}(p.a.PureComponent);k.controls={FIRST:"FIRST",PREVIOUS:"PREVIOUS",NEXT:"NEXT",LAST:"LAST"},k.positions={ABOVE:"ABOVE",BELOW:"BELOW",BOTH:"BOTH"},k.propTypes={after:a.PropTypes.node,before:a.PropTypes.node,customControlContent:a.PropTypes.node,getItem:a.PropTypes.func,hidePagerIfNotNeeded:a.PropTypes.bool,identifier:a.PropTypes.string.isRequired,initialPage:function(e){if(h()(e.initialPage)===!1)return new Error("`initialPage` must be an integer.");var t=Math.ceil(e.totalItems/e.numItemsPerPage);return e.initialPage<1||e.initialPage>t?new Error("`initialPage` must be between 1 and "+t+"."):void 0},itemLoadingContent:a.PropTypes.node,itemToJSXConverterFunc:a.PropTypes.func,jumpToFirstControlContent:a.PropTypes.node,jumpToLastControlContent:a.PropTypes.node,listWrapperProps:a.PropTypes.object,nextPageControlContent:a.PropTypes.node,numItemsPerPage:function(e){return h()(e.numItemsPerPage)===!1?new Error("`numItemsPerPage` must be an integer."):e.numItemsPerPage<1?new Error("`numItemsPerPage` must be greater than zero."):void 0},numPageToggles:a.PropTypes.number,position:a.PropTypes.oneOf(Object.keys(k.positions)),previousPageControlContent:a.PropTypes.node,showJumpToFirst:a.PropTypes.bool,showJumpToLast:a.PropTypes.bool,showPaginationState:a.PropTypes.oneOfType([a.PropTypes.bool,a.PropTypes.func]),toggleWrapperProps:a.PropTypes.object,totalItems:a.PropTypes.number.isRequired},k.defaultProps={after:null,before:null,customControlContent:null,getItem:P.a,hidePagerIfNotNeeded:!1,identifier:n.i(g.a)(),initialPage:1,itemLoadingContent:null,itemToJSXConverterFunc:w,jumpToFirstControlContent:"« First",jumpToLastControlContent:"Last »",listWrapperProps:{},nextPageControlContent:"Next ›",numItemsPerPage:10,numPageToggles:5,position:k.positions.ABOVE,previousPageControlContent:"‹ Previous",showJumpToFirst:!0,showJumpToLast:!0,showPaginationState:!0,toggleWrapperProps:{},totalItems:null},k.internalKeys=Object.keys(k.defaultProps),t.a=k},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){switch(e[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function a(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}var p=n(1),c=n.n(p),l=n(6),u=(n.n(l),n(2)),f=n.n(u),h=n(9),d=n(7),y=n(0),m=n(31),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},P=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),v=/\s?b-popover-(anchor|self)-(start|middle|end)/g,g=c.a.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},c.a.createElement("g",null,c.a.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),c.a.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),O=0,T=1,w=2,k=[{
name:"NNW",ax:O,ay:O,dx:O,dy:w},{name:"N",ax:T,ay:O,dx:T,dy:w},{name:"NNE",ax:w,ay:O,dx:w,dy:w},{name:"ENE",ax:w,ay:O,dx:O,dy:O},{name:"E",ax:w,ay:T,dx:O,dy:T},{name:"ESE",ax:w,ay:w,dx:O,dy:w},{name:"SSE",ax:w,ay:w,dx:w,dy:O},{name:"S",ax:T,ay:w,dx:T,dy:O},{name:"SSW",ax:O,ay:w,dx:O,dy:O},{name:"WSW",ax:O,ay:w,dx:w,dy:w},{name:"W",ax:O,ay:T,dx:w,dy:T},{name:"WNW",ax:O,ay:O,dx:w,dy:O}],C=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.align=function(){var e=i.props.anchor instanceof HTMLElement?i.props.anchor:n.i(l.findDOMNode)(i.props.anchor),o=i.props.caretAnchor?i.props.caretAnchor instanceof HTMLElement?i.props.caretAnchor:n.i(l.findDOMNode)(i.props.caretAnchor):e;i.cacheViewportCartography(e,o);var r=i.getValidAlignmentPreset(),s=t.getAlignmentClassFragment;i.dialog.$wrapper.className=i.dialog.$wrapper.className.replace(v,"")+(" b-popover-anchor-x-"+s(r.ax))+(" b-popover-anchor-y-"+s(r.ay))+(" b-popover-self-x-"+s(r.dx))+(" b-popover-self-y-"+s(r.dy));var a=Math.round(i.getNextDialogXPosition(r)),p=Math.round(i.getNextDialogYPosition(r));i.dialog.$wrapper.style[m.a]="translate("+a+"px, "+p+"px)";var c=r.name[0],u="N"===c||"S"===c;i.$caret.style[u?"left":"top"]=Math.round(i.getNextCaretXPosition(r))+"px",i.$caret.style[u?"top":"left"]="0px"},a=s,r(i,a)}return s(t,e),P(t,[{key:"cacheViewportCartography",value:function(e,t){var n=document.body.getBoundingClientRect();this.anchorRect=e.getBoundingClientRect(),this.caretAnchorRect=t.getBoundingClientRect(),this.bodyLeft=n.left*-1,this.bodyTop=n.top*-1}},{key:"getNextCaretXPosition",value:function(e){var t=e.name,n=(e.ax,e.dx),o=(e.ay,e.dy),r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,s=0;return"N"===t[0]||"S"===t[0]?(s=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,n===T?s+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:n===w&&(s+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(s=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,o===T?s+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:o===w&&(s+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),s-=r.clientWidth/2}},{key:"getNextDialogXPosition",value:function(e){var t=e.ax,n=e.dx,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,r=this.anchorRect.left+this.bodyLeft;switch(t){case T:r+=this.anchorRect.width/2;break;case w:r+=this.anchorRect.width}switch(n){case T:r-=o.clientWidth/2;break;case w:r-=o.clientWidth}return r}},{key:"getNextDialogYPosition",value:function(e){var t=e.ay,n=e.dy,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,r=this.anchorRect.top+this.bodyTop;switch(t){case T:r+=this.anchorRect.height/2;break;case w:r+=this.anchorRect.height}switch(n){case T:r-=o.clientHeight/2;break;case w:r-=o.clientHeight}return r}},{key:"isPositionValid",value:function(e,t,n){var o=e.name,r=e.ax,s=e.ay,i=(e.dx,e.dy,o[0]);return"N"===i||"S"===i?!("N"===i&&this.anchorRect.top-t<0)&&(!("S"===i&&this.anchorRect.bottom+t>window.innerHeight)&&(r===O?!(this.anchorRect.left+n>window.innerWidth||this.anchorRect.left<0):r===T?!(this.anchorRect.left-n/2<0||this.anchorRect.left+n/2>window.innerWidth):!(this.anchorRect.left-n<0||this.anchorRect.right>window.innerWidth))):"W"!==i&&"E"!==i||!("W"===i&&this.anchorRect.left-n<0)&&(!("E"===i&&this.anchorRect.right+n>window.innerWidth)&&(s===O?!(this.anchorRect.top+t>window.innerHeight||this.anchorRect.top<0):s===T?!(this.anchorRect.top+this.anchorRect.height/2-t/2<0||this.anchorRect.top+this.anchorRect.height/2+t/2>window.innerHeight):!(this.anchorRect.top-t<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var e=this,t=this.dialog.$wrapper.clientWidth,n=this.dialog.$wrapper.clientHeight,o=k.filter(function(o){return e.isPositionValid(o,n,t)});if(o.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!o.length)return this.props.preset;var r=o.filter(function(t){var n=t.name;return n[0]===e.props.preset.name[0]});if(r.length)return r[0];var s=i(this.props.preset.name),a=o.filter(function(e){var t=e.name;return t[0]===s});return a.length?a[0]:o[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var e=this,o=this.props;return c.a.createElement(d.a,o.portalProps,c.a.createElement(h.a,b({},n.i(y.a)(o,t.internalKeys),{ref:function(t){return e.dialog=t},before:c.a.cloneElement(o.caretComponent,{ref:function(t){return e.$caret=t},className:f()("b-popover-caret",o.caretComponent.props.className)}),wrapperProps:b({},o.wrapperProps,{className:f()("b-popover",o.wrapperProps.className)})})))}}],[{key:"getAlignmentClassFragment",value:function(e){switch(e){case O:return"start";case T:return"middle";case w:return"end"}}}]),t}(c.a.PureComponent);C.preset=k.reduce(function(e,t){return e[t.name]=t,e},{}),C.propTypes=b({},h.a.propTypes,{anchor:p.PropTypes.oneOfType([p.PropTypes.instanceOf(HTMLElement),p.PropTypes.element]).isRequired,autoReposition:p.PropTypes.bool,caretAnchor:p.PropTypes.oneOfType([p.PropTypes.instanceOf(HTMLElement),p.PropTypes.element]),caretComponent:p.PropTypes.element,portalProps:p.PropTypes.shape(d.a.PropTypes),preset:p.PropTypes.oneOf([C.preset.NNW,C.preset.N,C.preset.NNE,C.preset.ENE,C.preset.E,C.preset.ESE,C.preset.SSE,C.preset.S,C.preset.SSW,C.preset.WSW,C.preset.W,C.preset.WNW]),wrapperProps:p.PropTypes.object}),C.defaultProps=b({},h.a.defaultProps,{anchor:void 0,autoReposition:!0,captureFocus:!1,caretAnchor:void 0,caretComponent:g,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:C.preset.S,wrapperProps:{}}),C.internalKeys=a(Object.keys(C.defaultProps),h.a.internalKeys),t.a=C},function(e,t,n){"use strict";function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(2),l=n.n(c),u=n(8),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),y=function(e){function t(){return r(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),d(t,[{key:"renderLabel",value:function(){if(this.props.label)return p.a.createElement("div",h({},this.props.labelProps,{ref:"label",className:l()("b-progress-label",this.props.labelProps.className)}),this.props.label)}},{key:"renderCancel",value:function(){if(this.props.onCancel)return p.a.createElement(u.a,h({},this.props.cancelProps,{ref:"cancel",className:l()("b-progress-cancel",this.props.cancelProps.className),onPressed:this.props.onCancel}))}},{key:"renderProgress",value:function(){return p.a.createElement("div",h({},this.props.progressProps,{ref:"progress",className:l()("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":"undefined"==typeof this.props.progress}),role:"presentation",style:h({},this.props.progressProps.style,o({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function(){return p.a.createElement(this.props.component,h({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:l()("b-progress-wrapper",this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel())}}]),t}(p.a.PureComponent);y.propTypes={cancelProps:a.PropTypes.object,component:a.PropTypes.oneOfType([a.PropTypes.string,a.PropTypes.func]),label:a.PropTypes.node,labelProps:a.PropTypes.object,onCancel:a.PropTypes.func,progress:a.PropTypes.oneOfType([a.PropTypes.string,a.PropTypes.number]),progressProps:a.PropTypes.object,tweenProperty:a.PropTypes.string},y.defaultProps={cancelProps:{},component:"div",label:null,labelProps:{},onCancel:null,progress:void 0,progressProps:{},tweenProperty:"width"},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),y=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.state={expanded:i.props.expanded},i.dispatchCallback=function(){i.props[i.state.expanded?"onExpand":"onHide"]()},i.handleClick=function(e){i.setState({expanded:!i.state.expanded},i.dispatchCallback),n.i(l.a)(i.props.toggleProps.onClick)&&i.props.toggleProps.onClick(e)},i.handleKeyDown=function(e){switch(e.key){case"Enter":e.preventDefault(),i.setState({expanded:!i.state.expanded},i.dispatchCallback)}n.i(l.a)(i.props.toggleProps.onKeyDown)&&i.props.toggleProps.onKeyDown(e)},a=s,r(i,a)}return s(t,e),d(t,[{key:"componentWillReceiveProps",value:function(e){e.expanded!==this.props.expanded&&this.setState({expanded:e.expanded},this.dispatchCallback)}},{key:"renderContent",value:function(){if(this.state.expanded)return a.a.createElement("div",{ref:"content",className:"b-disclosure-content"},n.i(l.a)(this.props.children)?this.props.children():this.props.children)}},{key:"render",value:function(){return a.a.createElement(this.props.component,h({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),a.a.createElement("div",h({},this.props.toggleProps,{ref:"toggle",className:c()("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent())}}]),t}(a.a.PureComponent);y.propTypes={children:i.PropTypes.any,component:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.func]),expanded:i.PropTypes.bool,onExpand:i.PropTypes.func,onHide:i.PropTypes.func,teaser:i.PropTypes.node,teaserExpanded:i.PropTypes.node,toggleProps:i.PropTypes.object},y.defaultProps={children:null,component:"div",expanded:!1,onExpand:u.a,onHide:u.a,teaser:null,teaserExpanded:null,toggleProps:{}},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=n(5),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),m=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.uuid=n.i(h.a)(),i.handleChange=function(e){e.target.checked&&i.props.onSelected(e.target.value),n.i(l.a)(i.props.inputProps.onChange)&&i.props.inputProps.onChange(e)},a=s,r(i,a)}return s(t,e),y(t,[{key:"renderInput",value:function(){return a.a.createElement("input",d({},this.props.inputProps,{ref:"input",type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:c()("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function(){if(this.props.label)return a.a.createElement("label",d({},this.props.labelProps,{ref:"label",className:c()("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label)}},{key:"render",value:function(){return a.a.createElement("div",d({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),t}(a.a.PureComponent);m.propTypes={inputProps:i.PropTypes.object,label:i.PropTypes.node,labelProps:i.PropTypes.object,name:i.PropTypes.string.isRequired,onSelected:i.PropTypes.func,selected:i.PropTypes.bool,value:i.PropTypes.string.isRequired},m.defaultProps={inputProps:{},label:null,labelProps:{},name:"",onSelected:u.a,selected:!1,value:""},m.internalKeys=Object.keys(m.defaultProps),t.a=m},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(16),u=n(10),f=n(3),h=n(4),d=n(0),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),b=function(e){return e[0]},P=function(e){return e[e.length-1]},v=function(e){function t(){var e,s,i,a;o(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return s=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.focus=function(){return i.refs.typeahead.focus()},i.getInputNode=function(){return i.refs.typeahead.getInputNode()},i.getSelectedEntityText=function(){return i.refs.typeahead.getSelectedEntityText()},i.getValue=function(){return i.refs.typeahead.getValue()},i.select=function(){return i.refs.typeahead.select()},i.setValue=function(e){return i.refs.typeahead.setValue(e)},i.add=function(e){i.props.tokens.indexOf(e)===-1&&i.props.handleAddToken(e)},i.handleInputClick=function(e){i.clearSelection(),n.i(f.a)(i.props.inputProps.onClick)&&i.props.inputProps.onClick(e)},i.handleInputFocus=function(e){i.clearSelection(),n.i(f.a)(i.props.inputProps.onFocus)&&i.props.inputProps.onFocus(e)},i.handleKeyDown=function(e){switch(e.which){case 37:i.selectPreviousToken(e.shiftKey);break;case 39:i.selectNextToken(e.shiftKey);break;case 8:i.props.tokensSelected.length&&(i.remove(i.props.tokensSelected),i.focus());break;case 65:e.metaKey&&(e.preventDefault(),i.focus(),i.select(),i._suppressNextTokenSelection=!0,i.props.handleNewSelection(i.props.tokens))}n.i(f.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},a=s,r(i,a)}return s(t,e),m(t,[{key:"componentDidUpdate",value:function(e){var t=e.tokensSelected,n=this.props.tokensSelected;if(this.props.tokens.length>e.tokens.length&&this.setValue(""),this._suppressNextTokenSelection)return void(this._suppressNextTokenSelection=!1);if(t!==n&&0!==n.length){if(1===n.length||n[0]!==t[0])return this.refs["token_"+n[0]].focus();if(P(n)!==P(t))return this.refs["token_"+P(n)].focus();this.refs["token_"+n[0]].focus()}}},{key:"remove",value:function(e){var t=this,n=(Array.isArray(e)?e:[e]).filter(function(e){return t.props.tokens.indexOf(e)!==-1});n.length&&this.props.handleRemoveTokens(n)}},{key:"selectToken",value:function(e){this.props.handleNewSelection([e])}},{key:"selectTokens",value:function(e){this.props.handleNewSelection(e)}},{key:"selectPreviousToken",value:function(e){var t=this.props.tokensSelected,n=this.props.tokens;if(1!==t.length||b(t)!==b(n))if(0===t.length)this.selectToken(P(n));else{var o=n[n.indexOf(b(t))-1];this.selectTokens(e?[o].concat(t):[o])}}},{key:"selectNextToken",value:function(e){var t=this.props.tokensSelected,n=this.props.tokens;if(0!==t.length)if(P(t)===P(n))this.clearSelection(),this.focus();else{var o=n[n.indexOf(P(t))+1];this.selectTokens(e?t.concat(o):[o])}}},{key:"clearSelection",value:function(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function(e,t){t.stopPropagation(),this.remove(e),this.focus(),this.props.tokenCloseComponent.props.onClick&&this.props.tokenCloseComponent.props.onClick(t)}},{key:"renderTokenClose",value:function(e){if(this.props.tokenCloseVisible)return a.a.cloneElement(this.props.tokenCloseComponent,{className:c()("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,e)})}},{key:"handleTokenKeyDown",value:function(e,t){switch(t.which){case 13:case 32:this.selectToken(e),t.preventDefault();break;case 8:this.remove(e),this.focus(),t.preventDefault()}}},{key:"renderTokens",value:function(){var e=this;return a.a.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(t){return a.a.createElement("div",{ref:"token_"+t,key:t,className:c()("b-tokenfield-token",{"b-tokenfield-token-selected":e.props.tokensSelected.indexOf(t)!==-1}),onClick:e.selectToken.bind(e,t),onKeyDown:e.handleTokenKeyDown.bind(e,t),tabIndex:"0"},e.props.entities[t].text,e.renderTokenClose(t))}))}},{key:"render",value:function(){return a.a.createElement("div",y({},n.i(d.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),a.a.createElement(l.a,y({},n.i(u.a)(this.props,l.a.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:!0,inputProps:y({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]),t}(a.a.PureComponent);v.propTypes=y({},l.a.propTypes,{handleAddToken:i.PropTypes.func,handleRemoveTokens:i.PropTypes.func,handleNewSelection:i.PropTypes.func,tokenCloseComponent:i.PropTypes.element,tokenCloseVisible:i.PropTypes.bool,tokens:i.PropTypes.arrayOf(i.PropTypes.number),tokensSelected:i.PropTypes.arrayOf(i.PropTypes.number)}),v.defaultProps=y({},l.a.defaultProps,{handleAddToken:h.a,handleRemoveTokens:h.a,handleNewSelection:h.a,tokenCloseComponent:a.a.createElement("div",null,"X"),tokenCloseVisible:!0,tokens:[],tokensSelected:[]}),v.internalKeys=Object.keys(v.defaultProps),t.a=v},function(e,t){function n(e){return"number"==typeof e&&e==a(e)}function o(e){var t="undefined"==typeof e?"undefined":c(e);return!!e&&("object"==t||"function"==t)}function r(e){return!!e&&"object"==("undefined"==typeof e?"undefined":c(e))}function s(e){return"symbol"==("undefined"==typeof e?"undefined":c(e))||r(e)&&g.call(e)==h}function i(e){if(!e)return 0===e?e:0;if(e=p(e),e===l||e===-l){var t=e<0?-1:1;return t*u}return e===e?e:0}function a(e){var t=i(e),n=t%1;return t===t?n?t-n:t:0}function p(e){if("number"==typeof e)return e;if(s(e))return f;if(o(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(d,"");var n=m.test(e);return n||b.test(e)?P(e.slice(2),n?2:8):y.test(e)?f:+e}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l=1/0,u=1.7976931348623157e308,f=NaN,h="[object Symbol]",d=/^\s+|\s+$/g,y=/^[-+]0x[0-9a-f]+$/i,m=/^0b[01]+$/i,b=/^0o[0-7]+$/i,P=parseInt,v=Object.prototype,g=v.toString;e.exports=n},function(e,t,n){"use strict";var o=/[|\\{}()[\]^$+*?.]/g;e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(o,"\\$&")}},function(e,t,n){"use strict";t.a=function(){for(var e=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"],t=0,n=e.length;t<n;t++)if(e[t]in document.documentElement.style)return e[t];return!1}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(11);n.d(t,"ArrowKeyNavigation",function(){return o.a});var r=n(12);n.d(t,"Async",function(){return r.a});var s=n(8);n.d(t,"Button",function(){return s.a});var i=n(13);n.d(t,"Checkbox",function(){return i.a});var a=n(19);n.d(t,"CheckboxGroup",function(){return a.a});var p=n(9);n.d(t,"Dialog",function(){return p.a});var c=n(20);n.d(t,"FittedText",function(){return c.a});var l=n(21);n.d(t,"Image",function(){return l.a});var u=n(14);n.d(t,"Input",function(){return u.a});var f=n(22);n.d(t,"Modal",function(){return f.a});var h=n(23);n.d(t,"Pagination",function(){return h.a});var d=n(24);n.d(t,"Popover",function(){return d.a});var y=n(7);n.d(t,"Portal",function(){return y.a});var m=n(26);n.d(t,"ProgressiveDisclosure",function(){return m.a});var b=n(25);n.d(t,"Progress",function(){return b.a});var P=n(27);n.d(t,"Radio",function(){return P.a});var v=n(15);n.d(t,"SegmentedControl",function(){return v.a});var g=n(28);n.d(t,"TokenizedInput",function(){return g.a});var O=n(16);n.d(t,"Typeahead",function(){return O.a})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,