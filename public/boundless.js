!function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],factory):"object"==typeof exports?exports.Boundless=factory(require(void 0),require(void 0)):root.Boundless=factory(root.React,root.ReactDOM)}(this,function(__WEBPACK_EXTERNAL_MODULE_0__,__WEBPACK_EXTERNAL_MODULE_1__){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.i=function(value){return value},__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{configurable:!1,enumerable:!0,get:getter})},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="./exports.js")}({"./exports.js":function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:!0});var __WEBPACK_IMPORTED_MODULE_0__packages_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js");__webpack_require__.d(__webpack_exports__,"ArrowKeyNavigation",function(){return __WEBPACK_IMPORTED_MODULE_0__packages_boundless_arrow_key_navigation__.a});var __WEBPACK_IMPORTED_MODULE_1__packages_boundless_async__=__webpack_require__("./packages/boundless-async/index.js");__webpack_require__.d(__webpack_exports__,"Async",function(){return __WEBPACK_IMPORTED_MODULE_1__packages_boundless_async__.a});var __WEBPACK_IMPORTED_MODULE_2__packages_boundless_button__=__webpack_require__("./packages/boundless-button/index.js");__webpack_require__.d(__webpack_exports__,"Button",function(){return __WEBPACK_IMPORTED_MODULE_2__packages_boundless_button__.a});var __WEBPACK_IMPORTED_MODULE_3__packages_boundless_checkbox__=__webpack_require__("./packages/boundless-checkbox/index.js");__webpack_require__.d(__webpack_exports__,"Checkbox",function(){return __WEBPACK_IMPORTED_MODULE_3__packages_boundless_checkbox__.a});var __WEBPACK_IMPORTED_MODULE_4__packages_boundless_checkbox_group__=__webpack_require__("./packages/boundless-checkbox-group/index.js");__webpack_require__.d(__webpack_exports__,"CheckboxGroup",function(){return __WEBPACK_IMPORTED_MODULE_4__packages_boundless_checkbox_group__.a});var __WEBPACK_IMPORTED_MODULE_5__packages_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js");__webpack_require__.d(__webpack_exports__,"Dialog",function(){return __WEBPACK_IMPORTED_MODULE_5__packages_boundless_dialog__.a});var __WEBPACK_IMPORTED_MODULE_6__packages_boundless_fitted_text__=__webpack_require__("./packages/boundless-fitted-text/index.js");__webpack_require__.d(__webpack_exports__,"FittedText",function(){return __WEBPACK_IMPORTED_MODULE_6__packages_boundless_fitted_text__.a});var __WEBPACK_IMPORTED_MODULE_7__packages_boundless_image__=__webpack_require__("./packages/boundless-image/index.js");__webpack_require__.d(__webpack_exports__,"Image",function(){return __WEBPACK_IMPORTED_MODULE_7__packages_boundless_image__.a});var __WEBPACK_IMPORTED_MODULE_8__packages_boundless_input__=__webpack_require__("./packages/boundless-input/index.js");__webpack_require__.d(__webpack_exports__,"Input",function(){return __WEBPACK_IMPORTED_MODULE_8__packages_boundless_input__.a});var __WEBPACK_IMPORTED_MODULE_9__packages_boundless_modal__=__webpack_require__("./packages/boundless-modal/index.js");__webpack_require__.d(__webpack_exports__,"Modal",function(){return __WEBPACK_IMPORTED_MODULE_9__packages_boundless_modal__.a});var __WEBPACK_IMPORTED_MODULE_10__packages_boundless_pagination__=__webpack_require__("./packages/boundless-pagination/index.js");__webpack_require__.d(__webpack_exports__,"Pagination",function(){return __WEBPACK_IMPORTED_MODULE_10__packages_boundless_pagination__.a});var __WEBPACK_IMPORTED_MODULE_11__packages_boundless_popover__=__webpack_require__("./packages/boundless-popover/index.js");__webpack_require__.d(__webpack_exports__,"Popover",function(){return __WEBPACK_IMPORTED_MODULE_11__packages_boundless_popover__.a});var __WEBPACK_IMPORTED_MODULE_12__packages_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js");__webpack_require__.d(__webpack_exports__,"Portal",function(){return __WEBPACK_IMPORTED_MODULE_12__packages_boundless_portal__.a});var __WEBPACK_IMPORTED_MODULE_13__packages_boundless_progressive_disclosure__=__webpack_require__("./packages/boundless-progressive-disclosure/index.js");__webpack_require__.d(__webpack_exports__,"ProgressiveDisclosure",function(){return __WEBPACK_IMPORTED_MODULE_13__packages_boundless_progressive_disclosure__.a});var __WEBPACK_IMPORTED_MODULE_14__packages_boundless_progress__=__webpack_require__("./packages/boundless-progress/index.js");__webpack_require__.d(__webpack_exports__,"Progress",function(){return __WEBPACK_IMPORTED_MODULE_14__packages_boundless_progress__.a});var __WEBPACK_IMPORTED_MODULE_15__packages_boundless_radio__=__webpack_require__("./packages/boundless-radio/index.js");__webpack_require__.d(__webpack_exports__,"Radio",function(){return __WEBPACK_IMPORTED_MODULE_15__packages_boundless_radio__.a});var __WEBPACK_IMPORTED_MODULE_16__packages_boundless_segmented_control__=__webpack_require__("./packages/boundless-segmented-control/index.js");__webpack_require__.d(__webpack_exports__,"SegmentedControl",function(){return __WEBPACK_IMPORTED_MODULE_16__packages_boundless_segmented_control__.a});var __WEBPACK_IMPORTED_MODULE_17__packages_boundless_tokenized_input__=__webpack_require__("./packages/boundless-tokenized-input/index.js");__webpack_require__.d(__webpack_exports__,"TokenizedInput",function(){return __WEBPACK_IMPORTED_MODULE_17__packages_boundless_tokenized_input__.a});var __WEBPACK_IMPORTED_MODULE_18__packages_boundless_typeahead__=__webpack_require__("./packages/boundless-typeahead/index.js");__webpack_require__.d(__webpack_exports__,"Typeahead",function(){return __WEBPACK_IMPORTED_MODULE_18__packages_boundless_typeahead__.a})},"./node_modules/classnames/index.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};!function(){"use strict";function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType="undefined"==typeof arg?"undefined":_typeof(arg);if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg))classes.push(classNames.apply(null,arg));else if("object"===argType)for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}return classes.join(" ")}var hasOwn={}.hasOwnProperty;"undefined"!=typeof module&&module.exports?module.exports=classNames:"object"===_typeof(__webpack_require__("./node_modules/webpack/buildin/amd-options.js"))&&__webpack_require__("./node_modules/webpack/buildin/amd-options.js")?(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))):window.classNames=classNames}()},"./node_modules/webpack/buildin/amd-options.js":function(module,exports){(function(__webpack_amd_options__){module.exports=__webpack_amd_options__}).call(exports,{})},"./packages/boundless-arrow-key-navigation/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./packages/boundless-utils-omit-keys/index.js")),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),DATA_ATTRIBUTE_INDEX="data-focus-index",DATA_ATTRIBUTE_SKIP="data-focus-skip",ArrowKeyNavigation=function(_React$PureComponent){function ArrowKeyNavigation(){var _ref,_temp,_this,_ret;_classCallCheck(this,ArrowKeyNavigation);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=ArrowKeyNavigation.__proto__||Object.getPrototypeOf(ArrowKeyNavigation)).call.apply(_ref,[this].concat(args))),_this.state={activeChildIndex:_this.props.defaultActiveChildIndex,children:[]},_this.handleKeyDown=function(event){switch(event.key){case"ArrowUp":_this.props.mode!==ArrowKeyNavigation.mode.VERTICAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(-1));break;case"ArrowLeft":_this.props.mode!==ArrowKeyNavigation.mode.HORIZONTAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(-1));break;case"ArrowDown":_this.props.mode!==ArrowKeyNavigation.mode.VERTICAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(1));break;case"ArrowRight":_this.props.mode!==ArrowKeyNavigation.mode.HORIZONTAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(1))}_this.props.onKeyDown&&_this.props.onKeyDown(event)},_this.handleFocus=function(event){if(event.target.hasAttribute(DATA_ATTRIBUTE_INDEX)){var index=parseInt(event.target.getAttribute(DATA_ATTRIBUTE_INDEX),10),child=__WEBPACK_IMPORTED_MODULE_0_react__.Children.toArray(_this.state.children)[index];_this.setState({activeChildIndex:index}),child.props.onFocus&&child.props.onFocus(event)}},_this.persistWrapperElementReference=function(unknownType){_this.$wrapper=unknownType instanceof HTMLElement?unknownType:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(unknownType)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(ArrowKeyNavigation,_React$PureComponent),_createClass(ArrowKeyNavigation,[{key:"getFilteredChildren",value:function(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return __WEBPACK_IMPORTED_MODULE_0_react__.Children.toArray(props.children).filter(Boolean)}},{key:"setActiveChildIndex",value:function(){if(0!==this.state.activeChildIndex){var numChildren=__WEBPACK_IMPORTED_MODULE_0_react__.Children.count(this.state.children);0===numChildren?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=numChildren&&this.setState({activeChildIndex:numChildren-1})}}},{key:"componentWillMount",value:function(){this.setState({children:this.getFilteredChildren()})}},{key:"componentWillReceiveProps",value:function(nextProps){return nextProps.children!==this.props.children?this.setState({children:this.getFilteredChildren(nextProps)},this.setActiveChildIndex):void this.setActiveChildIndex()}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.state.activeChildIndex!==prevState.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"setFocus",value:function(index){var childNode=this.$wrapper.children[index];childNode&&childNode.hasAttribute(DATA_ATTRIBUTE_SKIP)?this.moveFocus(childNode.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):childNode&&document.activeElement!==childNode&&childNode.focus()}},{key:"moveFocus",value:function(delta){var numChildren=this.state.children?__WEBPACK_IMPORTED_MODULE_0_react__.Children.count(this.state.children):0,nextIndex=this.state.activeChildIndex+delta;nextIndex>=numChildren?nextIndex=0:nextIndex<0&&(nextIndex=numChildren-1),this.setState({activeChildIndex:nextIndex})}},{key:"renderChildren",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_0_react__.Children.map(this.state.children,function(child,index){var _React$cloneElement;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(child,(_React$cloneElement={},_defineProperty(_React$cloneElement,DATA_ATTRIBUTE_INDEX,index),_defineProperty(_React$cloneElement,DATA_ATTRIBUTE_SKIP,parseInt(child.props.tabIndex,10)===-1||void 0),_defineProperty(_React$cloneElement,"key",child.key||index),_defineProperty(_React$cloneElement,"tabIndex",_this2.state.activeChildIndex===index?0:-1),_React$cloneElement))})}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,ArrowKeyNavigation.internalKeys),{ref:this.persistWrapperElementReference,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.renderChildren())}}]),ArrowKeyNavigation}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);ArrowKeyNavigation.mode={HORIZONTAL:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),VERTICAL:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),BOTH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)()},ArrowKeyNavigation.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),defaultActiveChildIndex:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number,mode:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([ArrowKeyNavigation.mode.BOTH,ArrowKeyNavigation.mode.HORIZONTAL,ArrowKeyNavigation.mode.VERTICAL])},ArrowKeyNavigation.defaultProps={component:"div",defaultActiveChildIndex:0,mode:ArrowKeyNavigation.mode.BOTH,onKeyDown:function(){}},ArrowKeyNavigation.internalKeys=Object.keys(ArrowKeyNavigation.defaultProps),__webpack_exports__.a=ArrowKeyNavigation},"./packages/boundless-async/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),get=function(base,path,fallback){return path.split(".").reduce(function(current,fragment){return current[fragment]||fallback},base)},Async=function(_React$PureComponent){function Async(){var _ref,_temp,_this,_ret;_classCallCheck(this,Async);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Async.__proto__||Object.getPrototypeOf(Async)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.promise=null,_this.state={},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Async,_React$PureComponent),_createClass(Async,[{key:"handlePromiseFulfillment",value:function(context,payload){this.mounted&&this.setState(function(state){return this.promise===context?(this.promise=null,{component:payload}):state},this.fireRenderCallback)}},{key:"handleChildren",value:function(children){var content=children;if(__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(content))return this.setState({component:content},this.fireRenderCallback);if("function"==typeof content)return this.handleChildren(content(this.props));var boundHandler=this.handlePromiseFulfillment.bind(this,content);this.promise=content,this.setState({component:null},function(){return content.then(boundHandler,boundHandler)})}},{key:"fireRenderCallback",value:function(){this.state.component&&this.props.childrenDidRender()}},{key:"componentWillMount",value:function(){this.handleChildren(this.props.children)}},{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillReceiveProps",value:function(nextProps){this.handleChildren(nextProps.children)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var props=this.props,state=this.state;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(state.component||props.pendingContent,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(props,Async.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-async",props.className,null===state.component&&get(props,"pendingContent.props.className"),state.component&&get(state,"component.props.className",""),{"b-async-pending":null===state.component})}))}}]),Async}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Async.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(Promise)]).isRequired,childrenDidRender:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,pendingContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node},Async.defaultProps={children:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null),childrenDidRender:function(){},pendingContent:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null)},Async.internalKeys=Object.keys(Async.defaultProps),__webpack_exports__.a=Async},"./packages/boundless-button/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Button=function(_React$PureComponent){function Button(){var _ref,_temp,_this,_ret;_classCallCheck(this,Button);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Button.__proto__||Object.getPrototypeOf(Button)).call.apply(_ref,[this].concat(args))),_this.handleClick=function(event){_this.props.disabled||(_this.props.onClick(event),_this.fireStatefulCallback(event))},_this.handleKeyDown=function(event){if(!_this.props.disabled)switch(_this.props.onKeyDown(event),event.key){case"Enter":case"Space":event.preventDefault(),_this.fireStatefulCallback(event)}},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Button,_React$PureComponent),_createClass(Button,[{key:"fireStatefulCallback",value:function(event){this.props[this.props.pressed?"onUnpressed":"onPressed"](event)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Button.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-button",this.props.className,{"b-button-pressable":void 0!==this.props.pressed,"b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,role:"button",onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]),Button}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Button.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),onPressed:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onUnpressed:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,pressed:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool},Button.defaultProps={component:"button",onClick:function(){},onKeyDown:function(){},onPressed:function(){},onUnpressed:function(){},pressed:void 0},Button.internalKeys=Object.keys(Button.defaultProps),__webpack_exports__.a=Button},"./packages/boundless-checkbox-group/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__=__webpack_require__("./packages/boundless-checkbox/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),noop=function(){},CheckboxGroup=function(_React$PureComponent){function CheckboxGroup(){var _ref,_temp,_this,_ret;_classCallCheck(this,CheckboxGroup);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=CheckboxGroup.__proto__||Object.getPrototypeOf(CheckboxGroup)).call.apply(_ref,[this].concat(args))),_this.selectAllUUID=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(CheckboxGroup,_React$PureComponent),_createClass(CheckboxGroup,[{key:"allItemsChecked",value:function(){return this.props.items.every(function(item){return item.inputProps.checked===!0})}},{key:"anyItemsChecked",value:function(){return this.props.items.some(function(item){return item.inputProps.checked===!0})}},{key:"renderSelectAllCheckbox",value:function(){var allChecked=this.allItemsChecked(),inputProps=this.props.selectAllProps.inputProps;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__.a,_extends({},this.props.selectAllProps,{key:this.selectAllUUID,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-group-all",this.props.selectAllProps.className),inputProps:_extends({},inputProps,{checked:allChecked,indeterminate:!allChecked&&this.anyItemsChecked(),name:inputProps&&inputProps.name?inputProps.name:null}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}},{key:"renderCheckboxes",value:function(){var _this2=this;return this.props.items.map(function(item){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__.a,_extends({},item,{key:item.inputProps.name,onChecked:_this2.props.onChildChecked,onUnchecked:_this2.props.onChildUnchecked}))})}},{key:"renderChildren",value:function(){var children=[this.renderCheckboxes()];switch(this.props.selectAll){case CheckboxGroup.selectAll.BEFORE:children.unshift(this.renderSelectAllCheckbox());break;case CheckboxGroup.selectAll.AFTER:children.push(this.renderSelectAllCheckbox())}return children}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,CheckboxGroup.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-group",this.props.className)}),this.renderChildren())}}]),CheckboxGroup}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);CheckboxGroup.selectAll={BEFORE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),AFTER:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),NONE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)()},CheckboxGroup.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,items:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__.a.propTypes.inputProps).isRequired,onAllChecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onAllUnchecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onChildChecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onChildUnchecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,selectAll:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([CheckboxGroup.selectAll.BEFORE,CheckboxGroup.selectAll.AFTER,CheckboxGroup.selectAll.NONE]),selectAllProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,label:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.object
})},CheckboxGroup.defaultProps={component:"div",items:[],onAllChecked:noop,onAllUnchecked:noop,onChildChecked:noop,onChildUnchecked:noop,selectAll:CheckboxGroup.selectAll.BEFORE,selectAllProps:{}},CheckboxGroup.internalKeys=Object.keys(CheckboxGroup.defaultProps),__webpack_exports__.a=CheckboxGroup},"./packages/boundless-checkbox/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},Checkbox=function(_React$PureComponent){function Checkbox(){var _ref,_temp,_this,_ret;_classCallCheck(this,Checkbox);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Checkbox.__proto__||Object.getPrototypeOf(Checkbox)).call.apply(_ref,[this].concat(args))),_this.id=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),_this.handleChange=function(event){_this.props.inputProps.disabled||(_this.props[_this.props.inputProps.checked?"onUnchecked":"onChecked"](_this.props.inputProps.name),isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event))},_this.handleClick=function(event){_this.props.inputProps.disabled||(_this.refs.input.focus(),isFunction(_this.props.inputProps.onClick)&&_this.props.inputProps.onClick(event))},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Checkbox,_React$PureComponent),_createClass(Checkbox,[{key:"componentDidMount",value:function(){this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"componentDidUpdate",value:function(prevProps){prevProps.inputProps.indeterminate!==this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"setIndeterminate",value:function(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("input",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function(){if(this.props.label)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("label",_extends({},this.props.labelProps,{ref:"label",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Checkbox.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),Checkbox}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Checkbox.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,checked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,className:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,disabled:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,id:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,indeterminate:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,onChange:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onClick:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,name:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,value:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string}),label:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,labelProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),onChecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onUnchecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func},Checkbox.defaultProps={component:"div",inputProps:{checked:!1,indeterminate:!1},label:null,labelProps:{},onChecked:noop,onUnchecked:noop},Checkbox.internalKeys=Object.keys(Checkbox.defaultProps),__webpack_exports__.a=Checkbox},"./packages/boundless-dialog/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},toArray=Array.prototype.slice,Dialog=function(_React$PureComponent){function Dialog(){var _ref,_temp,_this,_ret;_classCallCheck(this,Dialog);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Dialog.__proto__||Object.getPrototypeOf(Dialog)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.handleFocus=function(nativeEvent){if(_this.props.captureFocus){var previous=nativeEvent.explicitOriginalTarget||nativeEvent.relatedTarget;_this.isPartOfDialog(previous)&&!_this.isPartOfDialog(nativeEvent.target)&&(nativeEvent.preventDefault(),previous.focus())}else if(_this.shouldDialogCloseOnEvent("closeOnOutsideFocus",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target))return window.setTimeout(_this.props.onClose,0)},_this.handleKeyDown=function(event){"Escape"===event.key&&_this.shouldDialogCloseOnEvent("closeOnEscKey",event)&&window.setTimeout(_this.props.onClose,0),_this.props.onKeyDown&&_this.props.onKeyDown(event)},_this.handleInsideClick=function(event){_this.shouldDialogCloseOnEvent("closeOnInsideClick",event)&&window.setTimeout(_this.props.onClose,0)},_this.handleOutsideClick=function(nativeEvent){_this.shouldDialogCloseOnEvent("closeOnOutsideClick",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target)&&window.setTimeout(_this.props.onClose,0)},_this.handleOutsideScrollWheel=function(nativeEvent){_this.shouldDialogCloseOnEvent("closeOnOutsideScroll",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target)&&window.setTimeout(_this.props.onClose,0)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Dialog,_React$PureComponent),_createClass(Dialog,[{key:"isPartOfDialog",value:function(node){if(!node||node===window)return!1;var roots=[this.$wrapper].concat(toArray.call(this.$wrapper.querySelectorAll("["+__WEBPACK_IMPORTED_MODULE_2_boundless_portal__.a.PORTAL_DATA_ATTRIBUTE+"]")).map(function(dom){return document.getElementById(dom.getAttribute(__WEBPACK_IMPORTED_MODULE_2_boundless_portal__.a.PORTAL_DATA_ATTRIBUTE))})),element=node.nodeType!==Node.ELEMENT_NODE?node.parentNode:node;return roots.some(function(dom){return dom.contains(element)})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick,!0),window.addEventListener("contextmenu",this.handleOutsideClick,!0),window.addEventListener("focus",this.handleFocus,!0),window.addEventListener("scroll",this.handleOutsideScrollWheel,!0),window.addEventListener("wheel",this.handleOutsideScrollWheel,!0),this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)&&this.$dialog.focus()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick,!0),window.removeEventListener("contextmenu",this.handleOutsideClick,!0),window.removeEventListener("focus",this.handleFocus,!0),window.removeEventListener("scroll",this.handleOutsideScrollWheel,!0),window.removeEventListener("wheel",this.handleOutsideScrollWheel,!0)}},{key:"shouldDialogCloseOnEvent",value:function(prop,event){return isFunction(this.props[prop])?this.props[prop](event):this.props[prop]}},{key:"renderFocusBoundary",value:function(){if(this.props.captureFocus)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}},{key:"render",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Dialog.internalKeys),{ref:function(node){return _this2.$wrapper=node},className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-dialog-wrapper",this.props.className)}),this.renderFocusBoundary(),this.props.before,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.dialogComponent,_extends({},this.dialogProps,{ref:function(node){return _this2.$dialog=node},className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-dialog",this.props.dialogProps.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:"dialog",tabIndex:"0"}),this.props.children),this.props.after,this.renderFocusBoundary())}}]),Dialog}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Dialog.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,after:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,before:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,captureFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,closeOnEscKey:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnInsideClick:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnOutsideClick:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnOutsideFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnOutsideScroll:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,dialogComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,dialogProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),onClose:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func},Dialog.defaultProps={after:null,before:null,captureFocus:!0,children:null,closeOnEscKey:!1,closeOnInsideClick:!1,closeOnOutsideClick:!1,closeOnOutsideFocus:!1,closeOnOutsideScroll:!1,component:"div",dialogComponent:"div",dialogProps:{},onClose:noop,onKeyDown:noop},Dialog.internalKeys=Object.keys(Dialog.defaultProps),__webpack_exports__.a=Dialog},"./packages/boundless-fitted-text/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function toI(stringNumber){return parseInt(stringNumber,10)}function rescale(instance){var node=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(instance),containerBox=window.getComputedStyle(node.parentNode),fontSize=toI(window.getComputedStyle(node).fontSize);null===instance.baseFontSize&&(instance.baseFontSize=fontSize);var containerHeight=toI(containerBox.height),containerWidth=toI(containerBox.width);"border-box"!==containerBox.boxSizing&&"padding-box"!==containerBox.boxSizing||(containerHeight-=toI(containerBox.paddingTop)+toI(containerBox.paddingBottom),containerWidth-=toI(containerBox.paddingLeft)+toI(containerBox.paddingRight));var optimizeForHeight=Math.floor(fontSize/node.offsetHeight*containerHeight),optimizeForWidth=Math.floor(fontSize/node.offsetWidth*containerWidth);instance.props.upscale?node.style.fontSize=(Math.max(optimizeForHeight,optimizeForWidth)||1)+"px":node.style.fontSize=(Math.min(instance.baseFontSize,optimizeForHeight,optimizeForWidth)||1)+"px"}function handleWindowResize(){instances.forEach(function(instance){return rescale(instance)})}function registerInstance(instance){0===instances.length&&window.addEventListener("resize",handleWindowResize,!0),instances.push(instance)}function unregisterInstance(instance){instances.splice(instances.indexOf(instance),1),0===instances.length&&window.removeEventListener("resize",handleWindowResize,!0)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),instances=[],FittedText=function(_React$PureComponent){function FittedText(){var _ref,_temp,_this,_ret;_classCallCheck(this,FittedText);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=FittedText.__proto__||Object.getPrototypeOf(FittedText)).call.apply(_ref,[this].concat(args))),_this.baseFontSize=null,_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(FittedText,_React$PureComponent),_createClass(FittedText,[{key:"componentDidMount",value:function(){rescale(this),registerInstance(this)}},{key:"componentDidUpdate",value:function(){rescale(this)}},{key:"componentWillUnmount",value:function(){unregisterInstance(this)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,FittedText.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-text",this.props.className)}),this.props.children)}}]),FittedText}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);FittedText.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,upscale:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool},FittedText.defaultProps={component:"span",upscale:!1},FittedText.internalKeys=Object.keys(FittedText.defaultProps),__webpack_exports__.a=FittedText},"./packages/boundless-image/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Image=function(_React$PureComponent){function Image(){var _ref,_temp,_this,_ret;_classCallCheck(this,Image);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Image.__proto__||Object.getPrototypeOf(Image)).call.apply(_ref,[this].concat(args))),_this.state={status:Image.status.LOADING},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Image,_React$PureComponent),_createClass(Image,[{key:"componentWillReceiveProps",value:function(nextProps){nextProps.src!==this.props.src&&(this.resetPreloader(),this.setState({status:Image.status.LOADING}))}},{key:"componentDidMount",value:function(){this.preload()}},{key:"componentDidUpdate",value:function(){this.preload()}},{key:"componentWillUnmount",value:function(){this.resetPreloader()}},{key:"resetPreloader",value:function(){this.loader.onload=null,this.loader.onerror=null,this.loader=null}},{key:"preload",value:function(){var _this2=this;this.loader||(this.loader=document.createElement("img"),this.loader.onload=function(){return _this2.setState({status:Image.status.LOADED})},this.loader.onerror=function(){return _this2.setState({status:Image.status.ERROR})},this.loader.src=this.props.src)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Image.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-image",this.props.className,{"b-image-loading":this.state.status===Image.status.LOADING,"b-image-loaded":this.state.status===Image.status.LOADED,"b-image-error":this.state.status===Image.status.ERROR}),title:this.props.alt,role:"img",style:_extends({},this.props.style,{backgroundImage:"url("+this.props.src+")"})})," ")}}]),Image}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Image.status={LOADING:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),LOADED:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),ERROR:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)()},Image.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,alt:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,src:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired},Image.defaultProps={alt:"",component:"div",src:"about:blank"},Image.internalKeys=Object.keys(Image.defaultProps),__webpack_exports__.a=Image},"./packages/boundless-input/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},Input=function(_React$PureComponent){function Input(){var _ref,_temp,_this,_ret;_classCallCheck(this,Input);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Input.__proto__||Object.getPrototypeOf(Input)).call.apply(_ref,[this].concat(args))),_this.state={input:"",isControlled:"string"==typeof _this.props.inputProps.value,isFocused:!1},_this.setInputValue=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return _this.setState({input:value})},_this.getValue=function(){return _this.refs.field.value},_this.handleBlur=function(event){_this.setState({isFocused:!1}),isFunction(_this.props.inputProps.onBlur)===!0&&_this.props.inputProps.onBlur(event)},_this.handleFocus=function(event){_this.setState({isFocused:!0}),isFunction(_this.props.inputProps.onFocus)===!0&&_this.props.inputProps.onFocus(event)},_this.handleChange=function(event){_this.state.isControlled===!1&&_this.setInputValue(event.target.value),isFunction(_this.props.inputProps.onChange)===!0&&_this.props.inputProps.onChange(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Input,_React$PureComponent),_createClass(Input,[{key:"componentWillMount",value:function(){return this.state.isControlled===!0?this.setInputValue(this.props.inputProps.value):void this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.inputProps.value!==this.props.inputProps.value&&this.setInputValue(nextProps.inputProps.value)}},{key:"setValue",value:function(nextValue){this.setInputValue(nextValue),this.refs.field.value=nextValue,this.state.isControlled===!0&&(this.refs.field.dispatchEvent(new Event("input",{bubbles:!0})),this.refs.field.dispatchEvent(new Event("change",{bubbles:!0})))}},{key:"getPlaceholderText",value:function(){var isNonEmpty=""!==this.state.input,shouldShowPlaceholder=this.props.hidePlaceholderOnFocus===!0?this.state.isFocused===!1&&isNonEmpty===!1:isNonEmpty===!1;return shouldShowPlaceholder?this.props.inputProps.placeholder:""}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Input.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-input-wrapper",this.props.className),title:this.getPlaceholderText()}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("input",_extends({},this.props.inputProps,{ref:"field",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-input",this.props.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-input-placeholder b-input"},this.getPlaceholderText()))}}]),Input}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Input.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,hidePlaceholderOnFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,defaultValue:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,onBlur:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onChange:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,placeholder:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,type:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,value:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string})},Input.defaultProps={component:"div",hidePlaceholderOnFocus:!0,inputProps:{type:"text"}},Input.internalKeys=Object.keys(Input.defaultProps),__webpack_exports__.a=Input},"./packages/boundless-modal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call;
}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Modal=function(_React$PureComponent){function Modal(){return _classCallCheck(this,Modal),_possibleConstructorReturn(this,(Modal.__proto__||Object.getPrototypeOf(Modal)).apply(this,arguments))}return _inherits(Modal,_React$PureComponent),_createClass(Modal,[{key:"render",value:function(){var _this2=this,props=this.props;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_portal__.a,props.portalProps,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(props,Modal.internalKeys),{ref:function(node){return _this2.$modal=node},className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-modal-wrapper",props.className)}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},props.maskProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-modal-mask",props.maskProps.className)})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__.a)(props,__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a.defaultProps),props.modalProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-modal",props.modalProps.className)}),props.children)))}}]),Modal}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Modal.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a.propTypes,{maskProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),modalProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),portalProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape(__WEBPACK_IMPORTED_MODULE_3_boundless_portal__.a.propTypes)}),Modal.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a.defaultProps,{captureFocus:!0,maskProps:{},modalProps:{},portalProps:{}}),Modal.internalKeys=Object.keys(Modal.defaultProps),__webpack_exports__.a=Modal},"./packages/boundless-pagination/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_lodash_isinteger__=__webpack_require__("./packages/boundless-pagination/node_modules/lodash.isinteger/index.js"),__WEBPACK_IMPORTED_MODULE_3_lodash_isinteger___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash_isinteger__),__WEBPACK_IMPORTED_MODULE_4_boundless_async__=__webpack_require__("./packages/boundless-async/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_segmented_control__=__webpack_require__("./packages/boundless-segmented-control/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js"),__WEBPACK_IMPORTED_MODULE_7_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),identity=function(x){return x},isFunction=function(x){return"function"==typeof x},noop=function(){},Pagination=function(_React$PureComponent){function Pagination(){var _ref,_temp,_this,_ret;_classCallCheck(this,Pagination);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Pagination.__proto__||Object.getPrototypeOf(Pagination)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.state={currentPage:_this.props.initialPage,targetIndex:(_this.props.initialPage-1)*_this.props.numItemsPerPage},_this.currentPage=function(){return _this.state.currentPage},_this.getPageForIndex=function(index){var itemsPerPage=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_this.props.numItemsPerPage;return Math.ceil((index+1)/itemsPerPage)},_this.totalPages=function(){return Math.ceil(_this.props.totalItems/_this.props.numItemsPerPage)},_this.firstVisibleItemIndex=function(){return(_this.currentPage()-1)*_this.props.numItemsPerPage},_this.jumpToIndex=function(i){if(i<0||i>=_this.props.totalItems)throw Error("Cannot page to invalid index "+i+".");_this.setState({currentPage:_this.getPageForIndex(i),targetIndex:i})},_this.handlePageSelected=function(option){var nextTargetIndex=void 0;switch(option[Pagination.CONTROL_DATA_ATTRIBUTE]){case void 0:return;case Pagination.control.FIRST:nextTargetIndex=0;break;case Pagination.control.PREVIOUS:nextTargetIndex=_this.firstVisibleItemIndex()-_this.props.numItemsPerPage;break;case Pagination.control.NEXT:nextTargetIndex=_this.firstVisibleItemIndex()+_this.props.numItemsPerPage;break;case Pagination.control.LAST:nextTargetIndex=_this.props.totalItems-1;break;default:nextTargetIndex=parseInt(option[Pagination.CONTROL_DATA_ATTRIBUTE],10)*_this.props.numItemsPerPage-1}_this.setState({currentPage:_this.getPageForIndex(nextTargetIndex),targetIndex:nextTargetIndex})},_this.handleItemPromiseFulfillment=function(payload){if(_this.mounted)return _this.props.itemToJSXConverter(payload)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Pagination,_React$PureComponent),_createClass(Pagination,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"componentDidUpdate",value:function(_,prevState){prevState.currentPage!==this.currentPage()&&__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(this.refs.item_0).focus()}},{key:"componentWillReceiveProps",value:function(){var _this2=this,oldProps=this.props;this.setState(function(state,props){return props.identifier!==oldProps.identifier?{currentPage:1,targetIndex:0}:{currentPage:_this2.getPageForIndex(state.targetIndex,props.numItemsPerPage),targetIndex:state.targetIndex}})}},{key:"generateControls",value:function(){var options=[],currentPage=this.currentPage(),totalPages=this.totalPages(),startPage=currentPage-(currentPage-1)%this.props.numPageToggles,endPage=Math.min(startPage+this.props.numPageToggles-1,totalPages);if(this.props.showPaginationState&&options.push({children:isFunction(this.props.showPaginationState)?this.props.showPaginationState(currentPage,totalPages):currentPage+" / "+totalPages,className:"b-pagination-control b-pagination-control-state",disabled:!0}),this.props.showJumpToFirstPageControl){var _options$push;options.push((_options$push={},_defineProperty(_options$push,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.FIRST),_defineProperty(_options$push,"children",this.props.jumpToFirstPageControlContent),_defineProperty(_options$push,"className","b-pagination-control b-pagination-control-first"),_defineProperty(_options$push,"disabled",1===currentPage),_options$push))}if(this.props.showJumpToPreviousPageControl){var _options$push2;options.push((_options$push2={},_defineProperty(_options$push2,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.PREVIOUS),_defineProperty(_options$push2,"children",this.props.jumpToPreviousPageControlContent),_defineProperty(_options$push2,"className","b-pagination-control b-pagination-control-previous"),_defineProperty(_options$push2,"disabled",1===currentPage),_options$push2))}for(var i=startPage;i<=endPage;i++){var _options$push3;options.push((_options$push3={},_defineProperty(_options$push3,Pagination.CONTROL_DATA_ATTRIBUTE,i),_defineProperty(_options$push3,"children",i),_defineProperty(_options$push3,"className","b-pagination-control"),_defineProperty(_options$push3,"pressed",currentPage===i),_options$push3))}if(this.props.showJumpToNextPageControl){var _options$push4;options.push((_options$push4={},_defineProperty(_options$push4,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.NEXT),_defineProperty(_options$push4,"children",this.props.jumpToNextPageControlContent),_defineProperty(_options$push4,"className","b-pagination-control b-pagination-control-next"),_defineProperty(_options$push4,"disabled",currentPage===totalPages),_options$push4))}if(this.props.showJumpToLastPageControl){var _options$push5;options.push((_options$push5={},_defineProperty(_options$push5,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.LAST),_defineProperty(_options$push5,"children",this.props.jumpToLastPageControlContent),_defineProperty(_options$push5,"className","b-pagination-control b-pagination-control-last"),_defineProperty(_options$push5,"disabled",currentPage===totalPages),_options$push5))}return this.props.customControlContent&&options.push({children:this.props.customControlContent,className:"b-pagination-control b-pagination-control-custom",disabled:!0}),options}},{key:"generateItems",value:function(){for(var items=[],firstIndex=this.firstVisibleItemIndex(),lastIndex=Math.min(this.props.totalItems,firstIndex+this.props.numItemsPerPage)-1,i=firstIndex;i<=lastIndex;i+=1)items.push(this.props.getItem(i));return items}},{key:"renderItems",value:function(){var _this3=this,props=this.props.itemWrapperProps;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6_boundless_arrow_key_navigation__.a,_extends({},props,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-pagination-items",props.className)}),this.generateItems().map(function(item,index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_boundless_async__.a,{ref:0===index?"item_0":null,key:index,className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-pagination-item",{"b-pagination-item-even":index%2===0,"b-pagination-item-odd":index%2!==0}),"data-pagination-index":_this3.props.numItemsPerPage*(_this3.currentPage()-1)+index,pendingContent:_this3.props.itemLoadingContent},item instanceof Promise?item.then(_this3.handleItemPromiseFulfillment,_this3.handleItemPromiseFulfillment):_this3.props.itemToJSXConverter(item))}))}},{key:"renderControls",value:function(position){var _cx;if(!(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage))return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5_boundless_segmented_control__.a,_extends({},this.props.controlWrapperProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-pagination-controls",this.props.controlWrapperProps.className,(_cx={},_defineProperty(_cx,"b-pagination-controls-above",position===Pagination.position.ABOVE),_defineProperty(_cx,"b-pagination-controls-below",position===Pagination.position.BELOW),_cx)),options:this.generateControls(),onOptionSelected:this.handlePageSelected}))}},{key:"renderView",value:function(){var position=this.props.position,p=Pagination.position;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-pagination"},position===p.ABOVE||position===p.BOTH?this.renderControls(p.ABOVE):null,this.props.before,this.renderItems(),this.props.after,position===p.BELOW||position===p.BOTH?this.renderControls(p.BELOW):null)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_boundless_utils_omit_keys__.a)(this.props,Pagination.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-pagination-wrapper",this.props.className)}),this.renderView())}}]),Pagination}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Pagination.control={CUSTOM:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),FIRST:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),LAST:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),NEXT:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),PREVIOUS:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)()},Pagination.position={ABOVE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),BELOW:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),BOTH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)()},Pagination.CONTROL_DATA_ATTRIBUTE="data-page-control",Pagination.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,after:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,before:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,controlWrapperProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),customControlContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,getItem:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func.isRequired,hidePagerIfNotNeeded:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,identifier:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired,initialPage:function(props){if(__WEBPACK_IMPORTED_MODULE_3_lodash_isinteger___default()(props.initialPage)===!1)return new Error("`initialPage` must be an integer.");var numberOfPages=Math.ceil(props.totalItems/props.numItemsPerPage);return props.initialPage<1||props.initialPage>numberOfPages?new Error("`initialPage` must be between 1 and "+numberOfPages+"."):void 0},itemLoadingContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,itemToJSXConverter:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,itemWrapperProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),jumpToFirstPageControlContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,jumpToLastPageControlContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,jumpToNextPageControlContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,jumpToPreviousPageControlContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,numItemsPerPage:function(props){return __WEBPACK_IMPORTED_MODULE_3_lodash_isinteger___default()(props.numItemsPerPage)===!1?new Error("`numItemsPerPage` must be an integer."):props.numItemsPerPage<1?new Error("`numItemsPerPage` must be greater than zero."):void 0},numPageToggles:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number,position:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Pagination.position.ABOVE,Pagination.position.BELOW,Pagination.position.BOTH]),showJumpToFirstPageControl:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,showJumpToLastPageControl:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,showJumpToNextPageControl:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,showJumpToPreviousPageControl:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,showPaginationState:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),totalItems:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number.isRequired},Pagination.defaultProps={after:null,before:null,controlWrapperProps:{},customControlContent:null,getItem:noop,hidePagerIfNotNeeded:!1,identifier:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),initialPage:1,itemLoadingContent:void 0,itemToJSXConverter:identity,itemWrapperProps:{},jumpToFirstPageControlContent:"⇤",jumpToLastPageControlContent:"⇥",jumpToNextPageControlContent:"→",jumpToPreviousPageControlContent:"←",numItemsPerPage:10,numPageToggles:5,position:Pagination.position.ABOVE,showJumpToFirstPageControl:!0,showJumpToLastPageControl:!0,showJumpToNextPageControl:!0,showJumpToPreviousPageControl:!0,showPaginationState:!0,totalItems:null},Pagination.internalKeys=Object.keys(Pagination.defaultProps),__webpack_exports__.a=Pagination},"./packages/boundless-pagination/node_modules/lodash.isinteger/index.js":function(module,exports){function isInteger(value){return"number"==typeof value&&value==toInteger(value)}function isObject(value){var type="undefined"==typeof value?"undefined":_typeof(value);return!!value&&("object"==type||"function"==type)}function isObjectLike(value){return!!value&&"object"==("undefined"==typeof value?"undefined":_typeof(value))}function isSymbol(value){return"symbol"==("undefined"==typeof value?"undefined":_typeof(value))||isObjectLike(value)&&objectToString.call(value)==symbolTag}function toFinite(value){if(!value)return 0===value?value:0;if(value=toNumber(value),value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER}return value===value?value:0}function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0}function toNumber(value){if("number"==typeof value)return value;if(isSymbol(value))return NAN;if(isObject(value)){var other="function"==typeof value.valueOf?value.valueOf():value;value=isObject(other)?other+"":other}if("string"!=typeof value)return 0===value?value:+value;value=value.replace(reTrim,"");var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},INFINITY=1/0,MAX_INTEGER=1.7976931348623157e308,NAN=NaN,symbolTag="[object Symbol]",reTrim=/^\s+|\s+$/g,reIsBadHex=/^[-+]0x[0-9a-f]+$/i,reIsBinary=/^0b[01]+$/i,reIsOctal=/^0o[0-7]+$/i,freeParseInt=parseInt,objectProto=Object.prototype,objectToString=objectProto.toString;module.exports=isInteger},"./packages/boundless-popover/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function getOppositeCardinal(direction){switch(direction[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function without(arr1,arr2){return arr1.filter(function(item){return arr2.indexOf(item)===-1})}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_transform_property__=__webpack_require__("./packages/boundless-utils-transform-property/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),CLASS_REMOVAL_REGEX=/\s?b-popover-(anchor|self)-(start|middle|end)/g,DEFAULT_CARET_COMPONENT=__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("g",null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),START=0,MIDDLE=1,END=2,combinations=[{name:"NNW",ax:START,ay:START,dx:START,dy:END},{name:"N",ax:MIDDLE,ay:START,dx:MIDDLE,dy:END},{name:"NNE",ax:END,ay:START,dx:END,dy:END},{name:"ENE",ax:END,ay:START,dx:START,dy:START},{name:"E",ax:END,ay:MIDDLE,dx:START,dy:MIDDLE},{name:"ESE",ax:END,ay:END,dx:START,dy:END},{name:"SSE",ax:END,ay:END,dx:END,dy:START},{name:"S",ax:MIDDLE,ay:END,dx:MIDDLE,dy:START},{name:"SSW",ax:START,ay:END,dx:START,dy:START},{name:"WSW",ax:START,ay:END,dx:END,dy:END},{name:"W",ax:START,ay:MIDDLE,dx:END,dy:MIDDLE},{name:"WNW",ax:START,ay:START,dx:END,dy:START}],Popover=function(_React$PureComponent){function Popover(){var _ref,_temp,_this,_ret;_classCallCheck(this,Popover);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Popover.__proto__||Object.getPrototypeOf(Popover)).call.apply(_ref,[this].concat(args))),_this.align=function(){var anchor=_this.props.anchor instanceof HTMLElement?_this.props.anchor:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(_this.props.anchor),caretAnchor=_this.props.caretAnchor?_this.props.caretAnchor instanceof HTMLElement?_this.props.caretAnchor:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(_this.props.caretAnchor):anchor;_this.cacheViewportCartography(anchor,caretAnchor);var preset=_this.getValidAlignmentPreset(),frag=Popover.getAlignmentClassFragment;_this.dialog.$wrapper.className=_this.dialog.$wrapper.className.replace(CLASS_REMOVAL_REGEX,"")+(" b-popover-anchor-x-"+frag(preset.ax))+(" b-popover-anchor-y-"+frag(preset.ay))+(" b-popover-self-x-"+frag(preset.dx))+(" b-popover-self-y-"+frag(preset.dy));var dx=Math.round(_this.getNextDialogXPosition(preset)),dy=Math.round(_this.getNextDialogYPosition(preset));_this.dialog.$wrapper.style[__WEBPACK_IMPORTED_MODULE_6_boundless_utils_transform_property__.a]="translate("+dx+"px, "+dy+"px)";var cardinal=preset.name[0],longitudinal="N"===cardinal||"S"===cardinal;_this.$caret.style[longitudinal?"left":"top"]=Math.round(_this.getNextCaretXPosition(preset))+"px",_this.$caret.style[longitudinal?"top":"left"]="0px"},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Popover,_React$PureComponent),_createClass(Popover,[{key:"cacheViewportCartography",value:function(anchor,caretAnchor){var bodyRect=document.body.getBoundingClientRect();this.anchorRect=anchor.getBoundingClientRect(),this.caretAnchorRect=caretAnchor.getBoundingClientRect(),this.bodyLeft=bodyRect.left*-1,this.bodyTop=bodyRect.top*-1}},{key:"getNextCaretXPosition",value:function(_ref2){var name=_ref2.name,dx=(_ref2.ax,_ref2.dx),dy=(_ref2.ay,_ref2.dy),caret=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,nextX=0;return"N"===name[0]||"S"===name[0]?(nextX=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,dx===MIDDLE?nextX+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:dx===END&&(nextX+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(nextX=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,dy===MIDDLE?nextX+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:dy===END&&(nextX+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),nextX-=caret.clientWidth/2}},{key:"getNextDialogXPosition",value:function(_ref3){var ax=_ref3.ax,dx=_ref3.dx,dialog=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,nextX=this.anchorRect.left+this.bodyLeft;switch(ax){case MIDDLE:nextX+=this.anchorRect.width/2;break;case END:nextX+=this.anchorRect.width}switch(dx){case MIDDLE:nextX-=dialog.clientWidth/2;break;case END:nextX-=dialog.clientWidth}return nextX}},{key:"getNextDialogYPosition",value:function(_ref4){var ay=_ref4.ay,dy=_ref4.dy,dialog=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,nextY=this.anchorRect.top+this.bodyTop;switch(ay){case MIDDLE:nextY+=this.anchorRect.height/2;break;case END:nextY+=this.anchorRect.height}switch(dy){case MIDDLE:nextY-=dialog.clientHeight/2;break;case END:nextY-=dialog.clientHeight}return nextY}},{key:"isPositionValid",value:function(_ref5,pHeight,pWidth){var name=_ref5.name,ax=_ref5.ax,ay=_ref5.ay,cardinal=(_ref5.dx,_ref5.dy,name[0]);return"N"===cardinal||"S"===cardinal?!("N"===cardinal&&this.anchorRect.top-pHeight<0)&&(!("S"===cardinal&&this.anchorRect.bottom+pHeight>window.innerHeight)&&(ax===START?!(this.anchorRect.left+pWidth>window.innerWidth||this.anchorRect.left<0):ax===MIDDLE?!(this.anchorRect.left-pWidth/2<0||this.anchorRect.left+pWidth/2>window.innerWidth):!(this.anchorRect.left-pWidth<0||this.anchorRect.right>window.innerWidth))):"W"!==cardinal&&"E"!==cardinal||!("W"===cardinal&&this.anchorRect.left-pWidth<0)&&(!("E"===cardinal&&this.anchorRect.right+pWidth>window.innerWidth)&&(ay===START?!(this.anchorRect.top+pHeight>window.innerHeight||this.anchorRect.top<0):ay===MIDDLE?!(this.anchorRect.top+this.anchorRect.height/2-pHeight/2<0||this.anchorRect.top+this.anchorRect.height/2+pHeight/2>window.innerHeight):!(this.anchorRect.top-pHeight<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var _this2=this,width=this.dialog.$wrapper.clientWidth,height=this.dialog.$wrapper.clientHeight,validCombos=combinations.filter(function(config){return _this2.isPositionValid(config,height,width)});if(validCombos.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!validCombos.length)return this.props.preset;var bestCombos=validCombos.filter(function(_ref6){var name=_ref6.name;return name[0]===_this2.props.preset.name[0]});if(bestCombos.length)return bestCombos[0];var oppositeCardinal=getOppositeCardinal(this.props.preset.name),okayCombos=validCombos.filter(function(_ref7){var name=_ref7.name;return name[0]===oppositeCardinal});return okayCombos.length?okayCombos[0]:validCombos[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var _this3=this,props=this.props;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_boundless_portal__.a,props.portalProps,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(props,Popover.internalKeys),{ref:function(instance){return _this3.dialog=instance},before:__WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(props.caretComponent,{ref:function(node){return _this3.$caret=node},className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-popover-caret",props.caretComponent.props.className)
}),className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-popover",props.className)})))}}],[{key:"getAlignmentClassFragment",value:function(constant){switch(constant){case START:return"start";case MIDDLE:return"middle";case END:return"end"}}}]),Popover}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Popover.preset=combinations.reduce(function(map,def){return map[def.name]=def,map},{}),Popover.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.propTypes,{anchor:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(HTMLElement),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({props:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.object})]).isRequired,autoReposition:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,caretAnchor:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(HTMLElement),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({props:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.object})]),caretComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.element,portalProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape(__WEBPACK_IMPORTED_MODULE_4_boundless_portal__.a.PropTypes),preset:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Popover.preset.NNW,Popover.preset.N,Popover.preset.NNE,Popover.preset.ENE,Popover.preset.E,Popover.preset.ESE,Popover.preset.SSE,Popover.preset.S,Popover.preset.SSW,Popover.preset.WSW,Popover.preset.W,Popover.preset.WNW])}),Popover.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.defaultProps,{anchor:void 0,autoReposition:!0,captureFocus:!1,caretAnchor:void 0,caretComponent:DEFAULT_CARET_COMPONENT,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:Popover.preset.S}),Popover.internalKeys=without(Object.keys(Popover.defaultProps),__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.internalKeys),__webpack_exports__.a=Popover},"./packages/boundless-portal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_1_react_dom___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Portal=function(_React$Component){function Portal(){var _ref,_temp,_this,_ret;_classCallCheck(this,Portal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Portal.__proto__||Object.getPrototypeOf(Portal)).call.apply(_ref,[this].concat(args))),_this.id=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),_this.$portal=null,_this.$passenger=null,_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Portal,_React$Component),_createClass(Portal,[{key:"componentWillMount",value:function(){this.$portal=document.createElement("div"),this.props.destination.appendChild(this.$portal),this.renderPortalledContent()}},{key:"renderPortalledContent",value:function(){var child=__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(this.props.children)?this.props.children:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id,__WEBPACK_IMPORTED_MODULE_1_react_dom___default.a.unstable_renderSubtreeIntoContainer(this,child,this.$portal),this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function(){__WEBPACK_IMPORTED_MODULE_1_react_dom___default.a.unmountComponentAtNode(this.$portal),this.props.destination.removeChild(this.$portal)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("span",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Portal.internalKeys),_defineProperty({},Portal.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]),Portal}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);Portal.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.node,destination:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(HTMLElement),portalId:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string},Portal.defaultProps={children:null,destination:document.body,portalId:null},Portal.internalKeys=Object.keys(Portal.defaultProps),Portal.PORTAL_DATA_ATTRIBUTE="data-portal-id",__webpack_exports__.a=Portal},"./packages/boundless-progress/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_button__=__webpack_require__("./packages/boundless-button/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Progress=function(_React$PureComponent){function Progress(){return _classCallCheck(this,Progress),_possibleConstructorReturn(this,(Progress.__proto__||Object.getPrototypeOf(Progress)).apply(this,arguments))}return _inherits(Progress,_React$PureComponent),_createClass(Progress,[{key:"renderCancel",value:function(){if(this.props.onCancel)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_button__.a,_extends({},this.props.cancelProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-progress-cancel",this.props.cancelProps.className),component:this.props.cancelComponent,onPressed:this.props.onCancel}))}},{key:"renderProgress",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.progressComponent,_extends({},this.props.progressProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":void 0===this.props.progress}),role:"presentation",style:_extends({},this.props.progressProps.style,_defineProperty({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Progress.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-progress-wrapper",this.props.className),"data-progress":void 0!==this.props.progress?this.props.progress:null}),this.renderProgress(),this.props.children,this.renderCancel())}}]),Progress}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Progress.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,cancelComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),cancelProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,onCancel:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,progress:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number]),progressComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,progressProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),tweenProperty:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string},Progress.defaultProps={cancelComponent:"button",cancelProps:{},component:"div",onCancel:null,progress:void 0,progressComponent:"div",progressProps:{},tweenProperty:"width"},Progress.internalKeys=Object.keys(Progress.defaultProps),__webpack_exports__.a=Progress},"./packages/boundless-progressive-disclosure/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},ProgressiveDisclosure=function(_React$PureComponent){function ProgressiveDisclosure(){var _ref,_temp,_this,_ret;_classCallCheck(this,ProgressiveDisclosure);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=ProgressiveDisclosure.__proto__||Object.getPrototypeOf(ProgressiveDisclosure)).call.apply(_ref,[this].concat(args))),_this.state={expanded:_this.props.expanded},_this.fireStatefulCallback=function(){return _this.props[_this.state.expanded?"onExpand":"onHide"]()},_this.handleClick=function(event){_this.setState({expanded:!_this.state.expanded},_this.fireStatefulCallback),isFunction(_this.props.toggleProps.onClick)&&_this.props.toggleProps.onClick(event)},_this.handleKeyDown=function(event){"Enter"===event.key&&(event.preventDefault(),_this.setState({expanded:!_this.state.expanded},_this.fireStatefulCallback)),isFunction(_this.props.toggleProps.onKeyDown)&&_this.props.toggleProps.onKeyDown(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(ProgressiveDisclosure,_React$PureComponent),_createClass(ProgressiveDisclosure,[{key:"componentWillReceiveProps",value:function(newProps){newProps.expanded!==this.props.expanded&&this.setState({expanded:newProps.expanded},this.fireStatefulCallback)}},{key:"renderContent",value:function(){if(this.state.expanded)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-disclosure-content"},isFunction(this.props.children)?this.props.children():this.props.children)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,ProgressiveDisclosure.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.toggleComponent,_extends({},this.props.toggleProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.toggleExpandedContent||this.props.toggleContent:this.props.toggleContent),this.renderContent())}}]),ProgressiveDisclosure}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);ProgressiveDisclosure.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,expanded:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,onExpand:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onHide:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,toggleComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,toggleContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,toggleExpandedContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,toggleProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any})},ProgressiveDisclosure.defaultProps={children:null,component:"div",expanded:!1,onExpand:noop,onHide:noop,toggleComponent:"div",toggleContent:null,toggleExpandedContent:null,toggleProps:{}},ProgressiveDisclosure.internalKeys=Object.keys(ProgressiveDisclosure.defaultProps),__webpack_exports__.a=ProgressiveDisclosure},"./packages/boundless-radio/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},Radio=function(_React$PureComponent){function Radio(){var _ref,_temp,_this,_ret;_classCallCheck(this,Radio);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Radio.__proto__||Object.getPrototypeOf(Radio)).call.apply(_ref,[this].concat(args))),_this.uuid=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),_this.handleChange=function(event){event.target.checked&&_this.props.onSelected(event.target.value),isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Radio,_React$PureComponent),_createClass(Radio,[{key:"renderInput",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("input",_extends({},this.props.inputProps,{type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function(){if(this.props.labelContent)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("label",_extends({},this.props.labelProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.labelContent)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Radio.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),Radio}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Radio.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),labelContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node)]),labelProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),name:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired,onSelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,selected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,value:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired},Radio.defaultProps={component:"div",inputProps:{},labelContent:null,labelProps:{},name:"",onSelected:function(){},selected:!1,value:""},Radio.internalKeys=Object.keys(Radio.defaultProps),__webpack_exports__.a=Radio},"./packages/boundless-segmented-control/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function findIndex(arr,test){for(var found=void 0,i=0,len=arr.length;i<len;i+=1)if(test(arr[i])){found=i;break}return found}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_button__=__webpack_require__("./packages/boundless-button/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),SegmentedControl=function(_React$PureComponent){function SegmentedControl(){var _ref,_temp,_this,_ret;_classCallCheck(this,SegmentedControl);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=SegmentedControl.__proto__||Object.getPrototypeOf(SegmentedControl)).call.apply(_ref,[this].concat(args))),_this.state={selectedIndex:null},_this.handleOptionSelection=function(event){var index=Array.prototype.indexOf.call(event.target.parentElement.children,event.target);_this.state.selectedIndex!==index&&_this.setState({selectedIndex:index},function(){_this.props.onOptionSelected(_this.props.options[_this.state.selectedIndex],_this.state.selectedIndex)})},_this.getSelectedOption=function(){return _this.props.options[_this.state.selectedIndex]},_this.getSelectedOptionIndex=function(){return _this.state.selectedIndex},_this.selectOption=function(option){return _this.setState({selectedIndex:_this.props.options.indexOf(option)})},_this.selectOptionByKey=function(k,v){return _this.setState({selectedIndex:findIndex(_this.props.options,function(option){return option[k]===v})})},_this.selectOptionIndex=function(index){return _this.setState({selectedIndex:index})},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(SegmentedControl,_React$PureComponent),_createClass(SegmentedControl,[{key:"inferSelectedOptionIndex",value:function(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,state=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return findIndex(props.options,function(option){return option.pressed})||state.selectedIndex}},{key:"componentWillMount",value:function(){this.setState({selectedIndex:this.inferSelectedOptionIndex()||this.props.defaultOptionSelectedIndex})}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.options!==this.props.options&&this.setState({selectedIndex:this.inferSelectedOptionIndex(nextProps)})}},{key:"render",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_arrow_key_navigation__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,SegmentedControl.internalKeys),{role:"radiogroup",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-segmented-control",this.props.className),mode:__WEBPACK_IMPORTED_MODULE_2_boundless_arrow_key_navigation__.a.mode.HORIZONTAL}),this.props.options.map(function(props,index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_button__.a,_extends({},props,{key:props.key||index,"aria-checked":index===_this2.state.selectedIndex,component:props.component||_this2.props.optionComponent,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-segmented-control-option",props.className,{"b-segmented-control-option-selected":index===_this2.state.selectedIndex}),onPressed:_this2.handleOptionSelection,pressed:index===_this2.state.selectedIndex,role:"radio"}),props.children)}))}}]),SegmentedControl}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);SegmentedControl.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,defaultOptionSelectedIndex:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number,onOptionSelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,optionComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),options:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node})).isRequired},SegmentedControl.defaultProps={defaultOptionSelectedIndex:0,onOptionSelected:function(){},optionComponent:"button",options:[]},SegmentedControl.internalKeys=Object.keys(SegmentedControl.defaultProps),__webpack_exports__.a=SegmentedControl},"./packages/boundless-tokenized-input/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__=__webpack_require__("./packages/boundless-typeahead/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];
descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),first=function(array){return array[0]},last=function(array){return array[array.length-1]},isFunction=function(x){return"function"==typeof x},TokenizedInput=function(_React$PureComponent){function TokenizedInput(){var _ref,_temp,_this,_ret;_classCallCheck(this,TokenizedInput);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=TokenizedInput.__proto__||Object.getPrototypeOf(TokenizedInput)).call.apply(_ref,[this].concat(args))),_this.focus=function(){return _this.refs.typeahead.focus()},_this.getInputNode=function(){return _this.refs.typeahead.getInputNode()},_this.getSelectedEntityText=function(){return _this.refs.typeahead.getSelectedEntityText()},_this.getValue=function(){return _this.refs.typeahead.getValue()},_this.select=function(){return _this.refs.typeahead.select()},_this.setValue=function(value){return _this.refs.typeahead.setValue(value)},_this.add=function(index){_this.props.tokens.indexOf(index)===-1&&_this.props.handleAddToken(index)},_this.handleInputClick=function(event){_this.clearSelection(),isFunction(_this.props.inputProps.onClick)&&_this.props.inputProps.onClick(event)},_this.handleInputFocus=function(event){_this.clearSelection(),isFunction(_this.props.inputProps.onFocus)&&_this.props.inputProps.onFocus(event)},_this.handleKeyDown=function(event){switch(event.which){case 37:_this.selectPreviousToken(event.shiftKey);break;case 39:_this.selectNextToken(event.shiftKey);break;case 8:_this.props.tokensSelected.length&&(_this.remove(_this.props.tokensSelected),_this.focus());break;case 65:event.metaKey&&(event.preventDefault(),_this.focus(),_this.select(),_this._suppressNextTokenSelection=!0,_this.props.handleNewSelection(_this.props.tokens))}isFunction(_this.props.onKeyDown)&&_this.props.onKeyDown(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(TokenizedInput,_React$PureComponent),_createClass(TokenizedInput,[{key:"componentDidUpdate",value:function(prevProps){var previousSelectedIndexes=prevProps.tokensSelected,currentSelectedIndexes=this.props.tokensSelected;if(this.props.tokens.length>prevProps.tokens.length&&this.setValue(""),this._suppressNextTokenSelection)return void(this._suppressNextTokenSelection=!1);if(previousSelectedIndexes!==currentSelectedIndexes&&0!==currentSelectedIndexes.length){if(1===currentSelectedIndexes.length||currentSelectedIndexes[0]!==previousSelectedIndexes[0])return this.refs["token_"+currentSelectedIndexes[0]].focus();if(last(currentSelectedIndexes)!==last(previousSelectedIndexes))return this.refs["token_"+last(currentSelectedIndexes)].focus();this.refs["token_"+currentSelectedIndexes[0]].focus()}}},{key:"remove",value:function(index){var _this2=this,indexes=(Array.isArray(index)?index:[index]).filter(function(idx){return _this2.props.tokens.indexOf(idx)!==-1});indexes.length&&this.props.handleRemoveTokens(indexes)}},{key:"selectToken",value:function(index){this.props.handleNewSelection([index])}},{key:"selectTokens",value:function(indexes){this.props.handleNewSelection(indexes)}},{key:"selectPreviousToken",value:function(append){var selected=this.props.tokensSelected,indexes=this.props.tokens;if(1!==selected.length||first(selected)!==first(indexes))if(0===selected.length)this.selectToken(last(indexes));else{var previousToken=indexes[indexes.indexOf(first(selected))-1];this.selectTokens(append?[previousToken].concat(selected):[previousToken])}}},{key:"selectNextToken",value:function(append){var selected=this.props.tokensSelected,indexes=this.props.tokens;if(0!==selected.length)if(last(selected)===last(indexes))this.clearSelection(),this.focus();else{var nextToken=indexes[indexes.indexOf(last(selected))+1];this.selectTokens(append?selected.concat(nextToken):[nextToken])}}},{key:"clearSelection",value:function(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function(index,event){event.stopPropagation(),this.remove(index),this.focus(),this.props.tokenCloseComponent.props.onClick&&this.props.tokenCloseComponent.props.onClick(event)}},{key:"renderTokenClose",value:function(index){if(this.props.tokenCloseVisible)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(this.props.tokenCloseComponent,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,index)})}},{key:"handleTokenKeyDown",value:function(index,event){switch(event.which){case 13:case 32:this.selectToken(index),event.preventDefault();break;case 8:this.remove(index),this.focus(),event.preventDefault()}}},{key:"renderTokens",value:function(){var _this3=this;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{ref:"token_"+index,key:index,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-tokenfield-token",{"b-tokenfield-token-selected":_this3.props.tokensSelected.indexOf(index)!==-1}),onClick:_this3.selectToken.bind(_this3,index),onKeyDown:_this3.handleTokenKeyDown.bind(_this3,index),tabIndex:"0"},_this3.props.entities[index].text,_this3.renderTokenClose(index))}))}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,TokenizedInput.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_object_intersection__.a)(this.props,__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:!0,inputProps:_extends({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]),TokenizedInput}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);TokenizedInput.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a.propTypes,{handleAddToken:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,handleRemoveTokens:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,handleNewSelection:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,tokenCloseComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.element,tokenCloseVisible:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,tokens:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number),tokensSelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number)}),TokenizedInput.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a.defaultProps,{handleAddToken:function(){},handleRemoveTokens:function(){},handleNewSelection:function(){},tokenCloseComponent:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null,"X"),tokenCloseVisible:!0,tokens:[],tokensSelected:[]}),TokenizedInput.internalKeys=Object.keys(TokenizedInput.defaultProps),__webpack_exports__.a=TokenizedInput},"./packages/boundless-typeahead/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp__=__webpack_require__("./packages/boundless-typeahead/node_modules/escape-string-regexp/index.js"),__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp__),__WEBPACK_IMPORTED_MODULE_3_boundless_input__=__webpack_require__("./packages/boundless-input/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},isString=function(x){return"string"==typeof x},noop=function(){},Typeahead=function(_React$PureComponent){function Typeahead(){var _ref,_temp,_this,_ret;_classCallCheck(this,Typeahead);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Typeahead.__proto__||Object.getPrototypeOf(Typeahead)).call.apply(_ref,[this].concat(args))),_initialiseProps.call(_this),_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Typeahead,_React$PureComponent),_createClass(Typeahead,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.entities!==this.props.entities&&this.computeMatches(nextProps.entities),nextProps.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(nextProps.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.state.entityMatchIndexes.length&&!prevState.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==prevProps.entities[prevState.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(index){this.setState({selectedEntityIndex:index},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(delta){var matches=this.state.entityMatchIndexes,totalMatches=matches.length,nextIndex=matches.indexOf(this.state.selectedEntityIndex)+delta;if(totalMatches){nextIndex<0?nextIndex=totalMatches-1:nextIndex>=totalMatches&&(nextIndex=0);var matchIndex=matches[nextIndex],matchesNode=this.refs.matches,matchesNodeYEnd=matchesNode.scrollTop+matchesNode.clientHeight,matchNode=this.refs["match_$"+matchIndex],matchNodeYStart=matchNode.offsetTop,matchNodeYEnd=matchNodeYStart+matchNode.clientHeight;matchNodeYEnd>=matchesNodeYEnd?matchesNode.scrollTop+=matchNodeYEnd-matchesNodeYEnd:matchNodeYStart<=matchesNode.scrollTop&&(matchesNode.scrollTop=matchNodeYStart),this.setState({selectedEntityIndex:matchIndex})}}},{key:"cursorAtEndOfInput",value:function(){var node=this.getInputNode();return node.selectionStart===node.selectionEnd&&node.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(input,entity){for(var entityContent=entity.text,frags=entityContent.split(new RegExp("("+__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp___default()(input)+")","ig")),normalizedUserText=input.toLowerCase(),threshold=frags.length,i=-1;++i<threshold;)frags[i].toLowerCase()===normalizedUserText&&(frags[i]=__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("mark",{key:i,className:"b-typeahead-match-highlight"},frags[i]));return frags}},{key:"markStartsWithMatchSubstring",value:function(input,entity){var entityContent=entity.text,seekValue=input.toLowerCase(),indexStart=entityContent.toLowerCase().indexOf(seekValue),indexEnd=indexStart+seekValue.length;return[__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("span",{key:"0"},entityContent.slice(0,indexStart)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},entityContent.slice(indexStart,indexEnd)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("span",{key:"2"},entityContent.slice(indexEnd))]}},{key:"getMarkingFunction",value:function(){return isString(this.props.algorithm)?this.props.algorithm===Typeahead.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:isFunction(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(userText,entities){var normalized=userText.toLowerCase();return entities.reduce(function(result,entity,index){return entity.text.toLowerCase().indexOf(normalized)!==-1?result.push(index)&&result:result},[])}},{key:"getStartsWithMatchIndexes",value:function(userText,entities){var seekValue=userText.toLowerCase();return entities.reduce(function(results,entity,index){return 0===entity.text.toLowerCase().indexOf(seekValue)&&results.push(index),results},[])}},{key:"getMatchingFunction",value:function(){return isString(this.props.algorithm)?this.props.algorithm===Typeahead.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:isFunction(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(providedEntities){var _this2=this;this.setState(function(state,props){var entities=providedEntities||props.entities,currentValue=state.input,matches=""===currentValue?[]:_this2.getMatchIndexes(currentValue,entities);return{selectedEntityIndex:matches.length?matches[0]:-1,entityMatchIndexes:matches}})}},{key:"renderNotification",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var userText=this.state.input,raw=this.getSelectedEntityText(),processed="";return raw&&0===raw.toLowerCase().indexOf(userText.toLowerCase())&&(processed=raw.replace(new RegExp(userText,"i"),userText)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},this.props.hintProps,{ref:"hint",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),processed)}}},{key:"renderMatches",value:function(){var _this3=this;if(this.state.entityMatchIndexes.length){var props=this.props.matchWrapperProps;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},props,{ref:"matches",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead-match-wrapper",props.className)}),this.state.entityMatchIndexes.map(function(index){var entity=_this3.props.entities[index],className=entity.className,text=entity.text,rest=_objectWithoutProperties(entity,["className","text"]);return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},rest,{ref:"match_$"+index,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead-match",className,{"b-typeahead-match-selected":_this3.state.selectedEntityIndex===index}),key:text,onClick:_this3.handleMatchClick.bind(_this3,index)}),_this3.markMatchSubstring(_this3.state.input,entity))}))}}},{key:"render",value:function(){var props=this.props,state=this.state;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(props,Typeahead.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead-wrapper",props.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__.a)(props,__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a.defaultProps),{ref:"input","aria-controls":state.id,inputProps:_extends({},props.inputProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead",props.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),Typeahead}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Typeahead.mode={STARTS_WITH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__.a)(),FUZZY:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__.a)()},Typeahead.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a.propTypes,{algorithm:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY]),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({marker:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])]),matcher:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])])})]),clearOnSelection:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,entities:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({text:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired})),hint:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,hintProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),matchWrapperProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),offscreenClass:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,onComplete:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onEntityHighlighted:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onEntitySelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func}),Typeahead.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a.defaultProps,{algorithm:Typeahead.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:noop,onEntityHighlighted:noop,onEntitySelected:noop}),Typeahead.internalKeys=Object.keys(Typeahead.defaultProps);var _initialiseProps=function(){var _this4=this;this.state={entityMatchIndexes:[],id:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__.a)(),isControlled:isString(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return _this4.setState({input:value})},this.getSelectedEntityText=function(){var entity=_this4.props.entities[_this4.state.selectedEntityIndex];return entity?entity.text:""},this.resetMatches=function(){_this4.mounted&&_this4.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return _this4.refs.input.refs.field},this.select=function(){var input=_this4.getInputNode();input.selectionStart=0,input.selectionEnd=_this4.getValue().length},this.focus=function(){return _this4.getInputNode().focus()},this.getValue=function(){return _this4.refs.input.getValue()},this.setValue=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";_this4.refs.input.setValue(value),_this4.updateInputState(value),_this4.resetMatches(),_this4.focus()},this.setValueWithSelectedEntity=function(){_this4.props.onEntitySelected(_this4.state.selectedEntityIndex),_this4.props.clearOnSelection?_this4.setValue(""):_this4.setValue(_this4.getSelectedEntityText()),window.setTimeout(_this4.resetMatches,0)},this.markMatchSubstring=function(){return _this4.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return _this4.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(event){_this4.state.isControlled===!1&&(_this4.updateInputState(event.target.value),_this4.computeMatches()),isFunction(_this4.props.inputProps.onChange)&&_this4.props.inputProps.onChange(event)},this.handleKeyDown=function(event){switch(event.key){case"ArrowLeft":event.target.selectionStart>1&&event.stopPropagation();break;case"Tab":case"ArrowRight":_this4.state.selectedEntityIndex!==-1&&_this4.cursorAtEndOfInput()&&_this4.getInputNode()===event.target&&!event.shiftKey&&(event.nativeEvent.preventDefault(),_this4.setValueWithSelectedEntity());break;case"ArrowUp":event.nativeEvent.preventDefault(),_this4.selectMatch(-1),_this4.focus();break;case"ArrowDown":event.nativeEvent.preventDefault(),_this4.selectMatch(1),_this4.focus();break;case"Escape":_this4.state.selectedEntityIndex!==-1&&_this4.getInputNode()===event.target&&_this4.resetMatches();break;case"Enter":_this4.state.selectedEntityIndex!==-1&&_this4.getInputNode()===event.target?(event.nativeEvent.preventDefault(),_this4.setValueWithSelectedEntity()):_this4.props.onComplete(_this4.state.input,event)}isFunction(_this4.props.onKeyDown)&&_this4.props.onKeyDown(event)}};__webpack_exports__.a=Typeahead},"./packages/boundless-typeahead/node_modules/escape-string-regexp/index.js":function(module,exports,__webpack_require__){"use strict";var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;module.exports=function(str){if("string"!=typeof str)throw new TypeError("Expected a string");return str.replace(matchOperatorsRe,"\\$&")}},"./packages/boundless-utils-object-intersection/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getIntersection(obj1,obj2){return Object.keys(obj2).reduce(function(childProps,key){return key in obj1&&(childProps[key]=obj1[key]),childProps},{})}__webpack_exports__.a=getIntersection},"./packages/boundless-utils-omit-keys/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function omitKeysFromSourceObject(source){var omittedKeys=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.keys(source).reduce(function(hash,key){return omittedKeys.indexOf(key)===-1&&(hash[key]=source[key]),hash},{})}__webpack_exports__.a=omitKeysFromSourceObject},"./packages/boundless-utils-transform-property/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_exports__.a=function(){for(var props=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"],i=0,len=props.length;i<len;i++)if(props[i]in document.documentElement.style)return props[i];return!1}()},"./packages/boundless-utils-uuid/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function uuid(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(a){return(a^16*Math.random()>>a/4).toString(16)})}__webpack_exports__.a=uuid},0:function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_0__},1:function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_1__}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9ib3VuZGxlc3MuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDExZDNjYmIyZDM3ZmE2ODhjMWUyIiwid2VicGFjazovLy8uL34vY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLWFycm93LWtleS1uYXZpZ2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1hc3luYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1jaGVja2JveC1ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtZml0dGVkLXRleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLWltYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtbW9kYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2guaXNpbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3BvdmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzc2l2ZS1kaXNjbG9zdXJlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1yYWRpby9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXRva2VuaXplZC1pbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvfi9lc2NhcGUtc3RyaW5nLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy10cmFuc2Zvcm0tcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcImFtZFwiOlwicmVhY3RcIixcImNvbW1vbmpzMlwiOlwicmVhY3RcIixcInJvb3RcIjpcIlJlYWN0XCJ9Iiwid2VicGFjazovLy9leHRlcm5hbCB7XCJhbWRcIjpcInJlYWN0LWRvbVwiLFwiY29tbW9uanMyXCI6XCJyZWFjdC1kb21cIixcInJvb3RcIjpcIlJlYWN0RE9NXCJ9Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ1bmRlZmluZWQiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiLi9leHBvcnRzLmpzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcGFja2FnZXNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3BhY2thZ2VzX2JvdW5kbGVzc19hc3luY19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19wYWNrYWdlc19ib3VuZGxlc3NfYnV0dG9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3BhY2thZ2VzX2JvdW5kbGVzc19jaGVja2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19wYWNrYWdlc19ib3VuZGxlc3NfY2hlY2tib3hfZ3JvdXBfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fcGFja2FnZXNfYm91bmRsZXNzX2RpYWxvZ19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19wYWNrYWdlc19ib3VuZGxlc3NfZml0dGVkX3RleHRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fcGFja2FnZXNfYm91bmRsZXNzX2ltYWdlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3BhY2thZ2VzX2JvdW5kbGVzc19pbnB1dF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19wYWNrYWdlc19ib3VuZGxlc3NfbW9kYWxfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX3BhY2thZ2VzX2JvdW5kbGVzc19wYWdpbmF0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19wYWNrYWdlc19ib3VuZGxlc3NfcG9wb3Zlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fcGFja2FnZXNfYm91bmRsZXNzX3BvcnRhbF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fcGFja2FnZXNfYm91bmRsZXNzX3Byb2dyZXNzaXZlX2Rpc2Nsb3N1cmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfX3BhY2thZ2VzX2JvdW5kbGVzc19wcm9ncmVzc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fcGFja2FnZXNfYm91bmRsZXNzX3JhZGlvX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X19wYWNrYWdlc19ib3VuZGxlc3Nfc2VnbWVudGVkX2NvbnRyb2xfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfX3BhY2thZ2VzX2JvdW5kbGVzc190b2tlbml6ZWRfaW5wdXRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfX3BhY2thZ2VzX2JvdW5kbGVzc190eXBlYWhlYWRfXyIsIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJhcHBseSIsImtleSIsImhhc093biIsImpvaW4iLCJ3aW5kb3ciLCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWFycm93LWtleS1uYXZpZ2F0aW9uL2luZGV4LmpzIiwiX2RlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkRBVEFfQVRUUklCVVRFX0lOREVYIiwiREFUQV9BVFRSSUJVVEVfU0tJUCIsIkFycm93S2V5TmF2aWdhdGlvbiIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwiX3JlZiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiZ2V0UHJvdG90eXBlT2YiLCJjb25jYXQiLCJzdGF0ZSIsImFjdGl2ZUNoaWxkSW5kZXgiLCJkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleCIsImNoaWxkcmVuIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwibW9kZSIsIlZFUlRJQ0FMIiwiQk9USCIsInByZXZlbnREZWZhdWx0IiwibW92ZUZvY3VzIiwiSE9SSVpPTlRBTCIsIm9uS2V5RG93biIsImhhbmRsZUZvY3VzIiwiaGFzQXR0cmlidXRlIiwiaW5kZXgiLCJwYXJzZUludCIsImdldEF0dHJpYnV0ZSIsImNoaWxkIiwidG9BcnJheSIsInNldFN0YXRlIiwib25Gb2N1cyIsInBlcnNpc3RXcmFwcGVyRWxlbWVudFJlZmVyZW5jZSIsInVua25vd25UeXBlIiwiJHdyYXBwZXIiLCJIVE1MRWxlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJudW1DaGlsZHJlbiIsImNvdW50IiwiZ2V0RmlsdGVyZWRDaGlsZHJlbiIsIm5leHRQcm9wcyIsInNldEFjdGl2ZUNoaWxkSW5kZXgiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJzZXRGb2N1cyIsImNoaWxkTm9kZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsImZvY3VzIiwiZGVsdGEiLCJuZXh0SW5kZXgiLCJfdGhpczIiLCJtYXAiLCJfUmVhY3QkY2xvbmVFbGVtZW50IiwiYSIsImNsb25lRWxlbWVudCIsInRhYkluZGV4IiwiY3JlYXRlRWxlbWVudCIsImNvbXBvbmVudCIsImludGVybmFsS2V5cyIsInJlZiIsInJlbmRlckNoaWxkcmVuIiwiUHVyZUNvbXBvbmVudCIsInByb3BUeXBlcyIsIioiLCJhbnkiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJmdW5jIiwibnVtYmVyIiwib25lT2YiLCJkZWZhdWx0UHJvcHMiLCJrZXlzIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXN5bmMvaW5kZXguanMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0IiwiYmFzZSIsInBhdGgiLCJmYWxsYmFjayIsInNwbGl0IiwicmVkdWNlIiwiY3VycmVudCIsImZyYWdtZW50IiwiQXN5bmMiLCJtb3VudGVkIiwicHJvbWlzZSIsImNvbnRleHQiLCJwYXlsb2FkIiwiZmlyZVJlbmRlckNhbGxiYWNrIiwiY29udGVudCIsImlzVmFsaWRFbGVtZW50IiwiaGFuZGxlQ2hpbGRyZW4iLCJib3VuZEhhbmRsZXIiLCJoYW5kbGVQcm9taXNlRnVsZmlsbG1lbnQiLCJiaW5kIiwidGhlbiIsImNoaWxkcmVuRGlkUmVuZGVyIiwicGVuZGluZ0NvbnRlbnQiLCJjbGFzc05hbWUiLCJiLWFzeW5jLXBlbmRpbmciLCJub2RlIiwiaW5zdGFuY2VPZiIsIlByb21pc2UiLCJpc1JlcXVpcmVkIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYnV0dG9uL2luZGV4LmpzIiwiQnV0dG9uIiwiaGFuZGxlQ2xpY2siLCJkaXNhYmxlZCIsIm9uQ2xpY2siLCJmaXJlU3RhdGVmdWxDYWxsYmFjayIsInByZXNzZWQiLCJiLWJ1dHRvbi1wcmVzc2FibGUiLCJiLWJ1dHRvbi1wcmVzc2VkIiwiYXJpYS1wcmVzc2VkIiwicm9sZSIsIm9uUHJlc3NlZCIsIm9uVW5wcmVzc2VkIiwiYm9vbCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL2luZGV4LmpzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19jaGVja2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fIiwibm9vcCIsIkNoZWNrYm94R3JvdXAiLCJzZWxlY3RBbGxVVUlEIiwiaXRlbXMiLCJldmVyeSIsIml0ZW0iLCJpbnB1dFByb3BzIiwiY2hlY2tlZCIsInNvbWUiLCJhbGxDaGVja2VkIiwiYWxsSXRlbXNDaGVja2VkIiwic2VsZWN0QWxsUHJvcHMiLCJpbmRldGVybWluYXRlIiwiYW55SXRlbXNDaGVja2VkIiwibGFiZWwiLCJvbkNoZWNrZWQiLCJvbkFsbENoZWNrZWQiLCJvblVuY2hlY2tlZCIsIm9uQWxsVW5jaGVja2VkIiwib25DaGlsZENoZWNrZWQiLCJvbkNoaWxkVW5jaGVja2VkIiwicmVuZGVyQ2hlY2tib3hlcyIsInNlbGVjdEFsbCIsIkJFRk9SRSIsInVuc2hpZnQiLCJyZW5kZXJTZWxlY3RBbGxDaGVja2JveCIsIkFGVEVSIiwiTk9ORSIsImFycmF5T2YiLCJzaGFwZSIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94L2luZGV4LmpzIiwiaXNGdW5jdGlvbiIsIngiLCJDaGVja2JveCIsImlkIiwiaGFuZGxlQ2hhbmdlIiwib25DaGFuZ2UiLCJyZWZzIiwiaW5wdXQiLCJzZXRJbmRldGVybWluYXRlIiwiU3RyaW5nIiwidHlwZSIsImItY2hlY2tib3gtbWl4ZWQiLCJiLWNoZWNrYm94LWNoZWNrZWQiLCJiLWNoZWNrYm94LXVuY2hlY2tlZCIsImFyaWEtY2hlY2tlZCIsImdldEFyaWFTdGF0ZSIsImxhYmVsUHJvcHMiLCJodG1sRm9yIiwicmVuZGVySW5wdXQiLCJyZW5kZXJMYWJlbCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfcG9ydGFsX18iLCJzbGljZSIsIkRpYWxvZyIsIm5hdGl2ZUV2ZW50IiwiY2FwdHVyZUZvY3VzIiwicHJldmlvdXMiLCJleHBsaWNpdE9yaWdpbmFsVGFyZ2V0IiwicmVsYXRlZFRhcmdldCIsImlzUGFydE9mRGlhbG9nIiwic2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50Iiwic2V0VGltZW91dCIsIm9uQ2xvc2UiLCJoYW5kbGVJbnNpZGVDbGljayIsImhhbmRsZU91dHNpZGVDbGljayIsImhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCIsInJvb3RzIiwicXVlcnlTZWxlY3RvckFsbCIsIlBPUlRBTF9EQVRBX0FUVFJJQlVURSIsImRvbSIsImdldEVsZW1lbnRCeUlkIiwiZWxlbWVudCIsIm5vZGVUeXBlIiwiRUxFTUVOVF9OT0RFIiwicGFyZW50Tm9kZSIsImNvbnRhaW5zIiwiYWRkRXZlbnRMaXN0ZW5lciIsIiRkaWFsb2ciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJvcCIsImFyaWEtaGlkZGVuIiwicmVuZGVyRm9jdXNCb3VuZGFyeSIsImJlZm9yZSIsImRpYWxvZ0NvbXBvbmVudCIsImRpYWxvZ1Byb3BzIiwiYWZ0ZXIiLCJjbG9zZU9uRXNjS2V5IiwiY2xvc2VPbkluc2lkZUNsaWNrIiwiY2xvc2VPbk91dHNpZGVDbGljayIsImNsb3NlT25PdXRzaWRlRm9jdXMiLCJjbG9zZU9uT3V0c2lkZVNjcm9sbCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWZpdHRlZC10ZXh0L2luZGV4LmpzIiwidG9JIiwic3RyaW5nTnVtYmVyIiwicmVzY2FsZSIsImNvbnRhaW5lckJveCIsImdldENvbXB1dGVkU3R5bGUiLCJmb250U2l6ZSIsImJhc2VGb250U2l6ZSIsImNvbnRhaW5lckhlaWdodCIsImhlaWdodCIsImNvbnRhaW5lcldpZHRoIiwid2lkdGgiLCJib3hTaXppbmciLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwib3B0aW1pemVGb3JIZWlnaHQiLCJNYXRoIiwiZmxvb3IiLCJvZmZzZXRIZWlnaHQiLCJvcHRpbWl6ZUZvcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJ1cHNjYWxlIiwic3R5bGUiLCJtYXgiLCJtaW4iLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJpbnN0YW5jZXMiLCJmb3JFYWNoIiwicmVnaXN0ZXJJbnN0YW5jZSIsInVucmVnaXN0ZXJJbnN0YW5jZSIsInNwbGljZSIsImluZGV4T2YiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0IiwiRml0dGVkVGV4dCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWltYWdlL2luZGV4LmpzIiwiSW1hZ2UiLCJzdGF0dXMiLCJMT0FESU5HIiwic3JjIiwicmVzZXRQcmVsb2FkZXIiLCJwcmVsb2FkIiwibG9hZGVyIiwib25sb2FkIiwib25lcnJvciIsIkxPQURFRCIsIkVSUk9SIiwiYi1pbWFnZS1sb2FkaW5nIiwiYi1pbWFnZS1sb2FkZWQiLCJiLWltYWdlLWVycm9yIiwidGl0bGUiLCJhbHQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dC9pbmRleC5qcyIsIklucHV0IiwiaXNDb250cm9sbGVkIiwiaXNGb2N1c2VkIiwic2V0SW5wdXRWYWx1ZSIsImdldFZhbHVlIiwiZmllbGQiLCJoYW5kbGVCbHVyIiwib25CbHVyIiwiZGVmYXVsdFZhbHVlIiwibmV4dFZhbHVlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiYnViYmxlcyIsImlzTm9uRW1wdHkiLCJzaG91bGRTaG93UGxhY2Vob2xkZXIiLCJoaWRlUGxhY2Vob2xkZXJPbkZvY3VzIiwicGxhY2Vob2xkZXIiLCJnZXRQbGFjZWhvbGRlclRleHQiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9pbmRleC5qcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfZGlhbG9nX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3BvcnRhbF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fIiwiTW9kYWwiLCJwb3J0YWxQcm9wcyIsIiRtb2RhbCIsIm1hc2tQcm9wcyIsIm1vZGFsUHJvcHMiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL2luZGV4LmpzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2xvZGFzaF9pc2ludGVnZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19sb2Rhc2hfaXNpbnRlZ2VyX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfYXN5bmNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3Nfc2VnbWVudGVkX2NvbnRyb2xfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyIsImlkZW50aXR5IiwiUGFnaW5hdGlvbiIsImN1cnJlbnRQYWdlIiwiaW5pdGlhbFBhZ2UiLCJ0YXJnZXRJbmRleCIsIm51bUl0ZW1zUGVyUGFnZSIsImdldFBhZ2VGb3JJbmRleCIsIml0ZW1zUGVyUGFnZSIsImNlaWwiLCJ0b3RhbFBhZ2VzIiwidG90YWxJdGVtcyIsImZpcnN0VmlzaWJsZUl0ZW1JbmRleCIsImp1bXBUb0luZGV4IiwiRXJyb3IiLCJoYW5kbGVQYWdlU2VsZWN0ZWQiLCJvcHRpb24iLCJuZXh0VGFyZ2V0SW5kZXgiLCJDT05UUk9MX0RBVEFfQVRUUklCVVRFIiwiY29udHJvbCIsIkZJUlNUIiwiUFJFVklPVVMiLCJORVhUIiwiTEFTVCIsImhhbmRsZUl0ZW1Qcm9taXNlRnVsZmlsbG1lbnQiLCJpdGVtVG9KU1hDb252ZXJ0ZXIiLCJfIiwiaXRlbV8wIiwib2xkUHJvcHMiLCJpZGVudGlmaWVyIiwib3B0aW9ucyIsInN0YXJ0UGFnZSIsIm51bVBhZ2VUb2dnbGVzIiwiZW5kUGFnZSIsInNob3dQYWdpbmF0aW9uU3RhdGUiLCJzaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbCIsIl9vcHRpb25zJHB1c2giLCJqdW1wVG9GaXJzdFBhZ2VDb250cm9sQ29udGVudCIsInNob3dKdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sIiwiX29wdGlvbnMkcHVzaDIiLCJqdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sQ29udGVudCIsIl9vcHRpb25zJHB1c2gzIiwic2hvd0p1bXBUb05leHRQYWdlQ29udHJvbCIsIl9vcHRpb25zJHB1c2g0IiwianVtcFRvTmV4dFBhZ2VDb250cm9sQ29udGVudCIsInNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2wiLCJfb3B0aW9ucyRwdXNoNSIsImp1bXBUb0xhc3RQYWdlQ29udHJvbENvbnRlbnQiLCJjdXN0b21Db250cm9sQ29udGVudCIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJnZXRJdGVtIiwiX3RoaXMzIiwiaXRlbVdyYXBwZXJQcm9wcyIsImdlbmVyYXRlSXRlbXMiLCJiLXBhZ2luYXRpb24taXRlbS1ldmVuIiwiYi1wYWdpbmF0aW9uLWl0ZW0tb2RkIiwiZGF0YS1wYWdpbmF0aW9uLWluZGV4IiwiaXRlbUxvYWRpbmdDb250ZW50IiwicG9zaXRpb24iLCJfY3giLCJoaWRlUGFnZXJJZk5vdE5lZWRlZCIsImNvbnRyb2xXcmFwcGVyUHJvcHMiLCJBQk9WRSIsIkJFTE9XIiwiZ2VuZXJhdGVDb250cm9scyIsIm9uT3B0aW9uU2VsZWN0ZWQiLCJyZW5kZXJDb250cm9scyIsInJlbmRlckl0ZW1zIiwicmVuZGVyVmlldyIsIkNVU1RPTSIsIm51bWJlck9mUGFnZXMiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNpbnRlZ2VyL2luZGV4LmpzIiwiaXNJbnRlZ2VyIiwidG9JbnRlZ2VyIiwiaXNPYmplY3QiLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsIm9iamVjdFRvU3RyaW5nIiwic3ltYm9sVGFnIiwidG9GaW5pdGUiLCJ0b051bWJlciIsIklORklOSVRZIiwic2lnbiIsIk1BWF9JTlRFR0VSIiwicmVzdWx0IiwicmVtYWluZGVyIiwiTkFOIiwib3RoZXIiLCJ2YWx1ZU9mIiwicmVwbGFjZSIsInJlVHJpbSIsImlzQmluYXJ5IiwicmVJc0JpbmFyeSIsInRlc3QiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJyZUlzQmFkSGV4Iiwib2JqZWN0UHJvdG8iLCJ0b1N0cmluZyIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcG92ZXIvaW5kZXguanMiLCJnZXRPcHBvc2l0ZUNhcmRpbmFsIiwiZGlyZWN0aW9uIiwid2l0aG91dCIsImFycjEiLCJhcnIyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19kaWFsb2dfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfcG9ydGFsX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX3RyYW5zZm9ybV9wcm9wZXJ0eV9fIiwiQ0xBU1NfUkVNT1ZBTF9SRUdFWCIsIkRFRkFVTFRfQ0FSRVRfQ09NUE9ORU5UIiwidmlld0JveCIsInhtbG5zIiwiZmlsbCIsInBvaW50cyIsIlNUQVJUIiwiTUlERExFIiwiRU5EIiwiY29tYmluYXRpb25zIiwiYXgiLCJheSIsImR4IiwiZHkiLCJQb3BvdmVyIiwiYWxpZ24iLCJhbmNob3IiLCJjYXJldEFuY2hvciIsImNhY2hlVmlld3BvcnRDYXJ0b2dyYXBoeSIsInByZXNldCIsImdldFZhbGlkQWxpZ25tZW50UHJlc2V0IiwiZnJhZyIsImdldEFsaWdubWVudENsYXNzRnJhZ21lbnQiLCJkaWFsb2ciLCJyb3VuZCIsImdldE5leHREaWFsb2dYUG9zaXRpb24iLCJnZXROZXh0RGlhbG9nWVBvc2l0aW9uIiwiY2FyZGluYWwiLCJsb25naXR1ZGluYWwiLCIkY2FyZXQiLCJnZXROZXh0Q2FyZXRYUG9zaXRpb24iLCJib2R5UmVjdCIsImJvZHkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhbmNob3JSZWN0IiwiY2FyZXRBbmNob3JSZWN0IiwiYm9keUxlZnQiLCJsZWZ0IiwiYm9keVRvcCIsInRvcCIsIl9yZWYyIiwiY2FyZXQiLCJuZXh0WCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiX3JlZjMiLCJfcmVmNCIsIm5leHRZIiwiX3JlZjUiLCJwSGVpZ2h0IiwicFdpZHRoIiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwicmlnaHQiLCJ2YWxpZENvbWJvcyIsImNvbmZpZyIsImlzUG9zaXRpb25WYWxpZCIsImF1dG9SZXBvc2l0aW9uIiwiYmVzdENvbWJvcyIsIl9yZWY2Iiwib3Bwb3NpdGVDYXJkaW5hbCIsIm9rYXlDb21ib3MiLCJfcmVmNyIsImNhcmV0Q29tcG9uZW50IiwiY29uc3RhbnQiLCJkZWYiLCJQcm9wVHlwZXMiLCJOTlciLCJOIiwiTk5FIiwiRU5FIiwiRSIsIkVTRSIsIlNTRSIsIlMiLCJTU1ciLCJXU1ciLCJXIiwiV05XIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcG9ydGFsL2luZGV4LmpzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fX2RlZmF1bHQiLCJQb3J0YWwiLCJfUmVhY3QkQ29tcG9uZW50IiwiJHBvcnRhbCIsIiRwYXNzZW5nZXIiLCJkZXN0aW5hdGlvbiIsImFwcGVuZENoaWxkIiwicmVuZGVyUG9ydGFsbGVkQ29udGVudCIsInBvcnRhbElkIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicmVtb3ZlQ2hpbGQiLCJDb21wb25lbnQiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzcy9pbmRleC5qcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfYnV0dG9uX18iLCJQcm9ncmVzcyIsIm9uQ2FuY2VsIiwiY2FuY2VsUHJvcHMiLCJjYW5jZWxDb21wb25lbnQiLCJwcm9ncmVzc0NvbXBvbmVudCIsInByb2dyZXNzUHJvcHMiLCJiLXByb2dyZXNzLWluZGV0ZXJtaW5hdGUiLCJwcm9ncmVzcyIsInR3ZWVuUHJvcGVydHkiLCJkYXRhLXByb2dyZXNzIiwicmVuZGVyUHJvZ3Jlc3MiLCJyZW5kZXJDYW5jZWwiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzc2l2ZS1kaXNjbG9zdXJlL2luZGV4LmpzIiwiUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlIiwiZXhwYW5kZWQiLCJ0b2dnbGVQcm9wcyIsIm5ld1Byb3BzIiwiYi1kaXNjbG9zdXJlLWV4cGFuZGVkIiwidG9nZ2xlQ29tcG9uZW50IiwidG9nZ2xlRXhwYW5kZWRDb250ZW50IiwidG9nZ2xlQ29udGVudCIsInJlbmRlckNvbnRlbnQiLCJvbkV4cGFuZCIsIm9uSGlkZSIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL2luZGV4LmpzIiwiUmFkaW8iLCJ1dWlkIiwib25TZWxlY3RlZCIsImItcmFkaW8tc2VsZWN0ZWQiLCJzZWxlY3RlZCIsImxhYmVsQ29udGVudCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXNlZ21lbnRlZC1jb250cm9sL2luZGV4LmpzIiwiZmluZEluZGV4IiwiYXJyIiwiZm91bmQiLCJsZW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2J1dHRvbl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyIsIlNlZ21lbnRlZENvbnRyb2wiLCJzZWxlY3RlZEluZGV4IiwiaGFuZGxlT3B0aW9uU2VsZWN0aW9uIiwicGFyZW50RWxlbWVudCIsImdldFNlbGVjdGVkT3B0aW9uIiwiZ2V0U2VsZWN0ZWRPcHRpb25JbmRleCIsInNlbGVjdE9wdGlvbiIsInNlbGVjdE9wdGlvbkJ5S2V5IiwiayIsInYiLCJzZWxlY3RPcHRpb25JbmRleCIsImluZmVyU2VsZWN0ZWRPcHRpb25JbmRleCIsImRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4Iiwib3B0aW9uQ29tcG9uZW50IiwiYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24tc2VsZWN0ZWQiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy10b2tlbml6ZWQtaW5wdXQvaW5kZXguanMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3R5cGVhaGVhZF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX18iLCJmaXJzdCIsImFycmF5IiwibGFzdCIsIlRva2VuaXplZElucHV0IiwidHlwZWFoZWFkIiwiZ2V0SW5wdXROb2RlIiwiZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0Iiwic2VsZWN0Iiwic2V0VmFsdWUiLCJhZGQiLCJ0b2tlbnMiLCJoYW5kbGVBZGRUb2tlbiIsImhhbmRsZUlucHV0Q2xpY2siLCJjbGVhclNlbGVjdGlvbiIsImhhbmRsZUlucHV0Rm9jdXMiLCJ3aGljaCIsInNlbGVjdFByZXZpb3VzVG9rZW4iLCJzaGlmdEtleSIsInNlbGVjdE5leHRUb2tlbiIsInRva2Vuc1NlbGVjdGVkIiwicmVtb3ZlIiwibWV0YUtleSIsIl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbiIsImhhbmRsZU5ld1NlbGVjdGlvbiIsInByZXZpb3VzU2VsZWN0ZWRJbmRleGVzIiwiY3VycmVudFNlbGVjdGVkSW5kZXhlcyIsImluZGV4ZXMiLCJpZHgiLCJoYW5kbGVSZW1vdmVUb2tlbnMiLCJhcHBlbmQiLCJzZWxlY3RUb2tlbiIsInByZXZpb3VzVG9rZW4iLCJzZWxlY3RUb2tlbnMiLCJuZXh0VG9rZW4iLCJzdG9wUHJvcGFnYXRpb24iLCJ0b2tlbkNsb3NlQ29tcG9uZW50IiwidG9rZW5DbG9zZVZpc2libGUiLCJoYW5kbGVUb2tlbkNsb3NlQ2xpY2siLCJiLXRva2VuZmllbGQtdG9rZW4tc2VsZWN0ZWQiLCJoYW5kbGVUb2tlbktleURvd24iLCJlbnRpdGllcyIsInRleHQiLCJyZW5kZXJUb2tlbkNsb3NlIiwicmVuZGVyVG9rZW5zIiwiY2xlYXJPblNlbGVjdGlvbiIsIm9uRW50aXR5U2VsZWN0ZWQiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvaW5kZXguanMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfZXNjYXBlX3N0cmluZ19yZWdleHBfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9lc2NhcGVfc3RyaW5nX3JlZ2V4cF9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2lucHV0X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyIsImlzU3RyaW5nIiwiVHlwZWFoZWFkIiwiX2luaXRpYWxpc2VQcm9wcyIsImNvbXB1dGVNYXRjaGVzIiwic2VsZWN0ZWRFbnRpdHlJbmRleCIsIm9uRW50aXR5SGlnaGxpZ2h0ZWQiLCJ1cGRhdGVJbnB1dFN0YXRlIiwiZW50aXR5TWF0Y2hJbmRleGVzIiwibWF0Y2hlcyIsInNjcm9sbFRvcCIsInNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5IiwidG90YWxNYXRjaGVzIiwibWF0Y2hJbmRleCIsIm1hdGNoZXNOb2RlIiwibWF0Y2hlc05vZGVZRW5kIiwibWF0Y2hOb2RlIiwibWF0Y2hOb2RlWVN0YXJ0Iiwib2Zmc2V0VG9wIiwibWF0Y2hOb2RlWUVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZW50aXR5IiwiZW50aXR5Q29udGVudCIsImZyYWdzIiwiUmVnRXhwIiwibm9ybWFsaXplZFVzZXJUZXh0IiwidG9Mb3dlckNhc2UiLCJ0aHJlc2hvbGQiLCJzZWVrVmFsdWUiLCJpbmRleFN0YXJ0IiwiaW5kZXhFbmQiLCJhbGdvcml0aG0iLCJTVEFSVFNfV0lUSCIsIm1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmciLCJtYXJrRnV6enlNYXRjaFN1YnN0cmluZyIsIm1hcmtlciIsIndhcm5lZE1hcmtlciIsImNvbnNvbGUiLCJ3YXJuIiwidXNlclRleHQiLCJub3JtYWxpemVkIiwicmVzdWx0cyIsImdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXMiLCJnZXRGdXp6eU1hdGNoSW5kZXhlcyIsIm1hdGNoZXIiLCJ3YXJuZWRNYXRjaGVyIiwicHJvdmlkZWRFbnRpdGllcyIsImN1cnJlbnRWYWx1ZSIsImdldE1hdGNoSW5kZXhlcyIsIm9mZnNjcmVlbkNsYXNzIiwiYXJpYS1saXZlIiwiaGludCIsInJhdyIsInByb2Nlc3NlZCIsImhpbnRQcm9wcyIsIm1hdGNoV3JhcHBlclByb3BzIiwicmVzdCIsImItdHlwZWFoZWFkLW1hdGNoLXNlbGVjdGVkIiwiaGFuZGxlTWF0Y2hDbGljayIsIm1hcmtNYXRjaFN1YnN0cmluZyIsInJlbmRlck5vdGlmaWNhdGlvbiIsInJlbmRlckhpbnQiLCJhcmlhLWNvbnRyb2xzIiwicmVuZGVyTWF0Y2hlcyIsIkZVWlpZIiwib25Db21wbGV0ZSIsIl90aGlzNCIsInJlc2V0TWF0Y2hlcyIsImdldE1hcmtpbmdGdW5jdGlvbiIsImdldE1hdGNoaW5nRnVuY3Rpb24iLCJjdXJzb3JBdEVuZE9mSW5wdXQiLCJzZWxlY3RNYXRjaCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanMiLCJtYXRjaE9wZXJhdG9yc1JlIiwic3RyIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbi9pbmRleC5qcyIsImdldEludGVyc2VjdGlvbiIsIm9iajEiLCJvYmoyIiwiY2hpbGRQcm9wcyIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qcyIsIm9taXRLZXlzRnJvbVNvdXJjZU9iamVjdCIsIm9taXR0ZWRLZXlzIiwiaGFzaCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qcyIsImRvY3VtZW50RWxlbWVudCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanMiLCJyYW5kb20iLCIwIiwiMSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsS0FBQUMsU0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsUUFBQUcsUUFBQSxTQUFBQSxRQUFBLGNBQ0Esa0JBQUFDLGdCQUFBQyxJQUNBRCxRQUFBLHFCQUFBSixTQUNBLGdCQUFBQyxTQUNBQSxRQUFBLFVBQUFELFFBQUFHLFFBQUFHLFFBQUFILFFBQUFHLFNBRUFQLEtBQUEsVUFBQUMsUUFBQUQsS0FBQSxNQUFBQSxLQUFBLFdBQ0NRLEtBQUEsU0FBQUMsOEJBQUFDLCtCQUNELE1DQWdCLFVBQVVDLFNDTjFCLFFBQUFDLHFCQUFBQyxVQUdBLEdBQUFDLGlCQUFBRCxVQUNBLE1BQUFDLGtCQUFBRCxVQUFBWCxPQUdBLElBQUFDLFFBQUFXLGlCQUFBRCxXQUNBRSxFQUFBRixTQUNBRyxHQUFBLEVBQ0FkLFdBVUEsT0FOQVMsU0FBQUUsVUFBQUksS0FBQWQsT0FBQUQsUUFBQUMsY0FBQUQsUUFBQVUscUJBR0FULE9BQUFhLEdBQUEsRUFHQWIsT0FBQUQsUUF2QkEsR0FBQVksb0JBK0RBLE9BbkNBRixxQkFBQU0sRUFBQVAsUUFHQUMsb0JBQUFPLEVBQUFMLGlCQUdBRixvQkFBQUcsRUFBQSxTQUFBSyxPQUEyQyxNQUFBQSxRQUczQ1Isb0JBQUFTLEVBQUEsU0FBQW5CLFFBQUFvQixLQUFBQyxRQUNBWCxvQkFBQVksRUFBQXRCLFFBQUFvQixPQUNBRyxPQUFBQyxlQUFB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QixVMUJxYmtCaHhCLG9CQUF1QixFQUFJOHdCLDBCQUt0REcseURBQ0EsU0FBVXJ6QixPQUFRb0Msb0JBQXFCM0IscUJBRTdDLFkyQnJjQTJCLHFCQUFBLEVBQWUsV0FVWCxJQUFLLEdBVEN1RSxRQUNGLFlBQ0Esa0JBQ0EsZUFDQSxhQUNBLGNBQ0Esb0JBR0svRixFQUFJLEVBQUcyb0IsSUFBTTVpQixNQUFNeEMsT0FBUXZELEVBQUkyb0IsSUFBSzNvQixJQUN6QyxHQUFJK0YsTUFBTS9GLElBQU1zSixVQUFTb3BCLGdCQUFnQmxkLE1BQ3JDLE1BQU96UCxPQUFNL0YsRUFJckIsUUFBTyxNM0IwYkwyeUIsMkNBQ0EsU0FBVXZ6QixPQUFRb0Msb0JBQXFCM0IscUJBRTdDLFk0QjVjZSxTQUFTcW9CLFFBRXBCLE1BQU8sT0FBUyxNQUFLLEtBQUssS0FBSyxLQUFLLE1BQU83SSxRQUFRLFNBQVMsU0FBQXJWLEdBQUEsT0FBSUEsRUFBZ0IsR0FBZGtMLEtBQUswZCxVQUFhNW9CLEVBQUUsR0FBRzhWLFNBQVMsTTVCMmNyRXRlLG9CQUF1QixFQUFJMG1CLE1BS3REMkssRUFDQSxTQUFVenpCLE9BQVFELFM2Qi9keEJDLE9BQUFELFFBQUFPLCtCN0JxZU1vekIsRUFDQSxTQUFVMXpCLE9BQVFELFM4QnRleEJDLE9BQUFELFFBQUFRIiwiZmlsZSI6ImJvdW5kbGVzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkJvdW5kbGVzc1wiXSA9IGZhY3RvcnkocmVxdWlyZSh1bmRlZmluZWQpLCByZXF1aXJlKHVuZGVmaW5lZCkpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJvdW5kbGVzc1wiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdLCByb290W1wiUmVhY3RET01cIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkJvdW5kbGVzc1wiXSA9IGZhY3RvcnkocmVxdWlyZSh1bmRlZmluZWQpLCByZXF1aXJlKHVuZGVmaW5lZCkpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJvdW5kbGVzc1wiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdLCByb290W1wiUmVhY3RET01cIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9leHBvcnRzLmpzXCIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyBcIi4vZXhwb3J0cy5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3BhY2thZ2VzX2JvdW5kbGVzc19hcnJvd19rZXlfbmF2aWdhdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWFycm93LWtleS1uYXZpZ2F0aW9uL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQXJyb3dLZXlOYXZpZ2F0aW9uXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wYWNrYWdlc19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fcGFja2FnZXNfYm91bmRsZXNzX2FzeW5jX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXN5bmMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBc3luY1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fcGFja2FnZXNfYm91bmRsZXNzX2FzeW5jX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3BhY2thZ2VzX2JvdW5kbGVzc19idXR0b25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1idXR0b24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCdXR0b25cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3BhY2thZ2VzX2JvdW5kbGVzc19idXR0b25fX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fcGFja2FnZXNfYm91bmRsZXNzX2NoZWNrYm94X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDaGVja2JveFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fcGFja2FnZXNfYm91bmRsZXNzX2NoZWNrYm94X19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3BhY2thZ2VzX2JvdW5kbGVzc19jaGVja2JveF9ncm91cF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ2hlY2tib3hHcm91cFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fcGFja2FnZXNfYm91bmRsZXNzX2NoZWNrYm94X2dyb3VwX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX3BhY2thZ2VzX2JvdW5kbGVzc19kaWFsb2dfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1kaWFsb2cvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJEaWFsb2dcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX3BhY2thZ2VzX2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fcGFja2FnZXNfYm91bmRsZXNzX2ZpdHRlZF90ZXh0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtZml0dGVkLXRleHQvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJGaXR0ZWRUZXh0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19wYWNrYWdlc19ib3VuZGxlc3NfZml0dGVkX3RleHRfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fcGFja2FnZXNfYm91bmRsZXNzX2ltYWdlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW1hZ2UvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJJbWFnZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fcGFja2FnZXNfYm91bmRsZXNzX2ltYWdlX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3BhY2thZ2VzX2JvdW5kbGVzc19pbnB1dF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWlucHV0L2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiSW5wdXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3BhY2thZ2VzX2JvdW5kbGVzc19pbnB1dF9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19wYWNrYWdlc19ib3VuZGxlc3NfbW9kYWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1vZGFsXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19wYWNrYWdlc19ib3VuZGxlc3NfbW9kYWxfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX3BhY2thZ2VzX2JvdW5kbGVzc19wYWdpbmF0aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBhZ2luYXRpb25cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX19wYWNrYWdlc19ib3VuZGxlc3NfcGFnaW5hdGlvbl9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fcGFja2FnZXNfYm91bmRsZXNzX3BvcG92ZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3BvdmVyL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUG9wb3ZlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX3BhY2thZ2VzX2JvdW5kbGVzc19wb3BvdmVyX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19wYWNrYWdlc19ib3VuZGxlc3NfcG9ydGFsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcG9ydGFsL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUG9ydGFsXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fcGFja2FnZXNfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fcGFja2FnZXNfYm91bmRsZXNzX3Byb2dyZXNzaXZlX2Rpc2Nsb3N1cmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzc2l2ZS1kaXNjbG9zdXJlL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fcGFja2FnZXNfYm91bmRsZXNzX3Byb2dyZXNzaXZlX2Rpc2Nsb3N1cmVfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfX3BhY2thZ2VzX2JvdW5kbGVzc19wcm9ncmVzc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJvZ3Jlc3NcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19wYWNrYWdlc19ib3VuZGxlc3NfcHJvZ3Jlc3NfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX3BhY2thZ2VzX2JvdW5kbGVzc19yYWRpb19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUmFkaW9cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X19wYWNrYWdlc19ib3VuZGxlc3NfcmFkaW9fX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX3BhY2thZ2VzX2JvdW5kbGVzc19zZWdtZW50ZWRfY29udHJvbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXNlZ21lbnRlZC1jb250cm9sL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2VnbWVudGVkQ29udHJvbFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX3BhY2thZ2VzX2JvdW5kbGVzc19zZWdtZW50ZWRfY29udHJvbF9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fcGFja2FnZXNfYm91bmRsZXNzX3Rva2VuaXplZF9pbnB1dF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXRva2VuaXplZC1pbnB1dC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlRva2VuaXplZElucHV0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fcGFja2FnZXNfYm91bmRsZXNzX3Rva2VuaXplZF9pbnB1dF9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fcGFja2FnZXNfYm91bmRsZXNzX3R5cGVhaGVhZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlR5cGVhaGVhZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfX3BhY2thZ2VzX2JvdW5kbGVzc190eXBlYWhlYWRfX1tcImFcIl07IH0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTsoZnVuY3Rpb24oKXsndXNlIHN0cmljdCc7dmFyIGhhc093bj17fS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBjbGFzc05hbWVzKCl7dmFyIGNsYXNzZXM9W107Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIGFyZz1hcmd1bWVudHNbaV07aWYoIWFyZyljb250aW51ZTt2YXIgYXJnVHlwZT10eXBlb2YgYXJnPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihhcmcpO2lmKGFyZ1R5cGU9PT0nc3RyaW5nJ3x8YXJnVHlwZT09PSdudW1iZXInKXtjbGFzc2VzLnB1c2goYXJnKTt9ZWxzZSBpZihBcnJheS5pc0FycmF5KGFyZykpe2NsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsYXJnKSk7fWVsc2UgaWYoYXJnVHlwZT09PSdvYmplY3QnKXtmb3IodmFyIGtleSBpbiBhcmcpe2lmKGhhc093bi5jYWxsKGFyZyxrZXkpJiZhcmdba2V5XSl7Y2xhc3Nlcy5wdXNoKGtleSk7fX19fXJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTt9aWYodHlwZW9mIG1vZHVsZSE9PSd1bmRlZmluZWQnJiZtb2R1bGUuZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9Y2xhc3NOYW1lczt9ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT0nZnVuY3Rpb24nJiZfdHlwZW9mKF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcIikpPT09J29iamVjdCcmJl9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcIikpeyEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuIGNsYXNzTmFtZXM7fS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO31lbHNle3dpbmRvdy5jbGFzc05hbWVzPWNsYXNzTmFtZXM7fX0pKCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oX193ZWJwYWNrX2FtZF9vcHRpb25zX18pIHsvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIHt9KSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHZhbHVlKXtpZihrZXkgaW4gb2JqKXtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7dmFsdWU6dmFsdWUsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOnRydWV9KTt9ZWxzZXtvYmpba2V5XT12YWx1ZTt9cmV0dXJuIG9iajt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBEQVRBX0FUVFJJQlVURV9JTkRFWD0nZGF0YS1mb2N1cy1pbmRleCc7dmFyIERBVEFfQVRUUklCVVRFX1NLSVA9J2RhdGEtZm9jdXMtc2tpcCc7dmFyIEFycm93S2V5TmF2aWdhdGlvbj1mdW5jdGlvbihfUmVhY3QkUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKEFycm93S2V5TmF2aWdhdGlvbixfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gQXJyb3dLZXlOYXZpZ2F0aW9uKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsQXJyb3dLZXlOYXZpZ2F0aW9uKTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPUFycm93S2V5TmF2aWdhdGlvbi5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihBcnJvd0tleU5hdmlnYXRpb24pKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy5zdGF0ZT17YWN0aXZlQ2hpbGRJbmRleDpfdGhpcy5wcm9wcy5kZWZhdWx0QWN0aXZlQ2hpbGRJbmRleCxjaGlsZHJlbjpbXX0sX3RoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihldmVudCl7c3dpdGNoKGV2ZW50LmtleSl7Y2FzZSdBcnJvd1VwJzppZihfdGhpcy5wcm9wcy5tb2RlPT09QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuVkVSVElDQUx8fF90aGlzLnByb3BzLm1vZGU9PT1BcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKXtldmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzLm1vdmVGb2N1cygtMSk7fWJyZWFrO2Nhc2UnQXJyb3dMZWZ0JzppZihfdGhpcy5wcm9wcy5tb2RlPT09QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTHx8X3RoaXMucHJvcHMubW9kZT09PUFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkJPVEgpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7X3RoaXMubW92ZUZvY3VzKC0xKTt9YnJlYWs7Y2FzZSdBcnJvd0Rvd24nOmlmKF90aGlzLnByb3BzLm1vZGU9PT1BcnJvd0tleU5hdmlnYXRpb24ubW9kZS5WRVJUSUNBTHx8X3RoaXMucHJvcHMubW9kZT09PUFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkJPVEgpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7X3RoaXMubW92ZUZvY3VzKDEpO31icmVhaztjYXNlJ0Fycm93UmlnaHQnOmlmKF90aGlzLnByb3BzLm1vZGU9PT1BcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMfHxfdGhpcy5wcm9wcy5tb2RlPT09QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5tb3ZlRm9jdXMoMSk7fWJyZWFrO31pZihfdGhpcy5wcm9wcy5vbktleURvd24pe190aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7fX0sX3RoaXMuaGFuZGxlRm9jdXM9ZnVuY3Rpb24oZXZlbnQpe2lmKGV2ZW50LnRhcmdldC5oYXNBdHRyaWJ1dGUoREFUQV9BVFRSSUJVVEVfSU5ERVgpKXt2YXIgaW5kZXg9cGFyc2VJbnQoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShEQVRBX0FUVFJJQlVURV9JTkRFWCksMTApO3ZhciBjaGlsZD1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIkNoaWxkcmVuXCJdLnRvQXJyYXkoX3RoaXMuc3RhdGUuY2hpbGRyZW4pW2luZGV4XTtfdGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDppbmRleH0pO2lmKGNoaWxkLnByb3BzLm9uRm9jdXMpe2NoaWxkLnByb3BzLm9uRm9jdXMoZXZlbnQpO319fSxfdGhpcy5wZXJzaXN0V3JhcHBlckVsZW1lbnRSZWZlcmVuY2U9ZnVuY3Rpb24odW5rbm93blR5cGUpe190aGlzLiR3cmFwcGVyPXVua25vd25UeXBlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ/dW5rbm93blR5cGU6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fX1tcImZpbmRET01Ob2RlXCJdKSh1bmtub3duVHlwZSk7fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhBcnJvd0tleU5hdmlnYXRpb24sW3trZXk6J2dldEZpbHRlcmVkQ2hpbGRyZW4nLHZhbHVlOmZ1bmN0aW9uIGdldEZpbHRlcmVkQ2hpbGRyZW4oKXt2YXIgcHJvcHM9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOnRoaXMucHJvcHM7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiQ2hpbGRyZW5cIl0udG9BcnJheShwcm9wcy5jaGlsZHJlbikuZmlsdGVyKEJvb2xlYW4pO319LHtrZXk6J3NldEFjdGl2ZUNoaWxkSW5kZXgnLHZhbHVlOmZ1bmN0aW9uIHNldEFjdGl2ZUNoaWxkSW5kZXgoKXtpZih0aGlzLnN0YXRlLmFjdGl2ZUNoaWxkSW5kZXghPT0wKXt2YXIgbnVtQ2hpbGRyZW49X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJDaGlsZHJlblwiXS5jb3VudCh0aGlzLnN0YXRlLmNoaWxkcmVuKTtpZihudW1DaGlsZHJlbj09PTApe3RoaXMuc2V0U3RhdGUoe2FjdGl2ZUNoaWxkSW5kZXg6MH0pO31lbHNlIGlmKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleD49bnVtQ2hpbGRyZW4pe3RoaXMuc2V0U3RhdGUoe2FjdGl2ZUNoaWxkSW5kZXg6bnVtQ2hpbGRyZW4tMX0pO319fX0se2tleTonY29tcG9uZW50V2lsbE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKXt0aGlzLnNldFN0YXRlKHtjaGlsZHJlbjp0aGlzLmdldEZpbHRlcmVkQ2hpbGRyZW4oKX0pO319LHtrZXk6J2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXtpZihuZXh0UHJvcHMuY2hpbGRyZW4hPT10aGlzLnByb3BzLmNoaWxkcmVuKXtyZXR1cm4gdGhpcy5zZXRTdGF0ZSh7Y2hpbGRyZW46dGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKG5leHRQcm9wcyl9LHRoaXMuc2V0QWN0aXZlQ2hpbGRJbmRleCk7fXRoaXMuc2V0QWN0aXZlQ2hpbGRJbmRleCgpO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcyxwcmV2U3RhdGUpe2lmKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCE9PXByZXZTdGF0ZS5hY3RpdmVDaGlsZEluZGV4KXt0aGlzLnNldEZvY3VzKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCk7fX19LHtrZXk6J3NldEZvY3VzJyx2YWx1ZTpmdW5jdGlvbiBzZXRGb2N1cyhpbmRleCl7dmFyIGNoaWxkTm9kZT10aGlzLiR3cmFwcGVyLmNoaWxkcmVuW2luZGV4XTtpZihjaGlsZE5vZGUmJmNoaWxkTm9kZS5oYXNBdHRyaWJ1dGUoREFUQV9BVFRSSUJVVEVfU0tJUCkpe3RoaXMubW92ZUZvY3VzKGNoaWxkTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkb2N1bWVudC5hY3RpdmVFbGVtZW50KSZOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORz8tMToxKTt9ZWxzZSBpZihjaGlsZE5vZGUmJmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1jaGlsZE5vZGUpe2NoaWxkTm9kZS5mb2N1cygpO319fSx7a2V5Oidtb3ZlRm9jdXMnLHZhbHVlOmZ1bmN0aW9uIG1vdmVGb2N1cyhkZWx0YSl7dmFyIG51bUNoaWxkcmVuPXRoaXMuc3RhdGUuY2hpbGRyZW4/X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJDaGlsZHJlblwiXS5jb3VudCh0aGlzLnN0YXRlLmNoaWxkcmVuKTowO3ZhciBuZXh0SW5kZXg9dGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4K2RlbHRhO2lmKG5leHRJbmRleD49bnVtQ2hpbGRyZW4pe25leHRJbmRleD0wO31lbHNlIGlmKG5leHRJbmRleDwwKXtuZXh0SW5kZXg9bnVtQ2hpbGRyZW4tMTt9dGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDpuZXh0SW5kZXh9KTt9fSx7a2V5OidyZW5kZXJDaGlsZHJlbicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oKXt2YXIgX3RoaXMyPXRoaXM7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiQ2hpbGRyZW5cIl0ubWFwKHRoaXMuc3RhdGUuY2hpbGRyZW4sZnVuY3Rpb24oY2hpbGQsaW5kZXgpe3ZhciBfUmVhY3QkY2xvbmVFbGVtZW50O3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY2xvbmVFbGVtZW50KGNoaWxkLChfUmVhY3QkY2xvbmVFbGVtZW50PXt9LF9kZWZpbmVQcm9wZXJ0eShfUmVhY3QkY2xvbmVFbGVtZW50LERBVEFfQVRUUklCVVRFX0lOREVYLGluZGV4KSxfZGVmaW5lUHJvcGVydHkoX1JlYWN0JGNsb25lRWxlbWVudCxEQVRBX0FUVFJJQlVURV9TS0lQLHBhcnNlSW50KGNoaWxkLnByb3BzLnRhYkluZGV4LDEwKT09PS0xfHx1bmRlZmluZWQpLF9kZWZpbmVQcm9wZXJ0eShfUmVhY3QkY2xvbmVFbGVtZW50LCdrZXknLGNoaWxkLmtleXx8aW5kZXgpLF9kZWZpbmVQcm9wZXJ0eShfUmVhY3QkY2xvbmVFbGVtZW50LCd0YWJJbmRleCcsX3RoaXMyLnN0YXRlLmFjdGl2ZUNoaWxkSW5kZXg9PT1pbmRleD8wOi0xKSxfUmVhY3QkY2xvbmVFbGVtZW50KSk7fSk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsQXJyb3dLZXlOYXZpZ2F0aW9uLmludGVybmFsS2V5cykse3JlZjp0aGlzLnBlcnNpc3RXcmFwcGVyRWxlbWVudFJlZmVyZW5jZSxvbkZvY3VzOnRoaXMuaGFuZGxlRm9jdXMsb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bn0pLHRoaXMucmVuZGVyQ2hpbGRyZW4oKSk7fX1dKTtyZXR1cm4gQXJyb3dLZXlOYXZpZ2F0aW9uO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLlB1cmVDb21wb25lbnQpO0Fycm93S2V5TmF2aWdhdGlvbi5tb2RlPXtIT1JJWk9OVEFMOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxWRVJUSUNBTDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksQk9USDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCl9O0Fycm93S2V5TmF2aWdhdGlvbi5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmNdKSxkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5udW1iZXIsbW9kZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZihbQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCxBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMLEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMXSl9O0Fycm93S2V5TmF2aWdhdGlvbi5kZWZhdWx0UHJvcHM9e2NvbXBvbmVudDonZGl2JyxkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDowLG1vZGU6QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCxvbktleURvd246ZnVuY3Rpb24gb25LZXlEb3duKCl7fX07QXJyb3dLZXlOYXZpZ2F0aW9uLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhBcnJvd0tleU5hdmlnYXRpb24uZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gQXJyb3dLZXlOYXZpZ2F0aW9uO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1hc3luYy9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGdldD1mdW5jdGlvbiBnZXQoYmFzZSxwYXRoLGZhbGxiYWNrKXtyZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbihjdXJyZW50LGZyYWdtZW50KXtyZXR1cm4gY3VycmVudFtmcmFnbWVudF18fGZhbGxiYWNrO30sYmFzZSk7fTt2YXIgQXN5bmM9ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhBc3luYyxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gQXN5bmMoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxBc3luYyk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1Bc3luYy5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihBc3luYykpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLm1vdW50ZWQ9ZmFsc2UsX3RoaXMucHJvbWlzZT1udWxsLF90aGlzLnN0YXRlPXt9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKEFzeW5jLFt7a2V5OidoYW5kbGVQcm9taXNlRnVsZmlsbG1lbnQnLHZhbHVlOmZ1bmN0aW9uIGhhbmRsZVByb21pc2VGdWxmaWxsbWVudChjb250ZXh0LHBheWxvYWQpe2lmKCF0aGlzLm1vdW50ZWQpe3JldHVybjt9dGhpcy5zZXRTdGF0ZShmdW5jdGlvbiByZW5kZXJQYXlsb2FkSWZQcm9taXNlTWF0Y2hlcyhzdGF0ZSl7aWYodGhpcy5wcm9taXNlPT09Y29udGV4dCl7dGhpcy5wcm9taXNlPW51bGw7cmV0dXJue2NvbXBvbmVudDpwYXlsb2FkfTt9cmV0dXJuIHN0YXRlO30sdGhpcy5maXJlUmVuZGVyQ2FsbGJhY2spO319LHtrZXk6J2hhbmRsZUNoaWxkcmVuJyx2YWx1ZTpmdW5jdGlvbiBoYW5kbGVDaGlsZHJlbihjaGlsZHJlbil7dmFyIGNvbnRlbnQ9Y2hpbGRyZW47aWYoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmlzVmFsaWRFbGVtZW50KGNvbnRlbnQpKXtyZXR1cm4gdGhpcy5zZXRTdGF0ZSh7Y29tcG9uZW50OmNvbnRlbnR9LHRoaXMuZmlyZVJlbmRlckNhbGxiYWNrKTt9ZWxzZSBpZih0eXBlb2YgY29udGVudD09PSdmdW5jdGlvbicpe3JldHVybiB0aGlzLmhhbmRsZUNoaWxkcmVuKGNvbnRlbnQodGhpcy5wcm9wcykpO312YXIgYm91bmRIYW5kbGVyPXRoaXMuaGFuZGxlUHJvbWlzZUZ1bGZpbGxtZW50LmJpbmQodGhpcyxjb250ZW50KTt0aGlzLnByb21pc2U9Y29udGVudDt0aGlzLnNldFN0YXRlKHtjb21wb25lbnQ6bnVsbH0sZnVuY3Rpb24oKXtyZXR1cm4gY29udGVudC50aGVuKGJvdW5kSGFuZGxlcixib3VuZEhhbmRsZXIpO30pO319LHtrZXk6J2ZpcmVSZW5kZXJDYWxsYmFjaycsdmFsdWU6ZnVuY3Rpb24gZmlyZVJlbmRlckNhbGxiYWNrKCl7aWYodGhpcy5zdGF0ZS5jb21wb25lbnQpe3RoaXMucHJvcHMuY2hpbGRyZW5EaWRSZW5kZXIoKTt9fX0se2tleTonY29tcG9uZW50V2lsbE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKXt0aGlzLmhhbmRsZUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pO319LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMubW91bnRlZD10cnVlO319LHtrZXk6J2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXt0aGlzLmhhbmRsZUNoaWxkcmVuKG5leHRQcm9wcy5jaGlsZHJlbik7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5tb3VudGVkPWZhbHNlO319LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIHByb3BzPXRoaXMucHJvcHMsc3RhdGU9dGhpcy5zdGF0ZTtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNsb25lRWxlbWVudChzdGF0ZS5jb21wb25lbnR8fHByb3BzLnBlbmRpbmdDb250ZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShwcm9wcyxBc3luYy5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItYXN5bmMnLHByb3BzLmNsYXNzTmFtZSxzdGF0ZS5jb21wb25lbnQ9PT1udWxsJiZnZXQocHJvcHMsJ3BlbmRpbmdDb250ZW50LnByb3BzLmNsYXNzTmFtZScpLHN0YXRlLmNvbXBvbmVudCYmZ2V0KHN0YXRlLCdjb21wb25lbnQucHJvcHMuY2xhc3NOYW1lJywnJykseydiLWFzeW5jLXBlbmRpbmcnOnN0YXRlLmNvbXBvbmVudD09PW51bGx9KX0pKTt9fV0pO3JldHVybiBBc3luYzt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtBc3luYy5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksY2hpbGRyZW46X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm5vZGUsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uaW5zdGFuY2VPZihQcm9taXNlKV0pLmlzUmVxdWlyZWQsY2hpbGRyZW5EaWRSZW5kZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxwZW5kaW5nQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ub2RlfTtBc3luYy5kZWZhdWx0UHJvcHM9e2NoaWxkcmVuOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdkaXYnLG51bGwpLGNoaWxkcmVuRGlkUmVuZGVyOmZ1bmN0aW9uIGNoaWxkcmVuRGlkUmVuZGVyKCl7fSxwZW5kaW5nQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxudWxsKX07QXN5bmMuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKEFzeW5jLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IEFzeW5jO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1idXR0b24vaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBCdXR0b249ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhCdXR0b24sX1JlYWN0JFB1cmVDb21wb25lbnQpO2Z1bmN0aW9uIEJ1dHRvbigpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLEJ1dHRvbik7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1CdXR0b24uX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnByb3BzLmRpc2FibGVkKXtyZXR1cm47fV90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO190aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKGV2ZW50KTt9LF90aGlzLmhhbmRsZUtleURvd249ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnByb3BzLmRpc2FibGVkKXtyZXR1cm47fV90aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7c3dpdGNoKGV2ZW50LmtleSl7Y2FzZSdFbnRlcic6Y2FzZSdTcGFjZSc6ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayhldmVudCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoQnV0dG9uLFt7a2V5OidmaXJlU3RhdGVmdWxDYWxsYmFjaycsdmFsdWU6ZnVuY3Rpb24gZmlyZVN0YXRlZnVsQ2FsbGJhY2soZXZlbnQpe3RoaXMucHJvcHNbdGhpcy5wcm9wcy5wcmVzc2VkPydvblVucHJlc3NlZCc6J29uUHJlc3NlZCddKGV2ZW50KTt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmNvbXBvbmVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcyxCdXR0b24uaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWJ1dHRvbicsdGhpcy5wcm9wcy5jbGFzc05hbWUseydiLWJ1dHRvbi1wcmVzc2FibGUnOnRoaXMucHJvcHMucHJlc3NlZCE9PXVuZGVmaW5lZCwnYi1idXR0b24tcHJlc3NlZCc6dGhpcy5wcm9wcy5wcmVzc2VkfSksJ2FyaWEtcHJlc3NlZCc6dGhpcy5wcm9wcy5wcmVzc2VkLHJvbGU6J2J1dHRvbicsb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bixvbkNsaWNrOnRoaXMuaGFuZGxlQ2xpY2t9KSx0aGlzLnByb3BzLmNoaWxkcmVuKTt9fV0pO3JldHVybiBCdXR0b247fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHVyZUNvbXBvbmVudCk7QnV0dG9uLnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuY10pLG9uUHJlc3NlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLG9uVW5wcmVzc2VkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMscHJlc3NlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sfTtCdXR0b24uZGVmYXVsdFByb3BzPXtjb21wb25lbnQ6J2J1dHRvbicsb25DbGljazpmdW5jdGlvbiBvbkNsaWNrKCl7fSxvbktleURvd246ZnVuY3Rpb24gb25LZXlEb3duKCl7fSxvblByZXNzZWQ6ZnVuY3Rpb24gb25QcmVzc2VkKCl7fSxvblVucHJlc3NlZDpmdW5jdGlvbiBvblVucHJlc3NlZCgpe30scHJlc3NlZDp1bmRlZmluZWR9O0J1dHRvbi5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoQnV0dG9uLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IEJ1dHRvbjtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gtZ3JvdXAvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19jaGVja2JveF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94L2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBub29wPWZ1bmN0aW9uIG5vb3AoKXt9O3ZhciBDaGVja2JveEdyb3VwPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoQ2hlY2tib3hHcm91cCxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gQ2hlY2tib3hHcm91cCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLENoZWNrYm94R3JvdXApO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9Q2hlY2tib3hHcm91cC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihDaGVja2JveEdyb3VwKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuc2VsZWN0QWxsVVVJRD1fX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoQ2hlY2tib3hHcm91cCxbe2tleTonYWxsSXRlbXNDaGVja2VkJyx2YWx1ZTpmdW5jdGlvbiBhbGxJdGVtc0NoZWNrZWQoKXtyZXR1cm4gdGhpcy5wcm9wcy5pdGVtcy5ldmVyeShmdW5jdGlvbihpdGVtKXtyZXR1cm4gaXRlbS5pbnB1dFByb3BzLmNoZWNrZWQ9PT10cnVlO30pO319LHtrZXk6J2FueUl0ZW1zQ2hlY2tlZCcsdmFsdWU6ZnVuY3Rpb24gYW55SXRlbXNDaGVja2VkKCl7cmV0dXJuIHRoaXMucHJvcHMuaXRlbXMuc29tZShmdW5jdGlvbihpdGVtKXtyZXR1cm4gaXRlbS5pbnB1dFByb3BzLmNoZWNrZWQ9PT10cnVlO30pO319LHtrZXk6J3JlbmRlclNlbGVjdEFsbENoZWNrYm94Jyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJTZWxlY3RBbGxDaGVja2JveCgpe3ZhciBhbGxDaGVja2VkPXRoaXMuYWxsSXRlbXNDaGVja2VkKCk7dmFyIGlucHV0UHJvcHM9dGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wcy5pbnB1dFByb3BzO3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2NoZWNrYm94X19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30sdGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wcyx7a2V5OnRoaXMuc2VsZWN0QWxsVVVJRCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItY2hlY2tib3gtZ3JvdXAtYWxsJyx0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzLmNsYXNzTmFtZSksaW5wdXRQcm9wczpfZXh0ZW5kcyh7fSxpbnB1dFByb3BzLHtjaGVja2VkOmFsbENoZWNrZWQsaW5kZXRlcm1pbmF0ZTohYWxsQ2hlY2tlZCYmdGhpcy5hbnlJdGVtc0NoZWNrZWQoKSxuYW1lOmlucHV0UHJvcHMmJmlucHV0UHJvcHMubmFtZT9pbnB1dFByb3BzLm5hbWU6bnVsbH0pLGxhYmVsOnRoaXMucHJvcHMuc2VsZWN0QWxsUHJvcHMubGFiZWx8fCdTZWxlY3QgQWxsJyxvbkNoZWNrZWQ6dGhpcy5wcm9wcy5vbkFsbENoZWNrZWQsb25VbmNoZWNrZWQ6dGhpcy5wcm9wcy5vbkFsbFVuY2hlY2tlZH0pKTt9fSx7a2V5OidyZW5kZXJDaGVja2JveGVzJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDaGVja2JveGVzKCl7dmFyIF90aGlzMj10aGlzO3JldHVybiB0aGlzLnByb3BzLml0ZW1zLm1hcChmdW5jdGlvbihpdGVtKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19jaGVja2JveF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLF9leHRlbmRzKHt9LGl0ZW0se2tleTppdGVtLmlucHV0UHJvcHMubmFtZSxvbkNoZWNrZWQ6X3RoaXMyLnByb3BzLm9uQ2hpbGRDaGVja2VkLG9uVW5jaGVja2VkOl90aGlzMi5wcm9wcy5vbkNoaWxkVW5jaGVja2VkfSkpO30pO319LHtrZXk6J3JlbmRlckNoaWxkcmVuJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDaGlsZHJlbigpe3ZhciBjaGlsZHJlbj1bdGhpcy5yZW5kZXJDaGVja2JveGVzKCldO3N3aXRjaCh0aGlzLnByb3BzLnNlbGVjdEFsbCl7Y2FzZSBDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5CRUZPUkU6Y2hpbGRyZW4udW5zaGlmdCh0aGlzLnJlbmRlclNlbGVjdEFsbENoZWNrYm94KCkpO2JyZWFrO2Nhc2UgQ2hlY2tib3hHcm91cC5zZWxlY3RBbGwuQUZURVI6Y2hpbGRyZW4ucHVzaCh0aGlzLnJlbmRlclNlbGVjdEFsbENoZWNrYm94KCkpO2JyZWFrO31yZXR1cm4gY2hpbGRyZW47fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsQ2hlY2tib3hHcm91cC5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItY2hlY2tib3gtZ3JvdXAnLHRoaXMucHJvcHMuY2xhc3NOYW1lKX0pLHRoaXMucmVuZGVyQ2hpbGRyZW4oKSk7fX1dKTtyZXR1cm4gQ2hlY2tib3hHcm91cDt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtDaGVja2JveEdyb3VwLnNlbGVjdEFsbD17QkVGT1JFOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxBRlRFUjpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksTk9ORTpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCl9O0NoZWNrYm94R3JvdXAucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55LGNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcsaXRlbXM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYXJyYXlPZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2NoZWNrYm94X19bXCJhXCIgLyogZGVmYXVsdCAqL10ucHJvcFR5cGVzLmlucHV0UHJvcHMpLmlzUmVxdWlyZWQsb25BbGxDaGVja2VkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMsb25BbGxVbmNoZWNrZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxvbkNoaWxkQ2hlY2tlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLG9uQ2hpbGRVbmNoZWNrZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxzZWxlY3RBbGw6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2YoW0NoZWNrYm94R3JvdXAuc2VsZWN0QWxsLkJFRk9SRSxDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5BRlRFUixDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5OT05FXSksc2VsZWN0QWxsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksbGFiZWw6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLGlucHV0UHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub2JqZWN0fSl9O0NoZWNrYm94R3JvdXAuZGVmYXVsdFByb3BzPXtjb21wb25lbnQ6J2RpdicsaXRlbXM6W10sb25BbGxDaGVja2VkOm5vb3Asb25BbGxVbmNoZWNrZWQ6bm9vcCxvbkNoaWxkQ2hlY2tlZDpub29wLG9uQ2hpbGRVbmNoZWNrZWQ6bm9vcCxzZWxlY3RBbGw6Q2hlY2tib3hHcm91cC5zZWxlY3RBbGwuQkVGT1JFLHNlbGVjdEFsbFByb3BzOnt9fTtDaGVja2JveEdyb3VwLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhDaGVja2JveEdyb3VwLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IENoZWNrYm94R3JvdXA7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94L2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfdXVpZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBpc0Z1bmN0aW9uPWZ1bmN0aW9uIGlzRnVuY3Rpb24oeCl7cmV0dXJuIHR5cGVvZiB4PT09J2Z1bmN0aW9uJzt9O3ZhciBub29wPWZ1bmN0aW9uIG5vb3AoKXt9O3ZhciBDaGVja2JveD1mdW5jdGlvbihfUmVhY3QkUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKENoZWNrYm94LF9SZWFjdCRQdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBDaGVja2JveCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLENoZWNrYm94KTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPUNoZWNrYm94Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKENoZWNrYm94KSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuaWQ9X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLF90aGlzLmhhbmRsZUNoYW5nZT1mdW5jdGlvbihldmVudCl7aWYoX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5kaXNhYmxlZCl7cmV0dXJuO31fdGhpcy5wcm9wc1shX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5jaGVja2VkPydvbkNoZWNrZWQnOidvblVuY2hlY2tlZCddKF90aGlzLnByb3BzLmlucHV0UHJvcHMubmFtZSk7aWYoaXNGdW5jdGlvbihfdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKSl7X3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZShldmVudCk7fX0sX3RoaXMuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnByb3BzLmlucHV0UHJvcHMuZGlzYWJsZWQpe3JldHVybjt9X3RoaXMucmVmcy5pbnB1dC5mb2N1cygpO2lmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKSl7X3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKGV2ZW50KTt9fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhDaGVja2JveCxbe2tleTonY29tcG9uZW50RGlkTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7aWYodGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUpe3RoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO319fSx7a2V5Oidjb21wb25lbnREaWRVcGRhdGUnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpe2lmKHByZXZQcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUhPT10aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSl7dGhpcy5zZXRJbmRldGVybWluYXRlKCk7fX19LHtrZXk6J3NldEluZGV0ZXJtaW5hdGUnLHZhbHVlOmZ1bmN0aW9uIHNldEluZGV0ZXJtaW5hdGUoKXt0aGlzLnJlZnMuaW5wdXQuaW5kZXRlcm1pbmF0ZT0hIXRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlO319LHtrZXk6J2dldEFyaWFTdGF0ZScsdmFsdWU6ZnVuY3Rpb24gZ2V0QXJpYVN0YXRlKCl7cmV0dXJuIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlPydtaXhlZCc6U3RyaW5nKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jaGVja2VkKTt9fSx7a2V5OidyZW5kZXJJbnB1dCcsdmFsdWU6ZnVuY3Rpb24gcmVuZGVySW5wdXQoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcy5pbnB1dFByb3BzLCdpbmRldGVybWluYXRlJykse3JlZjonaW5wdXQnLHR5cGU6J2NoZWNrYm94JyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItY2hlY2tib3gnLHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUseydiLWNoZWNrYm94LW1peGVkJzp0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSwnYi1jaGVja2JveC1jaGVja2VkJzp0aGlzLnByb3BzLmlucHV0UHJvcHMuY2hlY2tlZCwnYi1jaGVja2JveC11bmNoZWNrZWQnOiF0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSYmIXRoaXMucHJvcHMuaW5wdXRQcm9wcy5jaGVja2VkfSksaWQ6dGhpcy5wcm9wcy5pbnB1dFByb3BzLmlkfHx0aGlzLmlkLCdhcmlhLWNoZWNrZWQnOnRoaXMuZ2V0QXJpYVN0YXRlKCksb25DaGFuZ2U6dGhpcy5oYW5kbGVDaGFuZ2Usb25DbGljazp0aGlzLmhhbmRsZUNsaWNrfSkpO319LHtrZXk6J3JlbmRlckxhYmVsJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJMYWJlbCgpe2lmKHRoaXMucHJvcHMubGFiZWwpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnbGFiZWwnLF9leHRlbmRzKHt9LHRoaXMucHJvcHMubGFiZWxQcm9wcyx7cmVmOidsYWJlbCcsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWNoZWNrYm94LWxhYmVsJyx0aGlzLnByb3BzLmxhYmVsUHJvcHMuY2xhc3NOYW1lKSxodG1sRm9yOnRoaXMucHJvcHMuaW5wdXRQcm9wcy5pZHx8dGhpcy5pZH0pLHRoaXMucHJvcHMubGFiZWwpO319fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmNvbXBvbmVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcyxDaGVja2JveC5pbnRlcm5hbEtleXMpLHtyZWY6J3dyYXBwZXInLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1jaGVja2JveC13cmFwcGVyJyx0aGlzLnByb3BzLmNsYXNzTmFtZSl9KSx0aGlzLnJlbmRlcklucHV0KCksdGhpcy5yZW5kZXJMYWJlbCgpKTt9fV0pO3JldHVybiBDaGVja2JveDt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtDaGVja2JveC5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyxpbnB1dFByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55LGNoZWNrZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLGRpc2FibGVkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsaWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLGluZGV0ZXJtaW5hdGU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCxvbkNoYW5nZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLG9uQ2xpY2s6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxuYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyx2YWx1ZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmd9KSxsYWJlbDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ub2RlLGxhYmVsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxvbkNoZWNrZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxvblVuY2hlY2tlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jfTtDaGVja2JveC5kZWZhdWx0UHJvcHM9e2NvbXBvbmVudDonZGl2JyxpbnB1dFByb3BzOntjaGVja2VkOmZhbHNlLGluZGV0ZXJtaW5hdGU6ZmFsc2V9LGxhYmVsOm51bGwsbGFiZWxQcm9wczp7fSxvbkNoZWNrZWQ6bm9vcCxvblVuY2hlY2tlZDpub29wfTtDaGVja2JveC5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoQ2hlY2tib3guZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gQ2hlY2tib3g7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3BvcnRhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGlzRnVuY3Rpb249ZnVuY3Rpb24gaXNGdW5jdGlvbih4KXtyZXR1cm4gdHlwZW9mIHg9PT0nZnVuY3Rpb24nO307dmFyIG5vb3A9ZnVuY3Rpb24gbm9vcCgpe307dmFyIHRvQXJyYXk9QXJyYXkucHJvdG90eXBlLnNsaWNlO3ZhciBEaWFsb2c9ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhEaWFsb2csX1JlYWN0JFB1cmVDb21wb25lbnQpO2Z1bmN0aW9uIERpYWxvZygpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLERpYWxvZyk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1EaWFsb2cuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlhbG9nKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMubW91bnRlZD1mYWxzZSxfdGhpcy5oYW5kbGVGb2N1cz1mdW5jdGlvbihuYXRpdmVFdmVudCl7aWYoIV90aGlzLnByb3BzLmNhcHR1cmVGb2N1cyl7aWYoX3RoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUZvY3VzJyxuYXRpdmVFdmVudCkmJiFfdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKXtyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoX3RoaXMucHJvcHMub25DbG9zZSwwKTt9cmV0dXJuO312YXIgcHJldmlvdXM9bmF0aXZlRXZlbnQuZXhwbGljaXRPcmlnaW5hbFRhcmdldHx8bmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldDtpZihfdGhpcy5pc1BhcnRPZkRpYWxvZyhwcmV2aW91cykmJiFfdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKXtuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO3ByZXZpb3VzLmZvY3VzKCk7fX0sX3RoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihldmVudCl7aWYoZXZlbnQua2V5PT09J0VzY2FwZScpe2lmKF90aGlzLnNob3VsZERpYWxvZ0Nsb3NlT25FdmVudCgnY2xvc2VPbkVzY0tleScsZXZlbnQpKXt3aW5kb3cuc2V0VGltZW91dChfdGhpcy5wcm9wcy5vbkNsb3NlLDApO319aWYoX3RoaXMucHJvcHMub25LZXlEb3duKXtfdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO319LF90aGlzLmhhbmRsZUluc2lkZUNsaWNrPWZ1bmN0aW9uKGV2ZW50KXtpZihfdGhpcy5zaG91bGREaWFsb2dDbG9zZU9uRXZlbnQoJ2Nsb3NlT25JbnNpZGVDbGljaycsZXZlbnQpKXt3aW5kb3cuc2V0VGltZW91dChfdGhpcy5wcm9wcy5vbkNsb3NlLDApO319LF90aGlzLmhhbmRsZU91dHNpZGVDbGljaz1mdW5jdGlvbihuYXRpdmVFdmVudCl7aWYoX3RoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUNsaWNrJyxuYXRpdmVFdmVudCkmJiFfdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKXt3aW5kb3cuc2V0VGltZW91dChfdGhpcy5wcm9wcy5vbkNsb3NlLDApO319LF90aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbD1mdW5jdGlvbihuYXRpdmVFdmVudCl7aWYoX3RoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZVNjcm9sbCcsbmF0aXZlRXZlbnQpJiYhX3RoaXMuaXNQYXJ0T2ZEaWFsb2cobmF0aXZlRXZlbnQudGFyZ2V0KSl7d2luZG93LnNldFRpbWVvdXQoX3RoaXMucHJvcHMub25DbG9zZSwwKTt9fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhEaWFsb2csW3trZXk6J2lzUGFydE9mRGlhbG9nJyx2YWx1ZTpmdW5jdGlvbiBpc1BhcnRPZkRpYWxvZyhub2RlKXtpZighbm9kZXx8bm9kZT09PXdpbmRvdyl7cmV0dXJuIGZhbHNlO312YXIgcm9vdHM9W3RoaXMuJHdyYXBwZXJdLmNvbmNhdCh0b0FycmF5LmNhbGwodGhpcy4kd3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdbJytfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLlBPUlRBTF9EQVRBX0FUVFJJQlVURSsnXScpKS5tYXAoZnVuY3Rpb24oZG9tKXtyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZG9tLmdldEF0dHJpYnV0ZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLlBPUlRBTF9EQVRBX0FUVFJJQlVURSkpO30pKTt2YXIgZWxlbWVudD1ub2RlLm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREU/bm9kZS5wYXJlbnROb2RlOm5vZGU7cmV0dXJuIHJvb3RzLnNvbWUoZnVuY3Rpb24oZG9tKXtyZXR1cm4gZG9tLmNvbnRhaW5zKGVsZW1lbnQpO30pO319LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssdHJ1ZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jyx0aGlzLmhhbmRsZU91dHNpZGVDbGljayx0cnVlKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLHRoaXMuaGFuZGxlRm9jdXMsdHJ1ZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsdHJ1ZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJyx0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCx0cnVlKTtpZih0aGlzLnByb3BzLmNhcHR1cmVGb2N1cyYmIXRoaXMuaXNQYXJ0T2ZEaWFsb2coZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpe3RoaXMuJGRpYWxvZy5mb2N1cygpO319fSx7a2V5Oidjb21wb25lbnRXaWxsVW5tb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLHRydWUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssdHJ1ZSk7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJyx0aGlzLmhhbmRsZUZvY3VzLHRydWUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLHRoaXMuaGFuZGxlT3V0c2lkZVNjcm9sbFdoZWVsLHRydWUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsdHJ1ZSk7fX0se2tleTonc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50Jyx2YWx1ZTpmdW5jdGlvbiBzaG91bGREaWFsb2dDbG9zZU9uRXZlbnQocHJvcCxldmVudCl7cmV0dXJuIGlzRnVuY3Rpb24odGhpcy5wcm9wc1twcm9wXSk/dGhpcy5wcm9wc1twcm9wXShldmVudCk6dGhpcy5wcm9wc1twcm9wXTt9fSx7a2V5OidyZW5kZXJGb2N1c0JvdW5kYXJ5Jyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJGb2N1c0JvdW5kYXJ5KCl7aWYodGhpcy5wcm9wcy5jYXB0dXJlRm9jdXMpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2Jyx7Y2xhc3NOYW1lOidiLW9mZnNjcmVlbicsdGFiSW5kZXg6JzAnLCdhcmlhLWhpZGRlbic6J3RydWUnfSwnXFx4QTAnKTt9fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3RoaXMyPXRoaXM7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuY29tcG9uZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLERpYWxvZy5pbnRlcm5hbEtleXMpLHtyZWY6ZnVuY3Rpb24gcmVmKG5vZGUpe3JldHVybiBfdGhpczIuJHdyYXBwZXI9bm9kZTt9LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1kaWFsb2ctd3JhcHBlcicsdGhpcy5wcm9wcy5jbGFzc05hbWUpfSksdGhpcy5yZW5kZXJGb2N1c0JvdW5kYXJ5KCksdGhpcy5wcm9wcy5iZWZvcmUsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5kaWFsb2dDb21wb25lbnQsX2V4dGVuZHMoe30sdGhpcy5kaWFsb2dQcm9wcyx7cmVmOmZ1bmN0aW9uIHJlZihub2RlKXtyZXR1cm4gX3RoaXMyLiRkaWFsb2c9bm9kZTt9LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1kaWFsb2cnLHRoaXMucHJvcHMuZGlhbG9nUHJvcHMuY2xhc3NOYW1lKSxvbkNsaWNrOnRoaXMuaGFuZGxlSW5zaWRlQ2xpY2ssb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bixyb2xlOidkaWFsb2cnLHRhYkluZGV4OicwJ30pLHRoaXMucHJvcHMuY2hpbGRyZW4pLHRoaXMucHJvcHMuYWZ0ZXIsdGhpcy5yZW5kZXJGb2N1c0JvdW5kYXJ5KCkpO319XSk7cmV0dXJuIERpYWxvZzt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtEaWFsb2cucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55LGFmdGVyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm5vZGUsYmVmb3JlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm5vZGUsY2FwdHVyZUZvY3VzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsY2xvc2VPbkVzY0tleTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuY10pLGNsb3NlT25JbnNpZGVDbGljazpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuY10pLGNsb3NlT25PdXRzaWRlQ2xpY2s6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmNdKSxjbG9zZU9uT3V0c2lkZUZvY3VzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jXSksY2xvc2VPbk91dHNpZGVTY3JvbGw6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmNdKSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLGRpYWxvZ0NvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcsZGlhbG9nUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxvbkNsb3NlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmN9O0RpYWxvZy5kZWZhdWx0UHJvcHM9e2FmdGVyOm51bGwsYmVmb3JlOm51bGwsY2FwdHVyZUZvY3VzOnRydWUsY2hpbGRyZW46bnVsbCxjbG9zZU9uRXNjS2V5OmZhbHNlLGNsb3NlT25JbnNpZGVDbGljazpmYWxzZSxjbG9zZU9uT3V0c2lkZUNsaWNrOmZhbHNlLGNsb3NlT25PdXRzaWRlRm9jdXM6ZmFsc2UsY2xvc2VPbk91dHNpZGVTY3JvbGw6ZmFsc2UsY29tcG9uZW50OidkaXYnLGRpYWxvZ0NvbXBvbmVudDonZGl2JyxkaWFsb2dQcm9wczp7fSxvbkNsb3NlOm5vb3Asb25LZXlEb3duOm5vb3B9O0RpYWxvZy5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoRGlhbG9nLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IERpYWxvZztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtZml0dGVkLXRleHQvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgaW5zdGFuY2VzPVtdO2Z1bmN0aW9uIHRvSShzdHJpbmdOdW1iZXIpe3JldHVybiBwYXJzZUludChzdHJpbmdOdW1iZXIsMTApO31mdW5jdGlvbiByZXNjYWxlKGluc3RhbmNlKXt2YXIgbm9kZT1fX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fW1wiZmluZERPTU5vZGVcIl0pKGluc3RhbmNlKTt2YXIgY29udGFpbmVyQm94PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUucGFyZW50Tm9kZSk7dmFyIGZvbnRTaXplPXRvSSh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5mb250U2l6ZSk7aWYoaW5zdGFuY2UuYmFzZUZvbnRTaXplPT09bnVsbCl7aW5zdGFuY2UuYmFzZUZvbnRTaXplPWZvbnRTaXplO312YXIgY29udGFpbmVySGVpZ2h0PXRvSShjb250YWluZXJCb3guaGVpZ2h0KTt2YXIgY29udGFpbmVyV2lkdGg9dG9JKGNvbnRhaW5lckJveC53aWR0aCk7aWYoY29udGFpbmVyQm94LmJveFNpemluZz09PSdib3JkZXItYm94J3x8Y29udGFpbmVyQm94LmJveFNpemluZz09PSdwYWRkaW5nLWJveCcpe2NvbnRhaW5lckhlaWdodC09dG9JKGNvbnRhaW5lckJveC5wYWRkaW5nVG9wKSt0b0koY29udGFpbmVyQm94LnBhZGRpbmdCb3R0b20pO2NvbnRhaW5lcldpZHRoLT10b0koY29udGFpbmVyQm94LnBhZGRpbmdMZWZ0KSt0b0koY29udGFpbmVyQm94LnBhZGRpbmdSaWdodCk7fXZhciBvcHRpbWl6ZUZvckhlaWdodD1NYXRoLmZsb29yKGZvbnRTaXplL25vZGUub2Zmc2V0SGVpZ2h0KmNvbnRhaW5lckhlaWdodCk7dmFyIG9wdGltaXplRm9yV2lkdGg9TWF0aC5mbG9vcihmb250U2l6ZS9ub2RlLm9mZnNldFdpZHRoKmNvbnRhaW5lcldpZHRoKTtpZihpbnN0YW5jZS5wcm9wcy51cHNjYWxlKXtub2RlLnN0eWxlLmZvbnRTaXplPShNYXRoLm1heChvcHRpbWl6ZUZvckhlaWdodCxvcHRpbWl6ZUZvcldpZHRoKXx8MSkrJ3B4Jzt9ZWxzZXtub2RlLnN0eWxlLmZvbnRTaXplPShNYXRoLm1pbihpbnN0YW5jZS5iYXNlRm9udFNpemUsb3B0aW1pemVGb3JIZWlnaHQsb3B0aW1pemVGb3JXaWR0aCl8fDEpKydweCc7fX1mdW5jdGlvbiBoYW5kbGVXaW5kb3dSZXNpemUoKXtpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnN0YW5jZSl7cmV0dXJuIHJlc2NhbGUoaW5zdGFuY2UpO30pO31mdW5jdGlvbiByZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlKXtpZihpbnN0YW5jZXMubGVuZ3RoPT09MCl7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsaGFuZGxlV2luZG93UmVzaXplLHRydWUpO31pbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7fWZ1bmN0aW9uIHVucmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZSl7aW5zdGFuY2VzLnNwbGljZShpbnN0YW5jZXMuaW5kZXhPZihpbnN0YW5jZSksMSk7aWYoaW5zdGFuY2VzLmxlbmd0aD09PTApe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLGhhbmRsZVdpbmRvd1Jlc2l6ZSx0cnVlKTt9fXZhciBGaXR0ZWRUZXh0PWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoRml0dGVkVGV4dCxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gRml0dGVkVGV4dCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLEZpdHRlZFRleHQpO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9Rml0dGVkVGV4dC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihGaXR0ZWRUZXh0KSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuYmFzZUZvbnRTaXplPW51bGwsX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoRml0dGVkVGV4dCxbe2tleTonY29tcG9uZW50RGlkTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7cmVzY2FsZSh0aGlzKTtyZWdpc3Rlckluc3RhbmNlKHRoaXMpO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCl7cmVzY2FsZSh0aGlzKTt9fSx7a2V5Oidjb21wb25lbnRXaWxsVW5tb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXt1bnJlZ2lzdGVySW5zdGFuY2UodGhpcyk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsRml0dGVkVGV4dC5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItdGV4dCcsdGhpcy5wcm9wcy5jbGFzc05hbWUpfSksdGhpcy5wcm9wcy5jaGlsZHJlbik7fX1dKTtyZXR1cm4gRml0dGVkVGV4dDt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtGaXR0ZWRUZXh0LnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLHVwc2NhbGU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbH07Rml0dGVkVGV4dC5kZWZhdWx0UHJvcHM9e2NvbXBvbmVudDonc3BhbicsdXBzY2FsZTpmYWxzZX07Rml0dGVkVGV4dC5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoRml0dGVkVGV4dC5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBGaXR0ZWRUZXh0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1pbWFnZS9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgSW1hZ2U9ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhJbWFnZSxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gSW1hZ2UoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxJbWFnZSk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1JbWFnZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihJbWFnZSkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLnN0YXRlPXtzdGF0dXM6SW1hZ2Uuc3RhdHVzLkxPQURJTkd9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKEltYWdlLFt7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7aWYobmV4dFByb3BzLnNyYyE9PXRoaXMucHJvcHMuc3JjKXt0aGlzLnJlc2V0UHJlbG9hZGVyKCk7dGhpcy5zZXRTdGF0ZSh7c3RhdHVzOkltYWdlLnN0YXR1cy5MT0FESU5HfSk7fX19LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMucHJlbG9hZCgpO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCl7dGhpcy5wcmVsb2FkKCk7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5yZXNldFByZWxvYWRlcigpO319LHtrZXk6J3Jlc2V0UHJlbG9hZGVyJyx2YWx1ZTpmdW5jdGlvbiByZXNldFByZWxvYWRlcigpe3RoaXMubG9hZGVyLm9ubG9hZD1udWxsO3RoaXMubG9hZGVyLm9uZXJyb3I9bnVsbDt0aGlzLmxvYWRlcj1udWxsO319LHtrZXk6J3ByZWxvYWQnLHZhbHVlOmZ1bmN0aW9uIHByZWxvYWQoKXt2YXIgX3RoaXMyPXRoaXM7aWYodGhpcy5sb2FkZXIpe3JldHVybjt9dGhpcy5sb2FkZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7dGhpcy5sb2FkZXIub25sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzMi5zZXRTdGF0ZSh7c3RhdHVzOkltYWdlLnN0YXR1cy5MT0FERUR9KTt9O3RoaXMubG9hZGVyLm9uZXJyb3I9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMyLnNldFN0YXRlKHtzdGF0dXM6SW1hZ2Uuc3RhdHVzLkVSUk9SfSk7fTt0aGlzLmxvYWRlci5zcmM9dGhpcy5wcm9wcy5zcmM7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsSW1hZ2UuaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWltYWdlJyx0aGlzLnByb3BzLmNsYXNzTmFtZSx7J2ItaW1hZ2UtbG9hZGluZyc6dGhpcy5zdGF0ZS5zdGF0dXM9PT1JbWFnZS5zdGF0dXMuTE9BRElORywnYi1pbWFnZS1sb2FkZWQnOnRoaXMuc3RhdGUuc3RhdHVzPT09SW1hZ2Uuc3RhdHVzLkxPQURFRCwnYi1pbWFnZS1lcnJvcic6dGhpcy5zdGF0ZS5zdGF0dXM9PT1JbWFnZS5zdGF0dXMuRVJST1J9KSx0aXRsZTp0aGlzLnByb3BzLmFsdCxyb2xlOidpbWcnLHN0eWxlOl9leHRlbmRzKHt9LHRoaXMucHJvcHMuc3R5bGUse2JhY2tncm91bmRJbWFnZTondXJsKCcrdGhpcy5wcm9wcy5zcmMrJyknfSl9KSwnXFx4QTAnKTt9fV0pO3JldHVybiBJbWFnZTt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtJbWFnZS5zdGF0dXM9e0xPQURJTkc6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLExPQURFRDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksRVJST1I6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpfTtJbWFnZS5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksYWx0Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLHNyYzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcuaXNSZXF1aXJlZH07SW1hZ2UuZGVmYXVsdFByb3BzPXthbHQ6JycsY29tcG9uZW50OidkaXYnLHNyYzonYWJvdXQ6YmxhbmsnfTtJbWFnZS5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoSW1hZ2UuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gSW1hZ2U7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLWlucHV0L2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgaXNGdW5jdGlvbj1mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpe3JldHVybiB0eXBlb2YgeD09PSdmdW5jdGlvbic7fTt2YXIgSW5wdXQ9ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhJbnB1dCxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gSW5wdXQoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxJbnB1dCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1JbnB1dC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihJbnB1dCkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLnN0YXRlPXtpbnB1dDonJyxpc0NvbnRyb2xsZWQ6dHlwZW9mIF90aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWU9PT0nc3RyaW5nJyxpc0ZvY3VzZWQ6ZmFsc2V9LF90aGlzLnNldElucHV0VmFsdWU9ZnVuY3Rpb24oKXt2YXIgdmFsdWU9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOicnO3JldHVybiBfdGhpcy5zZXRTdGF0ZSh7aW5wdXQ6dmFsdWV9KTt9LF90aGlzLmdldFZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnJlZnMuZmllbGQudmFsdWU7fSxfdGhpcy5oYW5kbGVCbHVyPWZ1bmN0aW9uKGV2ZW50KXtfdGhpcy5zZXRTdGF0ZSh7aXNGb2N1c2VkOmZhbHNlfSk7aWYoaXNGdW5jdGlvbihfdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQmx1cik9PT10cnVlKXtfdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQmx1cihldmVudCk7fX0sX3RoaXMuaGFuZGxlRm9jdXM9ZnVuY3Rpb24oZXZlbnQpe190aGlzLnNldFN0YXRlKHtpc0ZvY3VzZWQ6dHJ1ZX0pO2lmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKT09PXRydWUpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cyhldmVudCk7fX0sX3RoaXMuaGFuZGxlQ2hhbmdlPWZ1bmN0aW9uKGV2ZW50KXtpZihfdGhpcy5zdGF0ZS5pc0NvbnRyb2xsZWQ9PT1mYWxzZSl7X3RoaXMuc2V0SW5wdXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO31pZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpPT09dHJ1ZSl7X3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZShldmVudCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoSW5wdXQsW3trZXk6J2NvbXBvbmVudFdpbGxNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCl7aWYodGhpcy5zdGF0ZS5pc0NvbnRyb2xsZWQ9PT10cnVlKXtyZXR1cm4gdGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSk7fXRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlKTt9fSx7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7aWYobmV4dFByb3BzLmlucHV0UHJvcHMudmFsdWUhPT10aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpe3RoaXMuc2V0SW5wdXRWYWx1ZShuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSk7fX19LHtrZXk6J3NldFZhbHVlJyx2YWx1ZTpmdW5jdGlvbiBzZXRWYWx1ZShuZXh0VmFsdWUpe3RoaXMuc2V0SW5wdXRWYWx1ZShuZXh0VmFsdWUpO3RoaXMucmVmcy5maWVsZC52YWx1ZT1uZXh0VmFsdWU7aWYodGhpcy5zdGF0ZS5pc0NvbnRyb2xsZWQ9PT10cnVlKXt0aGlzLnJlZnMuZmllbGQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0Jyx7YnViYmxlczp0cnVlfSkpO3RoaXMucmVmcy5maWVsZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJyx7YnViYmxlczp0cnVlfSkpO319fSx7a2V5OidnZXRQbGFjZWhvbGRlclRleHQnLHZhbHVlOmZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyVGV4dCgpe3ZhciBpc05vbkVtcHR5PXRoaXMuc3RhdGUuaW5wdXQhPT0nJzt2YXIgc2hvdWxkU2hvd1BsYWNlaG9sZGVyPXRoaXMucHJvcHMuaGlkZVBsYWNlaG9sZGVyT25Gb2N1cz09PXRydWU/dGhpcy5zdGF0ZS5pc0ZvY3VzZWQ9PT1mYWxzZSYmaXNOb25FbXB0eT09PWZhbHNlOmlzTm9uRW1wdHk9PT1mYWxzZTtyZXR1cm4gc2hvdWxkU2hvd1BsYWNlaG9sZGVyP3RoaXMucHJvcHMuaW5wdXRQcm9wcy5wbGFjZWhvbGRlcjonJzt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmNvbXBvbmVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcyxJbnB1dC5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItaW5wdXQtd3JhcHBlcicsdGhpcy5wcm9wcy5jbGFzc05hbWUpLHRpdGxlOnRoaXMuZ2V0UGxhY2Vob2xkZXJUZXh0KCl9KSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnaW5wdXQnLF9leHRlbmRzKHt9LHRoaXMucHJvcHMuaW5wdXRQcm9wcyx7cmVmOidmaWVsZCcsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWlucHV0Jyx0aGlzLnByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lKSxwbGFjZWhvbGRlcjpudWxsLG9uQmx1cjp0aGlzLmhhbmRsZUJsdXIsb25Gb2N1czp0aGlzLmhhbmRsZUZvY3VzLG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlfSkpLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdkaXYnLHtjbGFzc05hbWU6J2ItaW5wdXQtcGxhY2Vob2xkZXIgYi1pbnB1dCd9LHRoaXMuZ2V0UGxhY2Vob2xkZXJUZXh0KCkpKTt9fV0pO3JldHVybiBJbnB1dDt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtJbnB1dC5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyxoaWRlUGxhY2Vob2xkZXJPbkZvY3VzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsaW5wdXRQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueSxkZWZhdWx0VmFsdWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLG9uQmx1cjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLG9uRm9jdXM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxvbkNoYW5nZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLHBsYWNlaG9sZGVyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyx0eXBlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyx2YWx1ZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmd9KX07SW5wdXQuZGVmYXVsdFByb3BzPXtjb21wb25lbnQ6J2RpdicsaGlkZVBsYWNlaG9sZGVyT25Gb2N1czp0cnVlLGlucHV0UHJvcHM6e3R5cGU6J3RleHQnfX07SW5wdXQuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKElucHV0LmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IElucHV0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2RpYWxvZ19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3BvcnRhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgTW9kYWw9ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhNb2RhbCxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gTW9kYWwoKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxNb2RhbCk7cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKE1vZGFsLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKE1vZGFsKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKTt9X2NyZWF0ZUNsYXNzKE1vZGFsLFt7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdGhpczI9dGhpczt2YXIgcHJvcHM9dGhpcy5wcm9wcztyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19wb3J0YWxfX1tcImFcIiAvKiBkZWZhdWx0ICovXSxwcm9wcy5wb3J0YWxQcm9wcyxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsTW9kYWwuaW50ZXJuYWxLZXlzKSx7cmVmOmZ1bmN0aW9uIHJlZihub2RlKXtyZXR1cm4gX3RoaXMyLiRtb2RhbD1ub2RlO30sY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLW1vZGFsLXdyYXBwZXInLHByb3BzLmNsYXNzTmFtZSl9KSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxfZXh0ZW5kcyh7fSxwcm9wcy5tYXNrUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1tb2RhbC1tYXNrJyxwcm9wcy5tYXNrUHJvcHMuY2xhc3NOYW1lKX0pKSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2RpYWxvZ19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5kZWZhdWx0UHJvcHMpLHByb3BzLm1vZGFsUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1tb2RhbCcscHJvcHMubW9kYWxQcm9wcy5jbGFzc05hbWUpfSkscHJvcHMuY2hpbGRyZW4pKSk7fX1dKTtyZXR1cm4gTW9kYWw7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHVyZUNvbXBvbmVudCk7TW9kYWwucHJvcFR5cGVzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfZGlhbG9nX19bXCJhXCIgLyogZGVmYXVsdCAqL10ucHJvcFR5cGVzLHttYXNrUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxtb2RhbFByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55fSkscG9ydGFsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19wb3J0YWxfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5wcm9wVHlwZXMpfSk7TW9kYWwuZGVmYXVsdFByb3BzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfZGlhbG9nX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzLHtjYXB0dXJlRm9jdXM6dHJ1ZSxtYXNrUHJvcHM6e30sbW9kYWxQcm9wczp7fSxwb3J0YWxQcm9wczp7fX0pO01vZGFsLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhNb2RhbC5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBNb2RhbDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2xvZGFzaF9pc2ludGVnZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNpbnRlZ2VyL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19sb2Rhc2hfaXNpbnRlZ2VyX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfbG9kYXNoX2lzaW50ZWdlcl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2FzeW5jX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXN5bmMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc19zZWdtZW50ZWRfY29udHJvbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXNlZ21lbnRlZC1jb250cm9sL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHZhbHVlKXtpZihrZXkgaW4gb2JqKXtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7dmFsdWU6dmFsdWUsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOnRydWV9KTt9ZWxzZXtvYmpba2V5XT12YWx1ZTt9cmV0dXJuIG9iajt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBpZGVudGl0eT1mdW5jdGlvbiBpZGVudGl0eSh4KXtyZXR1cm4geDt9O3ZhciBpc0Z1bmN0aW9uPWZ1bmN0aW9uIGlzRnVuY3Rpb24oeCl7cmV0dXJuIHR5cGVvZiB4PT09J2Z1bmN0aW9uJzt9O3ZhciBub29wPWZ1bmN0aW9uIG5vb3AoKXt9O3ZhciBQYWdpbmF0aW9uPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoUGFnaW5hdGlvbixfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gUGFnaW5hdGlvbigpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLFBhZ2luYXRpb24pO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9UGFnaW5hdGlvbi5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihQYWdpbmF0aW9uKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMubW91bnRlZD1mYWxzZSxfdGhpcy5zdGF0ZT17Y3VycmVudFBhZ2U6X3RoaXMucHJvcHMuaW5pdGlhbFBhZ2UsdGFyZ2V0SW5kZXg6KF90aGlzLnByb3BzLmluaXRpYWxQYWdlLTEpKl90aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZX0sX3RoaXMuY3VycmVudFBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMuc3RhdGUuY3VycmVudFBhZ2U7fSxfdGhpcy5nZXRQYWdlRm9ySW5kZXg9ZnVuY3Rpb24oaW5kZXgpe3ZhciBpdGVtc1BlclBhZ2U9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOl90aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZTtyZXR1cm4gTWF0aC5jZWlsKChpbmRleCsxKS9pdGVtc1BlclBhZ2UpO30sX3RoaXMudG90YWxQYWdlcz1mdW5jdGlvbigpe3JldHVybiBNYXRoLmNlaWwoX3RoaXMucHJvcHMudG90YWxJdGVtcy9fdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpO30sX3RoaXMuZmlyc3RWaXNpYmxlSXRlbUluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuKF90aGlzLmN1cnJlbnRQYWdlKCktMSkqX3RoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO30sX3RoaXMuanVtcFRvSW5kZXg9ZnVuY3Rpb24oaSl7aWYoaTwwfHxpPj1fdGhpcy5wcm9wcy50b3RhbEl0ZW1zKXt0aHJvdyBFcnJvcignQ2Fubm90IHBhZ2UgdG8gaW52YWxpZCBpbmRleCAnK2krJy4nKTt9X3RoaXMuc2V0U3RhdGUoe2N1cnJlbnRQYWdlOl90aGlzLmdldFBhZ2VGb3JJbmRleChpKSx0YXJnZXRJbmRleDppfSk7fSxfdGhpcy5oYW5kbGVQYWdlU2VsZWN0ZWQ9ZnVuY3Rpb24ob3B0aW9uKXt2YXIgbmV4dFRhcmdldEluZGV4PXZvaWQgMDtzd2l0Y2gob3B0aW9uW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV0pe2Nhc2UgdW5kZWZpbmVkOnJldHVybjtjYXNlIFBhZ2luYXRpb24uY29udHJvbC5GSVJTVDpuZXh0VGFyZ2V0SW5kZXg9MDticmVhaztjYXNlIFBhZ2luYXRpb24uY29udHJvbC5QUkVWSU9VUzpuZXh0VGFyZ2V0SW5kZXg9X3RoaXMuZmlyc3RWaXNpYmxlSXRlbUluZGV4KCktX3RoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO2JyZWFrO2Nhc2UgUGFnaW5hdGlvbi5jb250cm9sLk5FWFQ6bmV4dFRhcmdldEluZGV4PV90aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpK190aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZTticmVhaztjYXNlIFBhZ2luYXRpb24uY29udHJvbC5MQVNUOm5leHRUYXJnZXRJbmRleD1fdGhpcy5wcm9wcy50b3RhbEl0ZW1zLTE7YnJlYWs7ZGVmYXVsdDpuZXh0VGFyZ2V0SW5kZXg9cGFyc2VJbnQob3B0aW9uW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV0sMTApKl90aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZS0xO31fdGhpcy5zZXRTdGF0ZSh7Y3VycmVudFBhZ2U6X3RoaXMuZ2V0UGFnZUZvckluZGV4KG5leHRUYXJnZXRJbmRleCksdGFyZ2V0SW5kZXg6bmV4dFRhcmdldEluZGV4fSk7fSxfdGhpcy5oYW5kbGVJdGVtUHJvbWlzZUZ1bGZpbGxtZW50PWZ1bmN0aW9uKHBheWxvYWQpe2lmKF90aGlzLm1vdW50ZWQpe3JldHVybiBfdGhpcy5wcm9wcy5pdGVtVG9KU1hDb252ZXJ0ZXIocGF5bG9hZCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoUGFnaW5hdGlvbixbe2tleTonY29tcG9uZW50RGlkTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5tb3VudGVkPXRydWU7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5tb3VudGVkPWZhbHNlO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKF8scHJldlN0YXRlKXtpZihwcmV2U3RhdGUuY3VycmVudFBhZ2UhPT10aGlzLmN1cnJlbnRQYWdlKCkpe19fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX19bXCJmaW5kRE9NTm9kZVwiXSkodGhpcy5yZWZzLml0ZW1fMCkuZm9jdXMoKTt9fX0se2tleTonY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpe3ZhciBfdGhpczI9dGhpczt2YXIgb2xkUHJvcHM9dGhpcy5wcm9wczt0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKHN0YXRlLHByb3BzKXtpZihwcm9wcy5pZGVudGlmaWVyIT09b2xkUHJvcHMuaWRlbnRpZmllcil7cmV0dXJue2N1cnJlbnRQYWdlOjEsdGFyZ2V0SW5kZXg6MH07fXJldHVybntjdXJyZW50UGFnZTpfdGhpczIuZ2V0UGFnZUZvckluZGV4KHN0YXRlLnRhcmdldEluZGV4LHByb3BzLm51bUl0ZW1zUGVyUGFnZSksdGFyZ2V0SW5kZXg6c3RhdGUudGFyZ2V0SW5kZXh9O30pO319LHtrZXk6J2dlbmVyYXRlQ29udHJvbHMnLHZhbHVlOmZ1bmN0aW9uIGdlbmVyYXRlQ29udHJvbHMoKXt2YXIgb3B0aW9ucz1bXTt2YXIgY3VycmVudFBhZ2U9dGhpcy5jdXJyZW50UGFnZSgpO3ZhciB0b3RhbFBhZ2VzPXRoaXMudG90YWxQYWdlcygpO3ZhciBzdGFydFBhZ2U9Y3VycmVudFBhZ2UtKGN1cnJlbnRQYWdlLTEpJXRoaXMucHJvcHMubnVtUGFnZVRvZ2dsZXM7dmFyIGVuZFBhZ2U9TWF0aC5taW4oc3RhcnRQYWdlK3RoaXMucHJvcHMubnVtUGFnZVRvZ2dsZXMtMSx0b3RhbFBhZ2VzKTtpZih0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUpe29wdGlvbnMucHVzaCh7Y2hpbGRyZW46aXNGdW5jdGlvbih0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUpP3RoaXMucHJvcHMuc2hvd1BhZ2luYXRpb25TdGF0ZShjdXJyZW50UGFnZSx0b3RhbFBhZ2VzKTpjdXJyZW50UGFnZSsnIC8gJyt0b3RhbFBhZ2VzLGNsYXNzTmFtZTonYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtc3RhdGUnLGRpc2FibGVkOnRydWV9KTt9aWYodGhpcy5wcm9wcy5zaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbCl7dmFyIF9vcHRpb25zJHB1c2g7b3B0aW9ucy5wdXNoKChfb3B0aW9ucyRwdXNoPXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoLFBhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURSxQYWdpbmF0aW9uLmNvbnRyb2wuRklSU1QpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoLCdjaGlsZHJlbicsdGhpcy5wcm9wcy5qdW1wVG9GaXJzdFBhZ2VDb250cm9sQ29udGVudCksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gsJ2NsYXNzTmFtZScsJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLWZpcnN0JyksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gsJ2Rpc2FibGVkJyxjdXJyZW50UGFnZT09PTEpLF9vcHRpb25zJHB1c2gpKTt9aWYodGhpcy5wcm9wcy5zaG93SnVtcFRvUHJldmlvdXNQYWdlQ29udHJvbCl7dmFyIF9vcHRpb25zJHB1c2gyO29wdGlvbnMucHVzaCgoX29wdGlvbnMkcHVzaDI9e30sX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gyLFBhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURSxQYWdpbmF0aW9uLmNvbnRyb2wuUFJFVklPVVMpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMiwnY2hpbGRyZW4nLHRoaXMucHJvcHMuanVtcFRvUHJldmlvdXNQYWdlQ29udHJvbENvbnRlbnQpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMiwnY2xhc3NOYW1lJywnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtcHJldmlvdXMnKSxfZGVmaW5lUHJvcGVydHkoX29wdGlvbnMkcHVzaDIsJ2Rpc2FibGVkJyxjdXJyZW50UGFnZT09PTEpLF9vcHRpb25zJHB1c2gyKSk7fWZvcih2YXIgaT1zdGFydFBhZ2U7aTw9ZW5kUGFnZTtpKyspe3ZhciBfb3B0aW9ucyRwdXNoMztvcHRpb25zLnB1c2goKF9vcHRpb25zJHB1c2gzPXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMyxQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEUsaSksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gzLCdjaGlsZHJlbicsaSksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gzLCdjbGFzc05hbWUnLCdiLXBhZ2luYXRpb24tY29udHJvbCcpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMywncHJlc3NlZCcsY3VycmVudFBhZ2U9PT1pKSxfb3B0aW9ucyRwdXNoMykpO31pZih0aGlzLnByb3BzLnNob3dKdW1wVG9OZXh0UGFnZUNvbnRyb2wpe3ZhciBfb3B0aW9ucyRwdXNoNDtvcHRpb25zLnB1c2goKF9vcHRpb25zJHB1c2g0PXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNCxQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEUsUGFnaW5hdGlvbi5jb250cm9sLk5FWFQpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNCwnY2hpbGRyZW4nLHRoaXMucHJvcHMuanVtcFRvTmV4dFBhZ2VDb250cm9sQ29udGVudCksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g0LCdjbGFzc05hbWUnLCdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1uZXh0JyksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g0LCdkaXNhYmxlZCcsY3VycmVudFBhZ2U9PT10b3RhbFBhZ2VzKSxfb3B0aW9ucyRwdXNoNCkpO31pZih0aGlzLnByb3BzLnNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2wpe3ZhciBfb3B0aW9ucyRwdXNoNTtvcHRpb25zLnB1c2goKF9vcHRpb25zJHB1c2g1PXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNSxQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEUsUGFnaW5hdGlvbi5jb250cm9sLkxBU1QpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNSwnY2hpbGRyZW4nLHRoaXMucHJvcHMuanVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudCksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g1LCdjbGFzc05hbWUnLCdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1sYXN0JyksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g1LCdkaXNhYmxlZCcsY3VycmVudFBhZ2U9PT10b3RhbFBhZ2VzKSxfb3B0aW9ucyRwdXNoNSkpO31pZih0aGlzLnByb3BzLmN1c3RvbUNvbnRyb2xDb250ZW50KXtvcHRpb25zLnB1c2goe2NoaWxkcmVuOnRoaXMucHJvcHMuY3VzdG9tQ29udHJvbENvbnRlbnQsY2xhc3NOYW1lOidiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1jdXN0b20nLGRpc2FibGVkOnRydWV9KTt9cmV0dXJuIG9wdGlvbnM7fX0se2tleTonZ2VuZXJhdGVJdGVtcycsdmFsdWU6ZnVuY3Rpb24gZ2VuZXJhdGVJdGVtcygpe3ZhciBpdGVtcz1bXTt2YXIgZmlyc3RJbmRleD10aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpO3ZhciBsYXN0SW5kZXg9TWF0aC5taW4odGhpcy5wcm9wcy50b3RhbEl0ZW1zLGZpcnN0SW5kZXgrdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpLTE7Zm9yKHZhciBpPWZpcnN0SW5kZXg7aTw9bGFzdEluZGV4O2krPTEpe2l0ZW1zLnB1c2godGhpcy5wcm9wcy5nZXRJdGVtKGkpKTt9cmV0dXJuIGl0ZW1zO319LHtrZXk6J3JlbmRlckl0ZW1zJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJJdGVtcygpe3ZhciBfdGhpczM9dGhpczt2YXIgcHJvcHM9dGhpcy5wcm9wcy5pdGVtV3JhcHBlclByb3BzO3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30scHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wYWdpbmF0aW9uLWl0ZW1zJyxwcm9wcy5jbGFzc05hbWUpfSksdGhpcy5nZW5lcmF0ZUl0ZW1zKCkubWFwKGZ1bmN0aW9uKGl0ZW0saW5kZXgpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2FzeW5jX19bXCJhXCIgLyogZGVmYXVsdCAqL10se3JlZjppbmRleD09PTA/J2l0ZW1fMCc6bnVsbCxrZXk6aW5kZXgsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXBhZ2luYXRpb24taXRlbScseydiLXBhZ2luYXRpb24taXRlbS1ldmVuJzppbmRleCUyPT09MCwnYi1wYWdpbmF0aW9uLWl0ZW0tb2RkJzppbmRleCUyIT09MH0pLCdkYXRhLXBhZ2luYXRpb24taW5kZXgnOl90aGlzMy5wcm9wcy5udW1JdGVtc1BlclBhZ2UqKF90aGlzMy5jdXJyZW50UGFnZSgpLTEpK2luZGV4LHBlbmRpbmdDb250ZW50Ol90aGlzMy5wcm9wcy5pdGVtTG9hZGluZ0NvbnRlbnR9LGl0ZW0gaW5zdGFuY2VvZiBQcm9taXNlP2l0ZW0udGhlbihfdGhpczMuaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudCxfdGhpczMuaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudCk6X3RoaXMzLnByb3BzLml0ZW1Ub0pTWENvbnZlcnRlcihpdGVtKSk7fSkpO319LHtrZXk6J3JlbmRlckNvbnRyb2xzJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDb250cm9scyhwb3NpdGlvbil7dmFyIF9jeDtpZih0aGlzLnByb3BzLmhpZGVQYWdlcklmTm90TmVlZGVkJiZ0aGlzLnByb3BzLnRvdGFsSXRlbXM8PXRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlKXtyZXR1cm47fXJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3NlZ21lbnRlZF9jb250cm9sX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30sdGhpcy5wcm9wcy5jb250cm9sV3JhcHBlclByb3BzLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcGFnaW5hdGlvbi1jb250cm9scycsdGhpcy5wcm9wcy5jb250cm9sV3JhcHBlclByb3BzLmNsYXNzTmFtZSwoX2N4PXt9LF9kZWZpbmVQcm9wZXJ0eShfY3gsJ2ItcGFnaW5hdGlvbi1jb250cm9scy1hYm92ZScscG9zaXRpb249PT1QYWdpbmF0aW9uLnBvc2l0aW9uLkFCT1ZFKSxfZGVmaW5lUHJvcGVydHkoX2N4LCdiLXBhZ2luYXRpb24tY29udHJvbHMtYmVsb3cnLHBvc2l0aW9uPT09UGFnaW5hdGlvbi5wb3NpdGlvbi5CRUxPVyksX2N4KSksb3B0aW9uczp0aGlzLmdlbmVyYXRlQ29udHJvbHMoKSxvbk9wdGlvblNlbGVjdGVkOnRoaXMuaGFuZGxlUGFnZVNlbGVjdGVkfSkpO319LHtrZXk6J3JlbmRlclZpZXcnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlclZpZXcoKXt2YXIgcG9zaXRpb249dGhpcy5wcm9wcy5wb3NpdGlvbjt2YXIgcD1QYWdpbmF0aW9uLnBvc2l0aW9uO3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2Jyx7Y2xhc3NOYW1lOidiLXBhZ2luYXRpb24nfSxwb3NpdGlvbj09PXAuQUJPVkV8fHBvc2l0aW9uPT09cC5CT1RIP3RoaXMucmVuZGVyQ29udHJvbHMocC5BQk9WRSk6bnVsbCx0aGlzLnByb3BzLmJlZm9yZSx0aGlzLnJlbmRlckl0ZW1zKCksdGhpcy5wcm9wcy5hZnRlcixwb3NpdGlvbj09PXAuQkVMT1d8fHBvc2l0aW9uPT09cC5CT1RIP3RoaXMucmVuZGVyQ29udHJvbHMocC5CRUxPVyk6bnVsbCk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2RpdicsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUGFnaW5hdGlvbi5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcGFnaW5hdGlvbi13cmFwcGVyJyx0aGlzLnByb3BzLmNsYXNzTmFtZSl9KSx0aGlzLnJlbmRlclZpZXcoKSk7fX1dKTtyZXR1cm4gUGFnaW5hdGlvbjt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtQYWdpbmF0aW9uLmNvbnRyb2w9e0NVU1RPTTpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksRklSU1Q6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLExBU1Q6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLE5FWFQ6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLFBSRVZJT1VTOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKX07UGFnaW5hdGlvbi5wb3NpdGlvbj17QUJPVkU6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLEJFTE9XOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxCT1RIOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKX07UGFnaW5hdGlvbi5DT05UUk9MX0RBVEFfQVRUUklCVVRFPSdkYXRhLXBhZ2UtY29udHJvbCc7UGFnaW5hdGlvbi5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksYWZ0ZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSxiZWZvcmU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSxjb250cm9sV3JhcHBlclByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55fSksY3VzdG9tQ29udHJvbENvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSxnZXRJdGVtOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMuaXNSZXF1aXJlZCxoaWRlUGFnZXJJZk5vdE5lZWRlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLGlkZW50aWZpZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLmlzUmVxdWlyZWQsaW5pdGlhbFBhZ2U6ZnVuY3Rpb24gdmFsaWRhdGVJbml0aWFsUGFnZShwcm9wcyl7aWYoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2xvZGFzaF9pc2ludGVnZXJfX19kZWZhdWx0KCkocHJvcHMuaW5pdGlhbFBhZ2UpPT09ZmFsc2Upe3JldHVybiBuZXcgRXJyb3IoJ2Bpbml0aWFsUGFnZWAgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO312YXIgbnVtYmVyT2ZQYWdlcz1NYXRoLmNlaWwocHJvcHMudG90YWxJdGVtcy9wcm9wcy5udW1JdGVtc1BlclBhZ2UpO2lmKHByb3BzLmluaXRpYWxQYWdlPDF8fHByb3BzLmluaXRpYWxQYWdlPm51bWJlck9mUGFnZXMpe3JldHVybiBuZXcgRXJyb3IoJ2Bpbml0aWFsUGFnZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kICcrbnVtYmVyT2ZQYWdlcysnLicpO319LGl0ZW1Mb2FkaW5nQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ub2RlLGl0ZW1Ub0pTWENvbnZlcnRlcjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLGl0ZW1XcmFwcGVyUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxqdW1wVG9GaXJzdFBhZ2VDb250cm9sQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ub2RlLGp1bXBUb0xhc3RQYWdlQ29udHJvbENvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSxqdW1wVG9OZXh0UGFnZUNvbnRyb2xDb250ZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm5vZGUsanVtcFRvUHJldmlvdXNQYWdlQ29udHJvbENvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSxudW1JdGVtc1BlclBhZ2U6ZnVuY3Rpb24gdmFsaWRhdGVOdW1JdGVtc1BlclBhZ2UocHJvcHMpe2lmKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19sb2Rhc2hfaXNpbnRlZ2VyX19fZGVmYXVsdCgpKHByb3BzLm51bUl0ZW1zUGVyUGFnZSk9PT1mYWxzZSl7cmV0dXJuIG5ldyBFcnJvcignYG51bUl0ZW1zUGVyUGFnZWAgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO31lbHNlIGlmKHByb3BzLm51bUl0ZW1zUGVyUGFnZTwxKXtyZXR1cm4gbmV3IEVycm9yKCdgbnVtSXRlbXNQZXJQYWdlYCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLicpO319LG51bVBhZ2VUb2dnbGVzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm51bWJlcixwb3NpdGlvbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZihbUGFnaW5hdGlvbi5wb3NpdGlvbi5BQk9WRSxQYWdpbmF0aW9uLnBvc2l0aW9uLkJFTE9XLFBhZ2luYXRpb24ucG9zaXRpb24uQk9USF0pLHNob3dKdW1wVG9GaXJzdFBhZ2VDb250cm9sOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsc2hvd0p1bXBUb0xhc3RQYWdlQ29udHJvbDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLHNob3dKdW1wVG9OZXh0UGFnZUNvbnRyb2w6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCxzaG93SnVtcFRvUHJldmlvdXNQYWdlQ29udHJvbDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLHNob3dQYWdpbmF0aW9uU3RhdGU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmNdKSx0b3RhbEl0ZW1zOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm51bWJlci5pc1JlcXVpcmVkfTtQYWdpbmF0aW9uLmRlZmF1bHRQcm9wcz17YWZ0ZXI6bnVsbCxiZWZvcmU6bnVsbCxjb250cm9sV3JhcHBlclByb3BzOnt9LGN1c3RvbUNvbnRyb2xDb250ZW50Om51bGwsZ2V0SXRlbTpub29wLGhpZGVQYWdlcklmTm90TmVlZGVkOmZhbHNlLGlkZW50aWZpZXI6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLGluaXRpYWxQYWdlOjEsaXRlbUxvYWRpbmdDb250ZW50OnVuZGVmaW5lZCxpdGVtVG9KU1hDb252ZXJ0ZXI6aWRlbnRpdHksaXRlbVdyYXBwZXJQcm9wczp7fSxqdW1wVG9GaXJzdFBhZ2VDb250cm9sQ29udGVudDon4oekJyxqdW1wVG9MYXN0UGFnZUNvbnRyb2xDb250ZW50Oifih6UnLGp1bXBUb05leHRQYWdlQ29udHJvbENvbnRlbnQ6J+KGkicsanVtcFRvUHJldmlvdXNQYWdlQ29udHJvbENvbnRlbnQ6J+KGkCcsbnVtSXRlbXNQZXJQYWdlOjEwLG51bVBhZ2VUb2dnbGVzOjUscG9zaXRpb246UGFnaW5hdGlvbi5wb3NpdGlvbi5BQk9WRSxzaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbDp0cnVlLHNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2w6dHJ1ZSxzaG93SnVtcFRvTmV4dFBhZ2VDb250cm9sOnRydWUsc2hvd0p1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2w6dHJ1ZSxzaG93UGFnaW5hdGlvblN0YXRlOnRydWUsdG90YWxJdGVtczpudWxsfTtQYWdpbmF0aW9uLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhQYWdpbmF0aW9uLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFBhZ2luYXRpb247XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc2ludGVnZXIvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O3ZhciBJTkZJTklUWT0xLzAsTUFYX0lOVEVHRVI9MS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsTkFOPTAvMDt2YXIgc3ltYm9sVGFnPSdbb2JqZWN0IFN5bWJvbF0nO3ZhciByZVRyaW09L15cXHMrfFxccyskL2c7dmFyIHJlSXNCYWRIZXg9L15bLStdMHhbMC05YS1mXSskL2k7dmFyIHJlSXNCaW5hcnk9L14wYlswMV0rJC9pO3ZhciByZUlzT2N0YWw9L14wb1swLTddKyQvaTt2YXIgZnJlZVBhcnNlSW50PXBhcnNlSW50O3ZhciBvYmplY3RQcm90bz1PYmplY3QucHJvdG90eXBlO3ZhciBvYmplY3RUb1N0cmluZz1vYmplY3RQcm90by50b1N0cmluZztmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWU9PSdudW1iZXInJiZ2YWx1ZT09dG9JbnRlZ2VyKHZhbHVlKTt9ZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpe3ZhciB0eXBlPXR5cGVvZiB2YWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YodmFsdWUpO3JldHVybiEhdmFsdWUmJih0eXBlPT0nb2JqZWN0J3x8dHlwZT09J2Z1bmN0aW9uJyk7fWZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSl7cmV0dXJuISF2YWx1ZSYmKHR5cGVvZiB2YWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YodmFsdWUpKT09J29iamVjdCc7fWZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKXtyZXR1cm4odHlwZW9mIHZhbHVlPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZih2YWx1ZSkpPT0nc3ltYm9sJ3x8aXNPYmplY3RMaWtlKHZhbHVlKSYmb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk9PXN5bWJvbFRhZzt9ZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpe2lmKCF2YWx1ZSl7cmV0dXJuIHZhbHVlPT09MD92YWx1ZTowO312YWx1ZT10b051bWJlcih2YWx1ZSk7aWYodmFsdWU9PT1JTkZJTklUWXx8dmFsdWU9PT0tSU5GSU5JVFkpe3ZhciBzaWduPXZhbHVlPDA/LTE6MTtyZXR1cm4gc2lnbipNQVhfSU5URUdFUjt9cmV0dXJuIHZhbHVlPT09dmFsdWU/dmFsdWU6MDt9ZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKXt2YXIgcmVzdWx0PXRvRmluaXRlKHZhbHVlKSxyZW1haW5kZXI9cmVzdWx0JTE7cmV0dXJuIHJlc3VsdD09PXJlc3VsdD9yZW1haW5kZXI/cmVzdWx0LXJlbWFpbmRlcjpyZXN1bHQ6MDt9ZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpe2lmKHR5cGVvZiB2YWx1ZT09J251bWJlcicpe3JldHVybiB2YWx1ZTt9aWYoaXNTeW1ib2wodmFsdWUpKXtyZXR1cm4gTkFOO31pZihpc09iamVjdCh2YWx1ZSkpe3ZhciBvdGhlcj10eXBlb2YgdmFsdWUudmFsdWVPZj09J2Z1bmN0aW9uJz92YWx1ZS52YWx1ZU9mKCk6dmFsdWU7dmFsdWU9aXNPYmplY3Qob3RoZXIpP290aGVyKycnOm90aGVyO31pZih0eXBlb2YgdmFsdWUhPSdzdHJpbmcnKXtyZXR1cm4gdmFsdWU9PT0wP3ZhbHVlOit2YWx1ZTt9dmFsdWU9dmFsdWUucmVwbGFjZShyZVRyaW0sJycpO3ZhciBpc0JpbmFyeT1yZUlzQmluYXJ5LnRlc3QodmFsdWUpO3JldHVybiBpc0JpbmFyeXx8cmVJc09jdGFsLnRlc3QodmFsdWUpP2ZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSxpc0JpbmFyeT8yOjgpOnJlSXNCYWRIZXgudGVzdCh2YWx1ZSk/TkFOOit2YWx1ZTt9bW9kdWxlLmV4cG9ydHM9aXNJbnRlZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3BvdmVyL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2RpYWxvZ19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3BvcnRhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX3RyYW5zZm9ybV9wcm9wZXJ0eV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9ZnVuY3Rpb24gZ2V0T3Bwb3NpdGVDYXJkaW5hbChkaXJlY3Rpb24pe3N3aXRjaChkaXJlY3Rpb25bMF0pe2Nhc2UnTic6cmV0dXJuJ1MnO2Nhc2UnUyc6cmV0dXJuJ04nO2Nhc2UnRSc6cmV0dXJuJ1cnO31yZXR1cm4nRSc7fWZ1bmN0aW9uIHdpdGhvdXQoYXJyMSxhcnIyKXtyZXR1cm4gYXJyMS5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7cmV0dXJuIGFycjIuaW5kZXhPZihpdGVtKT09PS0xO30pO312YXIgQ0xBU1NfUkVNT1ZBTF9SRUdFWD0vXFxzP2ItcG9wb3Zlci0oYW5jaG9yfHNlbGYpLShzdGFydHxtaWRkbGV8ZW5kKS9nO3ZhciBERUZBVUxUX0NBUkVUX0NPTVBPTkVOVD1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnc3ZnJyx7dmlld0JveDonMCAwIDE0IDkuNScseG1sbnM6J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2cnLG51bGwsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ3BvbHlnb24nLHtjbGFzc05hbWU6J2ItcG9wb3Zlci1jYXJldC1ib3JkZXInLGZpbGw6JyMwMDAnLHBvaW50czonNyAwIDE0IDEwIDAgMTAnfSksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ3BvbHlnb24nLHtjbGFzc05hbWU6J2ItcG9wb3Zlci1jYXJldC1maWxsJyxmaWxsOicjRkZGJyxwb2ludHM6JzYuOTgyMzA0NDQgMS43NSAxMi43NSAxMCAxLjI1IDEwJ30pKSk7dmFyIFNUQVJUPTA7dmFyIE1JRERMRT0xO3ZhciBFTkQ9Mjt2YXIgY29tYmluYXRpb25zPVt7bmFtZTonTk5XJyxheDpTVEFSVCxheTpTVEFSVCxkeDpTVEFSVCxkeTpFTkR9LHtuYW1lOidOJyxheDpNSURETEUsYXk6U1RBUlQsZHg6TUlERExFLGR5OkVORH0se25hbWU6J05ORScsYXg6RU5ELGF5OlNUQVJULGR4OkVORCxkeTpFTkR9LHtuYW1lOidFTkUnLGF4OkVORCxheTpTVEFSVCxkeDpTVEFSVCxkeTpTVEFSVH0se25hbWU6J0UnLGF4OkVORCxheTpNSURETEUsZHg6U1RBUlQsZHk6TUlERExFfSx7bmFtZTonRVNFJyxheDpFTkQsYXk6RU5ELGR4OlNUQVJULGR5OkVORH0se25hbWU6J1NTRScsYXg6RU5ELGF5OkVORCxkeDpFTkQsZHk6U1RBUlR9LHtuYW1lOidTJyxheDpNSURETEUsYXk6RU5ELGR4Ok1JRERMRSxkeTpTVEFSVH0se25hbWU6J1NTVycsYXg6U1RBUlQsYXk6RU5ELGR4OlNUQVJULGR5OlNUQVJUfSx7bmFtZTonV1NXJyxheDpTVEFSVCxheTpFTkQsZHg6RU5ELGR5OkVORH0se25hbWU6J1cnLGF4OlNUQVJULGF5Ok1JRERMRSxkeDpFTkQsZHk6TUlERExFfSx7bmFtZTonV05XJyxheDpTVEFSVCxheTpTVEFSVCxkeDpFTkQsZHk6U1RBUlR9XTt2YXIgUG9wb3Zlcj1mdW5jdGlvbihfUmVhY3QkUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKFBvcG92ZXIsX1JlYWN0JFB1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFBvcG92ZXIoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxQb3BvdmVyKTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPVBvcG92ZXIuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9wb3ZlcikpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLmFsaWduPWZ1bmN0aW9uKCl7dmFyIGFuY2hvcj1fdGhpcy5wcm9wcy5hbmNob3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD9fdGhpcy5wcm9wcy5hbmNob3I6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fX1tcImZpbmRET01Ob2RlXCJdKShfdGhpcy5wcm9wcy5hbmNob3IpO3ZhciBjYXJldEFuY2hvcj1fdGhpcy5wcm9wcy5jYXJldEFuY2hvcj9fdGhpcy5wcm9wcy5jYXJldEFuY2hvciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50P190aGlzLnByb3BzLmNhcmV0QW5jaG9yOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX19bXCJmaW5kRE9NTm9kZVwiXSkoX3RoaXMucHJvcHMuY2FyZXRBbmNob3IpOmFuY2hvcjtfdGhpcy5jYWNoZVZpZXdwb3J0Q2FydG9ncmFwaHkoYW5jaG9yLGNhcmV0QW5jaG9yKTt2YXIgcHJlc2V0PV90aGlzLmdldFZhbGlkQWxpZ25tZW50UHJlc2V0KCk7dmFyIGZyYWc9UG9wb3Zlci5nZXRBbGlnbm1lbnRDbGFzc0ZyYWdtZW50O190aGlzLmRpYWxvZy4kd3JhcHBlci5jbGFzc05hbWU9X3RoaXMuZGlhbG9nLiR3cmFwcGVyLmNsYXNzTmFtZS5yZXBsYWNlKENMQVNTX1JFTU9WQUxfUkVHRVgsJycpKygnIGItcG9wb3Zlci1hbmNob3IteC0nK2ZyYWcocHJlc2V0LmF4KSkrKCcgYi1wb3BvdmVyLWFuY2hvci15LScrZnJhZyhwcmVzZXQuYXkpKSsoJyBiLXBvcG92ZXItc2VsZi14LScrZnJhZyhwcmVzZXQuZHgpKSsoJyBiLXBvcG92ZXItc2VsZi15LScrZnJhZyhwcmVzZXQuZHkpKTt2YXIgZHg9TWF0aC5yb3VuZChfdGhpcy5nZXROZXh0RGlhbG9nWFBvc2l0aW9uKHByZXNldCkpO3ZhciBkeT1NYXRoLnJvdW5kKF90aGlzLmdldE5leHREaWFsb2dZUG9zaXRpb24ocHJlc2V0KSk7X3RoaXMuZGlhbG9nLiR3cmFwcGVyLnN0eWxlW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdHJhbnNmb3JtX3Byb3BlcnR5X19bXCJhXCIgLyogZGVmYXVsdCAqL11dPSd0cmFuc2xhdGUoJytkeCsncHgsICcrZHkrJ3B4KSc7dmFyIGNhcmRpbmFsPXByZXNldC5uYW1lWzBdO3ZhciBsb25naXR1ZGluYWw9Y2FyZGluYWw9PT0nTid8fGNhcmRpbmFsPT09J1MnO190aGlzLiRjYXJldC5zdHlsZVtsb25naXR1ZGluYWw/J2xlZnQnOid0b3AnXT1NYXRoLnJvdW5kKF90aGlzLmdldE5leHRDYXJldFhQb3NpdGlvbihwcmVzZXQpKSsncHgnO190aGlzLiRjYXJldC5zdHlsZVtsb25naXR1ZGluYWw/J3RvcCc6J2xlZnQnXT0nMHB4Jzt9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFBvcG92ZXIsW3trZXk6J2NhY2hlVmlld3BvcnRDYXJ0b2dyYXBoeScsdmFsdWU6ZnVuY3Rpb24gY2FjaGVWaWV3cG9ydENhcnRvZ3JhcGh5KGFuY2hvcixjYXJldEFuY2hvcil7dmFyIGJvZHlSZWN0PWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5hbmNob3JSZWN0PWFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLmNhcmV0QW5jaG9yUmVjdD1jYXJldEFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLmJvZHlMZWZ0PWJvZHlSZWN0LmxlZnQqLTE7dGhpcy5ib2R5VG9wPWJvZHlSZWN0LnRvcCotMTt9fSx7a2V5OidnZXROZXh0Q2FyZXRYUG9zaXRpb24nLHZhbHVlOmZ1bmN0aW9uIGdldE5leHRDYXJldFhQb3NpdGlvbihfcmVmMil7dmFyIG5hbWU9X3JlZjIubmFtZSxheD1fcmVmMi5heCxkeD1fcmVmMi5keCxheT1fcmVmMi5heSxkeT1fcmVmMi5keTt2YXIgY2FyZXQ9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOnRoaXMuJGNhcmV0O3ZhciBuZXh0WD0wO2lmKG5hbWVbMF09PT0nTid8fG5hbWVbMF09PT0nUycpe25leHRYPXRoaXMuY2FyZXRBbmNob3JSZWN0LmxlZnQtdGhpcy5hbmNob3JSZWN0LmxlZnQrdGhpcy5jYXJldEFuY2hvclJlY3Qud2lkdGgvMjtpZihkeD09PU1JRERMRSl7bmV4dFgrPSh0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aC10aGlzLmFuY2hvclJlY3Qud2lkdGgpLzI7fWVsc2UgaWYoZHg9PT1FTkQpe25leHRYKz10aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aC10aGlzLmFuY2hvclJlY3Qud2lkdGg7fX1lbHNle25leHRYPXRoaXMuY2FyZXRBbmNob3JSZWN0LnRvcC10aGlzLmFuY2hvclJlY3QudG9wK3RoaXMuY2FyZXRBbmNob3JSZWN0LmhlaWdodC8yO2lmKGR5PT09TUlERExFKXtuZXh0WCs9KHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudEhlaWdodC10aGlzLmFuY2hvclJlY3QuaGVpZ2h0KS8yO31lbHNlIGlmKGR5PT09RU5EKXtuZXh0WCs9dGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0LXRoaXMuYW5jaG9yUmVjdC5oZWlnaHQ7fX1uZXh0WC09Y2FyZXQuY2xpZW50V2lkdGgvMjtyZXR1cm4gbmV4dFg7fX0se2tleTonZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbicsdmFsdWU6ZnVuY3Rpb24gZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbihfcmVmMyl7dmFyIGF4PV9yZWYzLmF4LGR4PV9yZWYzLmR4O3ZhciBkaWFsb2c9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOnRoaXMuZGlhbG9nLiR3cmFwcGVyO3ZhciBuZXh0WD10aGlzLmFuY2hvclJlY3QubGVmdCt0aGlzLmJvZHlMZWZ0O3N3aXRjaChheCl7Y2FzZSBNSURETEU6bmV4dFgrPXRoaXMuYW5jaG9yUmVjdC53aWR0aC8yO2JyZWFrO2Nhc2UgRU5EOm5leHRYKz10aGlzLmFuY2hvclJlY3Qud2lkdGg7YnJlYWs7fXN3aXRjaChkeCl7Y2FzZSBNSURETEU6bmV4dFgtPWRpYWxvZy5jbGllbnRXaWR0aC8yO2JyZWFrO2Nhc2UgRU5EOm5leHRYLT1kaWFsb2cuY2xpZW50V2lkdGg7YnJlYWs7fXJldHVybiBuZXh0WDt9fSx7a2V5OidnZXROZXh0RGlhbG9nWVBvc2l0aW9uJyx2YWx1ZTpmdW5jdGlvbiBnZXROZXh0RGlhbG9nWVBvc2l0aW9uKF9yZWY0KXt2YXIgYXk9X3JlZjQuYXksZHk9X3JlZjQuZHk7dmFyIGRpYWxvZz1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06dGhpcy5kaWFsb2cuJHdyYXBwZXI7dmFyIG5leHRZPXRoaXMuYW5jaG9yUmVjdC50b3ArdGhpcy5ib2R5VG9wO3N3aXRjaChheSl7Y2FzZSBNSURETEU6bmV4dFkrPXRoaXMuYW5jaG9yUmVjdC5oZWlnaHQvMjticmVhaztjYXNlIEVORDpuZXh0WSs9dGhpcy5hbmNob3JSZWN0LmhlaWdodDticmVhazt9c3dpdGNoKGR5KXtjYXNlIE1JRERMRTpuZXh0WS09ZGlhbG9nLmNsaWVudEhlaWdodC8yO2JyZWFrO2Nhc2UgRU5EOm5leHRZLT1kaWFsb2cuY2xpZW50SGVpZ2h0O2JyZWFrO31yZXR1cm4gbmV4dFk7fX0se2tleTonaXNQb3NpdGlvblZhbGlkJyx2YWx1ZTpmdW5jdGlvbiBpc1Bvc2l0aW9uVmFsaWQoX3JlZjUscEhlaWdodCxwV2lkdGgpe3ZhciBuYW1lPV9yZWY1Lm5hbWUsYXg9X3JlZjUuYXgsYXk9X3JlZjUuYXksZHg9X3JlZjUuZHgsZHk9X3JlZjUuZHk7dmFyIGNhcmRpbmFsPW5hbWVbMF07aWYoY2FyZGluYWw9PT0nTid8fGNhcmRpbmFsPT09J1MnKXtpZihjYXJkaW5hbD09PSdOJyYmdGhpcy5hbmNob3JSZWN0LnRvcC1wSGVpZ2h0PDApe3JldHVybiBmYWxzZTt9ZWxzZSBpZihjYXJkaW5hbD09PSdTJyYmdGhpcy5hbmNob3JSZWN0LmJvdHRvbStwSGVpZ2h0PndpbmRvdy5pbm5lckhlaWdodCl7cmV0dXJuIGZhbHNlO31pZihheD09PVNUQVJUKXtyZXR1cm4hKHRoaXMuYW5jaG9yUmVjdC5sZWZ0K3BXaWR0aD53aW5kb3cuaW5uZXJXaWR0aHx8dGhpcy5hbmNob3JSZWN0LmxlZnQ8MCk7fWVsc2UgaWYoYXg9PT1NSURETEUpe3JldHVybiEodGhpcy5hbmNob3JSZWN0LmxlZnQtcFdpZHRoLzI8MHx8dGhpcy5hbmNob3JSZWN0LmxlZnQrcFdpZHRoLzI+d2luZG93LmlubmVyV2lkdGgpO31yZXR1cm4hKHRoaXMuYW5jaG9yUmVjdC5sZWZ0LXBXaWR0aDwwfHx0aGlzLmFuY2hvclJlY3QucmlnaHQ+d2luZG93LmlubmVyV2lkdGgpO31lbHNlIGlmKGNhcmRpbmFsPT09J1cnfHxjYXJkaW5hbD09PSdFJyl7aWYoY2FyZGluYWw9PT0nVycmJnRoaXMuYW5jaG9yUmVjdC5sZWZ0LXBXaWR0aDwwKXtyZXR1cm4gZmFsc2U7fWVsc2UgaWYoY2FyZGluYWw9PT0nRScmJnRoaXMuYW5jaG9yUmVjdC5yaWdodCtwV2lkdGg+d2luZG93LmlubmVyV2lkdGgpe3JldHVybiBmYWxzZTt9aWYoYXk9PT1TVEFSVCl7cmV0dXJuISh0aGlzLmFuY2hvclJlY3QudG9wK3BIZWlnaHQ+d2luZG93LmlubmVySGVpZ2h0fHx0aGlzLmFuY2hvclJlY3QudG9wPDApO31lbHNlIGlmKGF5PT09TUlERExFKXtyZXR1cm4hKHRoaXMuYW5jaG9yUmVjdC50b3ArdGhpcy5hbmNob3JSZWN0LmhlaWdodC8yLXBIZWlnaHQvMjwwfHx0aGlzLmFuY2hvclJlY3QudG9wK3RoaXMuYW5jaG9yUmVjdC5oZWlnaHQvMitwSGVpZ2h0LzI+d2luZG93LmlubmVySGVpZ2h0KTt9cmV0dXJuISh0aGlzLmFuY2hvclJlY3QudG9wLXBIZWlnaHQ8MHx8dGhpcy5hbmNob3JSZWN0LmJvdHRvbT53aW5kb3cuaW5uZXJIZWlnaHQpO31yZXR1cm4gdHJ1ZTt9fSx7a2V5OidnZXRWYWxpZEFsaWdubWVudFByZXNldCcsdmFsdWU6ZnVuY3Rpb24gZ2V0VmFsaWRBbGlnbm1lbnRQcmVzZXQoKXt2YXIgX3RoaXMyPXRoaXM7dmFyIHdpZHRoPXRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudFdpZHRoO3ZhciBoZWlnaHQ9dGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0O3ZhciB2YWxpZENvbWJvcz1jb21iaW5hdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKGNvbmZpZyl7cmV0dXJuIF90aGlzMi5pc1Bvc2l0aW9uVmFsaWQoY29uZmlnLGhlaWdodCx3aWR0aCk7fSk7aWYodmFsaWRDb21ib3MuaW5kZXhPZih0aGlzLnByb3BzLnByZXNldCkhPT0tMXx8IXRoaXMucHJvcHMuYXV0b1JlcG9zaXRpb258fCF2YWxpZENvbWJvcy5sZW5ndGgpe3JldHVybiB0aGlzLnByb3BzLnByZXNldDt9dmFyIGJlc3RDb21ib3M9dmFsaWRDb21ib3MuZmlsdGVyKGZ1bmN0aW9uKF9yZWY2KXt2YXIgbmFtZT1fcmVmNi5uYW1lO3JldHVybiBuYW1lWzBdPT09X3RoaXMyLnByb3BzLnByZXNldC5uYW1lWzBdO30pO2lmKGJlc3RDb21ib3MubGVuZ3RoKXtyZXR1cm4gYmVzdENvbWJvc1swXTt9dmFyIG9wcG9zaXRlQ2FyZGluYWw9Z2V0T3Bwb3NpdGVDYXJkaW5hbCh0aGlzLnByb3BzLnByZXNldC5uYW1lKTt2YXIgb2theUNvbWJvcz12YWxpZENvbWJvcy5maWx0ZXIoZnVuY3Rpb24oX3JlZjcpe3ZhciBuYW1lPV9yZWY3Lm5hbWU7cmV0dXJuIG5hbWVbMF09PT1vcHBvc2l0ZUNhcmRpbmFsO30pO2lmKG9rYXlDb21ib3MubGVuZ3RoKXtyZXR1cm4gb2theUNvbWJvc1swXTt9cmV0dXJuIHZhbGlkQ29tYm9zWzBdO319LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMuYWxpZ24oKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJyx0aGlzLmFsaWduLHRydWUpO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCl7dGhpcy5hbGlnbigpO319LHtrZXk6J2NvbXBvbmVudFdpbGxVbm1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLHRoaXMuYWxpZ24sdHJ1ZSk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3RoaXMzPXRoaXM7dmFyIHByb3BzPXRoaXMucHJvcHM7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfcG9ydGFsX19bXCJhXCIgLyogZGVmYXVsdCAqL10scHJvcHMucG9ydGFsUHJvcHMsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXSxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsUG9wb3Zlci5pbnRlcm5hbEtleXMpLHtyZWY6ZnVuY3Rpb24gcmVmKGluc3RhbmNlKXtyZXR1cm4gX3RoaXMzLmRpYWxvZz1pbnN0YW5jZTt9LGJlZm9yZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY2xvbmVFbGVtZW50KHByb3BzLmNhcmV0Q29tcG9uZW50LHtyZWY6ZnVuY3Rpb24gcmVmKG5vZGUpe3JldHVybiBfdGhpczMuJGNhcmV0PW5vZGU7fSxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcG9wb3Zlci1jYXJldCcscHJvcHMuY2FyZXRDb21wb25lbnQucHJvcHMuY2xhc3NOYW1lKX0pLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wb3BvdmVyJyxwcm9wcy5jbGFzc05hbWUpfSkpKTt9fV0sW3trZXk6J2dldEFsaWdubWVudENsYXNzRnJhZ21lbnQnLHZhbHVlOmZ1bmN0aW9uIGdldEFsaWdubWVudENsYXNzRnJhZ21lbnQoY29uc3RhbnQpe3N3aXRjaChjb25zdGFudCl7Y2FzZSBTVEFSVDpyZXR1cm4nc3RhcnQnO2Nhc2UgTUlERExFOnJldHVybidtaWRkbGUnO2Nhc2UgRU5EOnJldHVybidlbmQnO319fV0pO3JldHVybiBQb3BvdmVyO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLlB1cmVDb21wb25lbnQpO1BvcG92ZXIucHJlc2V0PWNvbWJpbmF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24obWFwLGRlZil7cmV0dXJuIG1hcFtkZWYubmFtZV09ZGVmLG1hcDt9LHt9KTtQb3BvdmVyLnByb3BUeXBlcz1fZXh0ZW5kcyh7fSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2RpYWxvZ19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnByb3BUeXBlcyx7YW5jaG9yOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uaW5zdGFuY2VPZihIVE1MRWxlbWVudCksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoe3Byb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9iamVjdH0pXSkuaXNSZXF1aXJlZCxhdXRvUmVwb3NpdGlvbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLGNhcmV0QW5jaG9yOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uaW5zdGFuY2VPZihIVE1MRWxlbWVudCksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoe3Byb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9iamVjdH0pXSksY2FyZXRDb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZWxlbWVudCxwb3J0YWxQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLlByb3BUeXBlcykscHJlc2V0Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mKFtQb3BvdmVyLnByZXNldC5OTlcsUG9wb3Zlci5wcmVzZXQuTixQb3BvdmVyLnByZXNldC5OTkUsUG9wb3Zlci5wcmVzZXQuRU5FLFBvcG92ZXIucHJlc2V0LkUsUG9wb3Zlci5wcmVzZXQuRVNFLFBvcG92ZXIucHJlc2V0LlNTRSxQb3BvdmVyLnByZXNldC5TLFBvcG92ZXIucHJlc2V0LlNTVyxQb3BvdmVyLnByZXNldC5XU1csUG9wb3Zlci5wcmVzZXQuVyxQb3BvdmVyLnByZXNldC5XTlddKX0pO1BvcG92ZXIuZGVmYXVsdFByb3BzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfZGlhbG9nX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzLHthbmNob3I6dW5kZWZpbmVkLGF1dG9SZXBvc2l0aW9uOnRydWUsY2FwdHVyZUZvY3VzOmZhbHNlLGNhcmV0QW5jaG9yOnVuZGVmaW5lZCxjYXJldENvbXBvbmVudDpERUZBVUxUX0NBUkVUX0NPTVBPTkVOVCxjbG9zZU9uRXNjS2V5OnRydWUsY2xvc2VPbk91dHNpZGVDbGljazp0cnVlLGNsb3NlT25PdXRzaWRlU2Nyb2xsOnRydWUscG9ydGFsUHJvcHM6e30scHJlc2V0OlBvcG92ZXIucHJlc2V0LlN9KTtQb3BvdmVyLmludGVybmFsS2V5cz13aXRob3V0KE9iamVjdC5rZXlzKFBvcG92ZXIuZGVmYXVsdFByb3BzKSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2RpYWxvZ19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmludGVybmFsS2V5cyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFBvcG92ZXI7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X2RvbV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfdXVpZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe2lmKGtleSBpbiBvYmope09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsd3JpdGFibGU6dHJ1ZX0pO31lbHNle29ialtrZXldPXZhbHVlO31yZXR1cm4gb2JqO31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIFBvcnRhbD1mdW5jdGlvbihfUmVhY3QkQ29tcG9uZW50KXtfaW5oZXJpdHMoUG9ydGFsLF9SZWFjdCRDb21wb25lbnQpO2Z1bmN0aW9uIFBvcnRhbCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLFBvcnRhbCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1Qb3J0YWwuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9ydGFsKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuaWQ9X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLF90aGlzLiRwb3J0YWw9bnVsbCxfdGhpcy4kcGFzc2VuZ2VyPW51bGwsX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoUG9ydGFsLFt7a2V5Oidjb21wb25lbnRXaWxsTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe3RoaXMuJHBvcnRhbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTt0aGlzLnByb3BzLmRlc3RpbmF0aW9uLmFwcGVuZENoaWxkKHRoaXMuJHBvcnRhbCk7dGhpcy5yZW5kZXJQb3J0YWxsZWRDb250ZW50KCk7fX0se2tleToncmVuZGVyUG9ydGFsbGVkQ29udGVudCcsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyUG9ydGFsbGVkQ29udGVudCgpe3ZhciBjaGlsZD1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuaXNWYWxpZEVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbik/dGhpcy5wcm9wcy5jaGlsZHJlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxudWxsLHRoaXMucHJvcHMuY2hpbGRyZW4pO3RoaXMuJHBvcnRhbC5pZD10aGlzLnByb3BzLnBvcnRhbElkfHx0aGlzLmlkO19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9kb21fX19kZWZhdWx0LmEudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIodGhpcyxjaGlsZCx0aGlzLiRwb3J0YWwpO3RoaXMuJHBhc3Nlbmdlcj10aGlzLiRwb3J0YWwuY2hpbGRyZW5bMF07fX0se2tleTonY29tcG9uZW50RGlkVXBkYXRlJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKXt0aGlzLnJlbmRlclBvcnRhbGxlZENvbnRlbnQoKTt9fSx7a2V5Oidjb21wb25lbnRXaWxsVW5tb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfZG9tX19fZGVmYXVsdC5hLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy4kcG9ydGFsKTt0aGlzLnByb3BzLmRlc3RpbmF0aW9uLnJlbW92ZUNoaWxkKHRoaXMuJHBvcnRhbCk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLFBvcnRhbC5pbnRlcm5hbEtleXMpLF9kZWZpbmVQcm9wZXJ0eSh7fSxQb3J0YWwuUE9SVEFMX0RBVEFfQVRUUklCVVRFLHRoaXMucHJvcHMucG9ydGFsSWR8fHRoaXMuaWQpKSk7fX1dKTtyZXR1cm4gUG9ydGFsO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLkNvbXBvbmVudCk7UG9ydGFsLnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueSxjaGlsZHJlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHJvcFR5cGVzLm5vZGUsZGVzdGluYXRpb246X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uaW5zdGFuY2VPZihIVE1MRWxlbWVudCkscG9ydGFsSWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nfTtQb3J0YWwuZGVmYXVsdFByb3BzPXtjaGlsZHJlbjpudWxsLGRlc3RpbmF0aW9uOmRvY3VtZW50LmJvZHkscG9ydGFsSWQ6bnVsbH07UG9ydGFsLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhQb3J0YWwuZGVmYXVsdFByb3BzKTtQb3J0YWwuUE9SVEFMX0RBVEFfQVRUUklCVVRFPSdkYXRhLXBvcnRhbC1pZCc7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFBvcnRhbDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcHJvZ3Jlc3MvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19idXR0b25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1idXR0b24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe2lmKGtleSBpbiBvYmope09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsd3JpdGFibGU6dHJ1ZX0pO31lbHNle29ialtrZXldPXZhbHVlO31yZXR1cm4gb2JqO31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIFByb2dyZXNzPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoUHJvZ3Jlc3MsX1JlYWN0JFB1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFByb2dyZXNzKCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUHJvZ3Jlc3MpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChQcm9ncmVzcy5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihQcm9ncmVzcykpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSk7fV9jcmVhdGVDbGFzcyhQcm9ncmVzcyxbe2tleToncmVuZGVyQ2FuY2VsJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDYW5jZWwoKXtpZih0aGlzLnByb3BzLm9uQ2FuY2VsKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19idXR0b25fX1tcImFcIiAvKiBkZWZhdWx0ICovXSxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmNhbmNlbFByb3BzLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcHJvZ3Jlc3MtY2FuY2VsJyx0aGlzLnByb3BzLmNhbmNlbFByb3BzLmNsYXNzTmFtZSksY29tcG9uZW50OnRoaXMucHJvcHMuY2FuY2VsQ29tcG9uZW50LG9uUHJlc3NlZDp0aGlzLnByb3BzLm9uQ2FuY2VsfSkpO319fSx7a2V5OidyZW5kZXJQcm9ncmVzcycsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyUHJvZ3Jlc3MoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wcm9ncmVzc0NvbXBvbmVudCxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLnByb2dyZXNzUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wcm9ncmVzcycsdGhpcy5wcm9wcy5wcm9ncmVzc1Byb3BzLmNsYXNzTmFtZSx7J2ItcHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZSc6dGhpcy5wcm9wcy5wcm9ncmVzcz09PXVuZGVmaW5lZH0pLHJvbGU6J3ByZXNlbnRhdGlvbicsc3R5bGU6X2V4dGVuZHMoe30sdGhpcy5wcm9wcy5wcm9ncmVzc1Byb3BzLnN0eWxlLF9kZWZpbmVQcm9wZXJ0eSh7fSx0aGlzLnByb3BzLnR3ZWVuUHJvcGVydHksdGhpcy5wcm9wcy5wcm9ncmVzcykpfSkpO319LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuY29tcG9uZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLFByb2dyZXNzLmludGVybmFsS2V5cykse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wcm9ncmVzcy13cmFwcGVyJyx0aGlzLnByb3BzLmNsYXNzTmFtZSksJ2RhdGEtcHJvZ3Jlc3MnOnRoaXMucHJvcHMucHJvZ3Jlc3MhPT11bmRlZmluZWQ/dGhpcy5wcm9wcy5wcm9ncmVzczpudWxsfSksdGhpcy5yZW5kZXJQcm9ncmVzcygpLHRoaXMucHJvcHMuY2hpbGRyZW4sdGhpcy5yZW5kZXJDYW5jZWwoKSk7fX1dKTtyZXR1cm4gUHJvZ3Jlc3M7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHVyZUNvbXBvbmVudCk7UHJvZ3Jlc3MucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55LGNhbmNlbENvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jXSksY2FuY2VsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLG9uQ2FuY2VsOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMscHJvZ3Jlc3M6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubnVtYmVyXSkscHJvZ3Jlc3NDb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLHByb2dyZXNzUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSx0d2VlblByb3BlcnR5Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZ307UHJvZ3Jlc3MuZGVmYXVsdFByb3BzPXtjYW5jZWxDb21wb25lbnQ6J2J1dHRvbicsY2FuY2VsUHJvcHM6e30sY29tcG9uZW50OidkaXYnLG9uQ2FuY2VsOm51bGwscHJvZ3Jlc3M6dW5kZWZpbmVkLHByb2dyZXNzQ29tcG9uZW50OidkaXYnLHByb2dyZXNzUHJvcHM6e30sdHdlZW5Qcm9wZXJ0eTond2lkdGgnfTtQcm9ncmVzcy5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoUHJvZ3Jlc3MuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gUHJvZ3Jlc3M7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzaXZlLWRpc2Nsb3N1cmUvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBpc0Z1bmN0aW9uPWZ1bmN0aW9uIGlzRnVuY3Rpb24oeCl7cmV0dXJuIHR5cGVvZiB4PT09J2Z1bmN0aW9uJzt9O3ZhciBub29wPWZ1bmN0aW9uIG5vb3AoKXt9O3ZhciBQcm9ncmVzc2l2ZURpc2Nsb3N1cmU9ZnVuY3Rpb24oX1JlYWN0JFB1cmVDb21wb25lbnQpe19pbmhlcml0cyhQcm9ncmVzc2l2ZURpc2Nsb3N1cmUsX1JlYWN0JFB1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFByb2dyZXNzaXZlRGlzY2xvc3VyZSgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLFByb2dyZXNzaXZlRGlzY2xvc3VyZSk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1Qcm9ncmVzc2l2ZURpc2Nsb3N1cmUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuc3RhdGU9e2V4cGFuZGVkOl90aGlzLnByb3BzLmV4cGFuZGVkfSxfdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjaz1mdW5jdGlvbigpe3JldHVybiBfdGhpcy5wcm9wc1tfdGhpcy5zdGF0ZS5leHBhbmRlZD8nb25FeHBhbmQnOidvbkhpZGUnXSgpO30sX3RoaXMuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZXZlbnQpe190aGlzLnNldFN0YXRlKHtleHBhbmRlZDohX3RoaXMuc3RhdGUuZXhwYW5kZWR9LF90aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKTtpZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2spKXtfdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5vbkNsaWNrKGV2ZW50KTt9fSxfdGhpcy5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGV2ZW50KXtpZihldmVudC5rZXk9PT0nRW50ZXInKXtldmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzLnNldFN0YXRlKHtleHBhbmRlZDohX3RoaXMuc3RhdGUuZXhwYW5kZWR9LF90aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKTt9aWYoaXNGdW5jdGlvbihfdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5vbktleURvd24pKXtfdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5vbktleURvd24oZXZlbnQpO319LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFByb2dyZXNzaXZlRGlzY2xvc3VyZSxbe2tleTonY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcyl7aWYobmV3UHJvcHMuZXhwYW5kZWQhPT10aGlzLnByb3BzLmV4cGFuZGVkKXt0aGlzLnNldFN0YXRlKHtleHBhbmRlZDpuZXdQcm9wcy5leHBhbmRlZH0sdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayk7fX19LHtrZXk6J3JlbmRlckNvbnRlbnQnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlckNvbnRlbnQoKXtpZih0aGlzLnN0YXRlLmV4cGFuZGVkKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2Rpdicse2NsYXNzTmFtZTonYi1kaXNjbG9zdXJlLWNvbnRlbnQnfSxpc0Z1bmN0aW9uKHRoaXMucHJvcHMuY2hpbGRyZW4pP3RoaXMucHJvcHMuY2hpbGRyZW4oKTp0aGlzLnByb3BzLmNoaWxkcmVuKTt9fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlLmludGVybmFsS2V5cykse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1kaXNjbG9zdXJlJyx0aGlzLnByb3BzLmNsYXNzTmFtZSx7J2ItZGlzY2xvc3VyZS1leHBhbmRlZCc6dGhpcy5zdGF0ZS5leHBhbmRlZH0pfSksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy50b2dnbGVDb21wb25lbnQsX2V4dGVuZHMoe30sdGhpcy5wcm9wcy50b2dnbGVQcm9wcyx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWRpc2Nsb3N1cmUtdG9nZ2xlJyx0aGlzLnByb3BzLnRvZ2dsZVByb3BzLmNsYXNzTmFtZSksb25DbGljazp0aGlzLmhhbmRsZUNsaWNrLG9uS2V5RG93bjp0aGlzLmhhbmRsZUtleURvd24sdGFiSW5kZXg6JzAnfSksdGhpcy5zdGF0ZS5leHBhbmRlZD90aGlzLnByb3BzLnRvZ2dsZUV4cGFuZGVkQ29udGVudHx8dGhpcy5wcm9wcy50b2dnbGVDb250ZW50OnRoaXMucHJvcHMudG9nZ2xlQ29udGVudCksdGhpcy5yZW5kZXJDb250ZW50KCkpO319XSk7cmV0dXJuIFByb2dyZXNzaXZlRGlzY2xvc3VyZTt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtQcm9ncmVzc2l2ZURpc2Nsb3N1cmUucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55LGNoaWxkcmVuOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hcnJheU9mKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm5vZGUpLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmNdKSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLGV4cGFuZGVkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmJvb2wsb25FeHBhbmQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxvbkhpZGU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyx0b2dnbGVDb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLHRvZ2dsZUNvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSx0b2dnbGVFeHBhbmRlZENvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSx0b2dnbGVQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueX0pfTtQcm9ncmVzc2l2ZURpc2Nsb3N1cmUuZGVmYXVsdFByb3BzPXtjaGlsZHJlbjpudWxsLGNvbXBvbmVudDonZGl2JyxleHBhbmRlZDpmYWxzZSxvbkV4cGFuZDpub29wLG9uSGlkZTpub29wLHRvZ2dsZUNvbXBvbmVudDonZGl2Jyx0b2dnbGVDb250ZW50Om51bGwsdG9nZ2xlRXhwYW5kZWRDb250ZW50Om51bGwsdG9nZ2xlUHJvcHM6e319O1Byb2dyZXNzaXZlRGlzY2xvc3VyZS5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFByb2dyZXNzaXZlRGlzY2xvc3VyZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcmFkaW8vaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc191dWlkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGlzRnVuY3Rpb249ZnVuY3Rpb24gaXNGdW5jdGlvbih4KXtyZXR1cm4gdHlwZW9mIHg9PT0nZnVuY3Rpb24nO307dmFyIFJhZGlvPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoUmFkaW8sX1JlYWN0JFB1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFJhZGlvKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUmFkaW8pO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9UmFkaW8uX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmFkaW8pKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy51dWlkPV9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxfdGhpcy5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZXZlbnQpe2lmKGV2ZW50LnRhcmdldC5jaGVja2VkKXtfdGhpcy5wcm9wcy5vblNlbGVjdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7fWlmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO319LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFJhZGlvLFt7a2V5OidyZW5kZXJJbnB1dCcsdmFsdWU6ZnVuY3Rpb24gcmVuZGVySW5wdXQoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmlucHV0UHJvcHMse3R5cGU6J3JhZGlvJyxpZDp0aGlzLnByb3BzLmlkfHx0aGlzLnByb3BzLmlucHV0UHJvcHMuaWR8fHRoaXMudXVpZCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcmFkaW8nLHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUseydiLXJhZGlvLXNlbGVjdGVkJzp0aGlzLnByb3BzLnNlbGVjdGVkfSksbmFtZTp0aGlzLnByb3BzLm5hbWUsdmFsdWU6dGhpcy5wcm9wcy52YWx1ZSxjaGVja2VkOnRoaXMucHJvcHMuc2VsZWN0ZWQsJ2FyaWEtY2hlY2tlZCc6U3RyaW5nKHRoaXMucHJvcHMuc2VsZWN0ZWQpLG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlfSkpO319LHtrZXk6J3JlbmRlckxhYmVsJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJMYWJlbCgpe2lmKHRoaXMucHJvcHMubGFiZWxDb250ZW50KXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmxhYmVsUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1yYWRpby1sYWJlbCcsdGhpcy5wcm9wcy5sYWJlbFByb3BzLmNsYXNzTmFtZSksaHRtbEZvcjp0aGlzLnByb3BzLmlkfHx0aGlzLnByb3BzLmlucHV0UHJvcHMuaWR8fHRoaXMudXVpZH0pLHRoaXMucHJvcHMubGFiZWxDb250ZW50KTt9fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUmFkaW8uaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXJhZGlvLXdyYXBwZXInLHRoaXMucHJvcHMuY2xhc3NOYW1lKX0pLHRoaXMucmVuZGVySW5wdXQoKSx0aGlzLnJlbmRlckxhYmVsKCkpO319XSk7cmV0dXJuIFJhZGlvO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLlB1cmVDb21wb25lbnQpO1JhZGlvLnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLGlucHV0UHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxsYWJlbENvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ub2RlLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFycmF5T2YoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubm9kZSldKSxsYWJlbFByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55fSksbmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcuaXNSZXF1aXJlZCxvblNlbGVjdGVkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMsc2VsZWN0ZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCx2YWx1ZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcuaXNSZXF1aXJlZH07UmFkaW8uZGVmYXVsdFByb3BzPXtjb21wb25lbnQ6J2RpdicsaW5wdXRQcm9wczp7fSxsYWJlbENvbnRlbnQ6bnVsbCxsYWJlbFByb3BzOnt9LG5hbWU6Jycsb25TZWxlY3RlZDpmdW5jdGlvbiBvblNlbGVjdGVkKCl7fSxzZWxlY3RlZDpmYWxzZSx2YWx1ZTonJ307UmFkaW8uaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKFJhZGlvLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFJhZGlvO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1zZWdtZW50ZWQtY29udHJvbC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19idXR0b25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1idXR0b24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fWZ1bmN0aW9uIGZpbmRJbmRleChhcnIsdGVzdCl7dmFyIGZvdW5kPXZvaWQgMDtmb3IodmFyIGk9MCxsZW49YXJyLmxlbmd0aDtpPGxlbjtpKz0xKXtpZih0ZXN0KGFycltpXSkpe2ZvdW5kPWk7YnJlYWs7fX1yZXR1cm4gZm91bmQ7fXZhciBTZWdtZW50ZWRDb250cm9sPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoU2VnbWVudGVkQ29udHJvbCxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gU2VnbWVudGVkQ29udHJvbCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLFNlZ21lbnRlZENvbnRyb2wpO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9U2VnbWVudGVkQ29udHJvbC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWdtZW50ZWRDb250cm9sKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuc3RhdGU9e3NlbGVjdGVkSW5kZXg6bnVsbH0sX3RoaXMuaGFuZGxlT3B0aW9uU2VsZWN0aW9uPWZ1bmN0aW9uKGV2ZW50KXt2YXIgaW5kZXg9QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbixldmVudC50YXJnZXQpO2lmKF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXghPT1pbmRleCl7X3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6aW5kZXh9LGZ1bmN0aW9uKCl7X3RoaXMucHJvcHMub25PcHRpb25TZWxlY3RlZChfdGhpcy5wcm9wcy5vcHRpb25zW190aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhdLF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXgpO30pO319LF90aGlzLmdldFNlbGVjdGVkT3B0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnByb3BzLm9wdGlvbnNbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF07fSxfdGhpcy5nZXRTZWxlY3RlZE9wdGlvbkluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7fSxfdGhpcy5zZWxlY3RPcHRpb249ZnVuY3Rpb24ob3B0aW9uKXtyZXR1cm4gX3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6X3RoaXMucHJvcHMub3B0aW9ucy5pbmRleE9mKG9wdGlvbil9KTt9LF90aGlzLnNlbGVjdE9wdGlvbkJ5S2V5PWZ1bmN0aW9uKGssdil7cmV0dXJuIF90aGlzLnNldFN0YXRlKHtzZWxlY3RlZEluZGV4OmZpbmRJbmRleChfdGhpcy5wcm9wcy5vcHRpb25zLGZ1bmN0aW9uKG9wdGlvbil7cmV0dXJuIG9wdGlvbltrXT09PXY7fSl9KTt9LF90aGlzLnNlbGVjdE9wdGlvbkluZGV4PWZ1bmN0aW9uKGluZGV4KXtyZXR1cm4gX3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6aW5kZXh9KTt9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFNlZ21lbnRlZENvbnRyb2wsW3trZXk6J2luZmVyU2VsZWN0ZWRPcHRpb25JbmRleCcsdmFsdWU6ZnVuY3Rpb24gaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4KCl7dmFyIHByb3BzPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1swXTp0aGlzLnByb3BzO3ZhciBzdGF0ZT1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06dGhpcy5zdGF0ZTtyZXR1cm4gZmluZEluZGV4KHByb3BzLm9wdGlvbnMsZnVuY3Rpb24ob3B0aW9uKXtyZXR1cm4gb3B0aW9uLnByZXNzZWQ7fSl8fHN0YXRlLnNlbGVjdGVkSW5kZXg7fX0se2tleTonY29tcG9uZW50V2lsbE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKXt0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEluZGV4OnRoaXMuaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4KCl8fHRoaXMucHJvcHMuZGVmYXVsdE9wdGlvblNlbGVjdGVkSW5kZXh9KTt9fSx7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7aWYobmV4dFByb3BzLm9wdGlvbnMhPT10aGlzLnByb3BzLm9wdGlvbnMpe3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6dGhpcy5pbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgobmV4dFByb3BzKX0pO319fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdGhpczI9dGhpcztyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JvdW5kbGVzc19hcnJvd19rZXlfbmF2aWdhdGlvbl9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLFNlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxLZXlzKSx7cm9sZToncmFkaW9ncm91cCcsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXNlZ21lbnRlZC1jb250cm9sJyx0aGlzLnByb3BzLmNsYXNzTmFtZSksbW9kZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX19bXCJhXCIgLyogZGVmYXVsdCAqL10ubW9kZS5IT1JJWk9OVEFMfSksdGhpcy5wcm9wcy5vcHRpb25zLm1hcChmdW5jdGlvbihwcm9wcyxpbmRleCl7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYnV0dG9uX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30scHJvcHMse2tleTpwcm9wcy5rZXl8fGluZGV4LCdhcmlhLWNoZWNrZWQnOmluZGV4PT09X3RoaXMyLnN0YXRlLnNlbGVjdGVkSW5kZXgsY29tcG9uZW50OnByb3BzLmNvbXBvbmVudHx8X3RoaXMyLnByb3BzLm9wdGlvbkNvbXBvbmVudCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2Itc2VnbWVudGVkLWNvbnRyb2wtb3B0aW9uJyxwcm9wcy5jbGFzc05hbWUseydiLXNlZ21lbnRlZC1jb250cm9sLW9wdGlvbi1zZWxlY3RlZCc6aW5kZXg9PT1fdGhpczIuc3RhdGUuc2VsZWN0ZWRJbmRleH0pLG9uUHJlc3NlZDpfdGhpczIuaGFuZGxlT3B0aW9uU2VsZWN0aW9uLHByZXNzZWQ6aW5kZXg9PT1fdGhpczIuc3RhdGUuc2VsZWN0ZWRJbmRleCxyb2xlOidyYWRpbyd9KSxwcm9wcy5jaGlsZHJlbik7fSkpO319XSk7cmV0dXJuIFNlZ21lbnRlZENvbnRyb2w7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHVyZUNvbXBvbmVudCk7U2VnbWVudGVkQ29udHJvbC5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnksZGVmYXVsdE9wdGlvblNlbGVjdGVkSW5kZXg6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ubnVtYmVyLG9uT3B0aW9uU2VsZWN0ZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxvcHRpb25Db21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zdHJpbmcsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuY10pLG9wdGlvbnM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYXJyYXlPZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueSxjaGlsZHJlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ub2RlfSkpLmlzUmVxdWlyZWR9O1NlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzPXtkZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleDowLG9uT3B0aW9uU2VsZWN0ZWQ6ZnVuY3Rpb24gb25PcHRpb25TZWxlY3RlZCgpe30sb3B0aW9uQ29tcG9uZW50OididXR0b24nLG9wdGlvbnM6W119O1NlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKFNlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gU2VnbWVudGVkQ29udHJvbDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdG9rZW5pemVkLWlucHV0L2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdHlwZWFoZWFkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb2JqZWN0X2ludGVyc2VjdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBmaXJzdD1mdW5jdGlvbiBmaXJzdChhcnJheSl7cmV0dXJuIGFycmF5WzBdO307dmFyIGxhc3Q9ZnVuY3Rpb24gbGFzdChhcnJheSl7cmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aC0xXTt9O3ZhciBpc0Z1bmN0aW9uPWZ1bmN0aW9uIGlzRnVuY3Rpb24oeCl7cmV0dXJuIHR5cGVvZiB4PT09J2Z1bmN0aW9uJzt9O3ZhciBUb2tlbml6ZWRJbnB1dD1mdW5jdGlvbihfUmVhY3QkUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKFRva2VuaXplZElucHV0LF9SZWFjdCRQdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBUb2tlbml6ZWRJbnB1dCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLFRva2VuaXplZElucHV0KTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPVRva2VuaXplZElucHV0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFRva2VuaXplZElucHV0KSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuZm9jdXM9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucmVmcy50eXBlYWhlYWQuZm9jdXMoKTt9LF90aGlzLmdldElucHV0Tm9kZT1mdW5jdGlvbigpe3JldHVybiBfdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRJbnB1dE5vZGUoKTt9LF90aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dD1mdW5jdGlvbigpe3JldHVybiBfdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRTZWxlY3RlZEVudGl0eVRleHQoKTt9LF90aGlzLmdldFZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnJlZnMudHlwZWFoZWFkLmdldFZhbHVlKCk7fSxfdGhpcy5zZWxlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucmVmcy50eXBlYWhlYWQuc2VsZWN0KCk7fSxfdGhpcy5zZXRWYWx1ZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIF90aGlzLnJlZnMudHlwZWFoZWFkLnNldFZhbHVlKHZhbHVlKTt9LF90aGlzLmFkZD1mdW5jdGlvbihpbmRleCl7aWYoX3RoaXMucHJvcHMudG9rZW5zLmluZGV4T2YoaW5kZXgpPT09LTEpe190aGlzLnByb3BzLmhhbmRsZUFkZFRva2VuKGluZGV4KTt9fSxfdGhpcy5oYW5kbGVJbnB1dENsaWNrPWZ1bmN0aW9uKGV2ZW50KXtfdGhpcy5jbGVhclNlbGVjdGlvbigpO2lmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKSl7X3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKGV2ZW50KTt9fSxfdGhpcy5oYW5kbGVJbnB1dEZvY3VzPWZ1bmN0aW9uKGV2ZW50KXtfdGhpcy5jbGVhclNlbGVjdGlvbigpO2lmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKSl7X3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKGV2ZW50KTt9fSxfdGhpcy5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGV2ZW50KXtzd2l0Y2goZXZlbnQud2hpY2gpe2Nhc2UgMzc6X3RoaXMuc2VsZWN0UHJldmlvdXNUb2tlbihldmVudC5zaGlmdEtleSk7YnJlYWs7Y2FzZSAzOTpfdGhpcy5zZWxlY3ROZXh0VG9rZW4oZXZlbnQuc2hpZnRLZXkpO2JyZWFrO2Nhc2UgODppZihfdGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZC5sZW5ndGgpe190aGlzLnJlbW92ZShfdGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZCk7X3RoaXMuZm9jdXMoKTt9YnJlYWs7Y2FzZSA2NTppZihldmVudC5tZXRhS2V5KXtldmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzLmZvY3VzKCk7X3RoaXMuc2VsZWN0KCk7X3RoaXMuX3N1cHByZXNzTmV4dFRva2VuU2VsZWN0aW9uPXRydWU7X3RoaXMucHJvcHMuaGFuZGxlTmV3U2VsZWN0aW9uKF90aGlzLnByb3BzLnRva2Vucyk7fX1pZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLm9uS2V5RG93bikpe190aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoVG9rZW5pemVkSW5wdXQsW3trZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcyl7dmFyIHByZXZpb3VzU2VsZWN0ZWRJbmRleGVzPXByZXZQcm9wcy50b2tlbnNTZWxlY3RlZDt2YXIgY3VycmVudFNlbGVjdGVkSW5kZXhlcz10aGlzLnByb3BzLnRva2Vuc1NlbGVjdGVkO2lmKHRoaXMucHJvcHMudG9rZW5zLmxlbmd0aD5wcmV2UHJvcHMudG9rZW5zLmxlbmd0aCl7dGhpcy5zZXRWYWx1ZSgnJyk7fWlmKHRoaXMuX3N1cHByZXNzTmV4dFRva2VuU2VsZWN0aW9uKXt0aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbj1mYWxzZTtyZXR1cm47fWlmKHByZXZpb3VzU2VsZWN0ZWRJbmRleGVzIT09Y3VycmVudFNlbGVjdGVkSW5kZXhlcyYmY3VycmVudFNlbGVjdGVkSW5kZXhlcy5sZW5ndGghPT0wKXtpZihjdXJyZW50U2VsZWN0ZWRJbmRleGVzLmxlbmd0aD09PTF8fGN1cnJlbnRTZWxlY3RlZEluZGV4ZXNbMF0hPT1wcmV2aW91c1NlbGVjdGVkSW5kZXhlc1swXSl7cmV0dXJuIHRoaXMucmVmc1sndG9rZW5fJytjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdXS5mb2N1cygpO31lbHNlIGlmKGxhc3QoY3VycmVudFNlbGVjdGVkSW5kZXhlcykhPT1sYXN0KHByZXZpb3VzU2VsZWN0ZWRJbmRleGVzKSl7cmV0dXJuIHRoaXMucmVmc1sndG9rZW5fJytsYXN0KGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMpXS5mb2N1cygpO310aGlzLnJlZnNbJ3Rva2VuXycrY3VycmVudFNlbGVjdGVkSW5kZXhlc1swXV0uZm9jdXMoKTt9fX0se2tleToncmVtb3ZlJyx2YWx1ZTpmdW5jdGlvbiByZW1vdmUoaW5kZXgpe3ZhciBfdGhpczI9dGhpczt2YXIgaW5kZXhlcz0oQXJyYXkuaXNBcnJheShpbmRleCk/aW5kZXg6W2luZGV4XSkuZmlsdGVyKGZ1bmN0aW9uKGlkeCl7cmV0dXJuIF90aGlzMi5wcm9wcy50b2tlbnMuaW5kZXhPZihpZHgpIT09LTE7fSk7aWYoaW5kZXhlcy5sZW5ndGgpe3RoaXMucHJvcHMuaGFuZGxlUmVtb3ZlVG9rZW5zKGluZGV4ZXMpO319fSx7a2V5OidzZWxlY3RUb2tlbicsdmFsdWU6ZnVuY3Rpb24gc2VsZWN0VG9rZW4oaW5kZXgpe3RoaXMucHJvcHMuaGFuZGxlTmV3U2VsZWN0aW9uKFtpbmRleF0pO319LHtrZXk6J3NlbGVjdFRva2VucycsdmFsdWU6ZnVuY3Rpb24gc2VsZWN0VG9rZW5zKGluZGV4ZXMpe3RoaXMucHJvcHMuaGFuZGxlTmV3U2VsZWN0aW9uKGluZGV4ZXMpO319LHtrZXk6J3NlbGVjdFByZXZpb3VzVG9rZW4nLHZhbHVlOmZ1bmN0aW9uIHNlbGVjdFByZXZpb3VzVG9rZW4oYXBwZW5kKXt2YXIgc2VsZWN0ZWQ9dGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZDt2YXIgaW5kZXhlcz10aGlzLnByb3BzLnRva2VucztpZihzZWxlY3RlZC5sZW5ndGg9PT0xJiZmaXJzdChzZWxlY3RlZCk9PT1maXJzdChpbmRleGVzKSl7cmV0dXJuO31pZihzZWxlY3RlZC5sZW5ndGg9PT0wKXt0aGlzLnNlbGVjdFRva2VuKGxhc3QoaW5kZXhlcykpO31lbHNle3ZhciBwcmV2aW91c1Rva2VuPWluZGV4ZXNbaW5kZXhlcy5pbmRleE9mKGZpcnN0KHNlbGVjdGVkKSktMV07dGhpcy5zZWxlY3RUb2tlbnMoYXBwZW5kP1twcmV2aW91c1Rva2VuXS5jb25jYXQoc2VsZWN0ZWQpOltwcmV2aW91c1Rva2VuXSk7fX19LHtrZXk6J3NlbGVjdE5leHRUb2tlbicsdmFsdWU6ZnVuY3Rpb24gc2VsZWN0TmV4dFRva2VuKGFwcGVuZCl7dmFyIHNlbGVjdGVkPXRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQ7dmFyIGluZGV4ZXM9dGhpcy5wcm9wcy50b2tlbnM7aWYoc2VsZWN0ZWQubGVuZ3RoPT09MCl7cmV0dXJuO31pZihsYXN0KHNlbGVjdGVkKT09PWxhc3QoaW5kZXhlcykpe3RoaXMuY2xlYXJTZWxlY3Rpb24oKTt0aGlzLmZvY3VzKCk7fWVsc2V7dmFyIG5leHRUb2tlbj1pbmRleGVzW2luZGV4ZXMuaW5kZXhPZihsYXN0KHNlbGVjdGVkKSkrMV07dGhpcy5zZWxlY3RUb2tlbnMoYXBwZW5kP3NlbGVjdGVkLmNvbmNhdChuZXh0VG9rZW4pOltuZXh0VG9rZW5dKTt9fX0se2tleTonY2xlYXJTZWxlY3Rpb24nLHZhbHVlOmZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCl7dGhpcy5wcm9wcy5oYW5kbGVOZXdTZWxlY3Rpb24oW10pO319LHtrZXk6J2hhbmRsZVRva2VuQ2xvc2VDbGljaycsdmFsdWU6ZnVuY3Rpb24gaGFuZGxlVG9rZW5DbG9zZUNsaWNrKGluZGV4LGV2ZW50KXtldmVudC5zdG9wUHJvcGFnYXRpb24oKTt0aGlzLnJlbW92ZShpbmRleCk7dGhpcy5mb2N1cygpO2lmKHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudC5wcm9wcy5vbkNsaWNrKXt0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMub25DbGljayhldmVudCk7fX19LHtrZXk6J3JlbmRlclRva2VuQ2xvc2UnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlclRva2VuQ2xvc2UoaW5kZXgpe2lmKHRoaXMucHJvcHMudG9rZW5DbG9zZVZpc2libGUpe3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudCx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXRva2VuZmllbGQtdG9rZW4tY2xvc2UnLHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudC5wcm9wcy5jbGFzc05hbWUpLG9uQ2xpY2s6dGhpcy5oYW5kbGVUb2tlbkNsb3NlQ2xpY2suYmluZCh0aGlzLGluZGV4KX0pO319fSx7a2V5OidoYW5kbGVUb2tlbktleURvd24nLHZhbHVlOmZ1bmN0aW9uIGhhbmRsZVRva2VuS2V5RG93bihpbmRleCxldmVudCl7c3dpdGNoKGV2ZW50LndoaWNoKXtjYXNlIDEzOmNhc2UgMzI6dGhpcy5zZWxlY3RUb2tlbihpbmRleCk7ZXZlbnQucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlIDg6dGhpcy5yZW1vdmUoaW5kZXgpO3RoaXMuZm9jdXMoKTtldmVudC5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO319fSx7a2V5OidyZW5kZXJUb2tlbnMnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlclRva2Vucygpe3ZhciBfdGhpczM9dGhpcztyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2Rpdicse2NsYXNzTmFtZTonYi10b2tlbmZpZWxkLXRva2Vucyd9LHRoaXMucHJvcHMudG9rZW5zLm1hcChmdW5jdGlvbihpbmRleCl7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdkaXYnLHtyZWY6J3Rva2VuXycraW5kZXgsa2V5OmluZGV4LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi10b2tlbmZpZWxkLXRva2VuJyx7J2ItdG9rZW5maWVsZC10b2tlbi1zZWxlY3RlZCc6X3RoaXMzLnByb3BzLnRva2Vuc1NlbGVjdGVkLmluZGV4T2YoaW5kZXgpIT09LTF9KSxvbkNsaWNrOl90aGlzMy5zZWxlY3RUb2tlbi5iaW5kKF90aGlzMyxpbmRleCksb25LZXlEb3duOl90aGlzMy5oYW5kbGVUb2tlbktleURvd24uYmluZChfdGhpczMsaW5kZXgpLHRhYkluZGV4OicwJ30sX3RoaXMzLnByb3BzLmVudGl0aWVzW2luZGV4XS50ZXh0LF90aGlzMy5yZW5kZXJUb2tlbkNsb3NlKGluZGV4KSk7fSkpO319LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdkaXYnLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLFRva2VuaXplZElucHV0LmludGVybmFsS2V5cykse3JlZjond3JhcHBlcicsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXRva2VuZmllbGQtd3JhcHBlcicsdGhpcy5wcm9wcy5jbGFzc05hbWUpLG9uS2V5RG93bjp0aGlzLmhhbmRsZUtleURvd259KSx0aGlzLnJlbmRlclRva2VucygpLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdHlwZWFoZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb2JqZWN0X2ludGVyc2VjdGlvbl9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdHlwZWFoZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzKSx7cmVmOid0eXBlYWhlYWQnLGNsYXNzTmFtZTonYi10b2tlbmZpZWxkJyxjbGVhck9uU2VsZWN0aW9uOnRydWUsaW5wdXRQcm9wczpfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmlucHV0UHJvcHMse29uQ2xpY2s6dGhpcy5oYW5kbGVJbnB1dENsaWNrLG9uRm9jdXM6dGhpcy5oYW5kbGVJbnB1dEZvY3VzfSksb25FbnRpdHlTZWxlY3RlZDp0aGlzLmFkZH0pKSk7fX1dKTtyZXR1cm4gVG9rZW5pemVkSW5wdXQ7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHVyZUNvbXBvbmVudCk7VG9rZW5pemVkSW5wdXQucHJvcFR5cGVzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdHlwZWFoZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10ucHJvcFR5cGVzLHtoYW5kbGVBZGRUb2tlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLGhhbmRsZVJlbW92ZVRva2VuczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLGhhbmRsZU5ld1NlbGVjdGlvbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLHRva2VuQ2xvc2VDb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZWxlbWVudCx0b2tlbkNsb3NlVmlzaWJsZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLHRva2VuczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hcnJheU9mKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm51bWJlciksdG9rZW5zU2VsZWN0ZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYXJyYXlPZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5udW1iZXIpfSk7VG9rZW5pemVkSW5wdXQuZGVmYXVsdFByb3BzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9ib3VuZGxlc3NfdHlwZWFoZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzLHtoYW5kbGVBZGRUb2tlbjpmdW5jdGlvbiBoYW5kbGVBZGRUb2tlbigpe30saGFuZGxlUmVtb3ZlVG9rZW5zOmZ1bmN0aW9uIGhhbmRsZVJlbW92ZVRva2Vucygpe30saGFuZGxlTmV3U2VsZWN0aW9uOmZ1bmN0aW9uIGhhbmRsZU5ld1NlbGVjdGlvbigpe30sdG9rZW5DbG9zZUNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxudWxsLCdYJyksdG9rZW5DbG9zZVZpc2libGU6dHJ1ZSx0b2tlbnM6W10sdG9rZW5zU2VsZWN0ZWQ6W119KTtUb2tlbml6ZWRJbnB1dC5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoVG9rZW5pemVkSW5wdXQuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gVG9rZW5pemVkSW5wdXQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfZXNjYXBlX3N0cmluZ19yZWdleHBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvbm9kZV9tb2R1bGVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9lc2NhcGVfc3RyaW5nX3JlZ2V4cF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2VzY2FwZV9zdHJpbmdfcmVnZXhwX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaixrZXlzKXt2YXIgdGFyZ2V0PXt9O2Zvcih2YXIgaSBpbiBvYmope2lmKGtleXMuaW5kZXhPZihpKT49MCljb250aW51ZTtpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaixpKSljb250aW51ZTt0YXJnZXRbaV09b2JqW2ldO31yZXR1cm4gdGFyZ2V0O31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGlzRnVuY3Rpb249ZnVuY3Rpb24gaXNGdW5jdGlvbih4KXtyZXR1cm4gdHlwZW9mIHg9PT0nZnVuY3Rpb24nO307dmFyIGlzU3RyaW5nPWZ1bmN0aW9uIGlzU3RyaW5nKHgpe3JldHVybiB0eXBlb2YgeD09PSdzdHJpbmcnO307dmFyIG5vb3A9ZnVuY3Rpb24gbm9vcCgpe307dmFyIFR5cGVhaGVhZD1mdW5jdGlvbihfUmVhY3QkUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKFR5cGVhaGVhZCxfUmVhY3QkUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gVHlwZWFoZWFkKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsVHlwZWFoZWFkKTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPVR5cGVhaGVhZC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihUeXBlYWhlYWQpKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFR5cGVhaGVhZCxbe2tleTonY29tcG9uZW50V2lsbE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKXtpZih0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWV8fHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWUpe3RoaXMuY29tcHV0ZU1hdGNoZXMoKTt9fX0se2tleTonY29tcG9uZW50RGlkTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5tb3VudGVkPXRydWU7aWYodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4Pj0wKXt0aGlzLnByb3BzLm9uRW50aXR5SGlnaGxpZ2h0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTt9fX0se2tleTonY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpe2lmKG5leHRQcm9wcy5lbnRpdGllcyE9PXRoaXMucHJvcHMuZW50aXRpZXMpe3RoaXMuY29tcHV0ZU1hdGNoZXMobmV4dFByb3BzLmVudGl0aWVzKTt9aWYobmV4dFByb3BzLmlucHV0UHJvcHMudmFsdWUhPT10aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpe3RoaXMudXBkYXRlSW5wdXRTdGF0ZShuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSk7dGhpcy5jb21wdXRlTWF0Y2hlcygpO319fSx7a2V5Oidjb21wb25lbnREaWRVcGRhdGUnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMscHJldlN0YXRlKXtpZih0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgmJiFwcmV2U3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCl7dGhpcy5yZWZzLm1hdGNoZXMuc2Nyb2xsVG9wPTA7fWlmKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleD49MCYmdGhpcy5wcm9wcy5lbnRpdGllc1t0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdIT09cHJldlByb3BzLmVudGl0aWVzW3ByZXZTdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4XSl7dGhpcy5wcm9wcy5vbkVudGl0eUhpZ2hsaWdodGVkKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCk7fX19LHtrZXk6J2NvbXBvbmVudFdpbGxVbm1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe3RoaXMubW91bnRlZD1mYWxzZTt9fSx7a2V5OidoYW5kbGVNYXRjaENsaWNrJyx2YWx1ZTpmdW5jdGlvbiBoYW5kbGVNYXRjaENsaWNrKGluZGV4KXt0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEVudGl0eUluZGV4OmluZGV4fSx0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KTt9fSx7a2V5OidzZWxlY3RNYXRjaCcsdmFsdWU6ZnVuY3Rpb24gc2VsZWN0TWF0Y2goZGVsdGEpe3ZhciBtYXRjaGVzPXRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzO3ZhciB0b3RhbE1hdGNoZXM9bWF0Y2hlcy5sZW5ndGg7dmFyIG5leHRJbmRleD1tYXRjaGVzLmluZGV4T2YodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KStkZWx0YTtpZih0b3RhbE1hdGNoZXMpe2lmKG5leHRJbmRleDwwKXtuZXh0SW5kZXg9dG90YWxNYXRjaGVzLTE7fWVsc2UgaWYobmV4dEluZGV4Pj10b3RhbE1hdGNoZXMpe25leHRJbmRleD0wO312YXIgbWF0Y2hJbmRleD1tYXRjaGVzW25leHRJbmRleF07dmFyIG1hdGNoZXNOb2RlPXRoaXMucmVmcy5tYXRjaGVzO3ZhciBtYXRjaGVzTm9kZVlFbmQ9bWF0Y2hlc05vZGUuc2Nyb2xsVG9wK21hdGNoZXNOb2RlLmNsaWVudEhlaWdodDt2YXIgbWF0Y2hOb2RlPXRoaXMucmVmc1snbWF0Y2hfJCcrbWF0Y2hJbmRleF07dmFyIG1hdGNoTm9kZVlTdGFydD1tYXRjaE5vZGUub2Zmc2V0VG9wO3ZhciBtYXRjaE5vZGVZRW5kPW1hdGNoTm9kZVlTdGFydCttYXRjaE5vZGUuY2xpZW50SGVpZ2h0O2lmKG1hdGNoTm9kZVlFbmQ+PW1hdGNoZXNOb2RlWUVuZCl7bWF0Y2hlc05vZGUuc2Nyb2xsVG9wKz1tYXRjaE5vZGVZRW5kLW1hdGNoZXNOb2RlWUVuZDt9ZWxzZSBpZihtYXRjaE5vZGVZU3RhcnQ8PW1hdGNoZXNOb2RlLnNjcm9sbFRvcCl7bWF0Y2hlc05vZGUuc2Nyb2xsVG9wPW1hdGNoTm9kZVlTdGFydDt9dGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRFbnRpdHlJbmRleDptYXRjaEluZGV4fSk7fX19LHtrZXk6J2N1cnNvckF0RW5kT2ZJbnB1dCcsdmFsdWU6ZnVuY3Rpb24gY3Vyc29yQXRFbmRPZklucHV0KCl7dmFyIG5vZGU9dGhpcy5nZXRJbnB1dE5vZGUoKTtyZXR1cm4gbm9kZS5zZWxlY3Rpb25TdGFydD09PW5vZGUuc2VsZWN0aW9uRW5kJiZub2RlLnNlbGVjdGlvbkVuZD09PXRoaXMuZ2V0VmFsdWUoKS5sZW5ndGg7fX0se2tleTonbWFya0Z1enp5TWF0Y2hTdWJzdHJpbmcnLHZhbHVlOmZ1bmN0aW9uIG1hcmtGdXp6eU1hdGNoU3Vic3RyaW5nKGlucHV0LGVudGl0eSl7dmFyIGVudGl0eUNvbnRlbnQ9ZW50aXR5LnRleHQ7dmFyIGZyYWdzPWVudGl0eUNvbnRlbnQuc3BsaXQobmV3IFJlZ0V4cCgnKCcrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2VzY2FwZV9zdHJpbmdfcmVnZXhwX19fZGVmYXVsdCgpKGlucHV0KSsnKScsJ2lnJykpO3ZhciBub3JtYWxpemVkVXNlclRleHQ9aW5wdXQudG9Mb3dlckNhc2UoKTt2YXIgdGhyZXNob2xkPWZyYWdzLmxlbmd0aDt2YXIgaT0tMTt3aGlsZSgrK2k8dGhyZXNob2xkKXtpZihmcmFnc1tpXS50b0xvd2VyQ2FzZSgpPT09bm9ybWFsaXplZFVzZXJUZXh0KXtmcmFnc1tpXT1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnbWFyaycse2tleTppLGNsYXNzTmFtZTonYi10eXBlYWhlYWQtbWF0Y2gtaGlnaGxpZ2h0J30sZnJhZ3NbaV0pO319cmV0dXJuIGZyYWdzO319LHtrZXk6J21hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmcnLHZhbHVlOmZ1bmN0aW9uIG1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmcoaW5wdXQsZW50aXR5KXt2YXIgZW50aXR5Q29udGVudD1lbnRpdHkudGV4dDt2YXIgc2Vla1ZhbHVlPWlucHV0LnRvTG93ZXJDYXNlKCk7dmFyIGluZGV4U3RhcnQ9ZW50aXR5Q29udGVudC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2Vla1ZhbHVlKTt2YXIgaW5kZXhFbmQ9aW5kZXhTdGFydCtzZWVrVmFsdWUubGVuZ3RoO3JldHVybltfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnc3Bhbicse2tleTonMCd9LGVudGl0eUNvbnRlbnQuc2xpY2UoMCxpbmRleFN0YXJ0KSksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ21hcmsnLHtrZXk6JzEnLGNsYXNzTmFtZTonYi10eXBlYWhlYWQtbWF0Y2gtaGlnaGxpZ2h0J30sZW50aXR5Q29udGVudC5zbGljZShpbmRleFN0YXJ0LGluZGV4RW5kKSksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLHtrZXk6JzInfSxlbnRpdHlDb250ZW50LnNsaWNlKGluZGV4RW5kKSldO319LHtrZXk6J2dldE1hcmtpbmdGdW5jdGlvbicsdmFsdWU6ZnVuY3Rpb24gZ2V0TWFya2luZ0Z1bmN0aW9uKCl7aWYoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKXtpZih0aGlzLnByb3BzLmFsZ29yaXRobT09PVR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKXtyZXR1cm4gdGhpcy5tYXJrU3RhcnRzV2l0aE1hdGNoU3Vic3RyaW5nO31yZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZzt9ZWxzZSBpZihpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcikpe3JldHVybiB0aGlzLnByb3BzLmFsZ29yaXRobS5tYXJrZXI7fWlmKHRoaXMud2FybmVkTWFya2VyPT09dW5kZWZpbmVkKXt0aGlzLndhcm5lZE1hcmtlcj10cnVlO2NvbnNvbGUud2FybignVHlwZWFoZWFkOiBubyBgcHJvcHMuYWxnb3JpdGhtLm1hcmtlcmAgd2FzIHByb3ZpZGVkOyBmYWxsaW5nIGJhY2sgdG8gdGhlIGRlZmF1bHQgbWFya2luZyBhbGdvcml0aG0gKEZVWlpZKS4nKTt9cmV0dXJuIHRoaXMubWFya0Z1enp5TWF0Y2hTdWJzdHJpbmc7fX0se2tleTonZ2V0RnV6enlNYXRjaEluZGV4ZXMnLHZhbHVlOmZ1bmN0aW9uIGdldEZ1enp5TWF0Y2hJbmRleGVzKHVzZXJUZXh0LGVudGl0aWVzKXt2YXIgbm9ybWFsaXplZD11c2VyVGV4dC50b0xvd2VyQ2FzZSgpO3JldHVybiBlbnRpdGllcy5yZWR1Y2UoZnVuY3Rpb24gZmluZEluZGV4ZXMocmVzdWx0LGVudGl0eSxpbmRleCl7cmV0dXJuIGVudGl0eS50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihub3JtYWxpemVkKSE9PS0xP3Jlc3VsdC5wdXNoKGluZGV4KSYmcmVzdWx0OnJlc3VsdDt9LFtdKTt9fSx7a2V5OidnZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzJyx2YWx1ZTpmdW5jdGlvbiBnZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzKHVzZXJUZXh0LGVudGl0aWVzKXt2YXIgc2Vla1ZhbHVlPXVzZXJUZXh0LnRvTG93ZXJDYXNlKCk7cmV0dXJuIGVudGl0aWVzLnJlZHVjZShmdW5jdGlvbiBzZWVrTWF0Y2gocmVzdWx0cyxlbnRpdHksaW5kZXgpe2lmKGVudGl0eS50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpPT09MCl7cmVzdWx0cy5wdXNoKGluZGV4KTt9cmV0dXJuIHJlc3VsdHM7fSxbXSk7fX0se2tleTonZ2V0TWF0Y2hpbmdGdW5jdGlvbicsdmFsdWU6ZnVuY3Rpb24gZ2V0TWF0Y2hpbmdGdW5jdGlvbigpe2lmKGlzU3RyaW5nKHRoaXMucHJvcHMuYWxnb3JpdGhtKSl7aWYodGhpcy5wcm9wcy5hbGdvcml0aG09PT1UeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCl7cmV0dXJuIHRoaXMuZ2V0U3RhcnRzV2l0aE1hdGNoSW5kZXhlczt9cmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7fWVsc2UgaWYoaXNGdW5jdGlvbih0aGlzLnByb3BzLmFsZ29yaXRobS5tYXRjaGVyKSl7cmV0dXJuIHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hdGNoZXI7fWlmKHRoaXMud2FybmVkTWF0Y2hlcj09PXVuZGVmaW5lZCl7dGhpcy53YXJuZWRNYXRjaGVyPXRydWU7Y29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWF0Y2hlcmAgd2FzIHByb3ZpZGVkOyBmYWxsaW5nIGJhY2sgdG8gdGhlIGRlZmF1bHQgbWF0Y2hpbmcgYWxnb3JpdGhtIChGVVpaWSkuJyk7fXJldHVybiB0aGlzLmdldEZ1enp5TWF0Y2hJbmRleGVzO319LHtrZXk6J2NvbXB1dGVNYXRjaGVzJyx2YWx1ZTpmdW5jdGlvbiBjb21wdXRlTWF0Y2hlcyhwcm92aWRlZEVudGl0aWVzKXt2YXIgX3RoaXMyPXRoaXM7dGhpcy5zZXRTdGF0ZShmdW5jdGlvbihzdGF0ZSxwcm9wcyl7dmFyIGVudGl0aWVzPXByb3ZpZGVkRW50aXRpZXN8fHByb3BzLmVudGl0aWVzO3ZhciBjdXJyZW50VmFsdWU9c3RhdGUuaW5wdXQ7dmFyIG1hdGNoZXM9Y3VycmVudFZhbHVlPT09Jyc/W106X3RoaXMyLmdldE1hdGNoSW5kZXhlcyhjdXJyZW50VmFsdWUsZW50aXRpZXMpO3JldHVybntzZWxlY3RlZEVudGl0eUluZGV4Om1hdGNoZXMubGVuZ3RoP21hdGNoZXNbMF06LTEsZW50aXR5TWF0Y2hJbmRleGVzOm1hdGNoZXN9O30pO319LHtrZXk6J3JlbmRlck5vdGlmaWNhdGlvbicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyTm90aWZpY2F0aW9uKCl7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdkaXYnLHtyZWY6J2FyaWEnLGlkOnRoaXMuc3RhdGUuaWQsY2xhc3NOYW1lOnRoaXMucHJvcHMub2Zmc2NyZWVuQ2xhc3MsJ2FyaWEtbGl2ZSc6J3BvbGl0ZSd9LHRoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCkpO319LHtrZXk6J3JlbmRlckhpbnQnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlckhpbnQoKXtpZih0aGlzLnByb3BzLmhpbnQpe3ZhciB1c2VyVGV4dD10aGlzLnN0YXRlLmlucHV0O3ZhciByYXc9dGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQoKTt2YXIgcHJvY2Vzc2VkPScnO2lmKHJhdyYmcmF3LnRvTG93ZXJDYXNlKCkuaW5kZXhPZih1c2VyVGV4dC50b0xvd2VyQ2FzZSgpKT09PTApe3Byb2Nlc3NlZD1yYXcucmVwbGFjZShuZXcgUmVnRXhwKHVzZXJUZXh0LCdpJyksdXNlclRleHQpO31yZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2RpdicsX2V4dGVuZHMoe30sdGhpcy5wcm9wcy5oaW50UHJvcHMse3JlZjonaGludCcsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWlucHV0JywnYi1pbnB1dC1wbGFjZWhvbGRlcicsJ2ItdHlwZWFoZWFkLWhpbnQnLHRoaXMucHJvcHMuaGludFByb3BzLmNsYXNzTmFtZSksdGFiSW5kZXg6Jy0xJ30pLHByb2Nlc3NlZCk7fX19LHtrZXk6J3JlbmRlck1hdGNoZXMnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlck1hdGNoZXMoKXt2YXIgX3RoaXMzPXRoaXM7aWYodGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubGVuZ3RoKXt2YXIgcHJvcHM9dGhpcy5wcm9wcy5tYXRjaFdyYXBwZXJQcm9wcztyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2RpdicsX2V4dGVuZHMoe30scHJvcHMse3JlZjonbWF0Y2hlcycsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXR5cGVhaGVhZC1tYXRjaC13cmFwcGVyJyxwcm9wcy5jbGFzc05hbWUpfSksdGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubWFwKGZ1bmN0aW9uKGluZGV4KXt2YXIgZW50aXR5PV90aGlzMy5wcm9wcy5lbnRpdGllc1tpbmRleF07dmFyIGNsYXNzTmFtZT1lbnRpdHkuY2xhc3NOYW1lLHRleHQ9ZW50aXR5LnRleHQscmVzdD1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZW50aXR5LFsnY2xhc3NOYW1lJywndGV4dCddKTtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2RpdicsX2V4dGVuZHMoe30scmVzdCx7cmVmOidtYXRjaF8kJytpbmRleCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItdHlwZWFoZWFkLW1hdGNoJyxjbGFzc05hbWUseydiLXR5cGVhaGVhZC1tYXRjaC1zZWxlY3RlZCc6X3RoaXMzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXg9PT1pbmRleH0pLGtleTp0ZXh0LG9uQ2xpY2s6X3RoaXMzLmhhbmRsZU1hdGNoQ2xpY2suYmluZChfdGhpczMsaW5kZXgpfSksX3RoaXMzLm1hcmtNYXRjaFN1YnN0cmluZyhfdGhpczMuc3RhdGUuaW5wdXQsZW50aXR5KSk7fSkpO319fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBwcm9wcz10aGlzLnByb3BzLHN0YXRlPXRoaXMuc3RhdGU7cmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdkaXYnLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShwcm9wcyxUeXBlYWhlYWQuaW50ZXJuYWxLZXlzKSx7cmVmOid3cmFwcGVyJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItdHlwZWFoZWFkLXdyYXBwZXInLHByb3BzLmNsYXNzTmFtZSksb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bn0pLHRoaXMucmVuZGVyTm90aWZpY2F0aW9uKCksdGhpcy5yZW5kZXJIaW50KCksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19pbnB1dF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19pbnB1dF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmRlZmF1bHRQcm9wcykse3JlZjonaW5wdXQnLCdhcmlhLWNvbnRyb2xzJzpzdGF0ZS5pZCxpbnB1dFByb3BzOl9leHRlbmRzKHt9LHByb3BzLmlucHV0UHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi10eXBlYWhlYWQnLHByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lKSxvbkNoYW5nZTp0aGlzLmhhbmRsZUNoYW5nZX0pfSkpLHRoaXMucmVuZGVyTWF0Y2hlcygpKTt9fV0pO3JldHVybiBUeXBlYWhlYWQ7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuUHVyZUNvbXBvbmVudCk7VHlwZWFoZWFkLm1vZGU9eydTVEFSVFNfV0lUSCc6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLCdGVVpaWSc6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpfTtUeXBlYWhlYWQucHJvcFR5cGVzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5wcm9wVHlwZXMse2FsZ29yaXRobTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mKFtUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxUeXBlYWhlYWQubW9kZS5GVVpaWV0pLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHttYXJrZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mKFtUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxUeXBlYWhlYWQubW9kZS5GVVpaWV0pXSksbWF0Y2hlcjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2YoW1R5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRILFR5cGVhaGVhZC5tb2RlLkZVWlpZXSldKX0pXSksY2xlYXJPblNlbGVjdGlvbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLGVudGl0aWVzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFycmF5T2YoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoe3RleHQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLmlzUmVxdWlyZWR9KSksaGludDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5ib29sLGhpbnRQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueX0pLG1hdGNoV3JhcHBlclByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYW55fSksb2Zmc2NyZWVuQ2xhc3M6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc3RyaW5nLG9uQ29tcGxldGU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxvbkVudGl0eUhpZ2hsaWdodGVkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMsb25FbnRpdHlTZWxlY3RlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jfSk7VHlwZWFoZWFkLmRlZmF1bHRQcm9wcz1fZXh0ZW5kcyh7fSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2lucHV0X19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzLHthbGdvcml0aG06VHlwZWFoZWFkLm1vZGUuRlVaWlksY2xlYXJPblNlbGVjdGlvbjpmYWxzZSxlbnRpdGllczpbXSxoaW50Om51bGwsaGludFByb3BzOnt9LG1hdGNoV3JhcHBlclByb3BzOnt9LG9mZnNjcmVlbkNsYXNzOidiLW9mZnNjcmVlbicsb25Db21wbGV0ZTpub29wLG9uRW50aXR5SGlnaGxpZ2h0ZWQ6bm9vcCxvbkVudGl0eVNlbGVjdGVkOm5vb3B9KTtUeXBlYWhlYWQuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKFR5cGVhaGVhZC5kZWZhdWx0UHJvcHMpO3ZhciBfaW5pdGlhbGlzZVByb3BzPWZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKXt2YXIgX3RoaXM0PXRoaXM7dGhpcy5zdGF0ZT17ZW50aXR5TWF0Y2hJbmRleGVzOltdLGlkOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxpc0NvbnRyb2xsZWQ6aXNTdHJpbmcodGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKSxpbnB1dDp0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWV8fHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWV8fCcnLHNlbGVjdGVkRW50aXR5SW5kZXg6LTF9O3RoaXMubW91bnRlZD1mYWxzZTt0aGlzLnVwZGF0ZUlucHV0U3RhdGU9ZnVuY3Rpb24oKXt2YXIgdmFsdWU9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOicnO3JldHVybiBfdGhpczQuc2V0U3RhdGUoe2lucHV0OnZhbHVlfSk7fTt0aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dD1mdW5jdGlvbigpe3ZhciBlbnRpdHk9X3RoaXM0LnByb3BzLmVudGl0aWVzW190aGlzNC5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4XTtyZXR1cm4gZW50aXR5P2VudGl0eS50ZXh0OicnO307dGhpcy5yZXNldE1hdGNoZXM9ZnVuY3Rpb24oKXtpZihfdGhpczQubW91bnRlZCl7X3RoaXM0LnNldFN0YXRlKHtzZWxlY3RlZEVudGl0eUluZGV4Oi0xLGVudGl0eU1hdGNoSW5kZXhlczpbXX0pO319O3RoaXMuZ2V0SW5wdXROb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzNC5yZWZzLmlucHV0LnJlZnMuZmllbGQ7fTt0aGlzLnNlbGVjdD1mdW5jdGlvbigpe3ZhciBpbnB1dD1fdGhpczQuZ2V0SW5wdXROb2RlKCk7aW5wdXQuc2VsZWN0aW9uU3RhcnQ9MDtpbnB1dC5zZWxlY3Rpb25FbmQ9X3RoaXM0LmdldFZhbHVlKCkubGVuZ3RoO307dGhpcy5mb2N1cz1mdW5jdGlvbigpe3JldHVybiBfdGhpczQuZ2V0SW5wdXROb2RlKCkuZm9jdXMoKTt9O3RoaXMuZ2V0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXM0LnJlZnMuaW5wdXQuZ2V0VmFsdWUoKTt9O3RoaXMuc2V0VmFsdWU9ZnVuY3Rpb24oKXt2YXIgdmFsdWU9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOicnO190aGlzNC5yZWZzLmlucHV0LnNldFZhbHVlKHZhbHVlKTtfdGhpczQudXBkYXRlSW5wdXRTdGF0ZSh2YWx1ZSk7X3RoaXM0LnJlc2V0TWF0Y2hlcygpO190aGlzNC5mb2N1cygpO307dGhpcy5zZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eT1mdW5jdGlvbigpe190aGlzNC5wcm9wcy5vbkVudGl0eVNlbGVjdGVkKF90aGlzNC5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTtpZihfdGhpczQucHJvcHMuY2xlYXJPblNlbGVjdGlvbil7X3RoaXM0LnNldFZhbHVlKCcnKTt9ZWxzZXtfdGhpczQuc2V0VmFsdWUoX3RoaXM0LmdldFNlbGVjdGVkRW50aXR5VGV4dCgpKTt9d2luZG93LnNldFRpbWVvdXQoX3RoaXM0LnJlc2V0TWF0Y2hlcywwKTt9O3RoaXMubWFya01hdGNoU3Vic3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzNC5nZXRNYXJraW5nRnVuY3Rpb24oKS5hcHBseSh1bmRlZmluZWQsYXJndW1lbnRzKTt9O3RoaXMuZ2V0TWF0Y2hJbmRleGVzPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzNC5nZXRNYXRjaGluZ0Z1bmN0aW9uKCkuYXBwbHkodW5kZWZpbmVkLGFyZ3VtZW50cyk7fTt0aGlzLmhhbmRsZUNoYW5nZT1mdW5jdGlvbihldmVudCl7aWYoX3RoaXM0LnN0YXRlLmlzQ29udHJvbGxlZD09PWZhbHNlKXtfdGhpczQudXBkYXRlSW5wdXRTdGF0ZShldmVudC50YXJnZXQudmFsdWUpO190aGlzNC5jb21wdXRlTWF0Y2hlcygpO31pZihpc0Z1bmN0aW9uKF90aGlzNC5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKSl7X3RoaXM0LnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO319O3RoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihldmVudCl7c3dpdGNoKGV2ZW50LmtleSl7Y2FzZSdBcnJvd0xlZnQnOmlmKGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydD4xKXtldmVudC5zdG9wUHJvcGFnYXRpb24oKTt9YnJlYWs7Y2FzZSdUYWInOmNhc2UnQXJyb3dSaWdodCc6aWYoX3RoaXM0LnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXghPT0tMSYmX3RoaXM0LmN1cnNvckF0RW5kT2ZJbnB1dCgpJiZfdGhpczQuZ2V0SW5wdXROb2RlKCk9PT1ldmVudC50YXJnZXQmJiFldmVudC5zaGlmdEtleSl7ZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpczQuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkoKTt9YnJlYWs7Y2FzZSdBcnJvd1VwJzpldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzNC5zZWxlY3RNYXRjaCgtMSk7X3RoaXM0LmZvY3VzKCk7YnJlYWs7Y2FzZSdBcnJvd0Rvd24nOmV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3RoaXM0LnNlbGVjdE1hdGNoKDEpO190aGlzNC5mb2N1cygpO2JyZWFrO2Nhc2UnRXNjYXBlJzppZihfdGhpczQuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCE9PS0xJiZfdGhpczQuZ2V0SW5wdXROb2RlKCk9PT1ldmVudC50YXJnZXQpe190aGlzNC5yZXNldE1hdGNoZXMoKTt9YnJlYWs7Y2FzZSdFbnRlcic6aWYoX3RoaXM0LnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXghPT0tMSYmX3RoaXM0LmdldElucHV0Tm9kZSgpPT09ZXZlbnQudGFyZ2V0KXtldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzNC5zZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eSgpO31lbHNle190aGlzNC5wcm9wcy5vbkNvbXBsZXRlKF90aGlzNC5zdGF0ZS5pbnB1dCxldmVudCk7fWJyZWFrO31pZihpc0Z1bmN0aW9uKF90aGlzNC5wcm9wcy5vbktleURvd24pKXtfdGhpczQucHJvcHMub25LZXlEb3duKGV2ZW50KTt9fTt9Oy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBUeXBlYWhlYWQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWF0Y2hPcGVyYXRvcnNSZT0vW3xcXFxce30oKVtcXF1eJCsqPy5dL2c7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oc3RyKXtpZih0eXBlb2Ygc3RyIT09J3N0cmluZycpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7fXJldHVybiBzdHIucmVwbGFjZShtYXRjaE9wZXJhdG9yc1JlLCdcXFxcJCYnKTt9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBnZXRJbnRlcnNlY3Rpb247XG5mdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24ob2JqMSxvYmoyKXtyZXR1cm4gT2JqZWN0LmtleXMob2JqMikucmVkdWNlKGZ1bmN0aW9uKGNoaWxkUHJvcHMsa2V5KXtpZihrZXkgaW4gb2JqMSl7Y2hpbGRQcm9wc1trZXldPW9iajFba2V5XTt9cmV0dXJuIGNoaWxkUHJvcHM7fSx7fSk7fVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IG9taXRLZXlzRnJvbVNvdXJjZU9iamVjdDtcbmZ1bmN0aW9uIG9taXRLZXlzRnJvbVNvdXJjZU9iamVjdChzb3VyY2Upe3ZhciBvbWl0dGVkS2V5cz1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06W107cmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIHJlbG9jYXRlQWNjZXB0ZWRLZXlzKGhhc2gsa2V5KXtpZihvbWl0dGVkS2V5cy5pbmRleE9mKGtleSk9PT0tMSl7aGFzaFtrZXldPXNvdXJjZVtrZXldO31yZXR1cm4gaGFzaDt9LHt9KTt9XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoZnVuY3Rpb24gZGV0ZWN0VHJhbnNmb3JtUHJvcGVydHkoKXt2YXIgcHJvcHM9Wyd0cmFuc2Zvcm0nLCdXZWJraXRUcmFuc2Zvcm0nLCdNb3pUcmFuc2Zvcm0nLCdPVHJhbnNmb3JtJywnbXNUcmFuc2Zvcm0nLCd3ZWJraXQtdHJhbnNmb3JtJ107Zm9yKHZhciBpPTAsbGVuPXByb3BzLmxlbmd0aDtpPGxlbjtpKyspe2lmKHByb3BzW2ldaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKXtyZXR1cm4gcHJvcHNbaV07fX1yZXR1cm4gZmFsc2U7fSkoKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gdXVpZDtcbmZ1bmN0aW9uIHV1aWQoKXtyZXR1cm4nYi0nKyhbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZyxmdW5jdGlvbihhKXtyZXR1cm4oYV5NYXRoLnJhbmRvbSgpKjE2Pj5hLzQpLnRvU3RyaW5nKDE2KTt9KTt9XG5cbi8qKiovIH0pLFxuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXztcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gYm91bmRsZXNzLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2V4cG9ydHMuanNcIik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMTFkM2NiYjJkMzdmYTY4OGMxZTIiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY2xhc3NuYW1lcy9pbmRleC5qcyIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QsIHtDaGlsZHJlbiwgUHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2ZpbmRET01Ob2RlfSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcbmltcG9ydCB1dWlkIGZyb20gJ2JvdW5kbGVzcy11dGlscy11dWlkJztcblxuY29uc3QgREFUQV9BVFRSSUJVVEVfSU5ERVggPSAnZGF0YS1mb2N1cy1pbmRleCc7XG5jb25zdCBEQVRBX0FUVFJJQlVURV9TS0lQID0gJ2RhdGEtZm9jdXMtc2tpcCc7XG5cbi8qKlxuX19BIGhpZ2hlci1vcmRlciBjb21wb25lbnQgZm9yIGFycm93IGtleSBuYXZpZ2F0aW9uIG9uIGEgZ3JvdXBpbmcgb2YgY2hpbGRyZW4uX19cblxuQXJyb3dLZXlOYXZpZ2F0aW9uIGlzIGRlc2lnbmVkIG5vdCB0byBjYXJlIGFib3V0IHRoZSBjb21wb25lbnQgdHlwZXMgaXQgaXMgd3JhcHBpbmcuIER1ZSB0byB0aGlzLCB5b3UgY2FuIHBhc3Mgd2hhdGV2ZXIgSFRNTCB0YWcgeW91IGxpa2UgaW50byBgcHJvcHMuY29tcG9uZW50YCBvciBldmVuIGEgUmVhY3QgY29tcG9uZW50IHlvdSd2ZSBtYWRlIGVsc2V3aGVyZS4gQWRkaXRpb25hbCBwcm9wcyBwYXNzZWQgdG8gYDxBcnJvd0tleU5hdmlnYXRpb24gLi4uPmAgd2lsbCBiZSBmb3J3YXJkZWQgb24gdG8gdGhlIGNvbXBvbmVudCBvciBIVE1MIHRhZyBuYW1lIHlvdSd2ZSBzdXBwbGllZC5cblxuVGhlIGNoaWxkcmVuLCBzaW1pbGFybHksIGNhbiBiZSBhbnkgdHlwZSBvZiBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFycm93S2V5TmF2aWdhdGlvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBtb2RlID0ge1xuICAgICAgICBIT1JJWk9OVEFMOiB1dWlkKCksXG4gICAgICAgIFZFUlRJQ0FMOiB1dWlkKCksXG4gICAgICAgIEJPVEg6IHV1aWQoKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAgICBBbnkgdmFsaWQgSFRNTCB0YWcgbmFtZSBvciBhIFJlYWN0IGNvbXBvbmVudCBmYWN0b3J5LCBhbnl0aGluZyB0aGF0IGNhbiBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGBSZWFjdC5jcmVhdGVFbGVtZW50YFxuICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICAgIEFsbG93cyBmb3IgYSBwYXJ0aWN1bGFyIGNoaWxkIHRvIGJlIGluaXRpYWxseSByZWFjaGFibGUgdmlhIHRhYmJpbmc7IG9ubHkgYXBwbGllZCBkdXJpbmcgZmlyc3QgcmVuZGVyXG4gICAgICAgICovXG4gICAgICAgIGRlZmF1bHRBY3RpdmVDaGlsZEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250cm9scyB3aGljaCBhcnJvdyBrZXkgZXZlbnRzIGFyZSBjYXB0dXJlZCB0byBtb3ZlIGFjdGl2ZSBmb2N1cyB3aXRoaW4gdGhlIGxpc3Q6XG4gICAgICAgICAqXG4gICAgICAgICAqIE1vZGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtleXNcbiAgICAgICAgICogLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgLS0tLVxuICAgICAgICAgKiBgQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USGAgICAgICAgfCDirIXvuI8g4p6h77iPIOKshu+4jyDirIfvuI9cbiAgICAgICAgICogYEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkhPUklaT05UQUxgIHwg4qyF77iPIOKeoe+4j1xuICAgICAgICAgKiBgQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuVkVSVElDQUxgICAgfCDirIbvuI8g4qyH77iPXG4gICAgICAgICAqXG4gICAgICAgICAqIF9Ob3RlOiBmb2N1cyBsb29wcyB3aGVuIGFycm93aW5nIHBhc3Qgb25lIG9mIHRoZSBib3VuZGFyaWVzOyB0YWJiaW5nIG1vdmVzIHRoZSB1c2VyIGF3YXkgZnJvbSB0aGUgbGlzdC5fXG4gICAgICAgICovXG4gICAgICAgIG1vZGU6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICAgICBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RILFxuICAgICAgICAgICAgQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTCxcbiAgICAgICAgICAgIEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMLFxuICAgICAgICBdKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDogMCxcbiAgICAgICAgbW9kZTogQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCxcbiAgICAgICAgb25LZXlEb3duOiAoKSA9PiB7fSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoQXJyb3dLZXlOYXZpZ2F0aW9uLmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBhY3RpdmVDaGlsZEluZGV4OiB0aGlzLnByb3BzLmRlZmF1bHRBY3RpdmVDaGlsZEluZGV4LFxuICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgfVxuXG4gICAgZ2V0RmlsdGVyZWRDaGlsZHJlbihwcm9wcyA9IHRoaXMucHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIENoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZpbHRlcihCb29sZWFuKTtcbiAgICB9XG5cbiAgICBzZXRBY3RpdmVDaGlsZEluZGV4KCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBudW1DaGlsZHJlbiA9IENoaWxkcmVuLmNvdW50KHRoaXMuc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgICAgICBpZiAobnVtQ2hpbGRyZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthY3RpdmVDaGlsZEluZGV4OiAwfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCA+PSBudW1DaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2FjdGl2ZUNoaWxkSW5kZXg6IG51bUNoaWxkcmVuIC0gMX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkgeyB0aGlzLnNldFN0YXRlKHtjaGlsZHJlbjogdGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKCl9KTsgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5jaGlsZHJlbiAhPT0gdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe2NoaWxkcmVuOiB0aGlzLmdldEZpbHRlcmVkQ2hpbGRyZW4obmV4dFByb3BzKX0sIHRoaXMuc2V0QWN0aXZlQ2hpbGRJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldEFjdGl2ZUNoaWxkSW5kZXgoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCAhPT0gcHJldlN0YXRlLmFjdGl2ZUNoaWxkSW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9jdXModGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEZvY3VzKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHRoaXMuJHdyYXBwZXIuY2hpbGRyZW5baW5kZXhdO1xuXG4gICAgICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmhhc0F0dHJpYnV0ZShEQVRBX0FUVFJJQlVURV9TS0lQKSkge1xuICAgICAgICAgICAgdGhpcy5tb3ZlRm9jdXMoXG4gICAgICAgICAgICAgICAgY2hpbGROb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcgPyAtMSA6IDFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGROb2RlICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgY2hpbGROb2RlLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlRm9jdXMoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgbnVtQ2hpbGRyZW4gPSB0aGlzLnN0YXRlLmNoaWxkcmVuID8gQ2hpbGRyZW4uY291bnQodGhpcy5zdGF0ZS5jaGlsZHJlbikgOiAwO1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gdGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ICsgZGVsdGE7XG5cbiAgICAgICAgaWYgKG5leHRJbmRleCA+PSBudW1DaGlsZHJlbikge1xuICAgICAgICAgICAgbmV4dEluZGV4ID0gMDsgLy8gbG9vcFxuICAgICAgICB9IGVsc2UgaWYgKG5leHRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIG5leHRJbmRleCA9IG51bUNoaWxkcmVuIC0gMTsgLy8gcmV2ZXJzZSBsb29wXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHthY3RpdmVDaGlsZEluZGV4OiBuZXh0SW5kZXh9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuVkVSVElDQUxcbiAgICAgICAgICAgICAgICB8fCB0aGlzLnByb3BzLm1vZGUgPT09IEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkJPVEgpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUZvY3VzKC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkhPUklaT05UQUxcbiAgICAgICAgICAgICAgICB8fCB0aGlzLnByb3BzLm1vZGUgPT09IEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkJPVEgpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUZvY3VzKC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1cygxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1cygxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbktleURvd24pIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUZvY3VzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQuaGFzQXR0cmlidXRlKERBVEFfQVRUUklCVVRFX0lOREVYKSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKERBVEFfQVRUUklCVVRFX0lOREVYKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBDaGlsZHJlbi50b0FycmF5KHRoaXMuc3RhdGUuY2hpbGRyZW4pW2luZGV4XTtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDogaW5kZXh9KTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gQ2hpbGRyZW4ubWFwKHRoaXMuc3RhdGUuY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgICAgICBbREFUQV9BVFRSSUJVVEVfSU5ERVhdOiBpbmRleCxcbiAgICAgICAgICAgICAgICBbREFUQV9BVFRSSUJVVEVfU0tJUF06IHBhcnNlSW50KGNoaWxkLnByb3BzLnRhYkluZGV4LCAxMCkgPT09IC0xIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBrZXk6IGNoaWxkLmtleSB8fCBpbmRleCxcbiAgICAgICAgICAgICAgICB0YWJJbmRleDogdGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ID09PSBpbmRleCA/IDAgOiAtMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwZXJzaXN0V3JhcHBlckVsZW1lbnRSZWZlcmVuY2UgPSAodW5rbm93blR5cGUpID0+IHtcbiAgICAgICAgdGhpcy4kd3JhcHBlciA9IHVua25vd25UeXBlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyB1bmtub3duVHlwZSA6IGZpbmRET01Ob2RlKHVua25vd25UeXBlKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBBcnJvd0tleU5hdmlnYXRpb24uaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9e3RoaXMucGVyc2lzdFdyYXBwZXJFbGVtZW50UmVmZXJlbmNlfVxuICAgICAgICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXN9XG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNoaWxkcmVuKCl9XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbi9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgZ2V0ID0gKGJhc2UsIHBhdGgsIGZhbGxiYWNrKSA9PiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKChjdXJyZW50LCBmcmFnbWVudCkgPT4gY3VycmVudFtmcmFnbWVudF0gfHwgZmFsbGJhY2ssIGJhc2UpO1xuXG4vKipcbiAqIF9fQSBoaWdoZXItb3JkZXIgY29tcG9uZW50IGZvciByZW5kZXJpbmcgZGF0YSB0aGF0IGlzbid0IHJlYWR5IHlldC5fX1xuICpcbiAqIFRoZXJlIGFyZSBwbGVudHkgb2Ygc2l0dWF0aW9ucyB3aGVyZSB5b3UgbmVlZCB0byBmZXRjaCBjb250ZW50IHRvIGJlIGRpc3BsYXllZCwgYnV0IHdhbnRcbiAqIHRvIHNob3cgc29tZSBzb3J0IG9mIGxvYWRpbmcgZ3JhcGhpYyBpbiB0aGUgaW50ZXJpbS4gVGhpcyBjb21wb25lbnQgaGVscHMgdG8gc2ltcGxpZnlcbiAqIHRoYXQgcGF0dGVybiBieSBoYW5kbGluZyBjb21tb24gdHlwZXMgb2YgcHJvbWlzZXMgYW5kIHByb3ZpZGluZyBhIHNpbXBsZSBtZWNoYW5pc21cbiAqIGZvciBtYXRlcmlhbGl6aW5nIHRoZSBmdWxmaWxsZWQgcGF5bG9hZCBpbnRvIEpTWC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXN5bmMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgcHJvbWlzZSwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZSwgb3Igb3RoZXIgdHlwZSBvZiByZW5kZXJhYmxlIGNvbnRlbnQ7IGlmIGEgZnVuY3Rpb24gaXMgcGFzc2VkLCBpdCB3aWxsXG4gICAgICAgICAqIGJlIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHByb3BzXG4gICAgICAgICAqXG4gICAgICAgICAqIFByb21pc2UgZXhhbXBsZTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIGNvbnN0IGxpc3REYXRhUHJvbWlzZSA9IGZldGNoKCcvc29tZS9saXN0L2RhdGEvZW5kcG9pbnQnKS50aGVuKFxuICAgICAgICAgKiAgICAgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5vayA/IHJlc3BvbnNlLmpzb24oKSA6ICdGYWlsZWQgdG8gcmVjZWl2ZSBsaXN0IGRhdGEnLFxuICAgICAgICAgKiAgICAgKGVycm9yKSA9PiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgKiApLnRoZW4oKHBheWxvYWQpID0+IHtcbiAgICAgICAgICogICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICogICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPSdlcnJvcic+e3BheWxvYWR9PC9kaXY+KTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIHJldHVybiAoXG4gICAgICAgICAqICAgICAgICAgPHVsPlxuICAgICAgICAgKiAgICAgICAgICAgICB7cGF5bG9hZC5tYXAoKGl0ZW0pID0+ICg8bGkga2V5PXtpdGVtLmlkfT57aXRlbS5jb250ZW50fTwvbGk+KSl9XG4gICAgICAgICAqICAgICAgICAgPC91bD5cbiAgICAgICAgICogICAgICk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiA8QXN5bmM+e2xpc3REYXRhUHJvbWlzZX08L0FzeW5jPlxuICAgICAgICAgKlxuICAgICAgICAgKiBGdW5jdGlvbiBleGFtcGxlOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBqc3hcbiAgICAgICAgICogY29uc3QgZmV0Y2hMaXN0RGF0YSA9IChwcm9wcykgPT4gZmV0Y2gocHJvcHNbJ2RhdGEtZW5kcG9pbnQnXSkudGhlbihcbiAgICAgICAgICogICAgIChyZXNwb25zZSkgPT4gcmVzcG9uc2Uub2sgPyByZXNwb25zZS5qc29uKCkgOiAnRmFpbGVkIHRvIHJlY2VpdmUgbGlzdCBkYXRhJyxcbiAgICAgICAgICogICAgIChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICogKS50aGVuKChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAqICAgICBpZiAodHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAqICAgICAgICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT0nZXJyb3InPntwYXlsb2FkfTwvZGl2Pik7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICByZXR1cm4gKFxuICAgICAgICAgKiAgICAgICAgIDx1bD5cbiAgICAgICAgICogICAgICAgICAgICAge3BheWxvYWQubWFwKChpdGVtKSA9PiAoPGxpIGtleT17aXRlbS5pZH0+e2l0ZW0uY29udGVudH08L2xpPikpfVxuICAgICAgICAgKiAgICAgICAgIDwvdWw+XG4gICAgICAgICAqICAgICApO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogPEFzeW5jIGRhdGEtZW5kcG9pbnQ9Jy9zb21lL2xpc3QvZGF0YS9lbmRwb2ludCc+e2ZldGNoTGlzdERhdGF9PC9Bc3luYz5cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmluc3RhbmNlT2YoUHJvbWlzZSksXG4gICAgICAgIF0pLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqIGEgY2FsbGJhY2sgZm9yIHdoZW4gcmVhbCBjb250ZW50IGhhcyBiZWVuIHJlbmRlcmVkOyB0aGlzIHdpbGwgYmUgY2FsbGVkIGltbWVkaWF0ZWx5IGlmIG5vcm1hbCBKU1ggaXMgcGFzc2VkIHRvIEFzeW5jLCBvciwgaW4gdGhlIGNhc2Ugb2YgYSBwcm9taXNlLCB1cG9uIHJlc29sdXRpb24gb3IgcmVqZWN0aW9uICovXG4gICAgICAgIGNoaWxkcmVuRGlkUmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKiogY29udGVudCB0byBiZSBzaG93biB3aGlsZSB0aGUgcHJvbWlzZSBpcyBpbiBcInBlbmRpbmdcIiBzdGF0ZSAobGlrZSBhIGxvYWRpbmcgZ3JhcGhpYywgcGVyaGFwcykgKi9cbiAgICAgICAgcGVuZGluZ0NvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNoaWxkcmVuOiA8ZGl2IC8+LFxuICAgICAgICBjaGlsZHJlbkRpZFJlbmRlcjogKCkgPT4ge30sXG4gICAgICAgIHBlbmRpbmdDb250ZW50OiA8ZGl2IC8+LFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhBc3luYy5kZWZhdWx0UHJvcHMpXG5cbiAgICBtb3VudGVkID0gZmFsc2VcbiAgICBwcm9taXNlID0gbnVsbFxuICAgIHN0YXRlID0ge31cblxuICAgIGhhbmRsZVByb21pc2VGdWxmaWxsbWVudChjb250ZXh0LCBwYXlsb2FkKSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VudGVkKSB7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIG9ubHkgc2V0IHRoZSBjb21wb25lbnQgaWYgdGhlIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgbWF0Y2hlc1xuICAgICAgICAvLyB0aGUgb25lIHdlJ3JlIHRyYWNraW5nIGluIHN0YXRlLCBvdGhlcndpc2UgaWdub3JlIGl0IGFuZCByZXRhaW4gdGhlIHByZXZpb3VzIGRhdGFcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiByZW5kZXJQYXlsb2FkSWZQcm9taXNlTWF0Y2hlcyhzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvbWlzZSA9PT0gY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge2NvbXBvbmVudDogcGF5bG9hZH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSwgdGhpcy5maXJlUmVuZGVyQ2FsbGJhY2spO1xuICAgIH1cblxuICAgIGhhbmRsZUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gY2hpbGRyZW47XG5cbiAgICAgICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7Y29tcG9uZW50OiBjb250ZW50fSwgdGhpcy5maXJlUmVuZGVyQ2FsbGJhY2spO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVDaGlsZHJlbihjb250ZW50KHRoaXMucHJvcHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJvdW5kSGFuZGxlciA9IHRoaXMuaGFuZGxlUHJvbWlzZUZ1bGZpbGxtZW50LmJpbmQodGhpcywgY29udGVudCk7XG5cbiAgICAgICAgLy8gdGhpcyBpcyBrZXB0IG91dHNpZGUgc3RhdGUgc28gaXQgY2FuIGJlIHNldCBpbW1lZGlhdGVseSBpZiB0aGUgcHJvcHMgY2hhbmdlXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IGNvbnRlbnQ7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29tcG9uZW50OiBudWxsfSwgKCkgPT4gY29udGVudC50aGVuKGJvdW5kSGFuZGxlciwgYm91bmRIYW5kbGVyKSk7XG4gICAgfVxuXG4gICAgZmlyZVJlbmRlckNhbGxiYWNrKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5EaWRSZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpICAgICAgICAgICAgICAgICB7IHRoaXMuaGFuZGxlQ2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbik7IH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpICAgICAgICAgICAgICAgICAgeyB0aGlzLm1vdW50ZWQgPSB0cnVlOyB9XG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHsgdGhpcy5oYW5kbGVDaGlsZHJlbihuZXh0UHJvcHMuY2hpbGRyZW4pOyB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSAgICAgICAgICAgICAgIHsgdGhpcy5tb3VudGVkID0gZmFsc2U7IH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge3Byb3BzLCBzdGF0ZX0gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoc3RhdGUuY29tcG9uZW50IHx8IHByb3BzLnBlbmRpbmdDb250ZW50LCB7XG4gICAgICAgICAgICAuLi5vbWl0KHByb3BzLCBBc3luYy5pbnRlcm5hbEtleXMpLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjeChcbiAgICAgICAgICAgICAgICAnYi1hc3luYycsXG4gICAgICAgICAgICAgICAgcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHN0YXRlLmNvbXBvbmVudCA9PT0gbnVsbCAmJiBnZXQocHJvcHMsICdwZW5kaW5nQ29udGVudC5wcm9wcy5jbGFzc05hbWUnKSxcbiAgICAgICAgICAgICAgICBzdGF0ZS5jb21wb25lbnQgJiYgZ2V0KHN0YXRlLCAnY29tcG9uZW50LnByb3BzLmNsYXNzTmFtZScsICcnKSxcbiAgICAgICAgICAgICAgICB7J2ItYXN5bmMtcGVuZGluZyc6IHN0YXRlLmNvbXBvbmVudCA9PT0gbnVsbH1cbiAgICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1hc3luYy9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuLyoqXG5fX0EgY29udHJvbCB3aXRoIFwicHJlc3NlZFwiIHN0YXRlIHN1cHBvcnQuX19cblxuQnV0dG9uIGhhcyB0d28gbW9kZXMgb2Ygb3BlcmF0aW9uOlxuXG4xLiBzdGF0ZWxlc3MgKGxpa2UgYSBub3JtYWwgYDxidXR0b24+YClcbiAgIGBgYGpzeFxuICAgPEJ1dHRvbiBvblByZXNzZWQ9e2RvU29tZXRoaW5nfT5mb288L0J1dHRvbj5cbiAgIGBgYFxuXG4gICA+IE5vdGUgdGhhdCBpbnN0ZWFkIG9mIGBvbkNsaWNrYCwgQnV0dG9uIHVzZXMgYG9uUHJlc3NlZGAuIFRoaXMgaXMgYmVjYXVzZSB0aGUgY29tcG9uZW50IGFsc28gbGlzdGVucyBmb3Iga2V5Ym9hcmQgPGtiZD5FbnRlcjwva2JkPiBldmVudHMsIHNvIGBvbkNsaWNrYCBvbmx5IHRlbGxzIGhhbGYgdGhlIHN0b3J5LiBZb3UgY2FuIHN0aWxsIGJpbmQgdG8gdGhhdCBwYXJ0aWN1bGFyIFJlYWN0IGV2ZW50IHRob3VnaCBpZiB0aGVyZSdzIGEgbmVlZCB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gY2xpY2tzIGFuZCBFbnRlciBwcmVzc2VzLlxuXG4yLiBzdGF0ZWZ1bCAobGlrZSBhIHRvZ2dsZSwgZS5nLiBib2xkLW1vZGUgaW4gYSByaWNoIHRleHQgZWRpdG9yKVxuXG4gICBcInN0YXRlZnVsXCIgbW9kZSBpcyB0cmlnZ2VyZWQgYnkgcGFzc2luZyBhIGJvb2xlYW4gdG8gYHByb3BzLnByZXNzZWRgLiBUaGlzIGVuYWJsZXMgdGhlIGJ1dHRvbiB0byBhY3QgbGlrZSBhIGNvbnRyb2xsZWQgY29tcG9uZW50LiBUaGUgYG9uVW5wcmVzc2VkYCBldmVudCBjYWxsYmFjayB3aWxsIGFsc28gbm93IGJlIGZpcmVkIHdoZW4gYXBwcm9wcmlhdGUuXG5cbiAgIGBgYGpzeFxuICAgPEJ1dHRvblxuICAgICAgIHByZXNzZWQ9e3RydWV9XG4gICAgICAgb25QcmVzc2VkPXtkb1NvbWV0aGluZ31cbiAgICAgICBvblVucHJlc3NlZD17ZG9Tb21ldGhpbmdFbHNlfT5cbiAgICAgICBmb29cbiAgIDwvQnV0dG9uPlxuICAgYGBgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW55IHZhbGlkIEhUTUwgdGFnIG5hbWUgb3IgYSBSZWFjdENvbXBvbmVudCwgYW55dGhpbmcgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAgICAgKiBmaXJzdCBhcmd1bWVudCB0byBgUmVhY3QuY3JlYXRlRWxlbWVudGA7IG5vdGUgdGhhdCB0aGlzIGNvbXBvbmVudCBzZXRzIHRoZSBgcm9sZWAgYW5kIGBhcmlhLWNoZWNrZWRgXG4gICAgICAgICAqIGF0dHJpYnV0ZXMgc28gbm9uLWA8YnV0dG9uPmAgZWxlbWVudHMgd2lsbCBzdGlsbCBiZWhhdmUgbGlrZSBhIGJ1dHRvbiBmb3Igc2NyZWVuIHJlYWRlcnNcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2UgdGhpcyBjYWxsYmFjayBpbnN0ZWFkIG9mIGBvbkNsaWNrYCAoaXQncyBgb25DbGlja2AgKyBgb25LZXlEb3duOkVudGVyYCk7IGZpcmVzIGZvciBib3RoIGJ1dHRvbiBtb2Rlc1xuICAgICAgICAgKi9cbiAgICAgICAgb25QcmVzc2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgYmVjb21lcyBcInVucHJlc3NlZFwiOyBvbmx5IGZpcmVzIHdoZW4gdGhlIEJ1dHRvbiBpcyBpbiBzdGF0ZWZ1bCBtb2RlXG4gICAgICAgICAqL1xuICAgICAgICBvblVucHJlc3NlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBhc3N0aHJvdWdoIHRvIGBhcmlhLXByZXNzZWRgOyB1c2luZyB0aGlzIHByb3AgdHVybnMgb24gdGhlIGBvblVucHJlc3NlZGAgY2FsbGJhY2sgd2hlbiBhcHBsaWNhYmxlXG4gICAgICAgICAqL1xuICAgICAgICBwcmVzc2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjb21wb25lbnQ6ICdidXR0b24nLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7fSxcbiAgICAgICAgb25LZXlEb3duOiAoKSA9PiB7fSxcbiAgICAgICAgb25QcmVzc2VkOiAoKSA9PiB7fSxcbiAgICAgICAgb25VbnByZXNzZWQ6ICgpID0+IHt9LFxuICAgICAgICBwcmVzc2VkOiB1bmRlZmluZWQsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKEJ1dHRvbi5kZWZhdWx0UHJvcHMpXG5cbiAgICBmaXJlU3RhdGVmdWxDYWxsYmFjayhldmVudCkge1xuICAgICAgICB0aGlzLnByb3BzW3RoaXMucHJvcHMucHJlc3NlZCA/ICdvblVucHJlc3NlZCcgOiAnb25QcmVzc2VkJ10oZXZlbnQpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIHRoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgY2FzZSAnU3BhY2UnOlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgQnV0dG9uLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1idXR0b24nLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1idXR0b24tcHJlc3NhYmxlJzogdGhpcy5wcm9wcy5wcmVzc2VkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICdiLWJ1dHRvbi1wcmVzc2VkJzogdGhpcy5wcm9wcy5wcmVzc2VkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIGFyaWEtcHJlc3NlZD17dGhpcy5wcm9wcy5wcmVzc2VkfVxuICAgICAgICAgICAgICAgIHJvbGU9J2J1dHRvbidcbiAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnYm91bmRsZXNzLWNoZWNrYm94JztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8qKlxuX19BIGNvbnRyb2xsZXIgdmlldyBmb3IgbWFuYWdpbmcgdGhlIGFnZ3JlZ2F0ZSBzdGF0ZSBvZiBtdWx0aXBsZSwgcmVsYXRlZCBjaGVja2JveGVzLl9fXG5cblRoZSBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgYENoZWNrYm94R3JvdXBgIGlzIGEgXCJzZWxlY3QgYWxsXCIgLyBjaGlsZHJlbiBzY2VuYXJpby4gVGhpcyBwYXJ0aWN1bGFyXG5jb25maWd1cmF0aW9uIGlzIGJ1aWx0LWluIGFuZCBpcyBhY3RpdmF0ZWQgYnkgcGFzc2luZyB0aGUgYHNlbGVjdEFsbGAgcHJvcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tib3hHcm91cCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBzZWxlY3RBbGwgPSB7XG4gICAgICAgIEJFRk9SRTogdXVpZCgpLFxuICAgICAgICBBRlRFUjogdXVpZCgpLFxuICAgICAgICBOT05FOiB1dWlkKCksXG4gICAgfVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZSB0aGUgd3JhcHBlciBIVE1MIGVsZW1lbnQgaWYgZGVzaXJlZFxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgZGF0YSB3aXNoZWQgdG8gYmUgcmVuZGVyZWQsIGVhY2ggaXRlbSBtdXN0IGNvbmZvcm0gdG8gdGhlIFtDaGVja2JveCBwcm9wIHNwZWNdKC4vQ2hlY2tib3gjcHJvcHMpXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoQ2hlY2tib3gucHJvcFR5cGVzLmlucHV0UHJvcHMpLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGFsbCBjaGlsZHJlbiBiZWNvbWUgY2hlY2tlZCAobm90IGZpcmVkIG9uIGZpcnN0IHJlbmRlciksIG5vIHJldHVyblxuICAgICAgICAgKi9cbiAgICAgICAgb25BbGxDaGVja2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYWxsIGNoaWxkcmVuIGJlY29tZSB1bmNoZWNrZWQgKG5vdCBmaXJlZCBvbiBmaXJzdCByZW5kZXIpLCBubyByZXR1cm5cbiAgICAgICAgICovXG4gICAgICAgIG9uQWxsVW5jaGVja2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBzcGVjaWZpYyBjaGlsZCBoYXMgYmVjb21lIGNoZWNrZWQsIHJldHVybnMgdGhlIGNoaWxkIGRlZmluaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIG9uQ2hpbGRDaGVja2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBzcGVjaWZpYyBjaGlsZCBoYXMgYmVjb21lIGNoZWNrZWQsIHJldHVybnMgdGhlIGNoaWxkIGRlZmluaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIG9uQ2hpbGRVbmNoZWNrZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZW5kZXJzIGEgbWFzdGVyIGNoZWNrYm94IHRoYXQgY2FuIG1hbmlwdWxhdGUgdGhlIHZhbHVlcyBvZiBhbGwgY2hpbGRyZW4gc2ltdWx0YW5lb3VzbHlcbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdEFsbDogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICAgICAgIENoZWNrYm94R3JvdXAuc2VsZWN0QWxsLkJFRk9SRSxcbiAgICAgICAgICAgIENoZWNrYm94R3JvdXAuc2VsZWN0QWxsLkFGVEVSLFxuICAgICAgICAgICAgQ2hlY2tib3hHcm91cC5zZWxlY3RBbGwuTk9ORSxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG11c3QgY29uZm9ybSB0byB0aGUgW0NoZWNrYm94IHByb3Agc3BlY10oLi9DaGVja2JveCNwcm9wcylcbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdEFsbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHRoZSB0ZXh0IG9yIHJlbmRlcmFibGUgbm9kZSB0byBkaXNwbGF5IG5leHQgdG8gdGhlIGNoZWNrYm94XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgfSksXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY29tcG9uZW50OiAnZGl2JyxcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBvbkFsbENoZWNrZWQ6IG5vb3AsXG4gICAgICAgIG9uQWxsVW5jaGVja2VkOiBub29wLFxuICAgICAgICBvbkNoaWxkQ2hlY2tlZDogbm9vcCxcbiAgICAgICAgb25DaGlsZFVuY2hlY2tlZDogbm9vcCxcbiAgICAgICAgc2VsZWN0QWxsOiBDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5CRUZPUkUsXG4gICAgICAgIHNlbGVjdEFsbFByb3BzOiB7fSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoQ2hlY2tib3hHcm91cC5kZWZhdWx0UHJvcHMpXG5cbiAgICBzZWxlY3RBbGxVVUlEID0gdXVpZCgpXG5cbiAgICBhbGxJdGVtc0NoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLml0ZW1zLmV2ZXJ5KChpdGVtKSA9PiBpdGVtLmlucHV0UHJvcHMuY2hlY2tlZCA9PT0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgYW55SXRlbXNDaGVja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pdGVtcy5zb21lKChpdGVtKSA9PiBpdGVtLmlucHV0UHJvcHMuY2hlY2tlZCA9PT0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyU2VsZWN0QWxsQ2hlY2tib3goKSB7XG4gICAgICAgIGNvbnN0IGFsbENoZWNrZWQgPSB0aGlzLmFsbEl0ZW1zQ2hlY2tlZCgpO1xuICAgICAgICBjb25zdCB7aW5wdXRQcm9wc30gPSB0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wc31cbiAgICAgICAgICAgICAgICBrZXk9e3RoaXMuc2VsZWN0QWxsVVVJRH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94LWdyb3VwLWFsbCcsIHRoaXMucHJvcHMuc2VsZWN0QWxsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgIC4uLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGFsbENoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6ICFhbGxDaGVja2VkICYmIHRoaXMuYW55SXRlbXNDaGVja2VkKCksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlucHV0UHJvcHMgJiYgaW5wdXRQcm9wcy5uYW1lID8gaW5wdXRQcm9wcy5uYW1lIDogbnVsbCxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzLmxhYmVsIHx8ICdTZWxlY3QgQWxsJ31cbiAgICAgICAgICAgICAgICBvbkNoZWNrZWQ9e3RoaXMucHJvcHMub25BbGxDaGVja2VkfVxuICAgICAgICAgICAgICAgIG9uVW5jaGVja2VkPXt0aGlzLnByb3BzLm9uQWxsVW5jaGVja2VkfSAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckNoZWNrYm94ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgey4uLml0ZW19XG4gICAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5pbnB1dFByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hlY2tlZD17dGhpcy5wcm9wcy5vbkNoaWxkQ2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgb25VbmNoZWNrZWQ9e3RoaXMucHJvcHMub25DaGlsZFVuY2hlY2tlZH0gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFt0aGlzLnJlbmRlckNoZWNrYm94ZXMoKV07XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLnNlbGVjdEFsbCkge1xuICAgICAgICBjYXNlIENoZWNrYm94R3JvdXAuc2VsZWN0QWxsLkJFRk9SRTpcbiAgICAgICAgICAgIGNoaWxkcmVuLnVuc2hpZnQodGhpcy5yZW5kZXJTZWxlY3RBbGxDaGVja2JveCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ2hlY2tib3hHcm91cC5zZWxlY3RBbGwuQUZURVI6XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMucmVuZGVyU2VsZWN0QWxsQ2hlY2tib3goKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBDaGVja2JveEdyb3VwLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1jaGVja2JveC1ncm91cCcsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ2hpbGRyZW4oKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG4vKipcbl9fQW4gYWNjZXNzaWJsZSBjaGVja2JveCB3aXRoIGluZGV0ZXJtaW5hdGUgc3VwcG9ydC5fX1xuXG5DaGVja2JveCBpcyBpbXBsZW1lbnRlZCBhcyBhIFwiY29udHJvbGxlZCBpbnB1dFwiLCBtZWFuaW5nIGl0IGlzIGEgZGlyZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBkYXRhIHBhc3NlZFxuaW5zaWRlLiBVc2VyIGludGVyYWN0aW9uIHdpbGwgYnViYmxlIGNoYW5nZXMgaW4gdGhlIGZvcm0gb2YgYG9uQ2hlY2tlZGAgYW5kIGBvblVuY2hlY2tlZGAgdGhhdCBhIGNvbnRyb2xsZXJcbnZpZXcgbXVzdCBpbnRlcmNlcHQgYW5kIGFwcGx5IGFnYWluc3QgdGhlIGRhdGEgcHJvdmlkZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrYm94IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgdmFsaWQgSFRNTCB0YWcgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbGwgaW5wdXQtc3BlY2lmaWMgcHJvcHMgbGlrZSBgdmFsdWVgLCBgbmFtZWAsIGV0YyBzaG91bGQgYmUgcGFzc2VkIGhlcmUgLS0gY29tbW9uIG9uZXMgYXJlIGxpc3RlZCBiZWxvd1xuICAgICAgICAgKi9cbiAgICAgICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkZXRlcm1pbmVzIGlmIHRoZSBjaGVja2JveCBpcyByZW5kZXJlZCBhcyBjaGVja2VkL3VuY2hlY2tlZCwgc2VlIFJlYWN0IFtcImNvbnRyb2xsZWQgaW5wdXRzXCJdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHMpKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHByZXZlbnRzIHRoZSBgb257Q2hlY2tlZCxVbmNoZWNrZWR9YCBldmVudHMgZnJvbSBmaXJpbmcgd2hlbiBgdHJ1ZWBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogZW5hYmxlcyBvciBkaXNhYmxlcyBcIm1peGVkXCIgY2hlY2tib3ggc3RhdGUsIHJlYWQgdGhpcyBbQ1NTLVRyaWNrcyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2luZGV0ZXJtaW5hdGUtY2hlY2tib3hlcy8pICBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5kZXRlcm1pbmF0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHJlbmRlcmVkIGFzIHRoZSBpbnB1dCBjb250cm9sJ3MgZm9ybSBuYW1lXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogIHBhc3NlZC10aHJvdWdoIHRvIHRoZSBpbnB1dCBub2RlLCBsaWtlIGBuYW1lYFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBSZWFjdC1yZW5kZXJhYmxlIGNvbnRlbnQsIG1vc3QgY29tbW9ubHkgYSBzaW1wbGUgc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgbGFiZWxQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgY2hlY2tlZDsgYmFja2luZyBkYXRhIG11c3QgYmUgdXBkYXRlZCB0byBwZXJzaXN0IHRoZSBzdGF0ZSBjaGFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIG9uQ2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgdW5jaGVja2VkOyBiYWNraW5nIGRhdGEgbXVzdCBiZSB1cGRhdGVkIHRvIHBlcnNpc3QgdGhlIHN0YXRlIGNoYW5nZVxuICAgICAgICAgKi9cbiAgICAgICAgb25VbmNoZWNrZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGlucHV0UHJvcHM6IHtcbiAgICAgICAgICAgIGNoZWNrZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaW5kZXRlcm1pbmF0ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICBsYWJlbFByb3BzOiB7fSxcbiAgICAgICAgb25DaGVja2VkOiBub29wLFxuICAgICAgICBvblVuY2hlY2tlZDogbm9vcCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoQ2hlY2tib3guZGVmYXVsdFByb3BzKVxuXG4gICAgaWQgPSB1dWlkKClcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5kZXRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5yZWZzLmlucHV0LmluZGV0ZXJtaW5hdGUgPSAhIXRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlO1xuICAgIH1cblxuICAgIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4geyAvLyBTZW5kIHRoZSBvcHBvc2l0ZSBzaWduYWwgZnJvbSB3aGF0IHdhcyBwYXNzZWQgdG8gdG9nZ2xlIHRoZSBkYXRhXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlucHV0UHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy5wcm9wc1shdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQgPyAnb25DaGVja2VkJyA6ICdvblVuY2hlY2tlZCddKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5uYW1lKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kaXNhYmxlZCkgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLnJlZnMuaW5wdXQuZm9jdXMoKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljaykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEFyaWFTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlID8gJ21peGVkJyA6IFN0cmluZyh0aGlzLnByb3BzLmlucHV0UHJvcHMuY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgcmVuZGVySW5wdXQoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLmlucHV0UHJvcHMsICdpbmRldGVybWluYXRlJyl9XG4gICAgICAgICAgICAgICAgcmVmPSdpbnB1dCdcbiAgICAgICAgICAgICAgICB0eXBlPSdjaGVja2JveCdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94JywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1jaGVja2JveC1taXhlZCc6IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlLFxuICAgICAgICAgICAgICAgICAgICAnYi1jaGVja2JveC1jaGVja2VkJzogdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgICdiLWNoZWNrYm94LXVuY2hlY2tlZCc6ICF0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSAmJiAhdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaW5wdXRQcm9wcy5pZCB8fCB0aGlzLmlkfVxuICAgICAgICAgICAgICAgIGFyaWEtY2hlY2tlZD17dGhpcy5nZXRBcmlhU3RhdGUoKX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30gLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJMYWJlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubGFiZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmxhYmVsUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIHJlZj0nbGFiZWwnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItY2hlY2tib3gtbGFiZWwnLCB0aGlzLnByb3BzLmxhYmVsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj17dGhpcy5wcm9wcy5pbnB1dFByb3BzLmlkIHx8IHRoaXMuaWR9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbH1cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIENoZWNrYm94LmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItY2hlY2tib3gtd3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVySW5wdXQoKX1cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJMYWJlbCgpfVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFBvcnRhbCBmcm9tICdib3VuZGxlc3MtcG9ydGFsJztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuXG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuY29uc3QgdG9BcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLyoqXG5fX0Egbm9uLWJsb2NraW5nLCBmb2N1cy1zdGVhbGluZyBjb250YWluZXIuX19cblxuQSBkaWFsb2cgZGlmZmVycyBmcm9tIGEgbW9kYWwgaW4gdGhhdCBpdCBkb2VzIG5vdCBjb21lIHdpdGggYSBtYXNraW5nIGxheWVyICh0byBvYnNjdXJlIHRoZSByZXN0IG9mIHRoZSBwYWdlKVxuYW5kIHRoZSB1c2VyIGNhbiBjaG9vc2UgdG8gc2hpZnQgZm9jdXMgYXdheSBmcm9tIHRoZSBkaWFsb2cgY29udGVudHMgdmlhIG1vdXNlIGNsaWNrIG9yIGEga2V5Ym9hcmQgc2hvcnRjdXQuXG5cbklmIHlvdSBkZWNpZGUgdG8gcHJvdmlkZSBhIGhlYWRlciBpbnNpZGUgeW91ciBkaWFsb2csIGl0J3MgcmVjb21tZW5kZWQgdG8gY29uZmlndXJlIHRoZSBbYGFyaWEtbGFiZWxsZWRieWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FjY2Vzc2liaWxpdHkvQVJJQS9BUklBX1RlY2huaXF1ZXMvVXNpbmdfdGhlX2FyaWEtbGFiZWxsZWRieV9hdHRyaWJ1dGUpIGF0dHJpYnV0ZSwgd2hpY2ggY2FuIGJlIGFkZGVkIHRvIGBwcm9wcy5kaWFsb2dQcm9wc2AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpYWxvZyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgYWZ0ZXIgdGhlIGRpYWxvZyBpbiB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBhZnRlcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFyYml0cmFyeSBjb250ZW50IHRvIGJlIHJlbmRlcmVkIGJlZm9yZSB0aGUgZGlhbG9nIGluIHRoZSBET01cbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgaWYgZm9jdXMgaXMgYWxsb3dlZCB0byBtb3ZlIGF3YXkgZnJvbSB0aGUgZGlhbG9nXG4gICAgICAgICAqL1xuICAgICAgICBjYXB0dXJlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBlbmFibGUgZGV0ZWN0aW9uIG9mIFwiRXNjYXBlXCIga2V5cHJlc3NlcyB0byB0cmlnZ2VyIGBwcm9wcy5vbkNsb3NlYDsgaWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgdGhlIHJldHVyblxuICAgICAgICAgKiB2YWx1ZSBkZXRlcm1pbmVzIGlmIHRoZSBkaWFsb2cgd2lsbCBiZSBjbG9zZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlT25Fc2NLZXk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2YgY2xpY2tzIGluc2lkZSB0aGUgZGlhbG9nIGFyZWEgdG8gdHJpZ2dlciBgcHJvcHMub25DbG9zZWA7IGlmIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQsIHRoZSByZXR1cm5cbiAgICAgICAgICogdmFsdWUgZGV0ZXJtaW5lcyBpZiB0aGUgZGlhbG9nIHdpbGwgYmUgY2xvc2VkXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZU9uSW5zaWRlQ2xpY2s6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2YgY2xpY2tzIG91dHNpZGUgdGhlIGRpYWxvZyBhcmVhIHRvIHRyaWdnZXIgYHByb3BzLm9uQ2xvc2VgOyBpZiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGUgcmV0dXJuXG4gICAgICAgICAqIHZhbHVlIGRldGVybWluZXMgaWYgdGhlIGRpYWxvZyB3aWxsIGJlIGNsb3NlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xvc2VPbk91dHNpZGVDbGljazogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZW5hYmxlIGRldGVjdGlvbiBvZiBmb2N1cyBvdXRzaWRlIHRoZSBkaWFsb2cgYXJlYSB0byB0cmlnZ2VyIGBwcm9wcy5vbkNsb3NlYDsgaWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgdGhlIHJldHVyblxuICAgICAgICAgKiB2YWx1ZSBkZXRlcm1pbmVzIGlmIHRoZSBkaWFsb2cgd2lsbCBiZSBjbG9zZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlT25PdXRzaWRlRm9jdXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2Ygc2Nyb2xsIGFuZCBtb3VzZXdoZWVsIGV2ZW50cyBvdXRzaWRlIHRoZSBkaWFsb2cgYXJlYSB0byB0cmlnZ2VyIGBwcm9wcy5vbkNsb3NlYDsgaWYgYSBmdW5jdGlvXG4gICAgICAgICAqIGlzIHByb3ZpZGVkLCB0aGUgcmV0dXJuIHZhbHVlIGRldGVybWluZXMgaWYgdGhlIGRpYWxvZyB3aWxsIGJlIGNsb3NlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xvc2VPbk91dHNpZGVTY3JvbGw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG92ZXJyaWRlIHRoZSB0eXBlIG9mIGAuYi1kaWFsb2ctd3JhcHBlcmAgSFRNTCBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG92ZXJyaWRlIHRoZSB0eXBlIG9mIGAuYi1kaWFsb2dgIEhUTUwgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgZGlhbG9nQ29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIGRpYWxvZ1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYSBjdXN0b20gZXZlbnQgaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBkaWFsb2cgc2hvdWxkIGJlIHVucmVuZGVyZWQgYnkgaXRzIHBhcmVudDsgdGhlIGV2ZW50IG9jY3VycyBpZiBvbmUgb3IgbW9yZSBvZiB0aGUgXCJjbG9zZU9uXCIgcHJvcHMgKGBjbG9zZU9uRXNjS2V5YCwgYGNsb3NlT25PdXRzaWRlQ2xpY2tgLCBldGMuKSBhcmUgcGFzc2VkIGFzIGB0cnVlYCBhbmQgdGhlIGRpc21pc3NhbCBjcml0ZXJpYSBhcmUgc2F0aXNmaWVkXG4gICAgICAgICAqL1xuICAgICAgICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBhZnRlcjogbnVsbCxcbiAgICAgICAgYmVmb3JlOiBudWxsLFxuICAgICAgICBjYXB0dXJlRm9jdXM6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuOiBudWxsLFxuICAgICAgICBjbG9zZU9uRXNjS2V5OiBmYWxzZSxcbiAgICAgICAgY2xvc2VPbkluc2lkZUNsaWNrOiBmYWxzZSxcbiAgICAgICAgY2xvc2VPbk91dHNpZGVDbGljazogZmFsc2UsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlRm9jdXM6IGZhbHNlLFxuICAgICAgICBjbG9zZU9uT3V0c2lkZVNjcm9sbDogZmFsc2UsXG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGRpYWxvZ0NvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGRpYWxvZ1Byb3BzOiB7fSxcbiAgICAgICAgb25DbG9zZTogbm9vcCxcbiAgICAgICAgb25LZXlEb3duOiBub29wLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhEaWFsb2cuZGVmYXVsdFByb3BzKVxuXG4gICAgbW91bnRlZCA9IGZhbHNlXG5cbiAgICBpc1BhcnRPZkRpYWxvZyhub2RlKSB7XG4gICAgICAgIGlmICghbm9kZSB8fCBub2RlID09PSB3aW5kb3cpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgY29uc3Qgcm9vdHMgPSBbdGhpcy4kd3JhcHBlcl0uY29uY2F0KFxuICAgICAgICAgICAgdG9BcnJheS5jYWxsKFxuICAgICAgICAgICAgICAgIHRoaXMuJHdyYXBwZXIucXVlcnlTZWxlY3RvckFsbChgWyR7UG9ydGFsLlBPUlRBTF9EQVRBX0FUVFJJQlVURX1dYClcbiAgICAgICAgICAgICkubWFwKChkb20pID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRvbS5nZXRBdHRyaWJ1dGUoUG9ydGFsLlBPUlRBTF9EQVRBX0FUVFJJQlVURSkpKVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSA/IG5vZGUucGFyZW50Tm9kZSA6IG5vZGU7XG5cbiAgICAgICAgcmV0dXJuIHJvb3RzLnNvbWUoKGRvbSkgPT4gZG9tLmNvbnRhaW5zKGVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZUZvY3VzICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLiRkaWFsb2cuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlT3V0c2lkZVNjcm9sbFdoZWVsLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzaG91bGREaWFsb2dDbG9zZU9uRXZlbnQocHJvcCwgZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24odGhpcy5wcm9wc1twcm9wXSkgPyB0aGlzLnByb3BzW3Byb3BdKGV2ZW50KSA6IHRoaXMucHJvcHNbcHJvcF07XG4gICAgfVxuXG4gICAgaGFuZGxlRm9jdXMgPSAobmF0aXZlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmNhcHR1cmVGb2N1cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUZvY3VzJywgbmF0aXZlRXZlbnQpICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKG5hdGl2ZUV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhwbGljaXRPcmlnaW5hbFRhcmdldCBpcyBmb3IgRmlyZWZveCwgYXMgaXQgZG9lc24ndCBzdXBwb3J0IHJlbGF0ZWRUYXJnZXRcbiAgICAgICAgbGV0IHByZXZpb3VzID0gbmF0aXZlRXZlbnQuZXhwbGljaXRPcmlnaW5hbFRhcmdldCB8fCBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0O1xuXG4gICAgICAgIGlmICh0aGlzLmlzUGFydE9mRGlhbG9nKHByZXZpb3VzKSAmJiAhdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICBuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcHJldmlvdXMuZm9jdXMoKTsgLy8gcmVzdG9yZSBmb2N1c1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uRXNjS2V5JywgZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uS2V5RG93bikge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlSW5zaWRlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uSW5zaWRlQ2xpY2snLCBldmVudCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucHJvcHMub25DbG9zZSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPdXRzaWRlQ2xpY2sgPSAobmF0aXZlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUNsaWNrJywgbmF0aXZlRXZlbnQpICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKG5hdGl2ZUV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucHJvcHMub25DbG9zZSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwgPSAobmF0aXZlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZVNjcm9sbCcsIG5hdGl2ZUV2ZW50KSAmJiAhdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLnByb3BzLm9uQ2xvc2UsIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyRm9jdXNCb3VuZGFyeSgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZUZvY3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdiLW9mZnNjcmVlbicgdGFiSW5kZXg9JzAnIGFyaWEtaGlkZGVuPSd0cnVlJz4mbmJzcDs8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9IC8vIHVzZWQgdG8gbG9jayBmb2N1cyBpbnRvIGEgcGFydGljdWxhciBzdWJzZXQgb2YgRE9NXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBEaWFsb2cuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9eyhub2RlKSA9PiAodGhpcy4kd3JhcHBlciA9IG5vZGUpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlhbG9nLXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckZvY3VzQm91bmRhcnkoKX1cblxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmJlZm9yZX1cblxuICAgICAgICAgICAgICAgIDx0aGlzLnByb3BzLmRpYWxvZ0NvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5kaWFsb2dQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPXsobm9kZSkgPT4gKHRoaXMuJGRpYWxvZyA9IG5vZGUpfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWRpYWxvZycsIHRoaXMucHJvcHMuZGlhbG9nUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVJbnNpZGVDbGlja31cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259XG4gICAgICAgICAgICAgICAgICAgIHJvbGU9J2RpYWxvZydcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9JzAnPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L3RoaXMucHJvcHMuZGlhbG9nQ29tcG9uZW50PlxuXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWZ0ZXJ9XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJGb2N1c0JvdW5kYXJ5KCl9XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1kaWFsb2cvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmluZERPTU5vZGV9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuXG5jb25zdCBpbnN0YW5jZXMgPSBbXTtcblxuZnVuY3Rpb24gdG9JKHN0cmluZ051bWJlcikge1xuICAgIHJldHVybiBwYXJzZUludChzdHJpbmdOdW1iZXIsIDEwKTtcbn1cblxuZnVuY3Rpb24gcmVzY2FsZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IG5vZGUgPSBmaW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gICAgY29uc3QgY29udGFpbmVyQm94ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCBmb250U2l6ZSA9IHRvSSh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5mb250U2l6ZSk7XG5cbiAgICBpZiAoaW5zdGFuY2UuYmFzZUZvbnRTaXplID09PSBudWxsKSB7XG4gICAgICAgIGluc3RhbmNlLmJhc2VGb250U2l6ZSA9IGZvbnRTaXplO1xuICAgIH1cblxuICAgIGxldCBjb250YWluZXJIZWlnaHQgPSB0b0koY29udGFpbmVyQm94LmhlaWdodCk7XG4gICAgbGV0IGNvbnRhaW5lcldpZHRoID0gdG9JKGNvbnRhaW5lckJveC53aWR0aCk7XG5cbiAgICAvLyBuZWVkIHRvIGFjY291bnQgZm9yIHBhZGRpbmdcbiAgICBpZiAoY29udGFpbmVyQm94LmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnIHx8IGNvbnRhaW5lckJveC5ib3hTaXppbmcgPT09ICdwYWRkaW5nLWJveCcpIHtcbiAgICAgICAgY29udGFpbmVySGVpZ2h0IC09IHRvSShjb250YWluZXJCb3gucGFkZGluZ1RvcCkgKyB0b0koY29udGFpbmVyQm94LnBhZGRpbmdCb3R0b20pO1xuICAgICAgICBjb250YWluZXJXaWR0aCAtPSB0b0koY29udGFpbmVyQm94LnBhZGRpbmdMZWZ0KSArIHRvSShjb250YWluZXJCb3gucGFkZGluZ1JpZ2h0KTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpbWl6ZUZvckhlaWdodCA9IE1hdGguZmxvb3IoKGZvbnRTaXplIC8gbm9kZS5vZmZzZXRIZWlnaHQpICogY29udGFpbmVySGVpZ2h0KTtcbiAgICBjb25zdCBvcHRpbWl6ZUZvcldpZHRoID0gTWF0aC5mbG9vcigoZm9udFNpemUgLyBub2RlLm9mZnNldFdpZHRoKSAqIGNvbnRhaW5lcldpZHRoKTtcblxuICAgIC8vIGlmIHVwc2NhbGluZyBpcyBhbGxvd2VkLCB0aGF0IGNoYW5nZXMgdGhlIG1hdGggYSBiaXRcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudXBzY2FsZSkge1xuICAgICAgICBub2RlLnN0eWxlLmZvbnRTaXplID0gKE1hdGgubWF4KG9wdGltaXplRm9ySGVpZ2h0LCBvcHRpbWl6ZUZvcldpZHRoKSB8fCAxKSArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5zdHlsZS5mb250U2l6ZSA9IChNYXRoLm1pbihpbnN0YW5jZS5iYXNlRm9udFNpemUsIG9wdGltaXplRm9ySGVpZ2h0LCBvcHRpbWl6ZUZvcldpZHRoKSB8fCAxKSArICdweCc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVXaW5kb3dSZXNpemUoKSB7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goKGluc3RhbmNlKSA9PiByZXNjYWxlKGluc3RhbmNlKSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlcy5zcGxpY2UoaW5zdGFuY2VzLmluZGV4T2YoaW5zdGFuY2UpLCAxKTtcblxuICAgIGlmIChpbnN0YW5jZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVXaW5kb3dSZXNpemUsIHRydWUpO1xuICAgIH1cbn1cblxuLyoqXG5fX0ZpdCBzaW5nbGUtbGluZSB0ZXh0IGluc2lkZSBhIHBhcmVudCBjb250YWluZXIsIG9iZXlpbmcgaW1wbGljdCBjb25zdHJhaW50cy5fX1xuXG5UaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIHNpdHVhdGlvbnMgd2hlcmUgYW4gaW50ZXJuYXRpb25hbGl6ZWQgc3RyaW5nIGlzIGJlaW5nIHBsYWNlZCBpbnRvIHRoZSBVSSBhbmQgaXQncyB1bmNsZWFyIGlmIGFsbCB2YXJpYXRpb25zIG9mIGl0IHdpbGwgZml0IHdpdGhvdXQgZXhjZXNzaXZlIGFtb3VudHMgb2YgZWRnZS1jYXNlIENTUy4gVWx0aW1hdGVseSwgaXQncyBnb29kIGF0IG1ha2luZyBzdXJlIHdoYXQgeW91IHB1dCBpbiBkb2Vzbid0IG92ZXJmbG93LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaXR0ZWRUZXh0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgdmFsaWQgSFRNTCB0YWcgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250cm9scyBpZiBGaXR0ZWRUZXh0IHdpbGwgYXV0b21hdGljYWxseSBzY2FsZSB1cCB0aGUgY29udGVudCB0byBmaXQgdGhlIGF2YWlsYWJsZSBzcGFjZTsgbm9ybWFsbHkgdGhlIGNvbXBvbmVudFxuICAgICAgICAgKiBvbmx5IHNjYWxlcyB0ZXh0IGRvd24gYXMgbmVlZGVkIHRvIGZpdFxuICAgICAgICAgKi9cbiAgICAgICAgdXBzY2FsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY29tcG9uZW50OiAnc3BhbicsXG4gICAgICAgIHVwc2NhbGU6IGZhbHNlLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhGaXR0ZWRUZXh0LmRlZmF1bHRQcm9wcylcblxuICAgIC8vIHNldCBkdXJpbmcgdGhlIGZpcnN0IHJlc2NhbGUoKSBydW5cbiAgICBiYXNlRm9udFNpemUgPSBudWxsXG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgcmVzY2FsZSh0aGlzKTtcblxuICAgICAgICAvLyB0aGVyZSBhcmUgbGlrZWx5IHRvIGJlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGlzIGNvbXBvbmVudCBvbiBhIHBhZ2UsIHNvIGl0IG1ha2VzIHNlbnNlIHRvIGp1c3QgdXNlXG4gICAgICAgIC8vIGEgc2hhcmVkIGdsb2JhbCByZXNpemUgbGlzdGVuZXIgaW5zdGVhZCBvZiBlYWNoIGNvbXBvbmVudCBoYXZpbmcgaXRzIG93blxuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgcmVzY2FsZSh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdW5yZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIEZpdHRlZFRleHQuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXRleHQnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtZml0dGVkLXRleHQvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5pbXBvcnQgdXVpZCBmcm9tICdib3VuZGxlc3MtdXRpbHMtdXVpZCc7XG5cbi8qKlxuX19BbiBpbWFnZSBibG9jayB3aXRoIHBsYWNlaG9sZGVyIHN1cHBvcnQgZm9yIGxvYWRpbmcgYW5kIGZhbGxiYWNrIHNjZW5hcmlvcy5fX1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBzdGF0dXMgPSB7XG4gICAgICAgIExPQURJTkc6IHV1aWQoKSxcbiAgICAgICAgTE9BREVEOiB1dWlkKCksXG4gICAgICAgIEVSUk9SOiB1dWlkKCksXG4gICAgfVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHdyaXR0ZW4gZGVzY3JpcHRpb24gb2YgdGhlIGltYWdlIGZvciBzZWFyY2ggZW5naW5lcywgaG92ZXJ0ZXh0IGFuZCB0aG9zZSB1c2luZyBhY2Nlc3NpYmlsaXR5IHRlY2hub2xvZ2llc1xuICAgICAgICAgKi9cbiAgICAgICAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZXMgdGhlIGNvbXBvbmVudCBIVE1MIHRhZ1xuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHZhbGlkIHBhdGggdG8gdGhlIGRlc2lyZWQgaW1hZ2VcbiAgICAgICAgICovXG4gICAgICAgIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGFsdDogJycsXG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIHNyYzogJ2Fib3V0OmJsYW5rJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoSW1hZ2UuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIHN0YXR1czogSW1hZ2Uuc3RhdHVzLkxPQURJTkcsXG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5zcmMgIT09IHRoaXMucHJvcHMuc3JjKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UHJlbG9hZGVyKCk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzdGF0dXM6IEltYWdlLnN0YXR1cy5MT0FESU5HfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpICAgICB7IHRoaXMucHJlbG9hZCgpOyB9XG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkgICAgeyB0aGlzLnByZWxvYWQoKTsgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgIHsgdGhpcy5yZXNldFByZWxvYWRlcigpOyB9XG5cbiAgICByZXNldFByZWxvYWRlcigpIHtcbiAgICAgICAgdGhpcy5sb2FkZXIub25sb2FkID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2FkZXIub25lcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMubG9hZGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcmVsb2FkKCkge1xuICAgICAgICBpZiAodGhpcy5sb2FkZXIpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy5sb2FkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICB0aGlzLmxvYWRlci5vbmxvYWQgPSAoKSA9PiB0aGlzLnNldFN0YXRlKHtzdGF0dXM6IEltYWdlLnN0YXR1cy5MT0FERUR9KTtcbiAgICAgICAgdGhpcy5sb2FkZXIub25lcnJvciA9ICgpID0+IHRoaXMuc2V0U3RhdGUoe3N0YXR1czogSW1hZ2Uuc3RhdHVzLkVSUk9SfSk7XG5cbiAgICAgICAgdGhpcy5sb2FkZXIuc3JjID0gdGhpcy5wcm9wcy5zcmM7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgSW1hZ2UuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWltYWdlJywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ItaW1hZ2UtbG9hZGluZyc6IHRoaXMuc3RhdGUuc3RhdHVzID09PSBJbWFnZS5zdGF0dXMuTE9BRElORyxcbiAgICAgICAgICAgICAgICAgICAgJ2ItaW1hZ2UtbG9hZGVkJzogdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEltYWdlLnN0YXR1cy5MT0FERUQsXG4gICAgICAgICAgICAgICAgICAgICdiLWltYWdlLWVycm9yJzogdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEltYWdlLnN0YXR1cy5FUlJPUixcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5hbHR9XG4gICAgICAgICAgICAgICAgcm9sZT0naW1nJ1xuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3RoaXMucHJvcHMuc3JjfSlgLFxuICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW1hZ2UvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSAoeCkgPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5cbi8qKlxuX19BbiBpbnB1dCBjb250cm9sIHdpdGggcGxhY2Vob2xkZXIgZW11bGF0aW9uIGZvciBub24tc3VwcG9ydGluZyBwbGF0Zm9ybXMuX19cblxuSW5wdXQgYWJzdHJhY3RzIGF3YXkgdGhlIGNyb3NzLXBsYXRmb3JtIGRpZmZlcmVuY2VzIG9mIHBsYWNlaG9sZGVyIHN0eWxpbmcgYW5kIGJlaGF2aW9ycywgZm9yIGV4YW1wbGU6IEludGVybmV0IEV4cGxvcmVyIGRpc21pc3NlcyBuYXRpdmUgcGxhY2Vob2xkZXJzIG9uIGlucHV0IGZvY3VzIGFuZCBvdGhlciBwbGF0Zm9ybXMgZG8gbm90LiBUaGlzIGNvbXBvbmVudCBlbnN1cmVzIHRoYXQgdGV4dCBpbnB1dCBjb250cm9scyB3aWxsIGZlZWwgYW5kIGJlaGF2ZSBzaW1pbGFybHkgb24gbW9yZSBkZXZpY2VzLlxuXG4jIyBDb21wb25lbnQgSW5zdGFuY2UgTWV0aG9kc1xuXG5XaGVuIHVzaW5nIGBJbnB1dGAgaW4geW91ciBwcm9qZWN0LCB5b3UgbWF5IGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzIG9uIGEgcmVuZGVyZWQgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudC4gVXNlIFtgcmVmc2BdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1sKSB0byBnZXQgdGhlIGluc3RhbmNlLlxuXG4tIF9fZ2V0VmFsdWUoKV9fXG4gIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGZpZWxkXG5cbi0gX19zZXRWYWx1ZShzdHJpbmcpX19cbiAgcHJvZ3JhbW1hdGljYWxseSBzZXQgdGhlIGlucHV0IHZhbHVlOyB1c2VmdWwgZm9yIGNsZWFyaW5nIG91dCB0aGUgaW5wdXQgaW4gXCJ1bmNvbnRyb2xsZWRcIiBtb2RlIC0tIG5vdGUgdGhhdCBkaWdnaW5nIGludG8gdGhlIGludGVybmFscyBhbmQgc2V0dGluZyB0aGUgYHJlZnMuZmllbGQudmFsdWUgPSAnJ2AgZGlyZWN0bHkgd2lsbCBub3QgdHJpZ2dlciBldmVudHMgYW5kIG1lc3NlcyB1cCB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGNvbXBvbmVudFxuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZXMgdGhlIEhUTUwgY29udGFpbmVyIHRhZ1xuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0cmlnZ2VycyB0aGUgcGxhY2Vob2xkZXIgdG8gZGlzYXBwZWFyIHdoZW4gdGhlIGlucHV0IGZpZWxkIGlzIGZvY3VzZWQsIHJlYXBwZWFycyB3aGVuIHRoZSB1c2VyIGhhcyB0YWJiZWQgYXdheSBvciBmb2N1cyBpcyBtb3ZlZFxuICAgICAgICAgKi9cbiAgICAgICAgaGlkZVBsYWNlaG9sZGVyT25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIH0pLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGhpZGVQbGFjZWhvbGRlck9uRm9jdXM6IHRydWUsXG4gICAgICAgIGlucHV0UHJvcHM6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoSW5wdXQuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGlucHV0OiAnJyxcbiAgICAgICAgaXNDb250cm9sbGVkOiB0eXBlb2YgdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldElucHV0VmFsdWUobmV4dFByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5wdXRWYWx1ZSA9ICh2YWx1ZSA9ICcnKSA9PiB0aGlzLnNldFN0YXRlKHtpbnB1dDogdmFsdWV9KVxuXG4gICAgZ2V0VmFsdWUgPSAoKSA9PiB0aGlzLnJlZnMuZmllbGQudmFsdWVcblxuICAgIHNldFZhbHVlKG5leHRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldElucHV0VmFsdWUobmV4dFZhbHVlKTtcbiAgICAgICAgdGhpcy5yZWZzLmZpZWxkLnZhbHVlID0gbmV4dFZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gc2ltdWxhdGUgaW5wdXQgY2hhbmdlIGV2ZW50IGZsb3dcbiAgICAgICAgICAgIHRoaXMucmVmcy5maWVsZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7YnViYmxlczogdHJ1ZX0pKTtcbiAgICAgICAgICAgIHRoaXMucmVmcy5maWVsZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywge2J1YmJsZXM6IHRydWV9KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVCbHVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2lzRm9jdXNlZDogZmFsc2V9KTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25CbHVyKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVGb2N1cyA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtpc0ZvY3VzZWQ6IHRydWV9KTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cykgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgICAvLyBmb3IgXCJjb250cm9sbGVkXCIgc2NlbmFyaW9zLCB1cGRhdGVzIHRvIHRoZSBjYWNoZWQgaW5wdXQgdGV4dCBzaG91bGQgY29tZVxuICAgICAgICAvLyBleGNsdXNpdmVseSB2aWEgcHJvcHMgKGNXUlApIHNvIGl0IGV4YWN0bHkgbWlycm9ycyB0aGUgY3VycmVudCBhcHBsaWNhdGlvblxuICAgICAgICAvLyBzdGF0ZSwgb3RoZXJ3aXNlIGEgcmUtcmVuZGVyIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBuZXcgdGV4dCBoYXMgY29tcGxldGVkIGl0c1xuICAgICAgICAvLyBmZWVkYmFjayBsb29wIGFuZCB0aGUgY3Vyc29yIHBvc2l0aW9uIGlzIGxvc3RcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNDb250cm9sbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRJbnB1dFZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UGxhY2Vob2xkZXJUZXh0KCkge1xuICAgICAgICBjb25zdCBpc05vbkVtcHR5ID0gdGhpcy5zdGF0ZS5pbnB1dCAhPT0gJyc7XG4gICAgICAgIGNvbnN0IHNob3VsZFNob3dQbGFjZWhvbGRlciA9IHRoaXMucHJvcHMuaGlkZVBsYWNlaG9sZGVyT25Gb2N1cyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc3RhdGUuaXNGb2N1c2VkID09PSBmYWxzZSAmJiBpc05vbkVtcHR5ID09PSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGlzTm9uRW1wdHkgPT09IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBzaG91bGRTaG93UGxhY2Vob2xkZXIgPyB0aGlzLnByb3BzLmlucHV0UHJvcHMucGxhY2Vob2xkZXIgOiAnJztcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBJbnB1dC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItaW5wdXQtd3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5nZXRQbGFjZWhvbGRlclRleHQoKX0+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmlucHV0UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIHJlZj0nZmllbGQnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItaW5wdXQnLCB0aGlzLnByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e251bGx9XG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cj17dGhpcy5oYW5kbGVCbHVyfVxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXt0aGlzLmhhbmRsZUZvY3VzfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYi1pbnB1dC1wbGFjZWhvbGRlciBiLWlucHV0Jz5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2V0UGxhY2Vob2xkZXJUZXh0KCl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dC9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgRGlhbG9nIGZyb20gJ2JvdW5kbGVzcy1kaWFsb2cnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICdib3VuZGxlc3MtcG9ydGFsJztcbmltcG9ydCBleHRyYWN0Q2hpbGRQcm9wcyBmcm9tICdib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuLyoqXG5fX0EgYmxvY2tpbmcsIGZvY3VzLXN0ZWFsaW5nIGNvbnRhaW5lci5fX1xuXG5Nb2RhbCBpcyBhbiBlbmhhbmNlbWVudCB1cG9uIFtEaWFsb2ddKGh0dHBzOi8vZ2l0aHViLmNvbS9lbmlnbWEtaW8vYm91bmRsZXNzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2JvdW5kbGVzcy1kaWFsb2cvUkVBRE1FLm1kKS4gVHlwaWNhbGx5LCBhIG1hc2tpbmcgbGF5ZXIgaXMgcHJvdmlkZWQgdG8gb2JzY3VyZSB0aGUgcmVzdCBvZiB0aGUgcGFnZSBpbiBzb21lIGZhc2hpb24sIHdoaWxlIGFsc28gYmxvY2tpbmcgb3V0c2lkZSBjbGljayBhbmQga2V5c3Ryb2tlIGFjY2VzcyB1bnRpbCB0aGUgbW9kYWwgaXMgZGlzbWlzc2VkLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5wcm9wVHlwZXMsXG5cbiAgICAgICAgbWFza1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICBtb2RhbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICBwb3J0YWxQcm9wczogUHJvcFR5cGVzLnNoYXBlKFBvcnRhbC5wcm9wVHlwZXMpLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGNhcHR1cmVGb2N1czogdHJ1ZSxcbiAgICAgICAgbWFza1Byb3BzOiB7fSxcbiAgICAgICAgbW9kYWxQcm9wczoge30sXG4gICAgICAgIHBvcnRhbFByb3BzOiB7fSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoTW9kYWwuZGVmYXVsdFByb3BzKVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFBvcnRhbCB7Li4ucHJvcHMucG9ydGFsUHJvcHN9PlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgey4uLm9taXQocHJvcHMsIE1vZGFsLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgICAgIHJlZj17KG5vZGUpID0+ICh0aGlzLiRtb2RhbCA9IG5vZGUpfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLW1vZGFsLXdyYXBwZXInLCBwcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgey4uLnByb3BzLm1hc2tQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItbW9kYWwtbWFzaycsIHByb3BzLm1hc2tQcm9wcy5jbGFzc05hbWUpfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxEaWFsb2dcbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5leHRyYWN0Q2hpbGRQcm9wcyhwcm9wcywgRGlhbG9nLmRlZmF1bHRQcm9wcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHMubW9kYWxQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItbW9kYWwnLCBwcm9wcy5tb2RhbFByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L0RpYWxvZz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvUG9ydGFsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtmaW5kRE9NTm9kZX0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBpc0ludGVnZXIgZnJvbSAnbG9kYXNoLmlzaW50ZWdlcic7XG5cbmltcG9ydCBBc3luYyBmcm9tICdib3VuZGxlc3MtYXN5bmMnO1xuaW1wb3J0IFNlZ21lbnRlZENvbnRyb2wgZnJvbSAnYm91bmRsZXNzLXNlZ21lbnRlZC1jb250cm9sJztcbmltcG9ydCBBcnJvd0tleU5hdmlnYXRpb24gZnJvbSAnYm91bmRsZXNzLWFycm93LWtleS1uYXZpZ2F0aW9uJztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG5jb25zdCBpZGVudGl0eSA9ICh4KSA9PiB4O1xuY29uc3QgaXNGdW5jdGlvbiA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuLyoqXG4gKiBfX1ZpZXcgYW5kIG5hdmlnYXRlIGhldGVyb2dlbmlvdXMgY29udGVudCBvbmUgcGFnZSBhdCBhIHRpbWUuX19cbiAqXG4gKiBQYWdpbmF0aW9uIGlzIGltcGxlbWVudGVkIGFzIGFuIGVuY2Fwc3VsYXRlZCB2aWV3IHN5c3RlbSwgYWNjZXB0aW5nIGFuIGFycmF5IG9mIGl0ZW1zIGFzIGlucHV0LlxuICpcbiAqICMjIENvbXBvbmVudCBJbnN0YW5jZSBNZXRob2RzXG4gKlxuICogV2hlbiB1c2luZyBgUGFnaW5hdGlvbmAgaW4geW91ciBwcm9qZWN0LCB5b3UgbWF5IGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzIG9uIGEgcmVuZGVyZWRcbiAqIGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQuIFVzZSBbYHJlZnNgXShodHRwczovLyAqIGZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbClcbiAqIHRvIGdldCB0aGUgaW5zdGFuY2UuXG4gKlxuICogLSBfX2BjdXJyZW50UGFnZSgpYF9fIHJldHVybnMgdGhlIF9fX29uZV9fXy1pbmRleGVkIHBhZ2UgbnVtYmVyIGN1cnJlbnRseSBpbiB2aWV3XG4gKlxuICogLSBfX2BqdW1wVG9JbmRleChpbmRleDogbnVtYmVyKWBfXyByZW5kZXJzIHRoZSBwYWdlIHRoYXQgY29udGFpbnMgdGhlIF9fX3plcm9fX18taW5kZXhlZCBpdGVtXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2luYXRpb24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgY29udHJvbCA9IHtcbiAgICAgICAgQ1VTVE9NOiB1dWlkKCksXG4gICAgICAgIEZJUlNUOiB1dWlkKCksXG4gICAgICAgIExBU1Q6IHV1aWQoKSxcbiAgICAgICAgTkVYVDogdXVpZCgpLFxuICAgICAgICBQUkVWSU9VUzogdXVpZCgpLFxuICAgIH1cblxuICAgIHN0YXRpYyBwb3NpdGlvbiA9IHtcbiAgICAgICAgQUJPVkU6IHV1aWQoKSxcbiAgICAgICAgQkVMT1c6IHV1aWQoKSxcbiAgICAgICAgQk9USDogdXVpZCgpLFxuICAgIH1cblxuICAgIHN0YXRpYyBDT05UUk9MX0RBVEFfQVRUUklCVVRFID0gJ2RhdGEtcGFnZS1jb250cm9sJ1xuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhcmJpdHJhcnkgY29udGVudCB0byBiZSByZW5kZXJlZCBhZnRlciB0aGUgaXRlbXMgaW4gdGhlIERPTVxuICAgICAgICAgKi9cbiAgICAgICAgYWZ0ZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhcmJpdHJhcnkgY29udGVudCB0byBiZSByZW5kZXJlZCBiZWZvcmUgdGhlIGl0ZW1zIGluIHRoZSBET01cbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgY29udHJvbFdyYXBwZXJQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFsbG93cyBmb3IgYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgaW50byB0aGUgY29udHJvbCBhcmVhXG4gICAgICAgICAqL1xuICAgICAgICBjdXN0b21Db250cm9sQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aXRoIGEgZGVzaXJlZCBpdGVtIGluZGV4IHdoZW4gdGhhdCBpdGVtIGNvbWVzIGludG8gdmlldztcbiAgICAgICAgICogYWNjZXB0cyBhIGBQcm9taXNlYCBpZiB5b3UgbmVlZCB0byBmZXRjaCB0aGUgcm93IGFzeW5jaHJvbm91c2x5XG4gICAgICAgICAqL1xuICAgICAgICBnZXRJdGVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkb2VzIG5vdCByZW5kZXIgdGhlIHBhZ2luZyBjb250cm9scyBpZiB0aGUgbnVtYmVyIG9mIGl0ZW1zIHN1cHBsaWVkXG4gICAgICAgICAqIHRvIHRoZSB2aWV3IGlzIGxlc3MtdGhhbi1vci1lcXVhbC10byB0aGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHNob3dcbiAgICAgICAgICogcGVyIHBhZ2UgdmlhIGBwcm9wcy5udW1JdGVtc1BlclBhZ2VgXG4gICAgICAgICAqL1xuICAgICAgICBoaWRlUGFnZXJJZk5vdE5lZWRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgdW5pcXVlIG5hbWUgZm9yIHRoZSBkYXRhIHNvdXJjZSBiZWluZyBjb25zdW1lZDsgcGFzcyBhXG4gICAgICAgICAqIGRpZmZlcmVudCBuYW1lIHRvIGNhdXNlIHRoZSB2aWV3IHRvIGZ1bGx5IHJlc2V0IGFuZCBwdWxsIGZyZXNoIGRhdGFcbiAgICAgICAgICovXG4gICAgICAgIGlkZW50aWZpZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIChfX29uZS1pbmRleGVkX18pIG51bWJlciBvZiB0aGUgcGFnZSB0aGF0IHNob3VsZCBiZSBpbml0aWFsbHlcbiAgICAgICAgICogZGlzcGxheWVkOyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgICAgICogdGhlIHRvdGFsIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgKi9cbiAgICAgICAgaW5pdGlhbFBhZ2U6IGZ1bmN0aW9uIHZhbGlkYXRlSW5pdGlhbFBhZ2UocHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChpc0ludGVnZXIocHJvcHMuaW5pdGlhbFBhZ2UpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2Bpbml0aWFsUGFnZWAgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhZ2VzID0gTWF0aC5jZWlsKHByb3BzLnRvdGFsSXRlbXMgLyBwcm9wcy5udW1JdGVtc1BlclBhZ2UpO1xuXG4gICAgICAgICAgICBpZiAocHJvcHMuaW5pdGlhbFBhZ2UgPCAxIHx8IHByb3BzLmluaXRpYWxQYWdlID4gbnVtYmVyT2ZQYWdlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2Bpbml0aWFsUGFnZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kICcgKyBudW1iZXJPZlBhZ2VzICsgJy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWxsb3dzIGZvciBhcmJpdHJhcnkgY29udGVudCB0byBiZSByZW5kZXJlZCBpbnRvIHBhZ2luYXRpb24gaXRlbXNcbiAgICAgICAgICogYXMgdGhleSdyZSBsb2FkaW5nIGlmIHRoZSBiYWNraW5nIGRhdGEgaXMgYSBgUHJvbWlzZWBcbiAgICAgICAgICovXG4gICAgICAgIGl0ZW1Mb2FkaW5nQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFuIGZ1bmN0aW9uIHRvIHNwZWNpZnkgaG93IGFuIGl0ZW0gc2hvdWxkIGJlIGNvbnZlcnRlZFxuICAgICAgICAgKiB0byBKU1gsIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHJlbmRlcmFibGUgYnkgUmVhY3RcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnN0IGdldEl0ZW0gPSAoKSA9PiAoe2lkOiAxMjM0LCB0ZXh0OiAnZm9vJ30pO1xuICAgICAgICAgKiBjb25zdCBvYmpUb0pTWCA9ICh7aWQsIHRleHR9KSA9PiA8ZGl2IGRhdGEtaWQ9e2lkfT57dGV4dH08L2Rpdj47XG4gICAgICAgICAqXG4gICAgICAgICAqIDxQYWdpbmF0aW9uXG4gICAgICAgICAqICAgICBnZXRJdGVtPXtnZXRJdGVtfVxuICAgICAgICAgKiAgICAgaWRlbnRpZmVyPSdmb28nXG4gICAgICAgICAqICAgICBpdGVtVG9KU1hDb252ZXJ0ZXI9e29ialRvSlNYfVxuICAgICAgICAgKiAgICAgdG90YWxJdGVtcz17MX0gLz5cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtVG9KU1hDb252ZXJ0ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIGl0ZW1XcmFwcGVyUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgb2YgdGhlIFwiRmlyc3QgcGFnZVwiIGNvbnRyb2wgYnV0dG9uXG4gICAgICAgICAqL1xuICAgICAgICBqdW1wVG9GaXJzdFBhZ2VDb250cm9sQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRlbnQgdG8gYmUgZGlzcGxheWVkIGluc2lkZSBvZiB0aGUgXCJMYXN0IHBhZ2VcIiBjb250cm9sIGJ1dHRvblxuICAgICAgICAgKi9cbiAgICAgICAganVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRlbnQgdG8gYmUgZGlzcGxheWVkIGluc2lkZSBvZiB0aGUgXCJOZXh0IHBhZ2VcIiBjb250cm9sIGJ1dHRvblxuICAgICAgICAgKi9cbiAgICAgICAganVtcFRvTmV4dFBhZ2VDb250cm9sQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRlbnQgdG8gYmUgZGlzcGxheWVkIGluc2lkZSBvZiB0aGUgXCJQcmV2aW91cyBwYWdlXCIgY29udHJvbCBidXR0b25cbiAgICAgICAgICovXG4gICAgICAgIGp1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIGJlIGRpc3BsYXllZCBvbiBlYWNoIHBhZ2U7IG11c3QgYmVcbiAgICAgICAgICogZ3JlYXRlciB0aGFuIHplcm9cbiAgICAgICAgICovXG4gICAgICAgIG51bUl0ZW1zUGVyUGFnZTogZnVuY3Rpb24gdmFsaWRhdGVOdW1JdGVtc1BlclBhZ2UocHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChpc0ludGVnZXIocHJvcHMubnVtSXRlbXNQZXJQYWdlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdgbnVtSXRlbXNQZXJQYWdlYCBtdXN0IGJlIGFuIGludGVnZXIuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm51bUl0ZW1zUGVyUGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdgbnVtSXRlbXNQZXJQYWdlYCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgbWF4aW11bSBudW1iZXIgb2YgcGFnZXMgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBjb250cm9sIGJhciBhdFxuICAgICAgICAgKiBvbmUgdGltZVxuICAgICAgICAgKi9cbiAgICAgICAgbnVtUGFnZVRvZ2dsZXM6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgd2hldGhlciB0aGUgcGFnaW5hdGlvbiBjb250cm9scyBhcmUgZGlzcGxheWVkIGFib3ZlLFxuICAgICAgICAgKiBiZWxvdywgb3IgYm90aCBhYm92ZSBhbmQgYmVsb3cgdGhlIGNvbnRlbnRcbiAgICAgICAgICovXG4gICAgICAgIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgUGFnaW5hdGlvbi5wb3NpdGlvbi5BQk9WRSxcbiAgICAgICAgICAgIFBhZ2luYXRpb24ucG9zaXRpb24uQkVMT1csXG4gICAgICAgICAgICBQYWdpbmF0aW9uLnBvc2l0aW9uLkJPVEgsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3aGV0aGVyIHRoZSBcImZpcnN0IHBhZ2VcIiBjb250cm9sIGJ1dHRvbiBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAgICAgICAqL1xuICAgICAgICBzaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdoZXRoZXIgdGhlIFwibGFzdCBwYWdlXCIgY29udHJvbCBidXR0b24gc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0p1bXBUb0xhc3RQYWdlQ29udHJvbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdoZXRoZXIgdGhlIFwibmV4dCBwYWdlXCIgY29udHJvbCBidXR0b24gc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0p1bXBUb05leHRQYWdlQ29udHJvbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdoZXRoZXIgdGhlIFwicHJldmlvdXMgcGFnZVwiIGNvbnRyb2wgYnV0dG9uIHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNob3dKdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVuZGVycyBhbiBlbGVtZW50IGNhbGxlZCBgLmItcGFnaW5hdGlvbi1jb250cm9sLXN0YXRlYCB0aGF0XG4gICAgICAgICAqIGNvbnRhaW5zIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwYWdpbmF0aW9uIGxpa2UgXCIxIG9mIDEwXCI7XG4gICAgICAgICAqIGFsdGVybmF0aXZlbHksIHRoaXMgcHJvcCBhbHNvIGFjY2VwdHMgYSBmdW5jdGlvbiB0aGF0IGl0IHdpbGxcbiAgICAgICAgICogY2FsbCB3aXRoIHRoZSBjdXJyZW50UGFnZSBhbmQgdG90YWxQYWdlcyBmb3IgeW91IHRvIGZvcm1hdDpcblxuICAgICAgICAgKiBgYGBqc3hcbiAgICAgICAgICogc2hvd1BhZ2luYXRlZFN0YXRlPXtcbiAgICAgICAgICogICAgIChjdXJyZW50UGFnZSwgdG90YWxQYWdlcykgPT4gKFxuICAgICAgICAgKiAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb28nPlxuICAgICAgICAgKiAgICAgICAgICAgICBZb3UncmUgb24gcGFnZSB7Y3VycmVudFBhZ2V9IG9mIHt0b3RhbFBhZ2VzfSBwYWdlcyFcbiAgICAgICAgICogICAgICAgICA8L2Rpdj5cbiAgICAgICAgICogICAgIClcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHNob3dQYWdpbmF0aW9uU3RhdGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSB0b3RhbCBudW1iZXIgb2YgaXRlbXMgdG8gYmUgZGlzcGxheWVkIGluIHRoZSB2aWV3XG4gICAgICAgICAqL1xuICAgICAgICB0b3RhbEl0ZW1zOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgYWZ0ZXI6IG51bGwsXG4gICAgICAgIGJlZm9yZTogbnVsbCxcbiAgICAgICAgY29udHJvbFdyYXBwZXJQcm9wczoge30sXG4gICAgICAgIGN1c3RvbUNvbnRyb2xDb250ZW50OiBudWxsLFxuICAgICAgICBnZXRJdGVtOiBub29wLFxuICAgICAgICBoaWRlUGFnZXJJZk5vdE5lZWRlZDogZmFsc2UsXG4gICAgICAgIGlkZW50aWZpZXI6IHV1aWQoKSxcbiAgICAgICAgaW5pdGlhbFBhZ2U6IDEsXG4gICAgICAgIGl0ZW1Mb2FkaW5nQ29udGVudDogdW5kZWZpbmVkLFxuICAgICAgICBpdGVtVG9KU1hDb252ZXJ0ZXI6IGlkZW50aXR5LFxuICAgICAgICBpdGVtV3JhcHBlclByb3BzOiB7fSxcbiAgICAgICAganVtcFRvRmlyc3RQYWdlQ29udHJvbENvbnRlbnQ6ICfih6QnLFxuICAgICAgICBqdW1wVG9MYXN0UGFnZUNvbnRyb2xDb250ZW50OiAn4oelJyxcbiAgICAgICAganVtcFRvTmV4dFBhZ2VDb250cm9sQ29udGVudDogJ+KGkicsXG4gICAgICAgIGp1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50OiAn4oaQJyxcbiAgICAgICAgbnVtSXRlbXNQZXJQYWdlOiAxMCxcbiAgICAgICAgbnVtUGFnZVRvZ2dsZXM6IDUsXG4gICAgICAgIHBvc2l0aW9uOiBQYWdpbmF0aW9uLnBvc2l0aW9uLkFCT1ZFLFxuICAgICAgICBzaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbDogdHJ1ZSxcbiAgICAgICAgc2hvd0p1bXBUb0xhc3RQYWdlQ29udHJvbDogdHJ1ZSxcbiAgICAgICAgc2hvd0p1bXBUb05leHRQYWdlQ29udHJvbDogdHJ1ZSxcbiAgICAgICAgc2hvd0p1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2w6IHRydWUsXG4gICAgICAgIHNob3dQYWdpbmF0aW9uU3RhdGU6IHRydWUsXG4gICAgICAgIHRvdGFsSXRlbXM6IG51bGwsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFBhZ2luYXRpb24uZGVmYXVsdFByb3BzKVxuXG4gICAgbW91bnRlZCA9IGZhbHNlXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMucHJvcHMuaW5pdGlhbFBhZ2UsXG4gICAgICAgIHRhcmdldEluZGV4OiAodGhpcy5wcm9wcy5pbml0aWFsUGFnZSAtIDEpICogdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGN1cnJlbnRQYWdlID0gKCkgPT4gdGhpcy5zdGF0ZS5jdXJyZW50UGFnZVxuXG4gICAgZ2V0UGFnZUZvckluZGV4ID0gKGluZGV4LCBpdGVtc1BlclBhZ2UgPSB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZSkgPT4gTWF0aC5jZWlsKChpbmRleCArIDEpIC8gaXRlbXNQZXJQYWdlKVxuICAgIHRvdGFsUGFnZXMgPSAoKSA9PiBNYXRoLmNlaWwodGhpcy5wcm9wcy50b3RhbEl0ZW1zIC8gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpXG5cbiAgICBmaXJzdFZpc2libGVJdGVtSW5kZXggPSAoKSA9PiAodGhpcy5jdXJyZW50UGFnZSgpIC0gMSkgKiB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSAgICAgeyB0aGlzLm1vdW50ZWQgPSB0cnVlOyB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSAgeyB0aGlzLm1vdW50ZWQgPSBmYWxzZTsgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKF8sIHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAocHJldlN0YXRlLmN1cnJlbnRQYWdlICE9PSB0aGlzLmN1cnJlbnRQYWdlKCkpIHtcbiAgICAgICAgICAgIGZpbmRET01Ob2RlKHRoaXMucmVmcy5pdGVtXzApLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgICAgICBjb25zdCBvbGRQcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgLy8gdXNlIHRyYW5zYWN0aW9uYWwgYHNldFN0YXRlKClgIHN5bnRheCB0byBlbnN1cmUgdGhhdCBwZW5kaW5nIHN0YXRlIHVwZGF0ZXMgYXJlIGhvbm9yZWQsXG4gICAgICAgIC8vIGxpa2UgdGhvc2UgZnJvbSBganVtcFRvSW5kZXgoKWBcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgICAgICAgICAvLyBOT1RFOiBgcHJvcHNgIGhlcmUgaXMgdGVjaG5pY2FsbHkgdGhlIGBuZXh0UHJvcHNgIHlvdSdkIHJlY2VpdmUgZnJvbSB0aGUgZmlyc3QgY1dSUCBhcmd1bWVudFxuICAgICAgICAgICAgLy8gc28gdGhhdCdzIHdoeSB3ZSdyZSBjYWNoaW5nIGBvbGRQcm9wc2Agb3V0c2lkZSB0aGUgYHNldFN0YXRlYFxuICAgICAgICAgICAgaWYgKHByb3BzLmlkZW50aWZpZXIgIT09IG9sZFByb3BzLmlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogdGhpcy5nZXRQYWdlRm9ySW5kZXgoc3RhdGUudGFyZ2V0SW5kZXgsIHByb3BzLm51bUl0ZW1zUGVyUGFnZSksXG4gICAgICAgICAgICAgICAgdGFyZ2V0SW5kZXg6IHN0YXRlLnRhcmdldEluZGV4LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGp1bXBUb0luZGV4ID0gKGkpID0+IHtcbiAgICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gdGhpcy5wcm9wcy50b3RhbEl0ZW1zKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgQ2Fubm90IHBhZ2UgdG8gaW52YWxpZCBpbmRleCAke2l9LmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogdGhpcy5nZXRQYWdlRm9ySW5kZXgoaSksXG4gICAgICAgICAgICB0YXJnZXRJbmRleDogaSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVDb250cm9scygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMuY3VycmVudFBhZ2UoKTtcbiAgICAgICAgY29uc3QgdG90YWxQYWdlcyA9IHRoaXMudG90YWxQYWdlcygpO1xuICAgICAgICBjb25zdCBzdGFydFBhZ2UgPSBjdXJyZW50UGFnZSAtICgoY3VycmVudFBhZ2UgLSAxKSAlIHRoaXMucHJvcHMubnVtUGFnZVRvZ2dsZXMpO1xuICAgICAgICBjb25zdCBlbmRQYWdlID0gTWF0aC5taW4oc3RhcnRQYWdlICsgdGhpcy5wcm9wcy5udW1QYWdlVG9nZ2xlcyAtIDEsIHRvdGFsUGFnZXMpO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IGlzRnVuY3Rpb24odGhpcy5wcm9wcy5zaG93UGFnaW5hdGlvblN0YXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuc2hvd1BhZ2luYXRpb25TdGF0ZShjdXJyZW50UGFnZSwgdG90YWxQYWdlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBgJHtjdXJyZW50UGFnZX0gLyAke3RvdGFsUGFnZXN9YCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1zdGF0ZScsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dKdW1wVG9GaXJzdFBhZ2VDb250cm9sKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIFtQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEVdOiBQYWdpbmF0aW9uLmNvbnRyb2wuRklSU1QsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuanVtcFRvRmlyc3RQYWdlQ29udHJvbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtZmlyc3QnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBjdXJyZW50UGFnZSA9PT0gMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd0p1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2wpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV06IFBhZ2luYXRpb24uY29udHJvbC5QUkVWSU9VUyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5qdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sQ29udGVudCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1wcmV2aW91cycsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGN1cnJlbnRQYWdlID09PSAxLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRQYWdlOyBpIDw9IGVuZFBhZ2U7IGkrKykge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBbUGFnaW5hdGlvbi5DT05UUk9MX0RBVEFfQVRUUklCVVRFXTogaSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogaSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdiLXBhZ2luYXRpb24tY29udHJvbCcsXG4gICAgICAgICAgICAgICAgcHJlc3NlZDogY3VycmVudFBhZ2UgPT09IGksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dKdW1wVG9OZXh0UGFnZUNvbnRyb2wpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV06IFBhZ2luYXRpb24uY29udHJvbC5ORVhULFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmp1bXBUb05leHRQYWdlQ29udHJvbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtbmV4dCcsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGN1cnJlbnRQYWdlID09PSB0b3RhbFBhZ2VzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93SnVtcFRvTGFzdFBhZ2VDb250cm9sKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIFtQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEVdOiBQYWdpbmF0aW9uLmNvbnRyb2wuTEFTVCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5qdW1wVG9MYXN0UGFnZUNvbnRyb2xDb250ZW50LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLWxhc3QnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBjdXJyZW50UGFnZSA9PT0gdG90YWxQYWdlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY3VzdG9tQ29udHJvbENvbnRlbnQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY3VzdG9tQ29udHJvbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtY3VzdG9tJyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVJdGVtcygpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IHRoaXMuZmlyc3RWaXNpYmxlSXRlbUluZGV4KCk7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IE1hdGgubWluKHRoaXMucHJvcHMudG90YWxJdGVtcywgZmlyc3RJbmRleCArIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlKSAtIDE7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2godGhpcy5wcm9wcy5nZXRJdGVtKGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG5cbiAgICBoYW5kbGVQYWdlU2VsZWN0ZWQgPSAob3B0aW9uKSA9PiB7XG4gICAgICAgIGxldCBuZXh0VGFyZ2V0SW5kZXg7XG5cbiAgICAgICAgc3dpdGNoIChvcHRpb25bUGFnaW5hdGlvbi5DT05UUk9MX0RBVEFfQVRUUklCVVRFXSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjYXNlIFBhZ2luYXRpb24uY29udHJvbC5GSVJTVDpcbiAgICAgICAgICAgIG5leHRUYXJnZXRJbmRleCA9IDA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhZ2luYXRpb24uY29udHJvbC5QUkVWSU9VUzpcbiAgICAgICAgICAgIG5leHRUYXJnZXRJbmRleCA9IHRoaXMuZmlyc3RWaXNpYmxlSXRlbUluZGV4KCkgLSB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGFnaW5hdGlvbi5jb250cm9sLk5FWFQ6XG4gICAgICAgICAgICBuZXh0VGFyZ2V0SW5kZXggPSB0aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpICsgdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2U7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhZ2luYXRpb24uY29udHJvbC5MQVNUOlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gdGhpcy5wcm9wcy50b3RhbEl0ZW1zIC0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuZXh0VGFyZ2V0SW5kZXggPSBwYXJzZUludChvcHRpb25bUGFnaW5hdGlvbi5DT05UUk9MX0RBVEFfQVRUUklCVVRFXSwgMTApICogdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UgLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogdGhpcy5nZXRQYWdlRm9ySW5kZXgobmV4dFRhcmdldEluZGV4KSxcbiAgICAgICAgICAgIHRhcmdldEluZGV4OiBuZXh0VGFyZ2V0SW5kZXgsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhbmRsZUl0ZW1Qcm9taXNlRnVsZmlsbG1lbnQgPSAocGF5bG9hZCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pdGVtVG9KU1hDb252ZXJ0ZXIocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJJdGVtcygpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzLml0ZW1XcmFwcGVyUHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcnJvd0tleU5hdmlnYXRpb25cbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wYWdpbmF0aW9uLWl0ZW1zJywgcHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAge3RoaXMuZ2VuZXJhdGVJdGVtcygpLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBc3luY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17aW5kZXggPT09IDAgPyAnaXRlbV8wJyA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXBhZ2luYXRpb24taXRlbScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ItcGFnaW5hdGlvbi1pdGVtLWV2ZW4nOiBpbmRleCAlIDIgPT09IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiLXBhZ2luYXRpb24taXRlbS1vZGQnOiBpbmRleCAlIDIgIT09IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYWdpbmF0aW9uLWluZGV4PXt0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZSAqICh0aGlzLmN1cnJlbnRQYWdlKCkgLSAxKSArIGluZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdDb250ZW50PXt0aGlzLnByb3BzLml0ZW1Mb2FkaW5nQ29udGVudH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW0gaW5zdGFuY2VvZiBQcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaXRlbS50aGVuKHRoaXMuaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudCwgdGhpcy5oYW5kbGVJdGVtUHJvbWlzZUZ1bGZpbGxtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMucHJvcHMuaXRlbVRvSlNYQ29udmVydGVyKGl0ZW0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Bc3luYz5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQXJyb3dLZXlOYXZpZ2F0aW9uPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckNvbnRyb2xzKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhpZGVQYWdlcklmTm90TmVlZGVkICYmIHRoaXMucHJvcHMudG90YWxJdGVtcyA8PSB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTZWdtZW50ZWRDb250cm9sXG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMuY29udHJvbFdyYXBwZXJQcm9wc31cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXBhZ2luYXRpb24tY29udHJvbHMnLCB0aGlzLnByb3BzLmNvbnRyb2xXcmFwcGVyUHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIFsnYi1wYWdpbmF0aW9uLWNvbnRyb2xzLWFib3ZlJ106IHBvc2l0aW9uID09PSBQYWdpbmF0aW9uLnBvc2l0aW9uLkFCT1ZFLFxuICAgICAgICAgICAgICAgICAgICBbJ2ItcGFnaW5hdGlvbi1jb250cm9scy1iZWxvdyddOiBwb3NpdGlvbiA9PT0gUGFnaW5hdGlvbi5wb3NpdGlvbi5CRUxPVyxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICBvcHRpb25zPXt0aGlzLmdlbmVyYXRlQ29udHJvbHMoKX1cbiAgICAgICAgICAgICAgICBvbk9wdGlvblNlbGVjdGVkPXt0aGlzLmhhbmRsZVBhZ2VTZWxlY3RlZH0gLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJWaWV3KCkge1xuICAgICAgICBjb25zdCB7cG9zaXRpb259ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgcCA9IFBhZ2luYXRpb24ucG9zaXRpb247XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdiLXBhZ2luYXRpb24nPlxuICAgICAgICAgICAgICAgIHtwb3NpdGlvbiA9PT0gcC5BQk9WRSB8fCBwb3NpdGlvbiA9PT0gcC5CT1RIID8gdGhpcy5yZW5kZXJDb250cm9scyhwLkFCT1ZFKSA6IG51bGx9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYmVmb3JlfVxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckl0ZW1zKCl9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWZ0ZXJ9XG4gICAgICAgICAgICAgICAge3Bvc2l0aW9uID09PSBwLkJFTE9XIHx8IHBvc2l0aW9uID09PSBwLkJPVEggPyB0aGlzLnJlbmRlckNvbnRyb2xzKHAuQkVMT1cpIDogbnVsbH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgey4uLm9taXQodGhpcy5wcm9wcywgUGFnaW5hdGlvbi5pbnRlcm5hbEtleXMpfSBjbGFzc05hbWU9e2N4KCdiLXBhZ2luYXRpb24td3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyVmlldygpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vaW5kZXguanMiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0ludGVnZXIoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0ludGVnZXIoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbnRlZ2VyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2guaXNpbnRlZ2VyL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2ZpbmRET01Ob2RlfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgRGlhbG9nIGZyb20gJ2JvdW5kbGVzcy1kaWFsb2cnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICdib3VuZGxlc3MtcG9ydGFsJztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHRyYW5zZm9ybVByb3AgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eSc7XG5cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQ2FyZGluYWwoZGlyZWN0aW9uKSB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb25bMF0pIHtcbiAgICBjYXNlICdOJzpcbiAgICAgICAgcmV0dXJuICdTJztcbiAgICBjYXNlICdTJzpcbiAgICAgICAgcmV0dXJuICdOJztcbiAgICBjYXNlICdFJzpcbiAgICAgICAgcmV0dXJuICdXJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ0UnO1xufVxuXG5mdW5jdGlvbiB3aXRob3V0KGFycjEsIGFycjIpIHsgcmV0dXJuIGFycjEuZmlsdGVyKChpdGVtKSA9PiBhcnIyLmluZGV4T2YoaXRlbSkgPT09IC0xKTsgfVxuXG5jb25zdCBDTEFTU19SRU1PVkFMX1JFR0VYID0gL1xccz9iLXBvcG92ZXItKGFuY2hvcnxzZWxmKS0oc3RhcnR8bWlkZGxlfGVuZCkvZztcblxuY29uc3QgREVGQVVMVF9DQVJFVF9DT01QT05FTlQgPSAoXG4gICAgPHN2ZyB2aWV3Qm94PScwIDAgMTQgOS41JyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnPlxuICAgICAgICA8Zz5cbiAgICAgICAgICAgIDxwb2x5Z29uIGNsYXNzTmFtZT0nYi1wb3BvdmVyLWNhcmV0LWJvcmRlcicgZmlsbD0nIzAwMCcgcG9pbnRzPSc3IDAgMTQgMTAgMCAxMCcgLz5cbiAgICAgICAgICAgIDxwb2x5Z29uIGNsYXNzTmFtZT0nYi1wb3BvdmVyLWNhcmV0LWZpbGwnIGZpbGw9JyNGRkYnIHBvaW50cz0nNi45ODIzMDQ0NCAxLjc1IDEyLjc1IDEwIDEuMjUgMTAnIC8+XG4gICAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbik7XG5cbmNvbnN0IFNUQVJUID0gMDtcbmNvbnN0IE1JRERMRSA9IDE7XG5jb25zdCBFTkQgPSAyO1xuXG5jb25zdCBjb21iaW5hdGlvbnMgPSBbXG4gICAge25hbWU6ICdOTlcnLCAgIGF4OiBTVEFSVCwgICAgIGF5OiBTVEFSVCwgICAgICBkeDogU1RBUlQsICAgZHk6IEVORH0sXG4gICAge25hbWU6ICdOJywgICAgIGF4OiBNSURETEUsICAgIGF5OiBTVEFSVCwgICAgICBkeDogTUlERExFLCAgZHk6IEVORH0sXG4gICAge25hbWU6ICdOTkUnLCAgIGF4OiBFTkQsICAgICAgIGF5OiBTVEFSVCwgICAgICBkeDogRU5ELCAgICAgZHk6IEVORH0sXG4gICAge25hbWU6ICdFTkUnLCAgIGF4OiBFTkQsICAgICAgIGF5OiBTVEFSVCwgICAgICBkeDogU1RBUlQsICAgZHk6IFNUQVJUfSxcbiAgICB7bmFtZTogJ0UnLCAgICAgYXg6IEVORCwgICAgICAgYXk6IE1JRERMRSwgICAgIGR4OiBTVEFSVCwgICBkeTogTUlERExFfSxcbiAgICB7bmFtZTogJ0VTRScsICAgYXg6IEVORCwgICAgICAgYXk6IEVORCwgICAgICAgIGR4OiBTVEFSVCwgICBkeTogRU5EfSxcbiAgICB7bmFtZTogJ1NTRScsICAgYXg6IEVORCwgICAgICAgYXk6IEVORCwgICAgICAgIGR4OiBFTkQsICAgICBkeTogU1RBUlR9LFxuICAgIHtuYW1lOiAnUycsICAgICBheDogTUlERExFLCAgICBheTogRU5ELCAgICAgICAgZHg6IE1JRERMRSwgIGR5OiBTVEFSVH0sXG4gICAge25hbWU6ICdTU1cnLCAgIGF4OiBTVEFSVCwgICAgIGF5OiBFTkQsICAgICAgICBkeDogU1RBUlQsICAgZHk6IFNUQVJUfSxcbiAgICB7bmFtZTogJ1dTVycsICAgYXg6IFNUQVJULCAgICAgYXk6IEVORCwgICAgICAgIGR4OiBFTkQsICAgICBkeTogRU5EfSxcbiAgICB7bmFtZTogJ1cnLCAgICAgYXg6IFNUQVJULCAgICAgYXk6IE1JRERMRSwgICAgIGR4OiBFTkQsICAgICBkeTogTUlERExFfSxcbiAgICB7bmFtZTogJ1dOVycsICAgYXg6IFNUQVJULCAgICAgYXk6IFNUQVJULCAgICAgIGR4OiBFTkQsICAgICBkeTogU1RBUlR9LFxuXTtcblxuLyoqXG5fX0Egbm9uLWJsb2NraW5nIGNvbnRhaW5lciBwb3NpdGlvbmVkIHRvIGEgc3BlY2lmaWMgYW5jaG9yIGVsZW1lbnQuX19cblxuQSBwb3BvdmVyIGlzIGEgdHlwZSBvZiBbRGlhbG9nXSguL0RpYWxvZykgdGhhdCBpcyBtZWFudCB0byBwcm92aWRlIGFkZGl0aW9uYWwgY29udGV4dCB0byBjb250ZW50IChhbiBcImFuY2hvclwiKSBjdXJyZW50bHkgb24tc2NyZWVuLiBUeXBpY2FsbHksIGEgcG9wb3ZlciBpcyBzcGF3bmVkIGJ5IGludGVyYWN0aW5nIHdpdGggdGhlIGNvbnRlbnQgaXQgZW5yaWNoZXMgYW5kIGlzIGRpc21pc3NlZCBieSBjbGlja2luZyBvciBzaGlmdGluZyBmb2N1cyB0byBhbiBhbHRlcm5hdGUgbG9jYXRpb24uXG5cbkFsaWdubWVudCBvcHRpb25zIGZvciB0aGUgcG9wb3ZlciBhcmUgZGVzaWduZWQgdG8gbWlycm9yIGNvbXBhc3MgZGlyZWN0aW9uczpcblxuYGBgXG4gICAgICAg4oaSICAgICAgIOKGkFxuICAgICAgTk5XICBOICBOTkVcbuKGkyBXTlcgICAgICAgICAgICAgRU5FIOKGk1xuICAgIFcgICBBTkNIT1IgICAgRVxu4oaRIFdTVyAgICAgICAgICAgICBFU0Ug4oaRXG4gICAgICBTU1cgIFMgIFNTRVxuICAgICAgIOKGkiAgICAgICDihpBcbmBgYFxuXG5UaGUgYXJyb3dzIGluZGljYXRlIHdoaWNoIHdheSB0aGUgcG9wb3ZlciB3aWxsIGV4dGVuZCwgZS5nLiDihpIgbWVhbnMgdGhlIHBvcG92ZXIgaXMgYWxpZ25lZCB0byB0aGUgbGVmdCBlZGdlIGFuZCBleHRlbmRzIGluIHRoYXQgZGlyZWN0aW9uLiBEaWFnb25hbCBjb3JuZXJzIChOVywgTkUsIFNFLCBTVykgYXJlIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlxuXG5gYGBqc3hcbjxQb3BvdmVyXG4gICAgYW5jaG9yPXtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc29tZS1hbmNob3ItZWxlbWVudCcpfVxuICAgIHByZXNldD17UG9wb3Zlci5wcmVzZXQuTn0+XG4gICAgTXkgcG9wb3ZlciBjb250ZW50IVxuPC9Qb3BvdmVyPlxuYGBgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VxdWVuY2VzXG4gICAgc3RhdGljIHByZXNldCA9IGNvbWJpbmF0aW9ucy5yZWR1Y2UoKG1hcCwgZGVmKSA9PiAoKG1hcFtkZWYubmFtZV0gPSBkZWYpLCBtYXApLCB7fSlcblxuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5wcm9wVHlwZXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgRE9NIGVsZW1lbnQgb3IgUmVhY3QgcmVmZXJlbmNlIChyZWYpIHRvIG9uZSBmb3IgcG9zaXRpb25pbmcgcHVycG9zZXNcbiAgICAgICAgICovXG4gICAgICAgIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuaW5zdGFuY2VPZihIVE1MRWxlbWVudCksXG4gICAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgICAgIHByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRoZSBnaXZlbiBhbGlnbm1lbnQgc2V0dGluZ3Mgd291bGQgdGFrZSB0aGUgcG9wb3ZlciBvdXQgb2YgYm91bmRzLCBjaGFuZ2UgdGhlIGFsaWdubWVudCBhcyBuZWNlc3NhcnkgdG8gcmVtYWluIGluIHRoZSB2aWV3cG9ydFxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b1JlcG9zaXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIERPTSBlbGVtZW50IG9yIFJlYWN0IHJlZmVyZW5jZSAocmVmKSB0byBvbmUgZm9yIHBvc2l0aW9uaW5nIHB1cnBvc2VzLCB0aGUgY2FyZXQgY29tcG9uZW50IHdpbGxcbiAgICAgICAgICogYmUgYXV0b21hdGljYWxseSBwb3NpdGlvbmVkIHRvIGNlbnRlciBvbiB0aGlzIHByb3ZpZGVkIGFuY2hvcjsgYnkgZGVmYXVsdCBpdCB3aWxsIGNlbnRlclxuICAgICAgICAgKiBvbiBgcHJvcHMuYW5jaG9yYFxuICAgICAgICAgKi9cbiAgICAgICAgY2FyZXRBbmNob3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICBwcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIEpTWCB0aGF0IGlzIHJlbmRlcmVkIGFuZCB1c2VkIHRvIHBvaW50IGF0IHRoZSBtaWRkbGUgb2YgdGhlIGFuY2hvciBlbGVtZW50IGFuZCBpbmRpY2F0ZSB0aGUgY29udGV4dCBvZiB0aGUgcG9wb3ZlclxuICAgICAgICAgKi9cbiAgICAgICAgY2FyZXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gICAgICAgIHBvcnRhbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoUG9ydGFsLlByb3BUeXBlcyksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiA8UG9wb3ZlclxuICAgICAgICAgKiAgICAgYW5jaG9yPXtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc29tZS1hbmNob3ItZWxlbWVudCcpfVxuICAgICAgICAgKiAgICAgcHJlc2V0PXtQb3BvdmVyLnByZXNldC5OTkV9PlxuICAgICAgICAgKiAgICAgTXkgcG9wb3ZlciBjb250ZW50IVxuICAgICAgICAgKiA8L1BvcG92ZXI+XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgcHJlc2V0OiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuTk5XLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuTixcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0Lk5ORSxcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0LkVORSxcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0LkUsXG4gICAgICAgICAgICBQb3BvdmVyLnByZXNldC5FU0UsXG4gICAgICAgICAgICBQb3BvdmVyLnByZXNldC5TU0UsXG4gICAgICAgICAgICBQb3BvdmVyLnByZXNldC5TLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuU1NXLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuV1NXLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuVyxcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0LldOVyxcbiAgICAgICAgXSksXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgLi4uRGlhbG9nLmRlZmF1bHRQcm9wcyxcbiAgICAgICAgYW5jaG9yOiB1bmRlZmluZWQsXG4gICAgICAgIGF1dG9SZXBvc2l0aW9uOiB0cnVlLFxuICAgICAgICBjYXB0dXJlRm9jdXM6IGZhbHNlLFxuICAgICAgICBjYXJldEFuY2hvcjogdW5kZWZpbmVkLFxuICAgICAgICBjYXJldENvbXBvbmVudDogREVGQVVMVF9DQVJFVF9DT01QT05FTlQsXG4gICAgICAgIGNsb3NlT25Fc2NLZXk6IHRydWUsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlU2Nyb2xsOiB0cnVlLFxuICAgICAgICBwb3J0YWxQcm9wczoge30sXG4gICAgICAgIHByZXNldDogUG9wb3Zlci5wcmVzZXQuUyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gd2l0aG91dChPYmplY3Qua2V5cyhQb3BvdmVyLmRlZmF1bHRQcm9wcyksIERpYWxvZy5pbnRlcm5hbEtleXMpXG5cbiAgICBzdGF0aWMgZ2V0QWxpZ25tZW50Q2xhc3NGcmFnbWVudChjb25zdGFudCkge1xuICAgICAgICBzd2l0Y2ggKGNvbnN0YW50KSB7XG4gICAgICAgIGNhc2UgU1RBUlQ6XG4gICAgICAgICAgICByZXR1cm4gJ3N0YXJ0JztcblxuICAgICAgICBjYXNlIE1JRERMRTpcbiAgICAgICAgICAgIHJldHVybiAnbWlkZGxlJztcblxuICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIHJldHVybiAnZW5kJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhY2hlVmlld3BvcnRDYXJ0b2dyYXBoeShhbmNob3IsIGNhcmV0QW5jaG9yKSB7XG4gICAgICAgIGNvbnN0IGJvZHlSZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICB0aGlzLmFuY2hvclJlY3QgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuY2FyZXRBbmNob3JSZWN0ID0gY2FyZXRBbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgLy8gbm9ybWFsbHkgd2UnZCB1c2Ugc2Nyb2xsVG9wL3Njcm9sbExlZnQsIGJ1dCBzY3JvbGwgYmVoYXZpb3IgY2hhbmdlcyB3aGVuIHBvc2l0aW9uOiBzdGlja3lcbiAgICAgICAgLy8gaXMgZW5hYmxlZCBpbiBDaHJvbWUgYW5kIGludmVydGluZyB0aGUgbmVnYXRpdmUgdmlld3BvcnQgcmVjdCB2YWx1ZSBzZWVtcyB0byB3b3JrIG1vcmVcbiAgICAgICAgLy8gY29uc2lzdGVudGx5XG4gICAgICAgIHRoaXMuYm9keUxlZnQgPSBib2R5UmVjdC5sZWZ0ICogLTE7XG4gICAgICAgIHRoaXMuYm9keVRvcCA9IGJvZHlSZWN0LnRvcCAqIC0xO1xuICAgIH1cblxuICAgIGdldE5leHRDYXJldFhQb3NpdGlvbih7bmFtZSwgYXgsIGR4LCBheSwgZHl9LCBjYXJldCA9IHRoaXMuJGNhcmV0KSB7XG4gICAgICAgIGxldCBuZXh0WCA9IDA7XG5cbiAgICAgICAgaWYgKG5hbWVbMF0gPT09ICdOJyB8fCBuYW1lWzBdID09PSAnUycpIHtcbiAgICAgICAgICAgIC8vIHBvcG92ZXIgaXMgYWJvdmUvYmVsb3csIHNvIHdlIG5lZWQgdG8gZGV0ZWN0IHRoZSBYIHBvc2l0aW9uIG9mIHRoZSBjYXJldCBhbmNob3JcbiAgICAgICAgICAgIG5leHRYID0gdGhpcy5jYXJldEFuY2hvclJlY3QubGVmdCAtIHRoaXMuYW5jaG9yUmVjdC5sZWZ0ICsgdGhpcy5jYXJldEFuY2hvclJlY3Qud2lkdGggLyAyO1xuXG4gICAgICAgICAgICBpZiAoZHggPT09IE1JRERMRSkge1xuICAgICAgICAgICAgICAgIG5leHRYICs9ICh0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aCAtIHRoaXMuYW5jaG9yUmVjdC53aWR0aCkgLyAyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkeCA9PT0gRU5EKSB7XG4gICAgICAgICAgICAgICAgbmV4dFggKz0gdGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50V2lkdGggLSB0aGlzLmFuY2hvclJlY3Qud2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwb3BvdmVyIGlzIGxlZnQvcmlnaHQsIHNvIHdlIG5lZWQgdG8gZGV0ZWN0IHRoZSBZIHBvc2l0aW9uIG9mIHRoZSBjYXJldCBhbmNob3IgKGNhcmV0IGlzIHJvdGF0ZWQgdmlhIENTUylcbiAgICAgICAgICAgIG5leHRYID0gdGhpcy5jYXJldEFuY2hvclJlY3QudG9wIC0gdGhpcy5hbmNob3JSZWN0LnRvcCArIHRoaXMuY2FyZXRBbmNob3JSZWN0LmhlaWdodCAvIDI7XG5cbiAgICAgICAgICAgIGlmIChkeSA9PT0gTUlERExFKSB7XG4gICAgICAgICAgICAgICAgbmV4dFggKz0gKHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudEhlaWdodCAtIHRoaXMuYW5jaG9yUmVjdC5oZWlnaHQpIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZHkgPT09IEVORCkge1xuICAgICAgICAgICAgICAgIG5leHRYICs9IHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudEhlaWdodCAtIHRoaXMuYW5jaG9yUmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0WCAtPSBjYXJldC5jbGllbnRXaWR0aCAvIDI7XG5cbiAgICAgICAgcmV0dXJuIG5leHRYO1xuICAgIH1cblxuICAgIGdldE5leHREaWFsb2dYUG9zaXRpb24oe2F4LCBkeH0sIGRpYWxvZyA9IHRoaXMuZGlhbG9nLiR3cmFwcGVyKSB7XG4gICAgICAgIGxldCBuZXh0WCA9IHRoaXMuYW5jaG9yUmVjdC5sZWZ0ICsgdGhpcy5ib2R5TGVmdDtcblxuICAgICAgICBzd2l0Y2ggKGF4KSB7XG4gICAgICAgIGNhc2UgTUlERExFOlxuICAgICAgICAgICAgbmV4dFggKz0gdGhpcy5hbmNob3JSZWN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRU5EOlxuICAgICAgICAgICAgbmV4dFggKz0gdGhpcy5hbmNob3JSZWN0LndpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGR4KSB7XG4gICAgICAgIGNhc2UgTUlERExFOlxuICAgICAgICAgICAgbmV4dFggLT0gZGlhbG9nLmNsaWVudFdpZHRoIC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRU5EOlxuICAgICAgICAgICAgbmV4dFggLT0gZGlhbG9nLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dFg7XG4gICAgfVxuXG4gICAgZ2V0TmV4dERpYWxvZ1lQb3NpdGlvbih7YXksIGR5fSwgZGlhbG9nID0gdGhpcy5kaWFsb2cuJHdyYXBwZXIpIHtcbiAgICAgICAgbGV0IG5leHRZID0gdGhpcy5hbmNob3JSZWN0LnRvcCArIHRoaXMuYm9keVRvcDtcblxuICAgICAgICBzd2l0Y2ggKGF5KSB7XG4gICAgICAgIGNhc2UgTUlERExFOlxuICAgICAgICAgICAgbmV4dFkgKz0gdGhpcy5hbmNob3JSZWN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIG5leHRZICs9IHRoaXMuYW5jaG9yUmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZHkpIHtcbiAgICAgICAgY2FzZSBNSURETEU6XG4gICAgICAgICAgICBuZXh0WSAtPSBkaWFsb2cuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRU5EOlxuICAgICAgICAgICAgbmV4dFkgLT0gZGlhbG9nLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRZO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcG9zaXRpb24gY29tYmluYXRpb24sIHdpbGwgdGhlIHBvcG92ZXIgZml0IGludG8gdGhlIHNwYWNlIHdpdGhvdXQgb2NjbHVzaW9uP1xuICAgICAqXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAgY29uZmlnXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmF4XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmF5XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmR4XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmR5XG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgcEhlaWdodFxuICAgICAqIEBwYXJhbSAge051bWJlcn0gIHBXaWR0aFxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1Bvc2l0aW9uVmFsaWQoe25hbWUsIGF4LCBheSwgZHgsIGR5fSwgcEhlaWdodCwgcFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IGNhcmRpbmFsID0gbmFtZVswXTtcblxuICAgICAgICBpZiAoY2FyZGluYWwgPT09ICdOJyB8fCBjYXJkaW5hbCA9PT0gJ1MnKSB7XG4gICAgICAgICAgICBpZiAoY2FyZGluYWwgPT09ICdOJyAmJiB0aGlzLmFuY2hvclJlY3QudG9wIC0gcEhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7ICAgLyogd291bGQgb2NjbHVkZSBhYm92ZSAqL1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjYXJkaW5hbCA9PT0gJ1MnICYmIHRoaXMuYW5jaG9yUmVjdC5ib3R0b20gKyBwSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAgIC8qIHdvdWxkIG9jY2x1ZGUgYmVsb3cgKi9cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGF4ID09PSBTVEFSVCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hbmNob3JSZWN0LmxlZnQgKyBwV2lkdGggPiB3aW5kb3cuaW5uZXJXaWR0aCkgICAgICAvKiB3b3VsZCBvY2NsdWRlIHJpZ2h0ICovXG4gICAgICAgICAgICAgICAgICAgIHx8ICh0aGlzLmFuY2hvclJlY3QubGVmdCA8IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGFuY2hvciBpcyBwYXJ0aWFsbHkgb2Zmc2NyZWVuIHRvIHRoZSBsZWZ0ICovXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXggPT09IE1JRERMRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hbmNob3JSZWN0LmxlZnQgLSBwV2lkdGggLyAyIDwgMCkgICAgICAgICAgICAgICAgICAvKiB3b3VsZCBvY2NsdWRlIGxlZnQgKi9cbiAgICAgICAgICAgICAgICAgICAgfHwgKHRoaXMuYW5jaG9yUmVjdC5sZWZ0ICsgcFdpZHRoIC8gMiA+IHdpbmRvdy5pbm5lcldpZHRoKSAgLyogd291bGQgb2NjbHVkZSByaWdodCAqL1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgICAgICAgICh0aGlzLmFuY2hvclJlY3QubGVmdCAtIHBXaWR0aCA8IDApICAgICAgICAgICAgICAgICAgLyogd291bGQgb2NjbHVkZSBsZWZ0ICovXG4gICAgICAgICAgICAgICAgfHwgKHRoaXMuYW5jaG9yUmVjdC5yaWdodCA+IHdpbmRvdy5pbm5lcldpZHRoKSAgICAgICAgICAvKiBhbmNob3IgaXMgcGFydGlhbGx5IG9mZnNjcmVlbiB0byB0aGUgcmlnaHQgKi9cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjYXJkaW5hbCA9PT0gJ1cnIHx8IGNhcmRpbmFsID09PSAnRScpIHtcbiAgICAgICAgICAgIGlmIChjYXJkaW5hbCA9PT0gJ1cnICYmIHRoaXMuYW5jaG9yUmVjdC5sZWZ0IC0gcFdpZHRoIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAvKiB3b3VsZCBvY2NsdWRlIGxlZnQgKi9cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FyZGluYWwgPT09ICdFJyAmJiB0aGlzLmFuY2hvclJlY3QucmlnaHQgKyBwV2lkdGggPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAvKiB3b3VsZCBvY2NsdWRlIHJpZ2h0ICovXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChheSA9PT0gU1RBUlQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIShcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYW5jaG9yUmVjdC50b3AgKyBwSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KSAgICAvKiB3b3VsZCBvY2NsdWRlIGJlbG93ICovXG4gICAgICAgICAgICAgICAgICAgIHx8ICh0aGlzLmFuY2hvclJlY3QudG9wIDwgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogYW5jaG9yIGlzIHBhcnRpYWxseSBvZmZzY3JlZW4gYWJvdmUgKi9cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChheSA9PT0gTUlERExFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEoXG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmFuY2hvclJlY3QudG9wICsgdGhpcy5hbmNob3JSZWN0LmhlaWdodCAvIDIgLSBwSGVpZ2h0IC8gMiA8IDApICAgICAgICAgICAgICAgICAgICAgLyogd291bGQgb2NjbHVkZSBhYm92ZSAqL1xuICAgICAgICAgICAgICAgICAgICB8fCAodGhpcy5hbmNob3JSZWN0LnRvcCArIHRoaXMuYW5jaG9yUmVjdC5oZWlnaHQgLyAyICsgcEhlaWdodCAvIDIgPiB3aW5kb3cuaW5uZXJIZWlnaHQpICAgIC8qIHdvdWxkIG9jY2x1ZGUgYmVsb3cgKi9cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gIShcbiAgICAgICAgICAgICAgICAgICAodGhpcy5hbmNob3JSZWN0LnRvcCAtIHBIZWlnaHQgPCAwKSAgICAgICAgICAgICAgLyogd291bGQgb2NjbHVkZSBhYm92ZSAqL1xuICAgICAgICAgICAgICAgIHx8ICh0aGlzLmFuY2hvclJlY3QuYm90dG9tID4gd2luZG93LmlubmVySGVpZ2h0KSAgICAvKiBhbmNob3IgaXMgcGFydGlhbGx5IG9mZnNjcmVlbiBiZWxvdyAqL1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldFZhbGlkQWxpZ25tZW50UHJlc2V0KCkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgLy8gZ2l2ZW4gdGhlIGN1cnJlbnQgdmlld3BvcnQgY2FydG9ncmFwaHksIHdoZXJlIGNhbiB3ZSBzdGljayB0aGUgcG9wb3ZlclxuICAgICAgICAvLyBzbyBpdCB3b24ndCBiZSBwYXJ0aWFsbHkgb2NjbHVkZWQ/XG4gICAgICAgIGNvbnN0IHZhbGlkQ29tYm9zID0gY29tYmluYXRpb25zLmZpbHRlcigoY29uZmlnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Bvc2l0aW9uVmFsaWQoY29uZmlnLCBoZWlnaHQsIHdpZHRoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gMS4gaXMgdGhlIHJlcXVlc3RlZCBwcmVzZXQgaW4gdGhlIGxpc3Q/XG4gICAgICAgIC8vIDIuIGRvZXMgdGhlIGNvbnN1bWVyIG5vdCB3YW50IHVzIGF1dG8tcmVwb3NpdGlvbmluZz9cbiAgICAgICAgLy8gMy4gYXJlIG5vIGNvbWJvcyB2YWxpZD9cbiAgICAgICAgaWYgKHZhbGlkQ29tYm9zLmluZGV4T2YodGhpcy5wcm9wcy5wcmVzZXQpICE9PSAtMSB8fCAhdGhpcy5wcm9wcy5hdXRvUmVwb3NpdGlvbiB8fCAhdmFsaWRDb21ib3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5wcmVzZXQ7IC8vIGp1c3QgZ28gd2l0aCB0aGUgcmVxdWVzdGVkIHByZXNldFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gb3RoZXJ3aXNlLi4uIHdlIHRyeSB0byBmaW5kIHRoZSBiZXN0IHBvc3NpYmxlIGZhbGxiYWNrIG9wdGlvblxuXG4gICAgICAgIC8vIG9wdGltaXplIGZvciB0aGUgcmVxdWVzdGVkIHByZXNldCBoZW1pc3BoZXJlXG4gICAgICAgIGNvbnN0IGJlc3RDb21ib3MgPSB2YWxpZENvbWJvcy5maWx0ZXIoKHtuYW1lfSkgPT4gbmFtZVswXSA9PT0gdGhpcy5wcm9wcy5wcmVzZXQubmFtZVswXSk7XG5cbiAgICAgICAgaWYgKGJlc3RDb21ib3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYmVzdENvbWJvc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZW4gdGhlIG9wcG9zaXRlIChlLmcuIHRoZSBlbGVtZW50IGlzIHRvbyBsb3cgaW4gdGhlIHZpZXdwb3J0IHNvIGZsaXAgdXAgaW5zdGVhZCBvZiBkb3duKVxuICAgICAgICBjb25zdCBvcHBvc2l0ZUNhcmRpbmFsID0gZ2V0T3Bwb3NpdGVDYXJkaW5hbCh0aGlzLnByb3BzLnByZXNldC5uYW1lKTtcbiAgICAgICAgY29uc3Qgb2theUNvbWJvcyA9IHZhbGlkQ29tYm9zLmZpbHRlcigoe25hbWV9KSA9PiBuYW1lWzBdID09PSBvcHBvc2l0ZUNhcmRpbmFsKTtcblxuICAgICAgICBpZiAob2theUNvbWJvcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBva2F5Q29tYm9zWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2hhdGV2ZXIncyBsZWZ0IHdpbGwgaGF2ZSB0byBkb1xuICAgICAgICByZXR1cm4gdmFsaWRDb21ib3NbMF07XG4gICAgfVxuXG4gICAgYWxpZ24gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IHRoaXMucHJvcHMuYW5jaG9yIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLmFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgICA6IGZpbmRET01Ob2RlKHRoaXMucHJvcHMuYW5jaG9yKTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgY29uc3QgY2FyZXRBbmNob3IgPSB0aGlzLnByb3BzLmNhcmV0QW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLmNhcmV0QW5jaG9yIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5wcm9wcy5jYXJldEFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaW5kRE9NTm9kZSh0aGlzLnByb3BzLmNhcmV0QW5jaG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYW5jaG9yO1xuXG4gICAgICAgIHRoaXMuY2FjaGVWaWV3cG9ydENhcnRvZ3JhcGh5KGFuY2hvciwgY2FyZXRBbmNob3IpO1xuXG4gICAgICAgIGNvbnN0IHByZXNldCA9IHRoaXMuZ2V0VmFsaWRBbGlnbm1lbnRQcmVzZXQoKTtcbiAgICAgICAgY29uc3QgZnJhZyA9IFBvcG92ZXIuZ2V0QWxpZ25tZW50Q2xhc3NGcmFnbWVudDtcblxuICAgICAgICB0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGFzc05hbWUgPSB0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGFzc05hbWUucmVwbGFjZShDTEFTU19SRU1PVkFMX1JFR0VYLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBgIGItcG9wb3Zlci1hbmNob3IteC0ke2ZyYWcocHJlc2V0LmF4KX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYCBiLXBvcG92ZXItYW5jaG9yLXktJHtmcmFnKHByZXNldC5heSl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGAgYi1wb3BvdmVyLXNlbGYteC0ke2ZyYWcocHJlc2V0LmR4KX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYCBiLXBvcG92ZXItc2VsZi15LSR7ZnJhZyhwcmVzZXQuZHkpfWA7XG5cbiAgICAgICAgY29uc3QgZHggPSBNYXRoLnJvdW5kKHRoaXMuZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbihwcmVzZXQpKTtcbiAgICAgICAgY29uc3QgZHkgPSBNYXRoLnJvdW5kKHRoaXMuZ2V0TmV4dERpYWxvZ1lQb3NpdGlvbihwcmVzZXQpKTtcblxuICAgICAgICB0aGlzLmRpYWxvZy4kd3JhcHBlci5zdHlsZVt0cmFuc2Zvcm1Qcm9wXSA9IGB0cmFuc2xhdGUoJHtkeH1weCwgJHtkeX1weClgO1xuXG4gICAgICAgIGNvbnN0IGNhcmRpbmFsID0gcHJlc2V0Lm5hbWVbMF07XG4gICAgICAgIGNvbnN0IGxvbmdpdHVkaW5hbCA9IGNhcmRpbmFsID09PSAnTicgfHwgY2FyZGluYWwgPT09ICdTJztcblxuICAgICAgICAvLyB0aGUgY2FyZXQgaXMgaW5pdGlhbGx5IHBvc2l0aW9uZWQgYXQgMCwwIGluc2lkZSB0aGUgZGlhbG9nXG4gICAgICAgIC8vIHdoaWNoIGlzIGFscmVhZHkgcG9zaXRpb25lZCBhdCB0aGUgYW5jaG9yLCBzbyB3ZSBqdXN0IG5lZWQgdG9cbiAgICAgICAgLy8gbWFrZSBzbWFsbCBhZGp1c3RtZW50cyBhcyBuZWNlc3NhcnkgdG8gbGluZSB1cCB0aGUgY2FyZXRcbiAgICAgICAgLy8gd2l0aCB0aGUgdmlzdWFsIGNlbnRlciBvZiB0aGUgYW5jaG9yXG4gICAgICAgIHRoaXMuJGNhcmV0LnN0eWxlW2xvbmdpdHVkaW5hbCA/ICdsZWZ0JyA6ICd0b3AnXSA9IE1hdGgucm91bmQodGhpcy5nZXROZXh0Q2FyZXRYUG9zaXRpb24ocHJlc2V0KSkgKyAncHgnO1xuICAgICAgICB0aGlzLiRjYXJldC5zdHlsZVtsb25naXR1ZGluYWwgPyAndG9wJyA6ICdsZWZ0J10gPSAnMHB4JztcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5hbGlnbigpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5hbGlnbiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICB0aGlzLmFsaWduKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmFsaWduLCB0cnVlKTsgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFBvcnRhbCB7Li4ucHJvcHMucG9ydGFsUHJvcHN9PlxuICAgICAgICAgICAgICAgIDxEaWFsb2dcbiAgICAgICAgICAgICAgICAgICAgey4uLm9taXQocHJvcHMsIFBvcG92ZXIuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPXsoaW5zdGFuY2UpID0+ICh0aGlzLmRpYWxvZyA9IGluc3RhbmNlKX1cbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChwcm9wcy5jYXJldENvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogKG5vZGUpID0+ICh0aGlzLiRjYXJldCA9IG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY3goJ2ItcG9wb3Zlci1jYXJldCcsIHByb3BzLmNhcmV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcG9wb3ZlcicsIHByb3BzLmNsYXNzTmFtZSl9IC8+XG4gICAgICAgICAgICA8L1BvcnRhbD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcG9wb3Zlci9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG4vKipcbl9fQSBoaWdoZXItb3JkZXIgY29tcG9uZW50IGZvciB0aGUgcmVuZGVyaW5nIG9mIGNvbXBvbmVudHMgb3V0c2lkZSB0aGUgbm9ybWFsIFJlYWN0IHRyZWUuX19cblxuYFBvcnRhbGAgaXMgdXNlZCBpbiBvdGhlciBjb21wb25lbnRzIHN1Y2ggYXMgYFBvcG92ZXJgIHRvIHJlbmRlciBjb250ZW50IHRvIHBsYWNlcyBsaWtlIHRoZSBIVE1MIGA8Ym9keT5gIHRhZywgYXZvaWRpbmcgc3R5bGUgbGVha2FnZSBhbmQgcGFyZW50IGxheW91dCBjb250ZXh0cy4gT25seSBhY2NlcHRzIGEgc2luZ2xlIHRvcC1sZXZlbCBjaGlsZDsgbmFrZWQgdGV4dCwgZXRjIHdpbGwgYmUgd3JhcHBlZCBpbiBhIGA8ZGl2PmAuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcnRhbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8vIHNpbmdsZSBjaGlsZCBvbmx5IC0gYXJyYXlzIG5vdCBhbGxvd2VkXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBub3JtYWwgUmVhY3QgY2hpbGQsIGJ1dCBtdXN0IGJlIHNpbmd1bGFyOyBtdWx0aXBsZSBzaWJsaW5nIGNoaWxkcmVuIG11c3QgaGF2ZSBhIGNvbW1vbiB3cmFwcGVyLCBzdWNoIGFzIGEgXCJsYXlvdXRcIiBgPGRpdj5gXG5cbiAgICAgICAgICog4pyFIE9LOlxuXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiA8UG9ydGFsPlxuICAgICAgICAgKiAgIGZvb1xuICAgICAgICAgKiA8L1BvcnRhbD5cblxuICAgICAgICAgKiA8UG9ydGFsPlxuICAgICAgICAgKiAgIDxkaXY+Zm9vPC9kaXY+XG4gICAgICAgICAqIDwvUG9ydGFsPlxuXG4gICAgICAgICAqIDxQb3J0YWw+XG4gICAgICAgICAqICAgPGRpdj5cbiAgICAgICAgICogICAgICAgPGRpdj5mb288L2Rpdj5cbiAgICAgICAgICogICAgICAgPGRpdj5iYXI8L2Rpdj5cbiAgICAgICAgICogICA8L2Rpdj5cbiAgICAgICAgICogPC9Qb3J0YWw+XG4gICAgICAgICAqIGBgYFxuXG4gICAgICAgICAqIOKblO+4jyBOb3QgT0s6XG5cbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIDxQb3J0YWw+XG4gICAgICAgICAqICAgPGRpdj5mb288L2Rpdj5cbiAgICAgICAgICogICA8ZGl2PmJhcjwvZGl2PlxuICAgICAgICAgKiA8L1BvcnRhbD5cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBsb2NhdGlvbiB0byBhcHBlbmQgdGhlIGdlbmVyYXRlZCBwb3J0YWwgYW5kIGNoaWxkIGVsZW1lbnRzXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0aW5hdGlvbjogUHJvcFR5cGVzLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgSUQgdXNlZCB0byBsaW5rIHRoZSBwb3J0YWwgb3JpZ2luIHRvIHRoZSBkZXN0aW5hdGlvbjsgYWRkZWQgdG8gZ2VuZXJhdGVkIGA8ZGl2PmAgYXBwZW5kZWQgdG8gdGhlIGRlc3RpbmF0aW9uIEhUTUwgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgcG9ydGFsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBkb2N1bWVudC5ib2R5LFxuICAgICAgICBwb3J0YWxJZDogbnVsbCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoUG9ydGFsLmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRpYyBQT1JUQUxfREFUQV9BVFRSSUJVVEUgPSAnZGF0YS1wb3J0YWwtaWQnXG5cbiAgICBpZCA9IHV1aWQoKVxuXG4gICAgLy8gdGhlIDxkaXY+IHRoYXQgdGhlIGNoaWxkcmVuIGFyZSByZW5kZXJlZCBpbnRvXG4gICAgJHBvcnRhbCA9IG51bGxcblxuICAgIC8vIHRoZSB0b3AtbGV2ZWwgY2hpbGQgcmVuZGVyZWQgaW50byB0aGUgJHBvcnRhbFxuICAgICRwYXNzZW5nZXIgPSBudWxsO1xuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLiRwb3J0YWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5wcm9wcy5kZXN0aW5hdGlvbi5hcHBlbmRDaGlsZCh0aGlzLiRwb3J0YWwpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyUG9ydGFsbGVkQ29udGVudCgpO1xuICAgIH1cblxuICAgIHJlbmRlclBvcnRhbGxlZENvbnRlbnQoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPyB0aGlzLnByb3BzLmNoaWxkcmVuIDogKDxkaXY+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9kaXY+KTtcblxuICAgICAgICAvLyB1cGRhdGUgdGhlIHBvcnRhbCBJRCBsaW5rIGlmIG5lZWRlZFxuICAgICAgICB0aGlzLiRwb3J0YWwuaWQgPSB0aGlzLnByb3BzLnBvcnRhbElkIHx8IHRoaXMuaWQ7XG5cbiAgICAgICAgUmVhY3RET00udW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIodGhpcywgY2hpbGQsIHRoaXMuJHBvcnRhbCk7XG4gICAgICAgIHRoaXMuJHBhc3NlbmdlciA9IHRoaXMuJHBvcnRhbC5jaGlsZHJlblswXTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7IHRoaXMucmVuZGVyUG9ydGFsbGVkQ29udGVudCgpOyB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLiRwb3J0YWwpO1xuICAgICAgICB0aGlzLnByb3BzLmRlc3RpbmF0aW9uLnJlbW92ZUNoaWxkKHRoaXMuJHBvcnRhbCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBQb3J0YWwuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICB7Li4ue1tQb3J0YWwuUE9SVEFMX0RBVEFfQVRUUklCVVRFXTogdGhpcy5wcm9wcy5wb3J0YWxJZCB8fCB0aGlzLmlkfX0gLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcG9ydGFsL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnYm91bmRsZXNzLWJ1dHRvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuLyoqXG5fX0FuIHVub3BpbmlvbmF0ZWQgcHJvZ3Jlc3MgaW1wbGVtZW50YXRpb24sIGFsbG93aW5nIGZvciBhIHZhcmlldHkgb2Ygc2hhcGVzIGFuZCBlZmZlY3RzLl9fXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgdmFsaWQgSFRNTCB0YWcgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgY2FuY2VsQ29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgY2FuY2VsUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgdmFsaWQgSFRNTCB0YWcgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiBzdXBwbGllZCwgYWRkcyBhIGNhbmNlbCBlbGVtZW50IGFuZCBjYWxscyB0aGlzIGZ1bmN0aW9uIHdoZW4gdGhhdCBlbGVtZW50IGlzIGNsaWNrZWRcbiAgICAgICAgICovXG4gICAgICAgIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIGludGVnZXIgKGFuZCB1bml0LCBpZiBhcHBsaWNhYmxlKSBvZiB0aGUgY3VycmVudCBwcm9ncmVzcyBzdGF0ZSwgZS5nLiAwLjAxIChvcGFjaXR5KVxuICAgICAgICAgKi9cbiAgICAgICAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lXG4gICAgICAgICAqL1xuICAgICAgICBwcm9ncmVzc0NvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICBwcm9ncmVzc1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIENTUyBwcm9wZXJ0eSB0byB0d2VlbiAobXVzdCBhY2NlcHQgcGVyY2VudGFnZXMpIC0gZGVmYXVsdHMgdG8gXCJ3aWR0aFwiXG4gICAgICAgICAqL1xuICAgICAgICB0d2VlblByb3BlcnR5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNhbmNlbENvbXBvbmVudDogJ2J1dHRvbicsXG4gICAgICAgIGNhbmNlbFByb3BzOiB7fSxcbiAgICAgICAgY29tcG9uZW50OiAnZGl2JyxcbiAgICAgICAgb25DYW5jZWw6IG51bGwsXG4gICAgICAgIHByb2dyZXNzOiB1bmRlZmluZWQsXG4gICAgICAgIHByb2dyZXNzQ29tcG9uZW50OiAnZGl2JyxcbiAgICAgICAgcHJvZ3Jlc3NQcm9wczoge30sXG4gICAgICAgIHR3ZWVuUHJvcGVydHk6ICd3aWR0aCcsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFByb2dyZXNzLmRlZmF1bHRQcm9wcylcblxuICAgIHJlbmRlckNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25DYW5jZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5jYW5jZWxQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wcm9ncmVzcy1jYW5jZWwnLCB0aGlzLnByb3BzLmNhbmNlbFByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17dGhpcy5wcm9wcy5jYW5jZWxDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZD17dGhpcy5wcm9wcy5vbkNhbmNlbH0gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJQcm9ncmVzcygpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLnByb2dyZXNzQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMucHJvZ3Jlc3NQcm9wc31cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXByb2dyZXNzJywgdGhpcy5wcm9wcy5wcm9ncmVzc1Byb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1wcm9ncmVzcy1pbmRldGVybWluYXRlJzogdGhpcy5wcm9wcy5wcm9ncmVzcyA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIHJvbGU9J3ByZXNlbnRhdGlvbidcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLnByb2dyZXNzUHJvcHMuc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLnByb3BzLnR3ZWVuUHJvcGVydHldOiB0aGlzLnByb3BzLnByb2dyZXNzLFxuICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgUHJvZ3Jlc3MuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXByb2dyZXNzLXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgZGF0YS1wcm9ncmVzcz17dGhpcy5wcm9wcy5wcm9ncmVzcyAhPT0gdW5kZWZpbmVkID8gdGhpcy5wcm9wcy5wcm9ncmVzcyA6IG51bGx9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlclByb2dyZXNzKCl9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ2FuY2VsKCl9XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzcy9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgaXNGdW5jdGlvbiA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuLyoqXG5fX0hpZGUgY29udGVudCB1bnRpbCBpdCdzIG5lZWRlZCwgd2l0aCBjb25maWd1cmFibGUgdGVhc2Vycy5fX1xuXG5NZWNoYW5pY2FsbHksIGhpZGRlbiBkaXNjbG9zdXJlIGNvbnRlbnQgaXMgbm90IHJlbmRlcmVkIHRvIHRoZSBET00gdW50aWwgaXQgaXMgbmVlZGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc2l2ZURpc2Nsb3N1cmUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqIGlmIGEgZnVuY3Rpb24gaXMgcGFzc2VkLCBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW50aWwgdGhlIGRpc2Nsb3N1cmUgY29udGVudCBpcyBkdWUgdG8gYmUgcmVuZGVyZWQgKi9cbiAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLm5vZGUsXG4gICAgICAgICAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubm9kZSksXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRyb2xzIHRoZSBQcm9ncmVzc0Rpc2Nsb3N1cmUgXCJleHBhbmRlZFwiIHN0YXRlIGRlY2xhcmF0aXZlbHlcbiAgICAgICAgICovXG4gICAgICAgIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGNvbnRlbnQgaXMgc2hvd247IG5vdCBjYWxsZWQgb24gaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICovXG4gICAgICAgIG9uRXhwYW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGNvbnRlbnQgaXMgaGlkZGVuOyBub3QgY2FsbGVkIG9uIGluaXRpYWwgcmVuZGVyXG4gICAgICAgICAqL1xuICAgICAgICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgdmFsaWQgSFRNTCB0YWcgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgdG9nZ2xlQ29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIHNob3duIG5leHQgdG8gdGhlIGV4cGFuc2lvbiB0b2dnbGUgd2hlbiB0aGUgZGlzY2xvc3VyZSBpcyBpbiBcImNvbnRyYWN0ZWRcIiBzdGF0ZSwgZS5nLiBcIlNob3cgQWR2YW5jZWQgT3B0aW9uc1wiXG4gICAgICAgICAqL1xuICAgICAgICB0b2dnbGVDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udGVudCB0byBiZSBzaG93biBuZXh0IHRvIHRoZSBleHBhbnNpb24gdG9nZ2xlIHdoZW4gdGhlIGRpc2Nsb3N1cmUgaXMgaW4gXCJleHBhbmRlZFwiIHN0YXRlLCBlLmcuIFwiSGlkZSBBZHZhbmNlZCBPcHRpb25zXCJcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZUV4cGFuZGVkQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgdG9nZ2xlUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNoaWxkcmVuOiBudWxsLFxuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBleHBhbmRlZDogZmFsc2UsXG4gICAgICAgIG9uRXhwYW5kOiBub29wLFxuICAgICAgICBvbkhpZGU6IG5vb3AsXG4gICAgICAgIHRvZ2dsZUNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIHRvZ2dsZUNvbnRlbnQ6IG51bGwsXG4gICAgICAgIHRvZ2dsZUV4cGFuZGVkQ29udGVudDogbnVsbCxcbiAgICAgICAgdG9nZ2xlUHJvcHM6IHt9LFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhQcm9ncmVzc2l2ZURpc2Nsb3N1cmUuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGV4cGFuZGVkOiB0aGlzLnByb3BzLmV4cGFuZGVkLFxuICAgIH1cblxuICAgIGZpcmVTdGF0ZWZ1bENhbGxiYWNrID0gKCkgPT4gdGhpcy5wcm9wc1t0aGlzLnN0YXRlLmV4cGFuZGVkID8gJ29uRXhwYW5kJyA6ICdvbkhpZGUnXSgpXG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XG4gICAgICAgIGlmIChuZXdQcm9wcy5leHBhbmRlZCAhPT0gdGhpcy5wcm9wcy5leHBhbmRlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6IG5ld1Byb3BzLmV4cGFuZGVkfSwgdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVDbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtleHBhbmRlZDogIXRoaXMuc3RhdGUuZXhwYW5kZWR9LCB0aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6ICF0aGlzLnN0YXRlLmV4cGFuZGVkfSwgdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uS2V5RG93bikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMudG9nZ2xlUHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdiLWRpc2Nsb3N1cmUtY29udGVudCc+XG4gICAgICAgICAgICAgICAgICAgIHtpc0Z1bmN0aW9uKHRoaXMucHJvcHMuY2hpbGRyZW4pID8gdGhpcy5wcm9wcy5jaGlsZHJlbigpIDogdGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBQcm9ncmVzc2l2ZURpc2Nsb3N1cmUuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWRpc2Nsb3N1cmUnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICdiLWRpc2Nsb3N1cmUtZXhwYW5kZWQnOiB0aGlzLnN0YXRlLmV4cGFuZGVkLFxuICAgICAgICAgICAgICAgIH0pfT5cblxuICAgICAgICAgICAgICAgIDx0aGlzLnByb3BzLnRvZ2dsZUNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy50b2dnbGVQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1kaXNjbG9zdXJlLXRvZ2dsZScsIHRoaXMucHJvcHMudG9nZ2xlUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259XG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PScwJz5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZXhwYW5kZWQgPyB0aGlzLnByb3BzLnRvZ2dsZUV4cGFuZGVkQ29udGVudCB8fCB0aGlzLnByb3BzLnRvZ2dsZUNvbnRlbnQgOiB0aGlzLnByb3BzLnRvZ2dsZUNvbnRlbnR9XG4gICAgICAgICAgICAgICAgPC90aGlzLnByb3BzLnRvZ2dsZUNvbXBvbmVudD5cblxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNvbnRlbnQoKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzaXZlLWRpc2Nsb3N1cmUvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5pbXBvcnQgdXVpZCBmcm9tICdib3VuZGxlc3MtdXRpbHMtdXVpZCc7XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSAoeCkgPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5cbi8qKlxuX19BbiBhY2Nlc3NpYmxlIHJhZGlvIGZvcm0gY29udHJvbC5fX1xuXG5SYWRpbyBpcyBpbXBsZW1lbnRlZCBhcyBhIFwiY29udHJvbGxlZCBpbnB1dFwiLCBtZWFuaW5nIGl0IGlzIGEgZGlyZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBkYXRhIHBhc3NlZCBpbnNpZGUuIFVzZXIgaW50ZXJhY3Rpb24gd2lsbCBidWJibGUgY2hhbmdlcyBpbiB0aGUgZm9ybSBvZiBgb25TZWxlY3RlZGAgdGhhdCBhIGNvbnRyb2xsZXIgdmlldyBtdXN0IGludGVyY2VwdCBhbmQgYXBwbHkgYWdhaW5zdCB0aGUgZGF0YSBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFkaW8gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG92ZXJyaWRlIHRoZSB3cmFwcGVyIGNvbXBvbmVudCBIVE1MIGVsZW1lbnQgdGFnIGlmIGRlc2lyZWRcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICBpbnB1dFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFJlYWN0LXJlbmRlcmFibGUgY29udGVudFxuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWxDb250ZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuICAgICAgICBdKSxcblxuICAgICAgICBsYWJlbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcGFzc3Rocm91Z2ggdG8gdGhlIEhUTUwgYG5hbWVgIGF0dHJpYnV0ZSBvbiB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgc2VsZWN0ZWQ7IGJhY2tpbmcgZGF0YSBtdXN0IGJlIHVwZGF0ZWQgdG8gcGVyc2lzdCB0aGUgc3RhdGUgY2hhbmdlXG4gICAgICAgICAqL1xuICAgICAgICBvblNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lcyB0aGUgYWN0aXZhdGlvbiBzdGF0ZSBvZiB0aGUgcmFkaW8gY29udHJvbCwgc2VlIFJlYWN0IFtcImNvbnRyb2xsZWQgaW5wdXRzXCJdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHMpKVxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwYXNzdGhyb3VnaCB0byB0aGUgSFRNTCBgdmFsdWVgIGF0dHJpYnV0ZSBvbiB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGlucHV0UHJvcHM6IHt9LFxuICAgICAgICBsYWJlbENvbnRlbnQ6IG51bGwsXG4gICAgICAgIGxhYmVsUHJvcHM6IHt9LFxuICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgb25TZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6ICcnLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhSYWRpby5kZWZhdWx0UHJvcHMpXG5cbiAgICB1dWlkID0gdXVpZCgpXG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0ZWQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJJbnB1dCgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmlucHV0UHJvcHN9XG4gICAgICAgICAgICAgICAgdHlwZT0ncmFkaW8nXG4gICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaWQgfHwgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmlkIHx8IHRoaXMudXVpZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXJhZGlvJywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1yYWRpby1zZWxlY3RlZCc6IHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgYXJpYS1jaGVja2VkPXtTdHJpbmcodGhpcy5wcm9wcy5zZWxlY3RlZCl9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckxhYmVsKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5sYWJlbENvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmxhYmVsUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcmFkaW8tbGFiZWwnLCB0aGlzLnByb3BzLmxhYmVsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj17dGhpcy5wcm9wcy5pZCB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuaWQgfHwgdGhpcy51dWlkfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWxDb250ZW50fVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgUmFkaW8uaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXJhZGlvLXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTGFiZWwoKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBBcnJvd0tleU5hdmlnYXRpb24gZnJvbSAnYm91bmRsZXNzLWFycm93LWtleS1uYXZpZ2F0aW9uJztcbmltcG9ydCBCdXR0b24gZnJvbSAnYm91bmRsZXNzLWJ1dHRvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgdGVzdCkge1xuICAgIGxldCBmb3VuZDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRlc3QoYXJyW2ldKSkge1xuICAgICAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG59XG5cbi8qKlxuX19BIGNvbnRyb2wgY29udGFpbmluZyBtdWx0aXBsZSBidXR0b25zLCBvbmx5IG9uZSBvZiB3aGljaCBjYW4gYmUgYWN0aXZlIGF0IGEgdGltZS5fX1xuXG5TZWdtZW50ZWRDb250cm9sIGhhcyBtYW55IHBvdGVudGlhbCB1c2VzLCB0aGUgbW9zdCBjb21tb24gYmVpbmc6XG5cbjEuIFRoZSBjb250cm9scyBmb3IgYSB0YWJiZWQgdmlld1xuMi4gQSBtb2RlIHN3aXRjaFxuXG5Fc3NlbnRpYWxseSwgaXQgYmVoYXZlcyBsaWtlIGEgcmFkaW8gZ3JvdXAgd2l0aG91dCBhY3R1YWxseSB1c2luZyBpbnB1dCBjb250cm9scy4gT25seSBvbmUgb3B0aW9uIGNhbiBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuXG5cbiMjIyBDb21wb25lbnQgSW5zdGFuY2UgTWV0aG9kc1xuXG4tIGBnZXRTZWxlY3RlZE9wdGlvbigpYCByZXRyaWV2ZXMgdGhlIG9wdGlvbiB0aGF0IGlzIHNlbGVjdGVkXG4tIGBnZXRTZWxlY3RlZE9wdGlvbkluZGV4KClgIHJldHJpZXZlcyB0aGUgaW5kZXggb2YgdGhlIG9wdGlvbiB0aGF0IGlzIHNlbGVjdGVkXG4tIGBzZWxlY3RPcHRpb24ob3B0aW9uKWAgYWxsb3dzIGZvciBwcm9ncmFtbWF0aWMgc3dpdGNoaW5nIG9mIHRoZSBhY3RpdmUgU2VnbWVudGVkQ29udHJvbCBvcHRpb25cbi0gYHNlbGVjdE9wdGlvbkJ5S2V5KGtleSwgdmFsdWUpYCBhbGxvd3MgZm9yIHByb2dyYW1tYXRpYyBzd2l0Y2hpbmcgb2YgdGhlIGFjdGl2ZSBTZWdtZW50ZWRDb250cm9sIG9wdGlvbiB1c2luZyBhIHVuaXF1ZSBrZXlcbi0gYHNlbGVjdE9wdGlvbkluZGV4KGluZGV4KWAgYWxsb3dzIGZvciBwcm9ncmFtbWF0aWMgc3dpdGNoaW5nIG9mIHRoZSBhY3RpdmUgU2VnbWVudGVkQ29udHJvbCBvcHRpb24gYnkgaW5kZXhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGVkQ29udHJvbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0cyB0aGUgaW5pdGlhbCBzZWxlY3RlZCBvcHRpb24gb24gZmlyc3QgbW91bnRcbiAgICAgICAgICovXG4gICAgICAgIGRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiBhIGNoaWxkIGVsZW1lbnQgYmVjb21lcyBzZWxlY3RlZCB3aXRoIHRoZSBvcHRpb24gYW5kIG9wdGlvbiBpbmRleFxuICAgICAgICAgKi9cbiAgICAgICAgb25PcHRpb25TZWxlY3RlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHByb3ZpZGUgYSBjdXN0b21pemVkIGNvbXBvbmVudCB0eXBlIGlmIGRlc2lyZWQsIGVpdGhlciBhIEhUTUwgZWxlbWVudCBuYW1lIG9yIFJlYWN0Q29tcG9uZW50XG4gICAgICAgICAqL1xuICAgICAgICBvcHRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcHJvcCBvYmplY3RzIHRvIGJlIGFwcGxpZWQgYWdhaW5zdCB0aGUgU2VnbWVudGVkQ29udHJvbCBidXR0b25zLCBhY2NlcHRzIGFueSB2YWxpZCBSZWFjdCBwcm9wc1xuICAgICAgICAgKlxuICAgICAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIG9wdGlvbnM9e1t7XG4gICAgICAgICAqICAgICBjaGlsZHJlbjogJ0ZvbycsXG4gICAgICAgICAqICAgICBjbGFzc05hbWU6ICdmb28nLFxuICAgICAgICAgKiB9LCB7XG4gICAgICAgICAqICAgICBjaGlsZHJlbjogPHNwYW4+QmFyPC9zcGFuPixcbiAgICAgICAgICogICAgICdkYXRhLWlkJzogJ2JhcicsXG4gICAgICAgICAqIH1dfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKS5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4OiAwLFxuICAgICAgICBvbk9wdGlvblNlbGVjdGVkOiAoKSA9PiB7fSxcbiAgICAgICAgb3B0aW9uQ29tcG9uZW50OiAnYnV0dG9uJyxcbiAgICAgICAgb3B0aW9uczogW10sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFNlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXg6IG51bGwsXG4gICAgfVxuXG4gICAgaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4KHByb3BzID0gdGhpcy5wcm9wcywgc3RhdGUgPSB0aGlzLnN0YXRlKSB7XG4gICAgICAgIHJldHVybiBmaW5kSW5kZXgocHJvcHMub3B0aW9ucywgKG9wdGlvbikgPT4gb3B0aW9uLnByZXNzZWQpIHx8IHN0YXRlLnNlbGVjdGVkSW5kZXg7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEluZGV4OiB0aGlzLmluZmVyU2VsZWN0ZWRPcHRpb25JbmRleCgpIHx8IHRoaXMucHJvcHMuZGVmYXVsdE9wdGlvblNlbGVjdGVkSW5kZXh9KTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAobmV4dFByb3BzLm9wdGlvbnMgIT09IHRoaXMucHJvcHMub3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDogdGhpcy5pbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgobmV4dFByb3BzKX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlT3B0aW9uU2VsZWN0aW9uID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbiwgZXZlbnQudGFyZ2V0KTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDogaW5kZXh9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk9wdGlvblNlbGVjdGVkKHRoaXMucHJvcHMub3B0aW9uc1t0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhdLCB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRPcHRpb24gPSAoKSA9PiB0aGlzLnByb3BzLm9wdGlvbnNbdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldFNlbGVjdGVkT3B0aW9uSW5kZXggPSAoKSA9PiB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhcblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZWxlY3RPcHRpb24gPSAob3B0aW9uKSA9PiB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEluZGV4OiB0aGlzLnByb3BzLm9wdGlvbnMuaW5kZXhPZihvcHRpb24pfSlcblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZWxlY3RPcHRpb25CeUtleSA9IChrLCB2KSA9PiB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEluZGV4OiBmaW5kSW5kZXgodGhpcy5wcm9wcy5vcHRpb25zLCAob3B0aW9uKSA9PiBvcHRpb25ba10gPT09IHYpfSlcblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZWxlY3RPcHRpb25JbmRleCA9IChpbmRleCkgPT4gdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDogaW5kZXh9KVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFycm93S2V5TmF2aWdhdGlvblxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFNlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByb2xlPSdyYWRpb2dyb3VwJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2Itc2VnbWVudGVkLWNvbnRyb2wnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgbW9kZT17QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTH0+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMub3B0aW9ucy5tYXAoKHByb3BzLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Byb3BzLmtleSB8fCBpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtY2hlY2tlZD17aW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17cHJvcHMuY29tcG9uZW50IHx8IHRoaXMucHJvcHMub3B0aW9uQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24nLCBwcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24tc2VsZWN0ZWQnOiBpbmRleCA9PT0gdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ9e3RoaXMuaGFuZGxlT3B0aW9uU2VsZWN0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc3NlZD17aW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9J3JhZGlvJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Fycm93S2V5TmF2aWdhdGlvbj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFR5cGVhaGVhZCBmcm9tICdib3VuZGxlc3MtdHlwZWFoZWFkJztcbmltcG9ydCBleHRyYWN0Q2hpbGRQcm9wcyBmcm9tICdib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgZmlyc3QgPSAoYXJyYXkpID0+IGFycmF5WzBdO1xuY29uc3QgbGFzdCA9IChhcnJheSkgPT4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuXG4vKipcbl9fRGlzdGlsbCByaWNoIGVudGl0eSBkYXRhIG1hdGNoZWQgdmlhIHR5cGVhaGVhZCBpbnB1dCBpbnRvIHNpbXBsZSB2aXN1YWwgYWJzdHJhY3Rpb25zLl9fXG5cbkJhc2ljIHVzYWdlIG9mIHRoaXMgY29tcG9uZW50IGlzIGlkZW50aWNhbCB0byB0aGF0IG9mIFtUeXBlYWhlYWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9lbmlnbWEtaW8vYm91bmRsZXNzL21hc3Rlci9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkKS4gQWRkaXRpb25hbCBwcm9wcyBhcmUgYXZhaWxhYmxlIHRvIHRha2UgYWR2YW50YWdlIG9mIHRoZSB0b2tlbml6YXRpb24gZnVuY3Rpb25hbGl0eS5cblxuIyMgQ29tcG9uZW50IEluc3RhbmNlIE1ldGhvZHNcblxuV2hlbiB1c2luZyBgVG9rZW5pemVkSW5wdXRgIGluIHlvdXIgcHJvamVjdCwgeW91IG1heSBjYWxsIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBvbiBhIHJlbmRlcmVkIGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQuIFVzZSBbYHJlZnNgXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbCkgdG8gZ2V0IHRoZSBpbnN0YW5jZS5cblxuLSBfX2BhZGQoaW5kZXg6IG51bWJlcilgX19cbiAgcHJvZ3JhbW1hdGljYWxseSBjcmVhdGVzIGEgdG9rZW4gZm9yIGBwcm9wcy5lbnRpdGllc1tpbmRleF1gOyBgcHJvcHMuaGFuZGxlQWRkVG9rZW5gIHdpbGwgYmUgY2FsbGVkIGFzIGEgaGludCB0byBwZXJzaXN0IHRoZSBjaGFuZ2UgaW4geW91ciBjb250cm9sbGVyIHZpZXcgb3Igb3RoZXIgYXBwbGljYXRpb24gc3RhdGVcblxuLSBfX2Bmb2N1cygpYF9fXG4gIGZvY3VzZXMgdGhlIGJyb3dzZXIgb29uIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgZm9yIGltbWVkaWF0ZSB0ZXh0IGVudHJ5XG5cbi0gX19gZ2V0SW5wdXROb2RlKClgX19cbiAgcmV0dXJucyB0aGUgcmF3IHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dCBET00gbm9kZVxuXG4tIF9fYGdldFNlbGVjdGVkRW50aXR5VGV4dCgpYF9fXG4gIHJldHVybnMgdGhlIGB0ZXh0YCBwcm9wZXJ0eSBvZiB0aGUgY3VycmVudGx5IGhpZ2hsaWdodGVkIGVudGl0eSAoZnJvbSBgcHJvcHMuZW50aXRpZXNgKSwgb3IgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmdcblxuLSBfX2BnZXRWYWx1ZSgpYF9fXG4gIHJldHJpZXZlcyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0XG5cbi0gX19gcmVtb3ZlKGluZGV4OiBudW1iZXIpYF9fXG4gIHByb2dyYW1tYXRpY2FsbHkgcmVtb3ZlcyB0aGUgdG9rZW4gZm9yIGBwcm9wcy5lbnRpdGllc1tpbmRleF1gOyBgcHJvcHMuaGFuZGxlUmVtb3ZlVG9rZW5zYCB3aWxsIGJlIGNhbGxlZCBhcyBhIGhpbnQgdG8gcGVyc2lzdCB0aGUgY2hhbmdlIGluIHlvdXIgY29udHJvbGxlciB2aWV3IG9yIG90aGVyIGFwcGxpY2F0aW9uIHN0YXRlXG5cbi0gX19gc2VsZWN0KClgX19cbiAgcHJvZ3JhbW1hdGljYWxseSBjcmVhdGVzIGEgZnVsbCBzZWxlY3Rpb24gb24gdGhlIHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dCBzdWNoIHRoYXQgYSBwcmVzcyBvZiB0aGUgQmFja3NwYWNlIGtleSB3b3VsZCBmdWxseSBjbGVhciB0aGUgaW5wdXRcblxuLSBfX2BzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nKWBfX1xuICBzZXRzIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgdG8gdGhlIHNwZWNpZmllZCB0ZXh0IGFuZCB1cGRhdGVzIGludGVybmFsIHN0YXRlOyBkbyBub3QgdXNlIHRoaXMgbWV0aG9kIHdoZW4gdXNpbmcgYFR5cGVhaGVhZGAgYXMgYSBcImNvbnRyb2xsZWQgaW5wdXRcIlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2tlbml6ZWRJbnB1dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC4uLlR5cGVhaGVhZC5wcm9wVHlwZXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZ1bmN0aW9uIGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiBhbiBlbnRpdHkgaXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIgYW5kIGEgdG9rZW4gc2hvdWxkIGJlIGNyZWF0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZUFkZFRva2VuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZnVuY3Rpb24gaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIG9uZSBvciBtb3JlIHRva2VucyBhcmUgcmVtb3ZlZCBieSB0aGUgdXNlciB2aWEgY2xpY2tpbmcgdGhlIFwiY2xvc2VcIiBidXR0b24gb3IgcHJlc3NpbmcgdGhlIGBCYWNrc3BhY2VgIGtleSB3aGlsZSB0b2tlbnMgYXJlIHNlbGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGVSZW1vdmVUb2tlbnM6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmdW5jdGlvbiBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gb25lIG9yIG1vcmUgdG9rZW5zIGFyZSBzZWxlY3RlZCBieSB0aGUgdXNlciB2aWEgY2xpY2sgb3Iga2V5Ym9hcmQgYWN0aW9uczsgY2FsbGVkIHdpdGggd2hhdCB0aGUgbmV3IHNlbGVjdGlvbiBzaG91bGQgYmVcbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZU5ld1NlbGVjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBKU1ggdXNlZCBmb3IgdGhlIGNsb3NlIGJ1dHRvbiBpdHNlbGZcbiAgICAgICAgICovXG4gICAgICAgIHRva2VuQ2xvc2VDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmVzIGlmIHRoZSBgLmItdG9rZW5maWVsZC10b2tlbi1jbG9zZWAgZWxlbWVudCBzaG91bGQgYmUgcmVuZGVyZWQgZm9yIGVhY2ggdG9rZW5cbiAgICAgICAgICovXG4gICAgICAgIHRva2VuQ2xvc2VWaXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIGluZGV4ZXMgb2YgZW50aXRpZXMgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXMgXCJ0b2tlbnNcIiBpbiB0aGUgY29tcG9uZW50IFVJXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgaW5kZXhlcyBvZiB0b2tlbml6ZWQgZW50aXRpZXMgdGhhdCBhcmUgcGFydCBvZiBhbiBhY3RpdmUgc2VsZWN0aW9uOyB0aGUgdXNlciBjYW4gcHJlc3MgYEJhY2tzcGFjZWAgdG8gdHJpZ2dlciBgaGFuZGxlUmVtb3ZlVG9rZW5zYFxuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW5zU2VsZWN0ZWQ6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIC4uLlR5cGVhaGVhZC5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGhhbmRsZUFkZFRva2VuOiAoKSA9PiB7fSxcbiAgICAgICAgaGFuZGxlUmVtb3ZlVG9rZW5zOiAoKSA9PiB7fSxcbiAgICAgICAgaGFuZGxlTmV3U2VsZWN0aW9uOiAoKSA9PiB7fSxcbiAgICAgICAgdG9rZW5DbG9zZUNvbXBvbmVudDogKDxkaXY+WDwvZGl2PiksXG4gICAgICAgIHRva2VuQ2xvc2VWaXNpYmxlOiB0cnVlLFxuICAgICAgICB0b2tlbnM6IFtdLFxuICAgICAgICB0b2tlbnNTZWxlY3RlZDogW10sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFRva2VuaXplZElucHV0LmRlZmF1bHRQcm9wcylcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTZWxlY3RlZEluZGV4ZXMgPSBwcmV2UHJvcHMudG9rZW5zU2VsZWN0ZWQ7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMgPSB0aGlzLnByb3BzLnRva2Vuc1NlbGVjdGVkO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRva2Vucy5sZW5ndGggPiBwcmV2UHJvcHMudG9rZW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fc3VwcHJlc3NOZXh0VG9rZW5TZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3N1cHByZXNzTmV4dFRva2VuU2VsZWN0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggICBwcmV2aW91c1NlbGVjdGVkSW5kZXhlcyAhPT0gY3VycmVudFNlbGVjdGVkSW5kZXhlc1xuICAgICAgICAgICAgJiYgY3VycmVudFNlbGVjdGVkSW5kZXhlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGlmICggICBjdXJyZW50U2VsZWN0ZWRJbmRleGVzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICB8fCBjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdICE9PSBwcmV2aW91c1NlbGVjdGVkSW5kZXhlc1swXSAvKiBtdWx0aSBzZWxlY3Rpb24sIGxlZnR3YXJkICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmc1tgdG9rZW5fJHtjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdfWBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QoY3VycmVudFNlbGVjdGVkSW5kZXhlcykgIT09IGxhc3QocHJldmlvdXNTZWxlY3RlZEluZGV4ZXMpIC8qIG11bHRpIHNlbGVjdGlvbiwgcmlnaHR3YXJkICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmc1tgdG9rZW5fJHtsYXN0KGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMpfWBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucmVmc1tgdG9rZW5fJHtjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdfWBdLmZvY3VzKCk7XG4gICAgICAgIH0gLy8gbW92ZSBmb2N1c1xuICAgIH1cblxuICAgIC8vIHBhc3N0aHJvdWdocyB0byBUeXBlYWhlYWQgaW5zdGFuY2UgbWV0aG9kc1xuICAgIGZvY3VzID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5mb2N1cygpXG4gICAgZ2V0SW5wdXROb2RlID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRJbnB1dE5vZGUoKVxuICAgIGdldFNlbGVjdGVkRW50aXR5VGV4dCA9ICgpID0+IHRoaXMucmVmcy50eXBlYWhlYWQuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KClcbiAgICBnZXRWYWx1ZSA9ICgpID0+IHRoaXMucmVmcy50eXBlYWhlYWQuZ2V0VmFsdWUoKVxuICAgIHNlbGVjdCA9ICgpID0+IHRoaXMucmVmcy50eXBlYWhlYWQuc2VsZWN0KClcbiAgICBzZXRWYWx1ZSA9ICh2YWx1ZSkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5zZXRWYWx1ZSh2YWx1ZSlcblxuICAgIGFkZCA9IChpbmRleCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy50b2tlbnMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7IHRoaXMucHJvcHMuaGFuZGxlQWRkVG9rZW4oaW5kZXgpOyB9XG4gICAgfVxuXG4gICAgcmVtb3ZlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSAoQXJyYXkuaXNBcnJheShpbmRleCkgPyBpbmRleCA6IFtpbmRleF0pLmZpbHRlcigoaWR4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50b2tlbnMuaW5kZXhPZihpZHgpICE9PSAtMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGluZGV4ZXMubGVuZ3RoKSB7IHRoaXMucHJvcHMuaGFuZGxlUmVtb3ZlVG9rZW5zKGluZGV4ZXMpOyB9XG4gICAgfVxuXG4gICAgc2VsZWN0VG9rZW4oaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVOZXdTZWxlY3Rpb24oW2luZGV4XSk7XG4gICAgfVxuXG4gICAgc2VsZWN0VG9rZW5zKGluZGV4ZXMpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVOZXdTZWxlY3Rpb24oaW5kZXhlcyk7XG4gICAgfVxuXG4gICAgc2VsZWN0UHJldmlvdXNUb2tlbihhcHBlbmQpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnByb3BzLnRva2Vuc1NlbGVjdGVkO1xuICAgICAgICBjb25zdCBpbmRleGVzID0gdGhpcy5wcm9wcy50b2tlbnM7XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA9PT0gMSAmJiBmaXJzdChzZWxlY3RlZCkgPT09IGZpcnN0KGluZGV4ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIGFscmVhZHkgYXQgbGVmdG1vc3QgYm91bmRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPT09IDApIHsgLy8gcGljayB0aGUgcmlnaHRtb3N0XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRva2VuKGxhc3QoaW5kZXhlcykpO1xuICAgICAgICB9IGVsc2UgeyAvLyBhZGQgdGhlIG5leHQgbGVmdG1vc3QgdG8gYSByZWNvbnN0cnVjdGVkIFwic2VsZWN0ZWRcIiBhcnJheVxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNUb2tlbiA9IGluZGV4ZXNbaW5kZXhlcy5pbmRleE9mKGZpcnN0KHNlbGVjdGVkKSkgLSAxXTtcblxuICAgICAgICAgICAgdGhpcy5zZWxlY3RUb2tlbnMoYXBwZW5kID8gW3ByZXZpb3VzVG9rZW5dLmNvbmNhdChzZWxlY3RlZCkgOiBbcHJldmlvdXNUb2tlbl0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0TmV4dFRva2VuKGFwcGVuZCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQ7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLnByb3BzLnRva2VucztcblxuICAgICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdChzZWxlY3RlZCkgPT09IGxhc3QoaW5kZXhlcykpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRUb2tlbiA9IGluZGV4ZXNbaW5kZXhlcy5pbmRleE9mKGxhc3Qoc2VsZWN0ZWQpKSArIDFdO1xuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRva2VucyhhcHBlbmQgPyBzZWxlY3RlZC5jb25jYXQobmV4dFRva2VuKSA6IFtuZXh0VG9rZW5dKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihbXSk7XG4gICAgfVxuXG4gICAgaGFuZGxlSW5wdXRDbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVJbnB1dEZvY3VzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICBjYXNlIDM3OiAgICAvLyBsZWZ0IGFycm93XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFByZXZpb3VzVG9rZW4oZXZlbnQuc2hpZnRLZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOTogICAgLy8gcmlnaHQgYXJyb3dcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TmV4dFRva2VuKGV2ZW50LnNoaWZ0S2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODogICAgIC8vIGJhY2tzcGFjZVxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDY1OiAgICAvLyBsZXR0ZXIgXCJhXCJcbiAgICAgICAgICAgIGlmIChldmVudC5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGFja3ksIGJ1dCB0aGUgb25seSB3YXkgdW5sZXNzIHdlIG1vdmUgc2VsZWN0aW9uIG1hbmFnZW1lbnQgaW50ZXJuYWwgYWdhaW5cbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbih0aGlzLnByb3BzLnRva2Vucyk7XG4gICAgICAgICAgICB9IC8vIFwiY21kXCJcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlVG9rZW5DbG9zZUNsaWNrKGluZGV4LCBldmVudCkge1xuICAgICAgICAvLyBpZiB3ZSBkb24ndCBzdG9wIHByb3BhZ2F0aW9uLCB0aGUgZXZlbnQgYnViYmxlcyBhbmQgcmVzdWx0cyBpbiBhIGZhaWxlZCB0b2tlbiBzZWxlY3Rpb25cbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5yZW1vdmUoaW5kZXgpO1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJUb2tlbkNsb3NlKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRva2VuQ2xvc2VWaXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY3goJ2ItdG9rZW5maWVsZC10b2tlbi1jbG9zZScsIHRoaXMucHJvcHMudG9rZW5DbG9zZUNvbXBvbmVudC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlVG9rZW5DbG9zZUNsaWNrLmJpbmQodGhpcywgaW5kZXgpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVUb2tlbktleURvd24oaW5kZXgsIGV2ZW50KSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSAxMzogLy8gZW50ZXJcbiAgICAgICAgY2FzZSAzMjogLy8gc3BhY2VcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VG9rZW4oaW5kZXgpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODogLy8gYmFja3NwYWNlXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJUb2tlbnMoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYi10b2tlbmZpZWxkLXRva2Vucyc+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMudG9rZW5zLm1hcCgoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2B0b2tlbl8ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXRva2VuZmllbGQtdG9rZW4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ItdG9rZW5maWVsZC10b2tlbi1zZWxlY3RlZCc6IHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQuaW5kZXhPZihpbmRleCkgIT09IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc2VsZWN0VG9rZW4uYmluZCh0aGlzLCBpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZVRva2VuS2V5RG93bi5iaW5kKHRoaXMsIGluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD0nMCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZW50aXRpZXNbaW5kZXhdLnRleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyVG9rZW5DbG9zZShpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBUb2tlbml6ZWRJbnB1dC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXRva2VuZmllbGQtd3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyVG9rZW5zKCl9XG5cbiAgICAgICAgICAgICAgICA8VHlwZWFoZWFkXG4gICAgICAgICAgICAgICAgICAgIHsuLi5leHRyYWN0Q2hpbGRQcm9wcyh0aGlzLnByb3BzLCBUeXBlYWhlYWQuZGVmYXVsdFByb3BzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPSd0eXBlYWhlYWQnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYi10b2tlbmZpZWxkJ1xuICAgICAgICAgICAgICAgICAgICBjbGVhck9uU2VsZWN0aW9uPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUlucHV0Q2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUlucHV0Rm9jdXMsXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIG9uRW50aXR5U2VsZWN0ZWQ9e3RoaXMuYWRkfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXRva2VuaXplZC1pbnB1dC9pbmRleC5qcyIsImltcG9ydCBSZWFjdCwge1Byb3BUeXBlc30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGVzY2FwZXIgZnJvbSAnZXNjYXBlLXN0cmluZy1yZWdleHAnO1xuXG5pbXBvcnQgSW5wdXQgZnJvbSAnYm91bmRsZXNzLWlucHV0JztcbmltcG9ydCBleHRyYWN0Q2hpbGRQcm9wcyBmcm9tICdib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcbmltcG9ydCB1dWlkIGZyb20gJ2JvdW5kbGVzcy11dGlscy11dWlkJztcblxuY29uc3QgaXNGdW5jdGlvbiA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzU3RyaW5nID0gKHgpID0+IHR5cGVvZiB4ID09PSAnc3RyaW5nJztcbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuLyoqXG5fX0ludGVsbGlnZW50bHkgcmVjb21tZW5kIGVudGl0aWVzIHZpYSBjdXN0b21pemFibGUsIGZ1enp5IHJlY29nbml0aW9uLl9fXG5cblR5cGVhaGVhZCBpcyBhbiBlbmhhbmNlbWVudCB1cG9uIFtJbnB1dF0oaHR0cHM6Ly9naXRodWIuY29tL2VuaWdtYS1pby9ib3VuZGxlc3MvdHJlZS9tYXN0ZXIvcGFja2FnZXMvYm91bmRsZXNzLWlucHV0KSB3aGljaCBwcm92aWRlcyB0d28gYnVpbHQtaW4gbWF0Y2hpbmcgYWxnb3JpdGhtcyAoXCJmdXp6eVwiIFxcW2RlZmF1bHRcXF0gYW5kIFwic3RhcnRzLXdpdGhcIikgYW5kIHN1cHBvcnRzIHRoZSB1c2Ugb2YgY3VzdG9tIG1hdGNoaW5nIGFuZCBtYXJraW5nIGZ1bmN0aW9ucy5cblxuSW4gdGhlIGV4YW1wbGVzIGJlbG93LCBpbWFnaW5lIHRoZSBgPD5gIGluIHRoZSBcIm1hcmtzXCIgc2VjdGlvbiBpcyBhIHdyYXBwaW5nIGA8bWFyaz5gIGVsZW1lbnQ6XG5cbjEuIF9fXCJTdGFydHMtd2l0aFwiIG1hdGNoaW5nICYgbWFya2luZ19fXG4gICBgYGBqc3hcbiAgIDxUeXBlYWhlYWRcbiAgICAgICBhbGdvcml0aG09e1R5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIfVxuICAgICAgIGVudGl0aWVzPXtbXG4gICAgICAgICAgIHt0ZXh0OiAnYXBwbGUnfSxcbiAgICAgICAgICAge3RleHQ6ICdhcHJpY290J30sXG4gICAgICAgICAgIHt0ZXh0OiAnZ3JhcGUnfSxcbiAgICAgICBdfVxuICAgICAgIGlucHV0UHJvcHM9e3t2YWx1ZTogJ2EnfX0gLz5cbiAgIGBgYFxuXG4gICArIG1hdGNoZXM6IGBcImFwcGxlXCIsIFwiYXByaWNvdFwiYFxuICAgKyBtYXJrczogYFwiPGE+cHBsZVwiLCBcIjxhPnByaWNvdFwiYFxuXG4xLiBfX1wiRnV6enlcIiBtYXRjaGluZyAmIG1hcmtpbmdfX1xuICAgYGBganN4XG4gICA8VHlwZWFoZWFkXG4gICAgICAgYWxnb3JpdGhtPXtUeXBlYWhlYWQubW9kZS5GVVpaWX1cbiAgICAgICBlbnRpdGllcz17W1xuICAgICAgICAgICB7dGV4dDogJ2FwcGxlJ30sXG4gICAgICAgICAgIHt0ZXh0OiAnYXByaWNvdCd9LFxuICAgICAgICAgICB7dGV4dDogJ2dyYXBlJ30sXG4gICAgICAgXX1cbiAgICAgICBpbnB1dFByb3BzPXt7dmFsdWU6ICdhJ319IC8+XG4gICBgYGBcblxuICAgKyBtYXRjaGVzOiBgXCJhcHBsZVwiLCBcImFwcmljb3RcIiwgXCJncmFwZVwiYFxuICAgKyBtYXJrczogYFwiPGE+cHBsZVwiLCBcIjxhPnByaWNvdFwiLCBcImdyPGE+cGVcImBcblxuMS4gX19DdXN0b20gbWF0Y2hpbmcgJiBtYXJraW5nX19cblxuICAgIE9wdGlvbmFsbHksIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biBjb21iaW5hdGlvbiBvZiBtYXRjaGluZyBhbmQgbWFya2luZyBmdW5jdGlvbnMuIEZvciBleGFtcGxlLCBsb29zZW5pbmcgdGhlIG1hdGNoaW5nIHRvIGluY2x1ZGUgdW5pY29kZSB2YXJpYW50cyBvZiBjaGFyYWN0ZXJzIGNvdWxkIGJlIHVzZWZ1bCwgZS5nLiDDpyAmcmFycjsgY1xuXG4gICAgYGBganN4XG4gICAgPFR5cGVhaGVhZFxuICAgICAgICBhbGdvcml0aG09e3tcbiAgICAgICAgICAgIG1hdGNoZXI6IHlvdXJNYXRjaEZ1bmMsXG4gICAgICAgICAgICBtYXJrZXI6IHlvdXJNYXJrRnVuYyxcbiAgICAgICAgfX0gLz5cbiAgICBgYGBcblxuIyMgQ29tcG9uZW50IEluc3RhbmNlIE1ldGhvZHNcblxuV2hlbiB1c2luZyBgVHlwZWFoZWFkYCBpbiB5b3VyIHByb2plY3QsIHlvdSBtYXkgY2FsbCB0aGUgZm9sbG93aW5nIG1ldGhvZHMgb24gYSByZW5kZXJlZCBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50LiBVc2UgW2ByZWZzYF0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9yZWZzLWFuZC10aGUtZG9tLmh0bWwpIHRvIGdldCB0aGUgaW5zdGFuY2UuXG5cbi0gX19gZm9jdXMoKWBfX1xuICBmb2N1c2VzIHRoZSBicm93c2VyIG9vbiB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IGZvciBpbW1lZGlhdGUgdGV4dCBlbnRyeVxuXG4tIF9fYGdldElucHV0Tm9kZSgpYF9fXG4gIHJldHVybnMgdGhlIHJhdyB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgRE9NIG5vZGVcblxuLSBfX2BnZXRTZWxlY3RlZEVudGl0eVRleHQoKWBfX1xuICByZXR1cm5zIHRoZSBgdGV4dGAgcHJvcGVydHkgb2YgdGhlIGN1cnJlbnRseSBoaWdobGlnaHRlZCBlbnRpdHkgKGZyb20gYHByb3BzLmVudGl0aWVzYCksIG9yIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nXG5cbi0gX19gZ2V0VmFsdWUoKWBfX1xuICByZXRyaWV2ZXMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dFxuXG4tIF9fYHNlbGVjdCgpYF9fXG4gIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlcyBhIGZ1bGwgc2VsZWN0aW9uIG9uIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgc3VjaCB0aGF0IGEgcHJlc3Mgb2YgdGhlIEJhY2tzcGFjZSBrZXkgd291bGQgZnVsbHkgY2xlYXIgdGhlIGlucHV0XG5cbi0gX19gc2V0VmFsdWUodmFsdWU6IHN0cmluZylgX19cbiAgc2V0cyB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IHRvIHRoZSBzcGVjaWZpZWQgdGV4dCBhbmQgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZTsgZG8gbm90IHVzZSB0aGlzIG1ldGhvZCB3aGVuIHVzaW5nIGBUeXBlYWhlYWRgIGFzIGEgXCJjb250cm9sbGVkIGlucHV0XCJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZWFoZWFkIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIG1vZGUgPSB7XG4gICAgICAgICdTVEFSVFNfV0lUSCc6IHV1aWQoKSxcbiAgICAgICAgJ0ZVWlpZJzogdXVpZCgpLFxuICAgIH1cblxuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKiBUeXBlYWhlYWQgYWNjZXB0cyBhbGwgc3VwcG9ydGVkIFtJbnB1dCBwcm9wc10oL0lucHV0I3Byb3BzKSAqL1xuICAgICAgICAuLi5JbnB1dC5wcm9wVHlwZXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAgICB0aGUgbWVjaGFuaXNtIHVzZWQgdG8gaWRlbnRpZnkgYW5kIG1hcmsgbWF0Y2hpbmcgc3Vic3RyaW5nczsgYSBjdXN0b20gc2V0IGNhbiBiZSBwcm92aWRlZCBhcyBhbiBvYmplY3QgKHNlZSB0aGUgcHJvcGVydGllcyBiZWxvdylcbiAgICAgICAgICovXG4gICAgICAgIGFsZ29yaXRobTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRILFxuICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLkZVWlpZLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiBmb3JtYXQgd2lsbCBiZSB3aGF0IHNob3dzIHVwIGluIHRoZSB0eXBlYWhlYWQgZHJvcGRvd24gbGlzdCAoSlNYIGFycmF5cyBhcmUgYWNjZXB0ZWQsIHRoZSBjb21wb25lbnQgd2lsbCBwcm92aWRlIHRoZSB3cmFwcGVyKVxuXG4gICAgICAgICAgICAgICAgICAgIGFuIGV4YW1wbGUgbWFya2luZyBmdW5jdGlvbjpcblxuICAgICAgICAgICAgICAgICAgICBgYGBqc1xuICAgICAgICAgICAgICAgICAgICBzdGFydHNXaXRoTWFya2luZ0Z1bmMoaW5wdXRUZXh0LCBlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudGl0eUNvbnRlbnQgPSBlbnRpdHkudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlZWtWYWx1ZSA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleFN0YXJ0ID0gZW50aXR5Q29udGVudC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2Vla1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4RW5kID0gaW5kZXhTdGFydCArIHNlZWtWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4ga2V5PSdiZWZvcmUnPntlbnRpdHlDb250ZW50LnNsaWNlKDAsIGluZGV4U3RhcnQpfTwvc3Bhbj4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hcmsga2V5PSdtYXJrJz57ZW50aXR5Q29udGVudC5zbGljZShpbmRleFN0YXJ0LCBpbmRleEVuZCl9PC9tYXJrPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBrZXk9J2FmdGVyJz57ZW50aXR5Q29udGVudC5zbGljZShpbmRleEVuZCl9PC9zcGFuPixcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYGBgXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbWFya2VyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLkZVWlpZLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiBmb3JtYXQgZGV0ZXJtaW5lcyB3aGljaCBlbnRpdGllcyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgbWFya2luZyBmdW5jdGlvblxuXG4gICAgICAgICAgICAgICAgICAgIGFuIGV4YW1wbGUgbWF0Y2hpbmcgZnVuY3Rpb246XG5cbiAgICAgICAgICAgICAgICAgICAgYGBganNcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRzV2l0aE1hdGNoaW5nRnVuYyhpbnB1dFRleHQsIGVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWVrVmFsdWUgPSB1c2VyVGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50aXRpZXMucmVkdWNlKGZ1bmN0aW9uIHNlZWtNYXRjaChyZXN1bHRzLCBlbnRpdHksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudGl0eS50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYGBgXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbWF0Y2hlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIGB0cnVlYCwgY2xlYXJzIHRoZSBpbnB1dCB0ZXh0IHdoZW4gYSAocGFydGlhbCkgbWF0Y2ggaXMgc2VsZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyT25TZWxlY3Rpb246IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgdXNlciBpbnB1dCBpcyBmaWx0ZXJlZCBhZ2FpbnN0OyBhdCBhIG1pbmltdW0sIGVhY2ggb2JqZWN0IG11c3QgaGF2ZSBhIGB0ZXh0YCBwcm9wZXJ0eSBhbmQgYW55IG90aGVyIHN1cHBsaWVkIHByb3BlcnR5IGlzIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSByZXN1bHRpbmcgRE9NIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGVudGl0aWVzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogdGhlIHRleHQgdG8gYmUgdXNlZCB0byBkbyBzdHJpbmcgY29tcGFyaXNvbiBhbmQgbWF0Y2ggYWdhaW5zdFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbmRlcnMgYSBkaXNhYmxlZCB0ZXh0ZmllbGQgd2l0aCB0aGUgZnVsbCB0ZXh0IG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaW5wdXQgaGludDsgd2lsbCByZW1haW4gYmxhbmsgaWYgdGhlIG1hdGNoZWQgc3Vic3RyaW5nIGlzIG5vdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB1c2VyIGlucHV0XG4gICAgICAgICAqL1xuICAgICAgICBoaW50OiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICBoaW50UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuXG4gICAgICAgIG1hdGNoV3JhcHBlclByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIFwib2Zmc2NyZWVuXCIgY2xhc3MgdXNlZCBieSB5b3VyIGFwcGxpY2F0aW9uOyBzcGVjaWZpY2FsbHkgdG8gcmV0YWluIFtBUklBIG5hdmlnYWJpbGl0eV0oaHR0cDovL3Nub29rLmNhL2FyY2hpdmVzL2h0bWxfYW5kX2Nzcy9oaWRpbmctY29udGVudC1mb3ItYWNjZXNzaWJpbGl0eSkgYXMgYGRpc3BsYXk6IG5vbmVgIGV4Y2x1ZGVzIHRoZSBlbGVtZW50IGZyb20gY29uc2lkZXJhdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgb2Zmc2NyZWVuQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgYEVudGVyYCB3aXRoIG5vIGF1dG9zdWdnZXN0IGhpbnQgYXZhaWxhYmxlLCBpbmRpY2F0aW5nIHRoYXQgaW5wdXQgaXMgY29tcGxldGVcbiAgICAgICAgICovXG4gICAgICAgIG9uQ29tcGxldGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2l0aCB0aGUgaW5kZXggb2YgdGhlIGhpZ2hsaWdodGVkIGVudGl0eSBkdWUgdG8ga2V5Ym9hcmQgc2VsZWN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBvbkVudGl0eUhpZ2hsaWdodGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdpdGggdGhlIGluZGV4IG9mIHRoZSBlbnRpdHkgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICovXG4gICAgICAgIG9uRW50aXR5U2VsZWN0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIC4uLklucHV0LmRlZmF1bHRQcm9wcyxcbiAgICAgICAgYWxnb3JpdGhtOiBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgY2xlYXJPblNlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgIGVudGl0aWVzOiBbXSxcbiAgICAgICAgaGludDogbnVsbCxcbiAgICAgICAgaGludFByb3BzOiB7fSxcbiAgICAgICAgbWF0Y2hXcmFwcGVyUHJvcHM6IHt9LFxuICAgICAgICBvZmZzY3JlZW5DbGFzczogJ2Itb2Zmc2NyZWVuJyxcbiAgICAgICAgb25Db21wbGV0ZTogbm9vcCxcbiAgICAgICAgb25FbnRpdHlIaWdobGlnaHRlZDogbm9vcCxcbiAgICAgICAgb25FbnRpdHlTZWxlY3RlZDogbm9vcCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoVHlwZWFoZWFkLmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBlbnRpdHlNYXRjaEluZGV4ZXM6IFtdLFxuICAgICAgICBpZDogdXVpZCgpLFxuICAgICAgICBpc0NvbnRyb2xsZWQ6IGlzU3RyaW5nKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSksXG4gICAgICAgIGlucHV0OiB0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWVcbiAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgIHx8ICcnLFxuICAgICAgICBzZWxlY3RlZEVudGl0eUluZGV4OiAtMSxcbiAgICB9XG5cbiAgICBtb3VudGVkID0gZmFsc2VcblxuICAgIHVwZGF0ZUlucHV0U3RhdGUgPSAodmFsdWUgPSAnJykgPT4gdGhpcy5zZXRTdGF0ZSh7aW5wdXQ6IHZhbHVlfSlcblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5lbnRpdGllcyAhPT0gdGhpcy5wcm9wcy5lbnRpdGllcykge1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcyhuZXh0UHJvcHMuZW50aXRpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRQcm9wcy5pbnB1dFByb3BzLnZhbHVlICE9PSB0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRTdGF0ZShuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCAmJiAhcHJldlN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcy5tYXRjaGVzLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH0gLy8gZml4IGFuIG9kZCBidWcgaW4gRkYgd2hlcmUgaXQgaW5pdGlhbGl6ZXMgdGhlIGVsZW1lbnQgd2l0aCBhbiBpbmNvcnJlY3Qgc2Nyb2xsVG9wXG5cbiAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCA+PSAwXG4gICAgICAgICAgICAmJiB0aGlzLnByb3BzLmVudGl0aWVzW3RoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0gIT09IHByZXZQcm9wcy5lbnRpdGllc1twcmV2U3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldFNlbGVjdGVkRW50aXR5VGV4dCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5wcm9wcy5lbnRpdGllc1t0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdO1xuXG4gICAgICAgIHJldHVybiBlbnRpdHkgPyBlbnRpdHkudGV4dCA6ICcnO1xuICAgIH1cblxuICAgIGhhbmRsZU1hdGNoQ2xpY2soaW5kZXgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRFbnRpdHlJbmRleDogaW5kZXh9LCB0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KTtcbiAgICB9XG5cbiAgICBzZWxlY3RNYXRjaChkZWx0YSkge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXM7XG4gICAgICAgIGNvbnN0IHRvdGFsTWF0Y2hlcyA9IG1hdGNoZXMubGVuZ3RoO1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gbWF0Y2hlcy5pbmRleE9mKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCkgKyBkZWx0YTtcblxuICAgICAgICBpZiAodG90YWxNYXRjaGVzKSB7XG4gICAgICAgICAgICBpZiAobmV4dEluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRvdGFsTWF0Y2hlcyAtIDE7IC8vIHJldmVyc2UgbG9vcFxuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0SW5kZXggPj0gdG90YWxNYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gMDsgLy8gbG9vcFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtYXRjaEluZGV4ID0gbWF0Y2hlc1tuZXh0SW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlc05vZGUgPSB0aGlzLnJlZnMubWF0Y2hlcztcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXNOb2RlWUVuZCA9IG1hdGNoZXNOb2RlLnNjcm9sbFRvcCArIG1hdGNoZXNOb2RlLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTm9kZSA9IHRoaXMucmVmc1tgbWF0Y2hfJCR7bWF0Y2hJbmRleH1gXTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTm9kZVlTdGFydCA9IG1hdGNoTm9kZS5vZmZzZXRUb3A7XG4gICAgICAgICAgICBjb25zdCBtYXRjaE5vZGVZRW5kID0gbWF0Y2hOb2RlWVN0YXJ0ICsgbWF0Y2hOb2RlLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgLy8gYnJpbmcgaW50byB2aWV3IGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgaWYgKG1hdGNoTm9kZVlFbmQgPj0gbWF0Y2hlc05vZGVZRW5kKSB7IC8vIGJlbG93XG4gICAgICAgICAgICAgICAgbWF0Y2hlc05vZGUuc2Nyb2xsVG9wICs9IG1hdGNoTm9kZVlFbmQgLSBtYXRjaGVzTm9kZVlFbmQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoTm9kZVlTdGFydCA8PSBtYXRjaGVzTm9kZS5zY3JvbGxUb3ApIHsgLy8gYWJvdmVcbiAgICAgICAgICAgICAgICBtYXRjaGVzTm9kZS5zY3JvbGxUb3AgPSBtYXRjaE5vZGVZU3RhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkRW50aXR5SW5kZXg6IG1hdGNoSW5kZXh9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0TWF0Y2hlcyA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbnRpdHlJbmRleDogLTEsXG4gICAgICAgICAgICAgICAgZW50aXR5TWF0Y2hJbmRleGVzOiBbXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SW5wdXROb2RlID0gKCkgPT4gdGhpcy5yZWZzLmlucHV0LnJlZnMuZmllbGRcblxuICAgIHNlbGVjdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLmdldElucHV0Tm9kZSgpO1xuXG4gICAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gdGhpcy5nZXRWYWx1ZSgpLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb2N1cyA9ICgpID0+IHRoaXMuZ2V0SW5wdXROb2RlKCkuZm9jdXMoKVxuICAgIGdldFZhbHVlID0gKCkgPT4gdGhpcy5yZWZzLmlucHV0LmdldFZhbHVlKClcblxuICAgIHNldFZhbHVlID0gKHZhbHVlID0gJycpID0+IHtcbiAgICAgICAgdGhpcy5yZWZzLmlucHV0LnNldFZhbHVlKHZhbHVlKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUlucHV0U3RhdGUodmFsdWUpO1xuICAgICAgICB0aGlzLnJlc2V0TWF0Y2hlcygpO1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgY3Vyc29yQXRFbmRPZklucHV0KCkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXRJbnB1dE5vZGUoKTtcblxuICAgICAgICByZXR1cm4gICAgbm9kZS5zZWxlY3Rpb25TdGFydCA9PT0gbm9kZS5zZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgICYmIG5vZGUuc2VsZWN0aW9uRW5kID09PSB0aGlzLmdldFZhbHVlKCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRW50aXR5U2VsZWN0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jbGVhck9uU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgdGhlIHVwY29taW5nIHJlbmRlciB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IGBzZXRWYWx1ZWBcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5yZXNldE1hdGNoZXMsIDApO1xuICAgIH1cblxuICAgIG1hcmtGdXp6eU1hdGNoU3Vic3RyaW5nKGlucHV0LCBlbnRpdHkpIHtcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGVudCA9IGVudGl0eS50ZXh0O1xuICAgICAgICBjb25zdCBmcmFncyA9IGVudGl0eUNvbnRlbnQuc3BsaXQobmV3IFJlZ0V4cCgnKCcgKyBlc2NhcGVyKGlucHV0KSArICcpJywgJ2lnJykpO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkVXNlclRleHQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB0aHJlc2hvbGQgPSBmcmFncy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsraSA8IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgaWYgKGZyYWdzW2ldLnRvTG93ZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWRVc2VyVGV4dCkge1xuICAgICAgICAgICAgICAgIGZyYWdzW2ldID0gPG1hcmsga2V5PXtpfSBjbGFzc05hbWU9J2ItdHlwZWFoZWFkLW1hdGNoLWhpZ2hsaWdodCc+e2ZyYWdzW2ldfTwvbWFyaz47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnJhZ3M7XG4gICAgfVxuXG4gICAgbWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZyhpbnB1dCwgZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRlbnQgPSBlbnRpdHkudGV4dDtcbiAgICAgICAgY29uc3Qgc2Vla1ZhbHVlID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgaW5kZXhTdGFydCA9IGVudGl0eUNvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlZWtWYWx1ZSk7XG4gICAgICAgIGNvbnN0IGluZGV4RW5kID0gaW5kZXhTdGFydCArIHNlZWtWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIDxzcGFuIGtleT0nMCc+e2VudGl0eUNvbnRlbnQuc2xpY2UoMCwgaW5kZXhTdGFydCl9PC9zcGFuPixcbiAgICAgICAgICAgIDxtYXJrIGtleT0nMScgY2xhc3NOYW1lPSdiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnPntlbnRpdHlDb250ZW50LnNsaWNlKGluZGV4U3RhcnQsIGluZGV4RW5kKX08L21hcms+LFxuICAgICAgICAgICAgPHNwYW4ga2V5PScyJz57ZW50aXR5Q29udGVudC5zbGljZShpbmRleEVuZCl9PC9zcGFuPixcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBnZXRNYXJraW5nRnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpc1N0cmluZyh0aGlzLnByb3BzLmFsZ29yaXRobSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmFsZ29yaXRobSA9PT0gVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXJrU3RhcnRzV2l0aE1hdGNoU3Vic3RyaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZztcblxuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5hbGdvcml0aG0ubWFya2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndhcm5lZE1hcmtlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5lZE1hcmtlciA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1R5cGVhaGVhZDogbm8gYHByb3BzLmFsZ29yaXRobS5tYXJrZXJgIHdhcyBwcm92aWRlZDsgZmFsbGluZyBiYWNrIHRvIHRoZSBkZWZhdWx0IG1hcmtpbmcgYWxnb3JpdGhtIChGVVpaWSkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZztcbiAgICB9XG5cbiAgICBtYXJrTWF0Y2hTdWJzdHJpbmcgPSAoLi4uYXJncykgPT4gdGhpcy5nZXRNYXJraW5nRnVuY3Rpb24oKSguLi5hcmdzKVxuXG4gICAgZ2V0RnV6enlNYXRjaEluZGV4ZXModXNlclRleHQsIGVudGl0aWVzKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB1c2VyVGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiBlbnRpdGllcy5yZWR1Y2UoZnVuY3Rpb24gZmluZEluZGV4ZXMocmVzdWx0LCBlbnRpdHksIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gICBlbnRpdHkudGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yobm9ybWFsaXplZCkgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgPyAocmVzdWx0LnB1c2goaW5kZXgpICYmIHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICA6IHJlc3VsdDtcbiAgICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIGdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXModXNlclRleHQsIGVudGl0aWVzKSB7XG4gICAgICAgIGNvbnN0IHNlZWtWYWx1ZSA9IHVzZXJUZXh0LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgcmV0dXJuIGVudGl0aWVzLnJlZHVjZShmdW5jdGlvbiBzZWVrTWF0Y2gocmVzdWx0cywgZW50aXR5LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGVudGl0eS50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cbiAgICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIGdldE1hdGNoaW5nRnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpc1N0cmluZyh0aGlzLnByb3BzLmFsZ29yaXRobSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmFsZ29yaXRobSA9PT0gVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGdXp6eU1hdGNoSW5kZXhlcztcblxuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5hbGdvcml0aG0ubWF0Y2hlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmFsZ29yaXRobS5tYXRjaGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud2FybmVkTWF0Y2hlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5lZE1hdGNoZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWF0Y2hlcmAgd2FzIHByb3ZpZGVkOyBmYWxsaW5nIGJhY2sgdG8gdGhlIGRlZmF1bHQgbWF0Y2hpbmcgYWxnb3JpdGhtIChGVVpaWSkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRGdXp6eU1hdGNoSW5kZXhlcztcbiAgICB9XG5cbiAgICBnZXRNYXRjaEluZGV4ZXMgPSAoLi4uYXJncykgPT4gdGhpcy5nZXRNYXRjaGluZ0Z1bmN0aW9uKCkoLi4uYXJncylcblxuICAgIGNvbXB1dGVNYXRjaGVzKHByb3ZpZGVkRW50aXRpZXMpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbnRpdGllcyA9IHByb3ZpZGVkRW50aXRpZXMgfHwgcHJvcHMuZW50aXRpZXM7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzdGF0ZS5pbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBjdXJyZW50VmFsdWUgPT09ICcnID8gW10gOiB0aGlzLmdldE1hdGNoSW5kZXhlcyhjdXJyZW50VmFsdWUsIGVudGl0aWVzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEVudGl0eUluZGV4OiBtYXRjaGVzLmxlbmd0aCA/IG1hdGNoZXNbMF0gOiAtMSxcbiAgICAgICAgICAgICAgICBlbnRpdHlNYXRjaEluZGV4ZXM6IG1hdGNoZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNDb250cm9sbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVJbnB1dFN0YXRlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydCA+IDEpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICBpZiAoICAgdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIHRoaXMuY3Vyc29yQXRFbmRPZklucHV0KClcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmdldElucHV0Tm9kZSgpID09PSBldmVudC50YXJnZXRcbiAgICAgICAgICAgICAgICAmJiAhZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBibG9jayBjdXJzb3IgbW92ZW1lbnRcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TWF0Y2goLTEpO1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIGJsb2NrIGN1cnNvciBtb3ZlbWVudFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RNYXRjaCgxKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgICBpZiAoICAgdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIHRoaXMuZ2V0SW5wdXROb2RlKCkgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRNYXRjaGVzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICAgIGlmICggICB0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXggIT09IC0xXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5nZXRJbnB1dE5vZGUoKSA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25Db21wbGV0ZSh0aGlzLnN0YXRlLmlucHV0LCBldmVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5vbktleURvd24pKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJOb3RpZmljYXRpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgcmVmPSdhcmlhJ1xuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnN0YXRlLmlkfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5vZmZzY3JlZW5DbGFzc31cbiAgICAgICAgICAgICAgICBhcmlhLWxpdmU9J3BvbGl0ZSc+XG4gICAgICAgICAgICAgICAge3RoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJIaW50KCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5oaW50KSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyVGV4dCA9IHRoaXMuc3RhdGUuaW5wdXQ7XG4gICAgICAgICAgICBjb25zdCByYXcgPSB0aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dCgpO1xuICAgICAgICAgICAgbGV0IHByb2Nlc3NlZCA9ICcnO1xuXG4gICAgICAgICAgICBpZiAoICAgcmF3XG4gICAgICAgICAgICAgICAgJiYgcmF3LnRvTG93ZXJDYXNlKCkuaW5kZXhPZih1c2VyVGV4dC50b0xvd2VyQ2FzZSgpKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZCA9IHJhdy5yZXBsYWNlKG5ldyBSZWdFeHAodXNlclRleHQsICdpJyksIHVzZXJUZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmhpbnRQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdoaW50J1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ItaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ItaW5wdXQtcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ItdHlwZWFoZWFkLWhpbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaW50UHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD0nLTEnPlxuICAgICAgICAgICAgICAgICAgICB7cHJvY2Vzc2VkfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlck1hdGNoZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcy5tYXRjaFdyYXBwZXJQcm9wcztcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdtYXRjaGVzJ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXR5cGVhaGVhZC1tYXRjaC13cmFwcGVyJywgcHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5tYXAoKGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLnByb3BzLmVudGl0aWVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtjbGFzc05hbWUsIHRleHQsIC4uLnJlc3R9ID0gZW50aXR5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17YG1hdGNoXyQke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItdHlwZWFoZWFkLW1hdGNoJywgY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYi10eXBlYWhlYWQtbWF0Y2gtc2VsZWN0ZWQnOiB0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXggPT09IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXt0ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU1hdGNoQ2xpY2suYmluZCh0aGlzLCBpbmRleCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5tYXJrTWF0Y2hTdWJzdHJpbmcodGhpcy5zdGF0ZS5pbnB1dCwgZW50aXR5KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge3Byb3BzLCBzdGF0ZX0gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgey4uLm9taXQocHJvcHMsIFR5cGVhaGVhZC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXR5cGVhaGVhZC13cmFwcGVyJywgcHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTm90aWZpY2F0aW9uKCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVySGludCgpfVxuXG4gICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgIHsuLi5leHRyYWN0Q2hpbGRQcm9wcyhwcm9wcywgSW5wdXQuZGVmYXVsdFByb3BzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPSdpbnB1dCdcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17c3RhdGUuaWR9XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnByb3BzLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGN4KCdiLXR5cGVhaGVhZCcsIHByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgfX0gLz5cblxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlck1hdGNoZXMoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvaW5kZXguanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYXRjaE9wZXJhdG9yc1JlID0gL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcblx0fVxuXG5cdHJldHVybiBzdHIucmVwbGFjZShtYXRjaE9wZXJhdG9yc1JlLCAnXFxcXCQmJyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9+L2VzY2FwZS1zdHJpbmctcmVnZXhwL2luZGV4LmpzIiwiLyoqXG4gKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB0aGF0IGlzIGFuIGludGVyc2VjdGlvbiBvZiB0aGUga2V5cyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgc2Vjb25kIG9iamVjdCBhcmd1bWVudHMuXG4gKlxuICogIyMgRXhhbXBsZSBVc2FnZVxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgaW50ZXJzZWN0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uJztcbiAqXG4gKiBjb25zdCBvYmoxID0ge2ZvbzogJ2JhcicsIGJhcjogJ2JheicsIGJhejogJ2ZpenonfTtcbiAqIGNvbnN0IG9iajIgPSB7YmFyOiAneCd9O1xuICpcbiAqIGludGVyc2VjdChvYmoxLCBvYmoyKTsgLy8gcmV0dXJucyBge2JhcjogJ2Jheid9YFxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEludGVyc2VjdGlvbihvYmoxLCBvYmoyKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iajIpLnJlZHVjZSgoY2hpbGRQcm9wcywga2V5KSA9PiB7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqMSkge1xuICAgICAgICAgICAgY2hpbGRQcm9wc1trZXldID0gb2JqMVtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHM7XG5cbiAgICB9LCB7fSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbi9pbmRleC5qcyIsIi8qKlxuICogUmV0dXJucyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIHN1cHBsaWVkIG9iamVjdCB3aXRob3V0IHRoZSBnaXZlbiBrZXlzLlxuICpcbiAqICMjIEV4YW1wbGUgVXNhZ2VcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IG9taXRLZXlzIGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuICpcbiAqIGNvbnN0IG9iaiA9IHtmb286ICdiYXInLCBiYXI6ICdiYXonfTtcbiAqXG4gKiBvbWl0S2V5cyhvYmosIFsnYmFyJ10pOyAvLyByZXR1cm5zIGB7Zm9vOiAnYmFyJ31gXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb21pdEtleXNGcm9tU291cmNlT2JqZWN0KHNvdXJjZSwgb21pdHRlZEtleXMgPSBbXSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiByZWxvY2F0ZUFjY2VwdGVkS2V5cyhoYXNoLCBrZXkpIHtcbiAgICAgICAgaWYgKG9taXR0ZWRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGhhc2hba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfSwge30pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qcyIsIi8qKlxuICogUmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IGZvciB1c2UgaW4gcHJvZ3JhbW1hdGljIHRyYW5zZm9ybSBzdHlsZSBtYW5pcHVsYXRpb24uXG4gKlxuICogIyMgRXhhbXBsZSBVc2FnZVxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgdHJhbnNmb3JtUHJvcGVydHkgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eSc7XG4gKlxuICogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvbycpLnN0eWxlW3RyYW5zZm9ybVByb3BlcnR5XSA9ICd0cmFuc2xhdGVZKDApJztcbiAqIGBgYFxuICovXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gZGV0ZWN0VHJhbnNmb3JtUHJvcGVydHkoKSB7XG4gICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAnV2Via2l0VHJhbnNmb3JtJyxcbiAgICAgICAgJ01velRyYW5zZm9ybScsXG4gICAgICAgICdPVHJhbnNmb3JtJyxcbiAgICAgICAgJ21zVHJhbnNmb3JtJyxcbiAgICAgICAgJ3dlYmtpdC10cmFuc2Zvcm0nLCAvLyB1c2VkIGluIEpTRE9NXG4gICAgXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcm9wcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvcHNbaV0gaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHNbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qcyIsIi8qKlxuICogR2VuZXJhdGVzIGEgdW5pcXVlIElELCBiYXNlZCBvbiBbdGhpcyBhbGdvcml0aG1dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODMpLiBBZGRzIGEgcHJlZml4IChgYi1gKSBzbyBpdCBpc1xuICogc3VpdGFibGUgZm9yIHVzZSBhcyBhbiBIVE1MIElELlxuICpcbiAqICMjIEV4YW1wbGUgVXNhZ2VcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuICpcbiAqIHV1aWQoKTsgLy8gYi0xZjJjZDI3Zi0wNzU0LTQzNDQtOWQyMC00MzZhMjAxYjJmODBcbiAqIGBgYFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1dWlkKCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgcmV0dXJuICdiLScgKyAoWzFlN10rLTFlMystNGUzKy04ZTMrLTFlMTEpLnJlcGxhY2UoL1swMThdL2csYT0+KGFeTWF0aC5yYW5kb20oKSoxNj4+YS80KS50b1N0cmluZygxNikpO1xuICAgIC8qIGVzbGludC1lbmFibGUgKi9cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJhbWRcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifVxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImFtZFwiOlwicmVhY3QtZG9tXCIsXCJjb21tb25qczJcIjpcInJlYWN0LWRvbVwiLFwicm9vdFwiOlwiUmVhY3RET01cIn1cbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==