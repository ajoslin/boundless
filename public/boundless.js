'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var ReactDOM = require('react-dom');
var ReactDOM__default = _interopDefault(ReactDOM);

var isFunction = (function(test){return typeof test==='function';});

function omitKeysFromSourceObject(source){var omittedKeys=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return Object.keys(source).reduce(function relocateAcceptedKeys(hash,key){if(omittedKeys.indexOf(key)===-1){hash[key]=source[key];}return hash;},{});}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

var ArrowKeyNavigation=function(_React$PureComponent){inherits(ArrowKeyNavigation,_React$PureComponent);function ArrowKeyNavigation(){var _ref;var _temp,_this,_ret;classCallCheck(this,ArrowKeyNavigation);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=ArrowKeyNavigation.__proto__||Object.getPrototypeOf(ArrowKeyNavigation)).call.apply(_ref,[this].concat(args))),_this),_this.state={activeChildIndex:_this.props.defaultActiveChildIndex},_this.handleKeyDown=function(event){switch(event.key){case'ArrowUp':if(_this.props.mode===ArrowKeyNavigation.mode.VERTICAL||_this.props.mode===ArrowKeyNavigation.mode.BOTH){event.preventDefault();_this.moveFocus(-1);}break;case'ArrowLeft':if(_this.props.mode===ArrowKeyNavigation.mode.HORIZONTAL||_this.props.mode===ArrowKeyNavigation.mode.BOTH){event.preventDefault();_this.moveFocus(-1);}break;case'ArrowDown':if(_this.props.mode===ArrowKeyNavigation.mode.VERTICAL||_this.props.mode===ArrowKeyNavigation.mode.BOTH){event.preventDefault();_this.moveFocus(1);}break;case'ArrowRight':if(_this.props.mode===ArrowKeyNavigation.mode.HORIZONTAL||_this.props.mode===ArrowKeyNavigation.mode.BOTH){event.preventDefault();_this.moveFocus(1);}break;}if(isFunction(_this.props.onKeyDown)){_this.props.onKeyDown(event);}},_this.handleFocus=function(event){if(event.target.hasAttribute('data-index')){var index=parseInt(event.target.getAttribute('data-index'),10);var child=React__default.Children.toArray(_this.props.children)[index];_this.setState({activeChildIndex:index});if(child.props.onFocus){child.props.onFocus(event);}}},_temp),possibleConstructorReturn(_this,_ret);}createClass(ArrowKeyNavigation,[{key:'componentDidUpdate',value:function componentDidUpdate(prevProps,prevState){if(this.state.activeChildIndex!==prevState.activeChildIndex){this.setFocus(this.state.activeChildIndex);}}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){if(this.state.activeChildIndex!==0){var numChildren=nextProps.children?React__default.Children.count(nextProps.children):0;if(numChildren===0){this.setState({activeChildIndex:0});}else if(this.state.activeChildIndex>=numChildren){this.setState({activeChildIndex:numChildren-1});}}}},{key:'setFocus',value:function setFocus(index){var childNode=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:ReactDOM.findDOMNode(this.refs.wrapper)).children[index];if(childNode&&childNode.hasAttribute('data-skip')){this.moveFocus(childNode.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1);}else if(childNode&&document.activeElement!==childNode){childNode.focus();}}},{key:'moveFocus',value:function moveFocus(delta){var numChildren=this.props.children?React__default.Children.count(this.props.children):0;var nextIndex=this.state.activeChildIndex+delta;if(nextIndex>=numChildren){nextIndex=0;}else if(nextIndex<0){nextIndex=numChildren-1;}this.setState({activeChildIndex:nextIndex});}},{key:'children',value:function children(){var _this2=this;return React__default.Children.map(this.props.children,function(child,index){return React__default.cloneElement(child,{'data-index':index,'data-skip':parseInt(child.props.tabIndex,10)===-1||undefined,key:child.key||index,tabIndex:_this2.state.activeChildIndex===index?0:-1});});}},{key:'render',value:function render(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,ArrowKeyNavigation.internalKeys),{ref:'wrapper',onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children());}}]);return ArrowKeyNavigation;}(React__default.PureComponent);ArrowKeyNavigation.mode={HORIZONTAL:'HORIZONTAL',VERTICAL:'VERTICAL',BOTH:'BOTH'};ArrowKeyNavigation.propTypes={component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),defaultActiveChildIndex:React.PropTypes.number,mode:React.PropTypes.oneOf([ArrowKeyNavigation.mode.HORIZONTAL,ArrowKeyNavigation.mode.VERTICAL,ArrowKeyNavigation.mode.BOTH])};ArrowKeyNavigation.defaultProps={component:'div',defaultActiveChildIndex:0,mode:ArrowKeyNavigation.mode.BOTH};ArrowKeyNavigation.internalKeys=Object.keys(ArrowKeyNavigation.defaultProps);

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var index=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

function noop(){}

var Button=function(_React$PureComponent){inherits(Button,_React$PureComponent);function Button(){var _ref;var _temp,_this,_ret;classCallCheck(this,Button);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Button.__proto__||Object.getPrototypeOf(Button)).call.apply(_ref,[this].concat(args))),_this),_this.handleClick=function(event){if(_this.props.disabled){return;}_this.toggleState(event);if(isFunction(_this.props.onClick)){_this.props.onClick(event);}},_this.handleKeyDown=function(event){if(_this.props.disabled){return;}switch(event.key){case'Enter':case'Space':event.preventDefault();_this.toggleState(event);}if(isFunction(_this.props.onKeyDown)){_this.props.onKeyDown(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(Button,[{key:'toggleState',value:function toggleState(event){this.props[this.props.pressed?'onUnpressed':'onPressed'](event);}},{key:'render',value:function render(){return React__default.createElement('button',_extends({},omitKeysFromSourceObject(this.props,Button.internalKeys),{ref:'button',className:index('ui-button',this.props.className,{'ui-button-pressable':typeof this.props.pressed!=='undefined','ui-button-pressed':this.props.pressed}),'aria-pressed':this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children);}}]);return Button;}(React__default.PureComponent);Button.propTypes={children:React.PropTypes.node,onClick:React.PropTypes.func,onPressed:React.PropTypes.func,onUnpressed:React.PropTypes.func,pressed:React.PropTypes.bool};Button.defaultProps={children:null,onClick:noop,onPressed:noop,onUnpressed:noop,pressed:undefined};Button.internalKeys=Object.keys(Button.defaultProps);

var index$1=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

function uuid(){return'b-'+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(a){return(a^Math.random()*16>>a/4).toString(16);});}

var Checkbox=function(_React$PureComponent){inherits(Checkbox,_React$PureComponent);function Checkbox(){var _ref;var _temp,_this,_ret;classCallCheck(this,Checkbox);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Checkbox.__proto__||Object.getPrototypeOf(Checkbox)).call.apply(_ref,[this].concat(args))),_this),_this.id=uuid(),_this.handleChange=function(event){if(_this.props.inputProps.disabled){return;}_this.props[!_this.props.inputProps.checked?'onChecked':'onUnchecked'](_this.props.inputProps.name);if(isFunction(_this.props.inputProps.onChange)){_this.props.inputProps.onChange(event);}},_this.handleClick=function(event){if(_this.props.inputProps.disabled){return;}_this.refs.input.focus();if(isFunction(_this.props.inputProps.onClick)){_this.props.inputProps.onClick(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(Checkbox,[{key:'componentDidMount',value:function componentDidMount(){if(this.props.inputProps.indeterminate){this.setIndeterminate();}}},{key:'componentDidUpdate',value:function componentDidUpdate(prevProps){if(prevProps.inputProps.indeterminate!==this.props.inputProps.indeterminate){this.setIndeterminate();}}},{key:'setIndeterminate',value:function setIndeterminate(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate;}},{key:'getAriaState',value:function getAriaState(){return this.props.inputProps.indeterminate?'mixed':String(this.props.inputProps.checked);}},{key:'renderInput',value:function renderInput(){return React__default.createElement('input',_extends({},omitKeysFromSourceObject(this.props.inputProps,'indeterminate'),{ref:'input',type:'checkbox',className:index$1('ui-checkbox',this.props.inputProps.className,{'ui-checkbox-mixed':this.props.inputProps.indeterminate,'ui-checkbox-checked':this.props.inputProps.checked,'ui-checkbox-unchecked':!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,'aria-checked':this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}));}},{key:'renderLabel',value:function renderLabel(){if(this.props.label){return React__default.createElement('label',_extends({},this.props.labelProps,{ref:'label',className:index$1('ui-checkbox-label',this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label);}}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,Checkbox.internalKeys),{ref:'wrapper',className:index$1('ui-checkbox-wrapper',this.props.className)}),this.renderInput(),this.renderLabel());}}]);return Checkbox;}(React__default.PureComponent);Checkbox.propTypes={inputProps:React.PropTypes.shape({checked:React.PropTypes.bool,className:React.PropTypes.string,disabled:React.PropTypes.bool,id:React.PropTypes.string,indeterminate:React.PropTypes.bool,onChange:React.PropTypes.func,onClick:React.PropTypes.func,name:React.PropTypes.string,value:React.PropTypes.string}),label:React.PropTypes.node,labelProps:React.PropTypes.object,onChecked:React.PropTypes.func,onUnchecked:React.PropTypes.func};Checkbox.defaultProps={inputProps:{checked:false,indeterminate:false},label:null,labelProps:{},onChecked:noop,onUnchecked:noop};Checkbox.internalKeys=Object.keys(Checkbox.defaultProps);

var index$2=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var CheckboxGroup=function(_React$PureComponent){inherits(CheckboxGroup,_React$PureComponent);function CheckboxGroup(){classCallCheck(this,CheckboxGroup);return possibleConstructorReturn(this,(CheckboxGroup.__proto__||Object.getPrototypeOf(CheckboxGroup)).apply(this,arguments));}createClass(CheckboxGroup,[{key:'allItemsChecked',value:function allItemsChecked(){return this.props.items.every(function(item){return item.inputProps.checked===true;});}},{key:'anyItemsChecked',value:function anyItemsChecked(){return this.props.items.some(function(item){return item.inputProps.checked===true;});}},{key:'renderSelectAll',value:function renderSelectAll(){if(this.props.selectAll){var allChecked=this.allItemsChecked();var inputProps=this.props.selectAllProps.inputProps;return React__default.createElement(Checkbox,_extends({},this.props.selectAllProps,{ref:'select_all',key:'cb_select_all',className:index$2('ui-checkbox-group-selectall',this.props.selectAllProps.className),inputProps:_extends({},inputProps,{checked:allChecked,indeterminate:!allChecked&&this.anyItemsChecked(),name:inputProps&&inputProps.name?inputProps.name:'cb_select_all'}),label:this.props.selectAllProps.label||'Select All',onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}));}}},{key:'renderCheckboxes',value:function renderCheckboxes(){var _this2=this;return this.props.items.map(function(item){return React__default.createElement(Checkbox,_extends({},item,{key:item.inputProps.name,onChecked:_this2.props.onChildChecked,onUnchecked:_this2.props.onChildUnchecked}));});}},{key:'renderChildren',value:function renderChildren(){var toBeRendered=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition){switch(this.props.selectAllPosition){case CheckboxGroup.Constants.SELECT_ALL_BEFORE:toBeRendered.unshift(this.renderSelectAll());break;case CheckboxGroup.Constants.SELECT_ALL_AFTER:toBeRendered.push(this.renderSelectAll());break;}}return toBeRendered;}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,CheckboxGroup.internalKeys),{ref:'group',className:index$2('ui-checkbox-group',this.props.className)}),this.renderChildren());}}]);return CheckboxGroup;}(React__default.PureComponent);CheckboxGroup.Constants={SELECT_ALL_BEFORE:'SELECT_ALL_BEFORE',SELECT_ALL_AFTER:'SELECT_ALL_AFTER'};CheckboxGroup.propTypes={items:React.PropTypes.arrayOf(React.PropTypes.shape({inputProps:React.PropTypes.shape({checked:React.PropTypes.bool.isRequired,label:React.PropTypes.string,name:React.PropTypes.string.isRequired,value:React.PropTypes.string})})).isRequired,onAllChecked:React.PropTypes.func,onAllUnchecked:React.PropTypes.func,onChildChecked:React.PropTypes.func,onChildUnchecked:React.PropTypes.func,selectAll:React.PropTypes.bool,selectAllProps:React.PropTypes.object,selectAllPosition:React.PropTypes.oneOf([CheckboxGroup.Constants.SELECT_ALL_BEFORE,CheckboxGroup.Constants.SELECT_ALL_AFTER])};CheckboxGroup.defaultProps={items:[],onAllChecked:noop,onAllUnchecked:noop,onChildChecked:noop,onChildUnchecked:noop,selectAll:false,selectAllProps:{},selectAllPosition:CheckboxGroup.Constants.SELECT_ALL_BEFORE};CheckboxGroup.internalKeys=Object.keys(CheckboxGroup.defaultProps);

var index$3=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var PORTAL_DATA_ATTRIBUTE='data-portal-id';var Portal=function(_React$Component){inherits(Portal,_React$Component);function Portal(){var _ref;var _temp,_this,_ret;classCallCheck(this,Portal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Portal.__proto__||Object.getPrototypeOf(Portal)).call.apply(_ref,[this].concat(args))),_this),_this.id=uuid(),_this.$portal=null,_this.$passenger=null,_temp),possibleConstructorReturn(_this,_ret);}createClass(Portal,[{key:'componentWillMount',value:function componentWillMount(){this.$portal=document.createElement('div');this.props.destination.appendChild(this.$portal);this.renderPortalledContent();}},{key:'renderPortalledContent',value:function renderPortalledContent(){var child=React__default.isValidElement(this.props.children)?this.props.children:React__default.createElement('div',null,this.props.children);this.$portal.id=this.props.portalId||this.id;ReactDOM__default.render(child,this.$portal);this.$passenger=this.$portal.children[0];}},{key:'componentDidUpdate',value:function componentDidUpdate(){this.renderPortalledContent();}},{key:'componentWillUnmount',value:function componentWillUnmount(){ReactDOM__default.unmountComponentAtNode(this.$portal);this.props.destination.removeChild(this.$portal);}},{key:'render',value:function render(){return React__default.createElement('span',_extends({},omitKeysFromSourceObject(this.props,Portal.internalKeys),defineProperty({},PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)));}}]);return Portal;}(React__default.Component);Portal.propTypes={children:React__default.PropTypes.node.isRequired,destination:React.PropTypes.instanceOf(HTMLElement),portalId:React.PropTypes.string};Portal.defaultProps={children:null,destination:document.body,portalId:null};Portal.internalKeys=Object.keys(Portal.defaultProps);

var toArray$1=Array.prototype.slice;var Dialog=function(_React$PureComponent){inherits(Dialog,_React$PureComponent);function Dialog(){var _ref;var _temp,_this,_ret;classCallCheck(this,Dialog);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Dialog.__proto__||Object.getPrototypeOf(Dialog)).call.apply(_ref,[this].concat(args))),_this),_this.mounted=false,_this.uuidHeader=uuid(),_this.uuidBody=uuid(),_this.handleFocus=function(nativeEvent){if(!_this.props.captureFocus){if(_this.props.closeOnOutsideFocus){if(!_this.isPartOfDialog(nativeEvent.target)){return window.setTimeout(_this.props.onClose,0);}}return;}var previous=nativeEvent.explicitOriginalTarget||nativeEvent.relatedTarget;if(_this.isPartOfDialog(previous)&&!_this.isPartOfDialog(nativeEvent.target)){nativeEvent.preventDefault();previous.focus();}},_this.handleKeyDown=function(event){if(_this.props.closeOnEscKey&&event.key==='Escape'){window.setTimeout(_this.props.onClose,0);}if(isFunction(_this.props.onKeyDown)){_this.props.onKeyDown(event);}},_this.handleOutsideClick=function(nativeEvent){if(_this.props.closeOnOutsideClick&&!_this.isPartOfDialog(nativeEvent.target)){window.setTimeout(_this.props.onClose,0);}},_this.handleOutsideScrollWheel=function(nativeEvent){if(_this.props.closeOnOutsideScroll&&!_this.isPartOfDialog(nativeEvent.target)){window.setTimeout(_this.props.onClose,0);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(Dialog,[{key:'isPartOfDialog',value:function isPartOfDialog(node){if(!node||node===window){return false;}var roots=[this.$wrapper].concat(toArray$1.call(this.$wrapper.querySelectorAll('['+PORTAL_DATA_ATTRIBUTE+']')).map(function(dom){return document.getElementById(dom.getAttribute(PORTAL_DATA_ATTRIBUTE));}));var element=node.nodeType!==Node.ELEMENT_NODE?node.parentNode:node;return roots.some(function(dom){return dom.contains(element);});}},{key:'componentDidMount',value:function componentDidMount(){window.addEventListener('click',this.handleOutsideClick,true);window.addEventListener('contextmenu',this.handleOutsideClick,true);window.addEventListener('focus',this.handleFocus,true);window.addEventListener('scroll',this.handleOutsideScrollWheel,true);window.addEventListener('wheel',this.handleOutsideScrollWheel,true);if(this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)){this.$dialog.focus();}}},{key:'componentWillUnmount',value:function componentWillUnmount(){window.removeEventListener('click',this.handleOutsideClick,true);window.removeEventListener('contextmenu',this.handleOutsideClick,true);window.removeEventListener('focus',this.handleFocus,true);window.removeEventListener('scroll',this.handleOutsideScrollWheel,true);window.removeEventListener('wheel',this.handleOutsideScrollWheel,true);}},{key:'renderBody',value:function renderBody(){return React__default.createElement('div',_extends({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:index$3('ui-dialog-body',this.props.bodyProps.className)}),this.props.children);}},{key:'renderFooter',value:function renderFooter(){if(this.props.footer){return React__default.createElement('footer',_extends({},this.props.footerProps,{className:index$3('ui-dialog-footer',this.props.footerProps.className)}),this.props.footer);}}},{key:'renderHeader',value:function renderHeader(){if(this.props.header){return React__default.createElement('header',_extends({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:index$3('ui-dialog-header',this.props.headerProps.className)}),this.props.header);}}},{key:'renderFocusBoundary',value:function renderFocusBoundary(){if(this.props.captureFocus){return React__default.createElement('div',{className:'ui-offscreen',tabIndex:'0','aria-hidden':'true'},'\xA0');}}},{key:'render',value:function render(){var _this2=this;return React__default.createElement('div',_extends({},this.props.wrapperProps,{ref:function ref(node){return _this2.$wrapper=node;},className:index$3('ui-dialog-wrapper',this.props.wrapperProps.className),tabIndex:'0'}),this.renderFocusBoundary(),this.props.before,React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,Dialog.internalKeys),{ref:function ref(node){return _this2.$dialog=node;},className:index$3('ui-dialog',this.props.className),onKeyDown:this.handleKeyDown,role:'dialog','aria-labelledby':this.uuidHeader,'aria-describedby':this.uuidBody,tabIndex:'0'}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary());}}]);return Dialog;}(React__default.PureComponent);Dialog.propTypes={after:React.PropTypes.node,before:React.PropTypes.node,bodyProps:React.PropTypes.object,captureFocus:React.PropTypes.bool,children:React.PropTypes.node,closeOnEscKey:React.PropTypes.bool,closeOnOutsideClick:React.PropTypes.bool,closeOnOutsideFocus:React.PropTypes.bool,closeOnOutsideScroll:React.PropTypes.bool,footer:React.PropTypes.node,footerProps:React.PropTypes.object,header:React.PropTypes.node,headerProps:React.PropTypes.object,onClose:React.PropTypes.func,wrapperProps:React.PropTypes.object};Dialog.defaultProps={after:null,before:null,bodyProps:{},captureFocus:true,children:null,closeOnEscKey:false,closeOnOutsideClick:false,closeOnOutsideFocus:false,closeOnOutsideScroll:false,footer:null,footerProps:{},header:null,headerProps:{},onClose:noop,wrapperProps:{}};Dialog.internalKeys=Object.keys(Dialog.defaultProps);

var index$4=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var instances=[];function toI(stringNumber){return parseInt(stringNumber,10);}function rescale(instance){var node=ReactDOM.findDOMNode(instance);var containerBox=window.getComputedStyle(node.parentNode);var fontSize=toI(window.getComputedStyle(node).fontSize);var containerHeight=toI(containerBox.height);var containerWidth=toI(containerBox.width);if(containerBox.boxSizing==='border-box'||containerBox.boxSizing==='padding-box'){containerHeight-=toI(containerBox.paddingTop)+toI(containerBox.paddingBottom);containerWidth-=toI(containerBox.paddingLeft)+toI(containerBox.paddingRight);}var optimizeForHeight=Math.floor(fontSize/node.offsetHeight*containerHeight);var optimizeForWidth=Math.floor(fontSize/node.offsetWidth*containerWidth);node.style.fontSize=(Math.min(instance.props.maxFontSize,optimizeForHeight,optimizeForWidth)||1)+'px';}function handleWindowResize(){instances.forEach(function(instance){return rescale(instance);});}function registerInstance(instance){if(instances.length===0){window.addEventListener('resize',handleWindowResize,true);}instances.push(instance);}function unregisterInstance(instance){instances.splice(instances.indexOf(instance),1);if(instances.length===0){window.removeEventListener('resize',handleWindowResize,true);}}var FittedText=function(_React$PureComponent){inherits(FittedText,_React$PureComponent);function FittedText(){classCallCheck(this,FittedText);return possibleConstructorReturn(this,(FittedText.__proto__||Object.getPrototypeOf(FittedText)).apply(this,arguments));}createClass(FittedText,[{key:'componentDidMount',value:function componentDidMount(){rescale(this);registerInstance(this);}},{key:'componentDidUpdate',value:function componentDidUpdate(){rescale(this);}},{key:'componentWillUnmount',value:function componentWillUnmount(){unregisterInstance(this);}},{key:'render',value:function render(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,FittedText.internalKeys),{className:index$4('ui-text',this.props.className)}),this.props.children);}}]);return FittedText;}(React__default.PureComponent);FittedText.propTypes={children:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.number]),component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.function]),maxFontSize:React.PropTypes.number};FittedText.defaultProps={children:null,component:'span',maxFontSize:Number.MAX_VALUE};FittedText.internalKeys=Object.keys(FittedText.defaultProps);

var index$5=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var Image=function(_React$PureComponent){inherits(Image,_React$PureComponent);function Image(){var _ref;var _temp,_this,_ret;classCallCheck(this,Image);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Image.__proto__||Object.getPrototypeOf(Image)).call.apply(_ref,[this].concat(args))),_this),_this.state={status:Image.status.LOADING},_temp),possibleConstructorReturn(_this,_ret);}createClass(Image,[{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){if(nextProps.src!==this.props.src){this.resetPreloader();this.setState({status:Image.status.LOADING});}}},{key:'componentDidMount',value:function componentDidMount(){this.preload();}},{key:'componentDidUpdate',value:function componentDidUpdate(){this.preload();}},{key:'componentWillUnmount',value:function componentWillUnmount(){this.resetPreloader();}},{key:'resetPreloader',value:function resetPreloader(){this.loader.onload=null;this.loader.onerror=null;this.loader=null;}},{key:'preload',value:function preload(){var _this2=this;if(this.loader){return;}this.loader=document.createElement('img');this.loader.onload=function(){return _this2.setState({status:Image.status.LOADED});};this.loader.onerror=function(){return _this2.setState({status:Image.status.ERROR});};this.loader.src=this.props.src;}},{key:'renderImage',value:function renderImage(){if(this.props.displayAsBackgroundImage){return React__default.createElement('div',_extends({},this.props.imageProps,{ref:'image',className:index$5('ui-image',this.props.imageProps.className),title:this.props.alt,style:_extends({},this.props.imageProps.style,{backgroundImage:'url('+this.props.src+')'})}));}return React__default.createElement('img',_extends({},this.props.imageProps,{ref:'image',className:index$5('ui-image',this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:noop,onError:noop}));}},{key:'renderStatus',value:function renderStatus(){return React__default.createElement('div',_extends({},this.props.statusProps,{ref:'status',className:index$5('ui-image-status',this.props.statusProps.className,{'ui-image-loading':this.state.status===Image.status.LOADING,'ui-image-loaded':this.state.status===Image.status.LOADED,'ui-image-error':this.state.status===Image.status.ERROR}),role:'presentation'}));}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,Image.internalKeys),{ref:'wrapper',className:index$5('ui-image-wrapper',this.props.className)}),this.renderImage(),this.renderStatus());}}]);return Image;}(React__default.PureComponent);Image.status={LOADING:'LOADING',LOADED:'LOADED',ERROR:'ERROR'};Image.propTypes={alt:React.PropTypes.string,displayAsBackgroundImage:React.PropTypes.bool,imageProps:React.PropTypes.object,src:React.PropTypes.string.isRequired,statusProps:React.PropTypes.object};Image.defaultProps={alt:null,displayAsBackgroundImage:false,imageProps:{},src:'about:blank',statusProps:{}};Image.internalKeys=Object.keys(Image.defaultProps);

var index$6=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var isString = (function(test){return typeof test==='string';});

var Input=function(_React$PureComponent){inherits(Input,_React$PureComponent);function Input(){var _ref;var _temp,_this,_ret;classCallCheck(this,Input);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Input.__proto__||Object.getPrototypeOf(Input)).call.apply(_ref,[this].concat(args))),_this),_this.state={input:'',isControlled:isString(_this.props.inputProps.value),isFocused:false},_this.setInputValue=function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';return _this.setState({input:value});},_this.getValue=function(){return _this.refs.field.value;},_this.handleBlur=function(event){_this.setState({isFocused:false});if(isFunction(_this.props.inputProps.onBlur)===true){_this.props.inputProps.onBlur(event);}},_this.handleFocus=function(event){_this.setState({isFocused:true});if(isFunction(_this.props.inputProps.onFocus)===true){_this.props.inputProps.onFocus(event);}},_this.handleChange=function(event){if(_this.state.isControlled===false){_this.setInputValue(event.target.value);}if(isFunction(_this.props.inputProps.onChange)===true){_this.props.inputProps.onChange(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(Input,[{key:'componentWillMount',value:function componentWillMount(){if(this.state.isControlled===true){return this.setInputValue(this.props.inputProps.value);}this.setInputValue(this.props.inputProps.defaultValue);}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){if(nextProps.inputProps.value!==this.props.inputProps.value){this.setInputValue(nextProps.inputProps.value);}}},{key:'setValue',value:function setValue(nextValue){this.setInputValue(nextValue);this.refs.field.value=nextValue;if(this.state.isControlled===true){this.refs.field.dispatchEvent(new Event('input',{bubbles:true}));this.refs.field.dispatchEvent(new Event('change',{bubbles:true}));}}},{key:'getPlaceholderText',value:function getPlaceholderText(){var isNonEmpty=this.state.input!=='';var shouldShowPlaceholder=this.props.hidePlaceholderOnFocus===true?this.state.isFocused===false&&isNonEmpty===false:isNonEmpty===false;return shouldShowPlaceholder?this.props.inputProps.placeholder:'';}},{key:'renderPlaceholder',value:function renderPlaceholder(){return React__default.createElement('div',{ref:'placeholder',className:'ui-textual-input-placeholder ui-textual-input'},this.getPlaceholderText());}},{key:'render',value:function render(){var props=this.props;return React__default.createElement('div',_extends({},omitKeysFromSourceObject(props,Input.internalKeys),{ref:'wrapper',className:index$6('ui-textual-input-wrapper',props.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),React__default.createElement('input',_extends({},props.inputProps,{ref:'field',className:index$6('ui-textual-input',props.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})));}}]);return Input;}(React__default.PureComponent);Input.propTypes={hidePlaceholderOnFocus:React.PropTypes.bool,inputProps:React.PropTypes.shape({defaultValue:React.PropTypes.string,onBlur:React.PropTypes.func,onFocus:React.PropTypes.func,onChange:React.PropTypes.func,placeholder:React.PropTypes.string,type:React.PropTypes.string,value:React.PropTypes.string})};Input.defaultProps={hidePlaceholderOnFocus:true,inputProps:{type:'text'}};Input.internalKeys=Object.keys(Input.defaultProps);

var index$7=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

function getIntersection(obj1,obj2){return Object.keys(obj2).reduce(function(childProps,key){if(key in obj1){childProps[key]=obj1[key];}return childProps;},{});}

var Modal=function(_React$PureComponent){inherits(Modal,_React$PureComponent);function Modal(){classCallCheck(this,Modal);return possibleConstructorReturn(this,(Modal.__proto__||Object.getPrototypeOf(Modal)).apply(this,arguments));}createClass(Modal,[{key:'render',value:function render(){var _this2=this;var props=this.props;return React__default.createElement(Portal,props.portalProps,React__default.createElement('div',_extends({},omitKeysFromSourceObject(props,Modal.internalKeys),{ref:function ref(node){return _this2.$modal=node;},className:index$7('ui-modal-wrapper',props.className)}),React__default.createElement('div',_extends({},props.maskProps,{className:index$7('ui-modal-mask',props.maskProps.className)})),React__default.createElement(Dialog,_extends({},getIntersection(props,Dialog.defaultProps),props.modalProps,{className:index$7('ui-modal',props.modalProps.className)}),props.children)));}}]);return Modal;}(React__default.PureComponent);Modal.propTypes=_extends({},Dialog.propTypes,{maskProps:React.PropTypes.object,modalProps:React.PropTypes.object,portalProps:React.PropTypes.object});Modal.defaultProps=_extends({},Dialog.defaultProps,{captureFocus:true,maskProps:{},modalProps:{},portalProps:{}});Modal.internalKeys=Object.keys(Modal.defaultProps);

var index$8=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var INFINITY=1/0;
var MAX_INTEGER=1.7976931348623157e+308;
var NAN=0/0;var symbolTag='[object Symbol]';var reTrim=/^\s+|\s+$/g;var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;var reIsBinary=/^0b[01]+$/i;var reIsOctal=/^0o[0-7]+$/i;var freeParseInt=parseInt;var objectProto=Object.prototype;var objectToString=objectProto.toString;function isInteger(value){return typeof value=='number'&&value==toInteger(value);}function isObject(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return!!value&&(type=='object'||type=='function');}function isObjectLike(value){return!!value&&(typeof value==='undefined'?'undefined':_typeof(value))=='object';}function isSymbol(value){return(typeof value==='undefined'?'undefined':_typeof(value))=='symbol'||isObjectLike(value)&&objectToString.call(value)==symbolTag;}function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}var index$9=isInteger;

var index$10=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var SegmentedControl=function(_React$PureComponent){inherits(SegmentedControl,_React$PureComponent);function SegmentedControl(){var _ref;var _temp,_this,_ret;classCallCheck(this,SegmentedControl);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=SegmentedControl.__proto__||Object.getPrototypeOf(SegmentedControl)).call.apply(_ref,[this].concat(args))),_this),_this.state={indexOfOptionInFocus:null},_this.handleKeyDown=function(event){var key=event.key;var activeItemIndex=_this.state.indexOfOptionInFocus;if(key==='ArrowLeft'){_this.setFocus(_this.getPreviousOptionIndex(activeItemIndex));event.preventDefault();}else if(key==='ArrowRight'){_this.setFocus(_this.getNextOptionIndex(activeItemIndex));event.preventDefault();}else if(key==='Enter'){_this.handleOptionClick(_this.props.options[activeItemIndex]);event.preventDefault();}if(isFunction(_this.props.onKeyDown)){_this.props.onKeyDown(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(SegmentedControl,[{key:'currentValue',value:function currentValue(){var value=void 0;this.props.options.some(function(option){if(option.selected){value=option.value;return true;}});return value;}},{key:'setFocus',value:function setFocus(index){ReactDOM.findDOMNode(this.refs['option_$'+index]).focus();}},{key:'getNextOptionIndex',value:function getNextOptionIndex(currentOptionIndex){var next=currentOptionIndex+1;return next<this.props.options.length?next:0;}},{key:'getPreviousOptionIndex',value:function getPreviousOptionIndex(currentOptionIndex){var previous=currentOptionIndex-1;return previous<0?this.props.options.length-1:previous;}},{key:'handleOptionBlur',value:function handleOptionBlur(option,event){if(this.state.indexOfOptionInFocus===this.props.options.indexOf(option)){this.setState({indexOfOptionInFocus:null});}if(isFunction(option.onBlur)){option.onBlur(event);}}},{key:'handleOptionClick',value:function handleOptionClick(option,event){this.props.onOptionSelected(option.value);if(isFunction(option.onClick)){option.onClick(event);}}},{key:'handleOptionFocus',value:function handleOptionFocus(option,event){this.setState({indexOfOptionInFocus:this.props.options.indexOf(option)});if(isFunction(option.onFocus)){option.onFocus(event);}}},{key:'renderOptions',value:function renderOptions(){var _this2=this;return this.props.options.map(function(definition,index){return React__default.createElement(Button,_extends({},omitKeysFromSourceObject(definition,SegmentedControl.internalChildKeys),{role:'radio','aria-checked':String(definition.selected),ref:'option_$'+index,key:definition.value,className:index$10('ui-segmented-control-option',definition.className,{'ui-segmented-control-option-selected':definition.selected}),tabIndex:definition.selected?'0':'-1',onBlur:_this2.handleOptionBlur.bind(_this2,definition),onPressed:_this2.handleOptionClick.bind(_this2,definition),onFocus:_this2.handleOptionFocus.bind(_this2,definition)}),definition.content);});}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,SegmentedControl.internalKeys),{ref:'wrapper',role:'radiogroup',className:index$10('ui-segmented-control',this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions());}}]);return SegmentedControl;}(React__default.PureComponent);SegmentedControl.propTypes={onOptionSelected:React.PropTypes.func,options:function validateOptions(props){if(props.options.length<2){throw new Error('Must provide at least two options.');}var missingSelected=props.options.some(function(option){if(!('selected'in option)){return true;}});if(missingSelected){throw new Error('Must provide a `selected` prop for each option.');}var seenSelected=false;var multipleSelected=props.options.some(function(option){if(option.selected){if(seenSelected){return true;}seenSelected=true;}});if(multipleSelected){throw new Error('Encountered multiple options with `selected: true`. There can be only one.');}if(props.options.some(function(option){return typeof option.value==='undefined';})){throw new Error('Must provide a `value` prop for each option.');}}};SegmentedControl.defaultProps={onOptionSelected:noop,options:[]};SegmentedControl.internalKeys=Object.keys(SegmentedControl.defaultProps);SegmentedControl.internalChildKeys=['content','value','selected'];

var identity=function identity(x){return x;};var Item=function(_React$PureComponent){inherits(Item,_React$PureComponent);function Item(){var _ref;var _temp,_this,_ret;classCallCheck(this,Item);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Item.__proto__||Object.getPrototypeOf(Item)).call.apply(_ref,[this].concat(args))),_this),_this.mounted=false,_this.state={},_temp),possibleConstructorReturn(_this,_ret);}createClass(Item,[{key:'convertDataToJSXOrWait',value:function convertDataToJSXOrWait(){var _this2=this;var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props;if(props.data instanceof Promise){var _ret2=function(){_this2.setState({component:null});var closurePromise=props.data;props.data.then(function(resolvedPayload){if(_this2.mounted){_this2.setState(function(state,currentProps){return{component:currentProps.data===closurePromise?currentProps.convertToJSXFunc(resolvedPayload,currentProps.index):state.component};});}},noop);return{v:void 0};}();if((typeof _ret2==='undefined'?'undefined':_typeof(_ret2))==="object")return _ret2.v;}this.setState({component:props.convertToJSXFunc(props.data,props.index)});}},{key:'componentWillMount',value:function componentWillMount(){this.convertDataToJSXOrWait();}},{key:'componentDidMount',value:function componentDidMount(){this.mounted=true;}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){this.convertDataToJSXOrWait(nextProps);}},{key:'componentWillUnmount',value:function componentWillUnmount(){this.mounted=false;}},{key:'getClasses',value:function getClasses(extraClasses){return index$8('ui-pagination-item',extraClasses,{'ui-pagination-item-even':this.props.even,'ui-pagination-item-odd':!this.props.even,'ui-pagination-item-loading':this.state.component===null});}},{key:'render',value:function render(){if(this.state.component===null){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,Item.internalKeys),{className:this.getClasses()}),this.props.loadingContent);}return React__default.cloneElement(this.state.component,_extends({},omitKeysFromSourceObject(this.props,Item.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className),'data-index':this.props.index}));}}]);return Item;}(React__default.PureComponent);Item.propTypes={convertToJSXFunc:React.PropTypes.func,data:React.PropTypes.object,even:React.PropTypes.bool,index:React.PropTypes.number,loadingContent:React.PropTypes.node};Item.defaultProps={convertToJSXFunc:noop,data:null,even:true,index:0,loadingContent:null};Item.internalKeys=Object.keys(Item.defaultProps);var Pagination=function(_React$PureComponent2){inherits(Pagination,_React$PureComponent2);function Pagination(){var _ref2;var _temp2,_this3,_ret3;classCallCheck(this,Pagination);for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return _ret3=(_temp2=(_this3=possibleConstructorReturn(this,(_ref2=Pagination.__proto__||Object.getPrototypeOf(Pagination)).call.apply(_ref2,[this].concat(args))),_this3),_this3.state={currentPage:_this3.props.initialPage,targetIndex:(_this3.props.initialPage-1)*_this3.props.numItemsPerPage},_this3.currentPage=function(){return _this3.state.currentPage;},_this3.getPageForIndex=function(index){var itemsPerPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_this3.props.numItemsPerPage;return Math.ceil((index+1)/itemsPerPage);},_this3.totalPages=function(){return Math.ceil(_this3.props.totalItems/_this3.props.numItemsPerPage);},_this3.firstVisibleItemIndex=function(){return(_this3.currentPage()-1)*_this3.props.numItemsPerPage;},_this3.pageToIndex=function(i){if(i<0||i>=_this3.props.totalItems){return new Error('Cannot page to invalid index '+i+'.');}_this3.setState({currentPage:_this3.getPageForIndex(i),targetIndex:i});},_this3.handleClick=function(value){var nextTargetIndex=void 0;switch(value){case Pagination.controls.FIRST:nextTargetIndex=0;break;case Pagination.controls.PREVIOUS:nextTargetIndex=_this3.firstVisibleItemIndex()-_this3.props.numItemsPerPage;break;case Pagination.controls.NEXT:nextTargetIndex=_this3.firstVisibleItemIndex()+_this3.props.numItemsPerPage;break;case Pagination.controls.LAST:nextTargetIndex=_this3.props.totalItems-1;break;default:nextTargetIndex=parseInt(value,10)*_this3.props.numItemsPerPage-1;}_this3.setState({currentPage:_this3.getPageForIndex(nextTargetIndex),targetIndex:nextTargetIndex});},_temp2),possibleConstructorReturn(_this3,_ret3);}createClass(Pagination,[{key:'componentDidUpdate',value:function componentDidUpdate(prevProps,prevState){if(prevState.currentPage!==this.currentPage()){ReactDOM.findDOMNode(this.refs.item_0).focus();}}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(){var _this4=this;var oldProps=this.props;this.setState(function(state,props){if(props.identifier!==oldProps.identifier){return{currentPage:1,targetIndex:0};}return{currentPage:_this4.getPageForIndex(state.targetIndex,props.numItemsPerPage),targetIndex:state.targetIndex};});}},{key:'createPageButtonOptions',value:function createPageButtonOptions(){var options=[];var currentPage=this.currentPage();var numPageToggles=this.props.numPageToggles;var totalPages=this.totalPages();var startPage=currentPage-(currentPage-1)%numPageToggles;var endPage=Math.min(startPage+numPageToggles-1,totalPages);if(this.props.showPaginationState){options.push({selected:false,content:isFunction(this.props.showPaginationState)?this.props.showPaginationState(currentPage,totalPages):currentPage+' of '+totalPages,value:'',disabled:true,className:'ui-pagination-control ui-pagination-control-state'});}if(this.props.showJumpToFirst){options.push({selected:false,content:this.props.jumpToFirstControlContent,value:Pagination.controls.FIRST,disabled:this.currentPage()===1,className:'ui-pagination-control ui-pagination-control-first'});}options.push({selected:false,content:this.props.previousPageControlContent,value:Pagination.controls.PREVIOUS,disabled:this.currentPage()===1,className:'ui-pagination-control ui-pagination-control-previous'});for(var i=startPage;i<=endPage;i++){options.push({className:'ui-pagination-control','data-page-number':i,selected:i===this.currentPage(),content:i,value:i});}options.push({selected:false,content:this.props.nextPageControlContent,value:Pagination.controls.NEXT,disabled:this.currentPage()===totalPages,className:'ui-pagination-control ui-pagination-control-next'});if(this.props.showJumpToLast){options.push({selected:false,content:this.props.jumpToLastControlContent,value:Pagination.controls.LAST,disabled:this.currentPage()===totalPages,className:'ui-pagination-control ui-pagination-control-last'});}if(this.props.customControlContent){options.push({selected:false,content:this.props.customControlContent,value:uuid(),disabled:true,className:'ui-pagination-control ui-pagination-control-custom'});}return options;}},{key:'generateItems',value:function generateItems(){var generatedItems=[];var firstItemIndex=this.firstVisibleItemIndex();var lastItemIndex=Math.min(this.props.totalItems,firstItemIndex+this.props.numItemsPerPage)-1;for(var i=firstItemIndex;i<=lastItemIndex;i+=1){generatedItems.push({data:this.props.getItem(i)});}return generatedItems;}},{key:'renderItems',value:function renderItems(){var _this5=this;var props=this.props.listWrapperProps;var indexOffset=this.props.numItemsPerPage*(this.currentPage()-1);return React__default.createElement(ArrowKeyNavigation,_extends({},props,{ref:'itemList',className:index$8('ui-pagination-items',props.className)}),this.generateItems().map(function(item,index){return React__default.createElement(Item,{ref:'item_'+index,key:index,convertToJSXFunc:_this5.props.itemToJSXConverterFunc,data:item.data,even:index%2===0,index:indexOffset+index,loadingContent:_this5.props.itemLoadingContent});}));}},{key:'renderControls',value:function renderControls(position){if(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage){return;}var props=this.props.toggleWrapperProps;var positionLower=position.toLowerCase();var positionCapitalized=positionLower[0].toUpperCase()+positionLower.slice(1);return React__default.createElement(SegmentedControl,_extends({},props,{ref:'segmentedControl'+positionCapitalized,className:index$8('ui-pagination-controls',props.className,defineProperty({},'ui-pagination-controls-'+positionLower,true)),options:this.createPageButtonOptions(),onOptionSelected:this.handleClick}));}},{key:'renderView',value:function renderView(){var props=this.props;var position=Pagination.positions;return React__default.createElement('div',{ref:'paginatedView',className:'ui-pagination'},props.position===position.ABOVE||props.position===position.BOTH?this.renderControls(position.ABOVE):noop,props.before,this.renderItems(),props.after,props.position===position.BELOW||props.position===position.BOTH?this.renderControls(position.BELOW):noop);}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,Pagination.internalKeys),{ref:'wrapper',className:index$8('ui-pagination-wrapper',this.props.className)}),this.renderView());}}]);return Pagination;}(React__default.PureComponent);Pagination.controls={FIRST:'FIRST',PREVIOUS:'PREVIOUS',NEXT:'NEXT',LAST:'LAST'};Pagination.positions={ABOVE:'ABOVE',BELOW:'BELOW',BOTH:'BOTH'};Pagination.propTypes={after:React.PropTypes.node,before:React.PropTypes.node,customControlContent:React.PropTypes.node,getItem:React.PropTypes.func,hidePagerIfNotNeeded:React.PropTypes.bool,identifier:React.PropTypes.string.isRequired,initialPage:function validateInitialPage(props){if(index$9(props.initialPage)===false){return new Error('`initialPage` must be an integer.');}var numberOfPages=Math.ceil(props.totalItems/props.numItemsPerPage);if(props.initialPage<1||props.initialPage>numberOfPages){return new Error('`initialPage` must be between 1 and '+numberOfPages+'.');}},itemLoadingContent:React.PropTypes.node,itemToJSXConverterFunc:React.PropTypes.func,jumpToFirstControlContent:React.PropTypes.node,jumpToLastControlContent:React.PropTypes.node,listWrapperProps:React.PropTypes.object,nextPageControlContent:React.PropTypes.node,numItemsPerPage:function validateNumItemsPerPage(props){if(index$9(props.numItemsPerPage)===false){return new Error('`numItemsPerPage` must be an integer.');}else if(props.numItemsPerPage<1){return new Error('`numItemsPerPage` must be greater than zero.');}},numPageToggles:React.PropTypes.number,position:React.PropTypes.oneOf(Object.keys(Pagination.positions)),previousPageControlContent:React.PropTypes.node,showJumpToFirst:React.PropTypes.bool,showJumpToLast:React.PropTypes.bool,showPaginationState:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),toggleWrapperProps:React.PropTypes.object,totalItems:React.PropTypes.number.isRequired};Pagination.defaultProps={after:null,before:null,customControlContent:null,getItem:noop,hidePagerIfNotNeeded:false,identifier:uuid(),initialPage:1,itemLoadingContent:null,itemToJSXConverterFunc:identity,jumpToFirstControlContent:'« First',jumpToLastControlContent:'Last »',listWrapperProps:{},nextPageControlContent:'Next ›',numItemsPerPage:10,numPageToggles:5,position:Pagination.positions.ABOVE,previousPageControlContent:'‹ Previous',showJumpToFirst:true,showJumpToLast:true,showPaginationState:true,toggleWrapperProps:{},totalItems:null};Pagination.internalKeys=Object.keys(Pagination.defaultProps);

var index$11=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var transformProp = (function detectTransformProperty(){var props=['transform','WebkitTransform','MozTransform','OTransform','msTransform','webkit-transform'];for(var i=0,len=props.length;i<len;i++){if(props[i]in document.documentElement.style){return props[i];}}return false;})();

function without(arr1,arr2){return arr1.filter(function(item){return arr2.indexOf(item)===-1;});}function values(obj){return Object.keys(obj).map(function(key){return obj[key];});}var DEFAULT_CARET_COMPONENT=React__default.createElement('svg',{viewBox:'0 0 14 9.5',xmlns:'http://www.w3.org/2000/svg'},React__default.createElement('g',null,React__default.createElement('polygon',{className:'ui-popover-caret-border',fill:'#000',points:'7 0 14 10 0 10'}),React__default.createElement('polygon',{className:'ui-popover-caret-fill',fill:'#FFF',points:'6.98230444 1.75 12.75 10 1.25 10'})));var Popover=function(_React$PureComponent){inherits(Popover,_React$PureComponent);function Popover(props){classCallCheck(this,Popover);var _this=possibleConstructorReturn(this,(Popover.__proto__||Object.getPrototypeOf(Popover)).call(this));_this.align=function(){var anchor=_this.props.anchor instanceof HTMLElement?_this.props.anchor:ReactDOM.findDOMNode(_this.props.anchor);_this.cacheViewportCartography(anchor);var dx=Math.round(_this.getNextDialogXPosition(anchor));var dy=Math.round(_this.getNextDialogYPosition(anchor));var alignmentCorrection=_this.getAlignmentCorrectionIfOverflowing(dx,dy);if(alignmentCorrection&&_this.didAlignmentChange(alignmentCorrection)){return _this.setState(alignmentCorrection);}_this.$caret.style.left=Math.round(_this.getNextCaretXPosition(anchor))+'px';_this.$caret.style.top=Math.round(_this.getNextCaretYPosition(anchor))+'px';_this.applyTranslation(_this.$caret,index$11,0);_this.applyTranslation(_this.dialog.$wrapper,dx,dy);};_this.state={anchorXAlign:props.anchorXAlign||props.preset.anchorXAlign,anchorYAlign:props.anchorYAlign||props.preset.anchorYAlign,selfXAlign:props.selfXAlign||props.preset.selfXAlign,selfYAlign:props.selfYAlign||props.preset.selfYAlign};return _this;}createClass(Popover,[{key:'cacheViewportCartography',value:function cacheViewportCartography(anchor){var anchorRect=anchor.getBoundingClientRect();this.anchorLeft=anchorRect.left;this.anchorTop=anchorRect.top;this.anchorHeight=anchorRect.height;this.anchorWidth=anchorRect.width;this.bodyLeft=document.body.scrollLeft;this.bodyTop=document.body.scrollTop;}},{key:'getNextCaretXPosition',value:function getNextCaretXPosition(anchor){var caret=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var _state=this.state,anchorXAlign=_state.anchorXAlign,selfXAlign=_state.selfXAlign,anchorYAlign=_state.anchorYAlign,selfYAlign=_state.selfYAlign;var position=Popover.position;var nextX=0;if(selfXAlign!==position.MIDDLE&&(anchorYAlign===position.START&&selfYAlign===position.END||anchorYAlign===position.END&&selfYAlign===position.START)){if(anchorXAlign===position.START){nextX+=this.anchorWidth/2-caret.clientWidth/2;}else if(anchorXAlign===position.END){nextX+=this.dialog.$wrapper.clientWidth-this.anchorWidth/2-caret.clientWidth/2;}}return nextX;}},{key:'getNextCaretYPosition',value:function getNextCaretYPosition(anchor){var caret=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var _state2=this.state,anchorXAlign=_state2.anchorXAlign,selfXAlign=_state2.selfXAlign,anchorYAlign=_state2.anchorYAlign,selfYAlign=_state2.selfYAlign;var position=Popover.position;var nextY=0;if(selfYAlign!==position.MIDDLE&&(anchorXAlign===position.START&&selfXAlign===position.END||anchorXAlign===position.END&&selfXAlign===position.START)){if(anchorYAlign===position.START){nextY+=this.anchorHeight/2-caret.clientWidth/2;}else if(anchorYAlign===position.END){nextY+=this.dialog.$wrapper.clientHeight-this.anchorWidth/2-caret.clientWidth/2;}}return nextY;}},{key:'getNextDialogXPosition',value:function getNextDialogXPosition(anchor){var dialog=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var _state3=this.state,anchorXAlign=_state3.anchorXAlign,selfXAlign=_state3.selfXAlign;var position=Popover.position;var nextX=this.anchorLeft+this.bodyLeft;switch(anchorXAlign){case position.MIDDLE:nextX+=this.anchorWidth/2;break;case position.END:nextX+=this.anchorWidth;break;}switch(selfXAlign){case position.MIDDLE:nextX-=dialog.clientWidth/2;break;case position.END:nextX-=dialog.clientWidth;break;}return nextX;}},{key:'getNextDialogYPosition',value:function getNextDialogYPosition(anchor){var dialog=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var state=this.state;var position=Popover.position;var anchorY=this.anchorTop+this.bodyTop;var nextY=anchorY+this.anchorHeight;switch(state.anchorYAlign){case position.START:nextY=anchorY;break;case position.MIDDLE:nextY=anchorY+this.anchorHeight/2;break;}switch(state.selfYAlign){case position.MIDDLE:nextY-=dialog.clientHeight/2;break;case position.END:nextY-=dialog.clientHeight;break;}return nextY;}},{key:'getAlignmentCorrectionIfOverflowing',value:function getAlignmentCorrectionIfOverflowing(x,y){if(!this.props.autoReposition){return false;}var corrections=_extends({},this.state);var position=Popover.position;var width=this.dialog.$wrapper.clientWidth;var height=this.dialog.$wrapper.clientHeight;var xMax=document.body.scrollWidth;var yMax=document.body.scrollHeight;if(x+width>xMax){corrections.anchorXAlign=position.START;corrections.selfXAlign=position.END;}if(x<0){corrections.anchorXAlign=position.END;corrections.selfXAlign=position.START;}if(y+height>yMax){if(corrections.anchorXAlign===position.START&&corrections.selfXAlign===position.END||corrections.anchorXAlign===position.END&&corrections.selfXAlign===position.START){corrections.anchorYAlign=position.END;}else{corrections.anchorYAlign=position.START;}corrections.selfYAlign=position.END;}if(y<0){if(corrections.anchorXAlign===position.START&&corrections.selfXAlign===position.END||corrections.anchorXAlign===position.END&&corrections.selfXAlign===position.START){corrections.anchorYAlign=position.START;}else{corrections.anchorYAlign=position.END;}corrections.selfYAlign=position.START;}return corrections;}},{key:'applyTranslation',value:function applyTranslation(node,x,y){if(transformProp){node.style[transformProp]='translate('+x+'px, '+y+'px)';}else{node.style.left=x+'px';node.style.top=y+'px';}}},{key:'didAlignmentChange',value:function didAlignmentChange(nextAlignment){var currentAlignment=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.state;return nextAlignment.anchorXAlign!==currentAlignment.anchorXAlign||nextAlignment.anchorYAlign!==currentAlignment.anchorYAlign||nextAlignment.selfXAlign!==currentAlignment.selfXAlign||nextAlignment.selfYAlign!==currentAlignment.selfYAlign;}},{key:'componentDidMount',value:function componentDidMount(){this.align();window.addEventListener('resize',this.align,true);}},{key:'componentDidUpdate',value:function componentDidUpdate(){this.align();}},{key:'componentWillUnmount',value:function componentWillUnmount(){window.removeEventListener('resize',this.align,true);}},{key:'getClassAlignmentFragment',value:function getClassAlignmentFragment(constant){var position=Popover.position;switch(constant){case position.START:return'start';case position.MIDDLE:return'middle';case position.END:return'end';}}},{key:'render',value:function render(){var _this2=this,_cx;var getFrag=this.getClassAlignmentFragment,props=this.props,state=this.state;return React__default.createElement(Portal,props.portalProps,React__default.createElement(Dialog,_extends({},omitKeysFromSourceObject(props,Popover.internalKeys),{ref:function ref(instance){return _this2.dialog=instance;},before:React__default.cloneElement(props.caretComponent,{ref:function ref(node){return _this2.$caret=node;},className:index$11('ui-popover-caret',props.caretComponent.props.className)}),wrapperProps:_extends({},props.wrapperProps,{className:index$11('ui-popover',props.wrapperProps.className,(_cx={},defineProperty(_cx,'ui-popover-anchor-x-'+getFrag(state.anchorXAlign),true),defineProperty(_cx,'ui-popover-anchor-y-'+getFrag(state.anchorYAlign),true),defineProperty(_cx,'ui-popover-self-x-'+getFrag(state.selfXAlign),true),defineProperty(_cx,'ui-popover-self-y-'+getFrag(state.selfYAlign),true),_cx))})})));}}]);return Popover;}(React__default.PureComponent);Popover.position={START:'START',MIDDLE:'MIDDLE',END:'END'};Popover.positionValues=values(Popover.position);Popover.preset={'ABOVE':{anchorXAlign:Popover.position.MIDDLE,anchorYAlign:Popover.position.START,selfXAlign:Popover.position.MIDDLE,selfYAlign:Popover.position.END},'BELOW':{anchorXAlign:Popover.position.MIDDLE,anchorYAlign:Popover.position.END,selfXAlign:Popover.position.MIDDLE,selfYAlign:Popover.position.START},'LEFT':{anchorXAlign:Popover.position.START,anchorYAlign:Popover.position.MIDDLE,selfXAlign:Popover.position.END,selfYAlign:Popover.position.MIDDLE},'RIGHT':{anchorXAlign:Popover.position.END,anchorYAlign:Popover.position.MIDDLE,selfXAlign:Popover.position.START,selfYAlign:Popover.position.MIDDLE}};Popover.presetValues=values(Popover.preset);Popover.propTypes=_extends({},Dialog.propTypes,{anchor:React.PropTypes.oneOfType([React.PropTypes.instanceOf(HTMLElement),React.PropTypes.shape({props:React.PropTypes.object,state:React.PropTypes.object})]).isRequired,anchorXAlign:React.PropTypes.oneOf(Popover.positionValues),anchorYAlign:React.PropTypes.oneOf(Popover.positionValues),autoReposition:React.PropTypes.bool,caretComponent:React.PropTypes.element,portalProps:React.PropTypes.object,preset:React.PropTypes.oneOf(Popover.presetValues),selfXAlign:React.PropTypes.oneOf(Popover.positionValues),selfYAlign:React.PropTypes.oneOf(Popover.positionValues),wrapperProps:React.PropTypes.object});Popover.defaultProps=_extends({},Dialog.defaultProps,{anchor:document.body,anchorXAlign:undefined,anchorYAlign:undefined,autoReposition:true,captureFocus:false,caretComponent:DEFAULT_CARET_COMPONENT,closeOnEscKey:true,closeOnOutsideClick:true,closeOnOutsideScroll:true,portalProps:{},preset:Popover.preset.BELOW,selfXAlign:undefined,selfYAlign:undefined,wrapperProps:{}});Popover.internalKeys=without(Object.keys(Popover.defaultProps),Dialog.internalKeys);

var index$12=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var ProgressiveDisclosure=function(_React$PureComponent){inherits(ProgressiveDisclosure,_React$PureComponent);function ProgressiveDisclosure(){var _ref;var _temp,_this,_ret;classCallCheck(this,ProgressiveDisclosure);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=ProgressiveDisclosure.__proto__||Object.getPrototypeOf(ProgressiveDisclosure)).call.apply(_ref,[this].concat(args))),_this),_this.state={expanded:_this.props.expanded},_this.dispatchCallback=function(){_this.props[_this.state.expanded?'onExpand':'onHide']();},_this.handleClick=function(event){_this.setState({expanded:!_this.state.expanded},_this.dispatchCallback);if(isFunction(_this.props.toggleProps.onClick)){_this.props.toggleProps.onClick(event);}},_this.handleKeyDown=function(event){switch(event.key){case'Enter':event.preventDefault();_this.setState({expanded:!_this.state.expanded},_this.dispatchCallback);}if(isFunction(_this.props.toggleProps.onKeyDown)){_this.props.toggleProps.onKeyDown(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(ProgressiveDisclosure,[{key:'componentWillReceiveProps',value:function componentWillReceiveProps(newProps){if(newProps.expanded!==this.props.expanded){this.setState({expanded:newProps.expanded},this.dispatchCallback);}}},{key:'renderContent',value:function renderContent(){if(this.state.expanded){return React__default.createElement('div',{ref:'content',className:'ui-disclosure-content'},this.props.children);}}},{key:'render',value:function render(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,ProgressiveDisclosure.internalKeys),{ref:'wrapper',className:index$12('ui-disclosure',this.props.className,{'ui-disclosure-expanded':this.state.expanded})}),React__default.createElement('div',_extends({},this.props.toggleProps,{ref:'toggle',className:index$12('ui-disclosure-toggle',this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:'0'}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent());}}]);return ProgressiveDisclosure;}(React__default.PureComponent);ProgressiveDisclosure.propTypes={children:React.PropTypes.node,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),expanded:React.PropTypes.bool,onExpand:React.PropTypes.func,onHide:React.PropTypes.func,teaser:React.PropTypes.node,teaserExpanded:React.PropTypes.node,toggleProps:React.PropTypes.object};ProgressiveDisclosure.defaultProps={children:null,component:'div',expanded:false,onExpand:noop,onHide:noop,teaser:null,teaserExpanded:null,toggleProps:{}};ProgressiveDisclosure.internalKeys=Object.keys(ProgressiveDisclosure.defaultProps);

var index$13=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var Progress=function(_React$PureComponent){inherits(Progress,_React$PureComponent);function Progress(){classCallCheck(this,Progress);return possibleConstructorReturn(this,(Progress.__proto__||Object.getPrototypeOf(Progress)).apply(this,arguments));}createClass(Progress,[{key:'renderLabel',value:function renderLabel(){if(this.props.label){return React__default.createElement('div',_extends({},this.props.labelProps,{ref:'label',className:index$13('ui-progress-label',this.props.labelProps.className)}),this.props.label);}}},{key:'renderCancel',value:function renderCancel(){if(this.props.onCancel){return React__default.createElement(Button,_extends({},this.props.cancelProps,{ref:'cancel',className:index$13('ui-progress-cancel',this.props.cancelProps.className),onPressed:this.props.onCancel}));}}},{key:'renderProgress',value:function renderProgress(){return React__default.createElement('div',_extends({},this.props.progressProps,{ref:'progress',className:index$13('ui-progress',this.props.progressProps.className,{'ui-progress-indeterminate':typeof this.props.progress==='undefined'}),role:'presentation',style:_extends({},this.props.progressProps.style,defineProperty({},this.props.tweenProperty,this.props.progress))}));}},{key:'render',value:function render(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,Progress.internalKeys),{ref:'wrapper',className:index$13('ui-progress-wrapper',this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel());}}]);return Progress;}(React__default.PureComponent);Progress.propTypes={cancelProps:React.PropTypes.object,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),label:React.PropTypes.node,labelProps:React.PropTypes.object,onCancel:React.PropTypes.func,progress:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.number]),progressProps:React.PropTypes.object,tweenProperty:React.PropTypes.string};Progress.defaultProps={cancelProps:{},component:'div',label:null,labelProps:{},onCancel:noop,progress:undefined,progressProps:{},tweenProperty:'width'};Progress.internalKeys=Object.keys(Progress.defaultProps);

var index$14=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var Radio=function(_React$PureComponent){inherits(Radio,_React$PureComponent);function Radio(){var _ref;var _temp,_this,_ret;classCallCheck(this,Radio);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Radio.__proto__||Object.getPrototypeOf(Radio)).call.apply(_ref,[this].concat(args))),_this),_this.uuid=uuid(),_this.handleChange=function(event){if(event.target.checked){_this.props.onSelected(event.target.value);}if(isFunction(_this.props.inputProps.onChange)){_this.props.inputProps.onChange(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(Radio,[{key:'renderInput',value:function renderInput(){return React__default.createElement('input',_extends({},this.props.inputProps,{ref:'input',type:'radio',id:this.props.id||this.props.inputProps.id||this.uuid,className:index$14('ui-radio',this.props.inputProps.className,{'ui-radio-selected':this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,'aria-checked':String(this.props.selected),onChange:this.handleChange}));}},{key:'renderLabel',value:function renderLabel(){if(this.props.label){return React__default.createElement('label',_extends({},this.props.labelProps,{ref:'label',className:index$14('ui-radio-label',this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label);}}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,Radio.internalKeys),{ref:'wrapper',className:index$14('ui-radio-wrapper',this.props.className)}),this.renderInput(),this.renderLabel());}}]);return Radio;}(React__default.PureComponent);Radio.propTypes={inputProps:React.PropTypes.object,label:React.PropTypes.node,labelProps:React.PropTypes.object,name:React.PropTypes.string.isRequired,onSelected:React.PropTypes.func,selected:React.PropTypes.bool,value:React.PropTypes.string.isRequired};Radio.defaultProps={inputProps:{},label:null,labelProps:{},name:'',onSelected:noop,selected:false,value:''};Radio.internalKeys=Object.keys(Radio.defaultProps);

var index$15=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var index$16=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;var index$17=function index$17(str){if(typeof str!=='string'){throw new TypeError('Expected a string');}return str.replace(matchOperatorsRe,'\\$&');};

var Typeahead=function(_React$PureComponent){inherits(Typeahead,_React$PureComponent);function Typeahead(){var _ref;var _temp,_this,_ret;classCallCheck(this,Typeahead);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Typeahead.__proto__||Object.getPrototypeOf(Typeahead)).call.apply(_ref,[this].concat(args))),_this),_initialiseProps.call(_this),_temp),possibleConstructorReturn(_this,_ret);}createClass(Typeahead,[{key:'componentWillMount',value:function componentWillMount(){if(this.props.inputProps.value||this.props.inputProps.defaultValue){this.computeMatches();}}},{key:'componentDidMount',value:function componentDidMount(){this.mounted=true;if(this.state.selectedEntityIndex>=0){this.props.onEntityHighlighted(this.state.selectedEntityIndex);}}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){if(nextProps.entities!==this.props.entities){this.computeMatches(nextProps.entities);}if(nextProps.inputProps.value!==this.props.inputProps.value){this.updateInputState(nextProps.inputProps.value);this.computeMatches();}}},{key:'componentDidUpdate',value:function componentDidUpdate(prevProps,prevState){if(this.state.entityMatchIndexes.length&&!prevState.entityMatchIndexes.length){this.refs.matches.scrollTop=0;}if(this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==prevProps.entities[prevState.selectedEntityIndex]){this.props.onEntityHighlighted(this.state.selectedEntityIndex);}}},{key:'componentWillUnmount',value:function componentWillUnmount(){this.mounted=false;}},{key:'handleMatchClick',value:function handleMatchClick(index){this.setState({selectedEntityIndex:index},this.setValueWithSelectedEntity);}},{key:'selectMatch',value:function selectMatch(delta){var matches=this.state.entityMatchIndexes;var totalMatches=matches.length;var nextIndex=matches.indexOf(this.state.selectedEntityIndex)+delta;if(totalMatches){if(nextIndex<0){nextIndex=totalMatches-1;}else if(nextIndex>=totalMatches){nextIndex=0;}var matchIndex=matches[nextIndex];var matchesNode=this.refs.matches;var matchesNodeYEnd=matchesNode.scrollTop+matchesNode.clientHeight;var matchNode=this.refs['match_$'+matchIndex];var matchNodeYStart=matchNode.offsetTop;var matchNodeYEnd=matchNodeYStart+matchNode.clientHeight;if(matchNodeYEnd>=matchesNodeYEnd){matchesNode.scrollTop+=matchNodeYEnd-matchesNodeYEnd;}else if(matchNodeYStart<=matchesNode.scrollTop){matchesNode.scrollTop=matchNodeYStart;}this.setState({selectedEntityIndex:matchIndex});}}},{key:'cursorAtEndOfInput',value:function cursorAtEndOfInput(){var node=this.getInputNode();return node.selectionStart===node.selectionEnd&&node.selectionEnd===this.getValue().length;}},{key:'markFuzzyMatchSubstring',value:function markFuzzyMatchSubstring(input,entity){var entityContent=entity.text;var frags=entityContent.split(new RegExp('('+index$17(input)+')','ig'));var normalizedUserText=input.toLowerCase();var threshold=frags.length;var i=-1;while(++i<threshold){if(frags[i].toLowerCase()===normalizedUserText){frags[i]=React__default.createElement('mark',{key:i,className:'ui-typeahead-match-highlight'},frags[i]);}}return frags;}},{key:'markStartsWithMatchSubstring',value:function markStartsWithMatchSubstring(input,entity){var entityContent=entity.text;var seekValue=input.toLowerCase();var indexStart=entityContent.toLowerCase().indexOf(seekValue);var indexEnd=indexStart+seekValue.length;return[React__default.createElement('span',{key:'0'},entityContent.slice(0,indexStart)),React__default.createElement('mark',{key:'1',className:'ui-typeahead-match-highlight'},entityContent.slice(indexStart,indexEnd)),React__default.createElement('span',{key:'2'},entityContent.slice(indexEnd))];}},{key:'getMarkingFunction',value:function getMarkingFunction(){if(isString(this.props.algorithm)){if(this.props.algorithm===Typeahead.mode.STARTS_WITH){return this.markStartsWithMatchSubstring;}return this.markFuzzyMatchSubstring;}else if(isFunction(this.props.algorithm.marker)){return this.props.algorithm.marker;}if(this.warnedMarker===undefined){this.warnedMarker=true;console.warn('Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).');}return this.markFuzzyMatchSubstring;}},{key:'getFuzzyMatchIndexes',value:function getFuzzyMatchIndexes(userText,entities){var normalized=userText.toLowerCase();return entities.reduce(function findIndexes(result,entity,index){return entity.text.toLowerCase().indexOf(normalized)!==-1?result.push(index)&&result:result;},[]);}},{key:'getStartsWithMatchIndexes',value:function getStartsWithMatchIndexes(userText,entities){var seekValue=userText.toLowerCase();return entities.reduce(function seekMatch(results,entity,index){if(entity.text.toLowerCase().indexOf(seekValue)===0){results.push(index);}return results;},[]);}},{key:'getMatchingFunction',value:function getMatchingFunction(){if(isString(this.props.algorithm)){if(this.props.algorithm===Typeahead.mode.STARTS_WITH){return this.getStartsWithMatchIndexes;}return this.getFuzzyMatchIndexes;}else if(isFunction(this.props.algorithm.matcher)){return this.props.algorithm.matcher;}if(this.warnedMatcher===undefined){this.warnedMatcher=true;console.warn('Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).');}return this.getFuzzyMatchIndexes;}},{key:'computeMatches',value:function computeMatches(providedEntities){var _this2=this;this.setState(function(state,props){var entities=providedEntities||props.entities;var currentValue=state.input;var matches=currentValue===''?[]:_this2.getMatchIndexes(currentValue,entities);return{selectedEntityIndex:matches.length?matches[0]:-1,entityMatchIndexes:matches};});}},{key:'renderNotification',value:function renderNotification(){return React__default.createElement('div',{ref:'aria',id:this.state.id,className:this.props.offscreenClass,'aria-live':'polite'},this.getSelectedEntityText());}},{key:'renderHint',value:function renderHint(){if(this.props.hint){var userText=this.state.input;var raw=this.getSelectedEntityText();var processed='';if(raw&&raw.toLowerCase().indexOf(userText.toLowerCase())===0){processed=raw.replace(new RegExp(userText,'i'),userText);}return React__default.createElement('div',_extends({},this.props.hintProps,{ref:'hint',className:index$16('ui-textual-input','ui-textual-input-placeholder','ui-typeahead-hint',this.props.hintProps.className),tabIndex:'-1'}),processed);}}},{key:'renderMatches',value:function renderMatches(){var _this3=this;if(this.state.entityMatchIndexes.length){var props=this.props.matchWrapperProps;return React__default.createElement('div',_extends({},props,{ref:'matches',className:index$16('ui-typeahead-match-wrapper',props.className)}),this.state.entityMatchIndexes.map(function(index){var entity=_this3.props.entities[index];var className=entity.className,text=entity.text,rest=objectWithoutProperties(entity,['className','text']);return React__default.createElement('div',_extends({},rest,{ref:'match_$'+index,className:index$16('ui-typeahead-match',className,{'ui-typeahead-match-selected':_this3.state.selectedEntityIndex===index}),key:text,onClick:_this3.handleMatchClick.bind(_this3,index)}),_this3.markMatchSubstring(_this3.state.input,entity));}));}}},{key:'render',value:function render(){var props=this.props,state=this.state;return React__default.createElement('div',_extends({},omitKeysFromSourceObject(props,Typeahead.internalKeys),{ref:'wrapper',className:index$16('ui-typeahead-wrapper',props.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),React__default.createElement(Input,_extends({},getIntersection(props,Input.defaultProps),{ref:'input','aria-controls':state.id,inputProps:_extends({},props.inputProps,{className:index$16('ui-typeahead',props.inputProps.className),onChange:this.handleChange})})),this.renderMatches());}}]);return Typeahead;}(React__default.PureComponent);Typeahead.mode={'STARTS_WITH':'STARTS_WITH','FUZZY':'FUZZY'};Typeahead.propTypes=_extends({},Input.propTypes,{algorithm:React.PropTypes.oneOfType([React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY]),React.PropTypes.shape({marker:React.PropTypes.oneOfType([React.PropTypes.func,React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])]),matcher:React.PropTypes.oneOfType([React.PropTypes.func,React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])])})]),clearPartialInputOnSelection:React.PropTypes.bool,entities:React.PropTypes.arrayOf(React.PropTypes.shape({text:React.PropTypes.string})),hint:React.PropTypes.bool,hintProps:React.PropTypes.object,matchWrapperProps:React.PropTypes.object,offscreenClass:React.PropTypes.string,onComplete:React.PropTypes.func,onEntityHighlighted:React.PropTypes.func,onEntitySelected:React.PropTypes.func});Typeahead.defaultProps=_extends({},Input.defaultProps,{algorithm:Typeahead.mode.FUZZY,clearPartialInputOnSelection:false,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:'ui-offscreen',onComplete:noop,onEntityHighlighted:noop,onEntitySelected:noop});Typeahead.internalKeys=Object.keys(Typeahead.defaultProps);var _initialiseProps=function _initialiseProps(){var _this4=this;this.state={entityMatchIndexes:[],id:uuid(),isControlled:isString(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||'',selectedEntityIndex:-1};this.mounted=false;this.updateInputState=function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';return _this4.setState({input:value});};this.getSelectedEntityText=function(){var entity=_this4.props.entities[_this4.state.selectedEntityIndex];return entity?entity.text:'';};this.resetMatches=function(){if(_this4.mounted){_this4.setState({selectedEntityIndex:-1,entityMatchIndexes:[]});}};this.getInputNode=function(){return _this4.refs.input.refs.field;};this.select=function(){var input=_this4.getInputNode();input.selectionStart=0;input.selectionEnd=_this4.getValue().length;};this.focus=function(){return _this4.getInputNode().focus();};this.getValue=function(){return _this4.refs.input.getValue();};this.setValue=function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';_this4.refs.input.setValue(value);_this4.updateInputState(value);_this4.resetMatches();_this4.focus();};this.setValueWithSelectedEntity=function(){_this4.props.onEntitySelected(_this4.state.selectedEntityIndex);if(_this4.props.clearPartialInputOnSelection){_this4.setValue('');}else{_this4.setValue(_this4.getSelectedEntityText());}window.setTimeout(_this4.resetMatches,0);};this.markMatchSubstring=function(){return _this4.getMarkingFunction().apply(undefined,arguments);};this.getMatchIndexes=function(){return _this4.getMatchingFunction().apply(undefined,arguments);};this.handleChange=function(event){if(_this4.state.isControlled===false){_this4.updateInputState(event.target.value);_this4.computeMatches();}if(isFunction(_this4.props.inputProps.onChange)){_this4.props.inputProps.onChange(event);}};this.handleKeyDown=function(event){switch(event.key){case'ArrowLeft':if(event.target.selectionStart>1){event.stopPropagation();}break;case'Tab':case'ArrowRight':if(_this4.state.selectedEntityIndex!==-1&&_this4.cursorAtEndOfInput()&&_this4.getInputNode()===event.target&&!event.shiftKey){event.nativeEvent.preventDefault();_this4.setValueWithSelectedEntity();}break;case'ArrowUp':event.nativeEvent.preventDefault();_this4.selectMatch(-1);_this4.focus();break;case'ArrowDown':event.nativeEvent.preventDefault();_this4.selectMatch(1);_this4.focus();break;case'Escape':if(_this4.state.selectedEntityIndex!==-1&&_this4.getInputNode()===event.target){_this4.resetMatches();}break;case'Enter':if(_this4.state.selectedEntityIndex!==-1&&_this4.getInputNode()===event.target){event.nativeEvent.preventDefault();_this4.setValueWithSelectedEntity();}else{_this4.props.onComplete(_this4.state.input,event);}break;}if(isFunction(_this4.props.onKeyDown)){_this4.props.onKeyDown(event);}};};

var first=function first(array){return array[0];};var last=function last(array){return array[array.length-1];};var TokenizedInput=function(_React$PureComponent){inherits(TokenizedInput,_React$PureComponent);function TokenizedInput(){var _ref;var _temp,_this,_ret;classCallCheck(this,TokenizedInput);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=TokenizedInput.__proto__||Object.getPrototypeOf(TokenizedInput)).call.apply(_ref,[this].concat(args))),_this),_this.focus=function(){return _this.refs.typeahead.focus();},_this.getInputNode=function(){return _this.refs.typeahead.getInputNode();},_this.getSelectedEntityText=function(){return _this.refs.typeahead.getSelectedEntityText();},_this.getValue=function(){return _this.refs.typeahead.getValue();},_this.select=function(){return _this.refs.typeahead.select();},_this.setValue=function(value){return _this.refs.typeahead.setValue(value);},_this.add=function(index){if(_this.props.tokens.indexOf(index)===-1){_this.props.handleAddToken(index);}},_this.handleInputClick=function(event){_this.clearSelection();if(isFunction(_this.props.inputProps.onClick)){_this.props.inputProps.onClick(event);}},_this.handleInputFocus=function(event){_this.clearSelection();if(isFunction(_this.props.inputProps.onFocus)){_this.props.inputProps.onFocus(event);}},_this.handleKeyDown=function(event){switch(event.which){case 37:_this.selectPreviousToken(event.shiftKey);break;case 39:_this.selectNextToken(event.shiftKey);break;case 8:if(_this.props.tokensSelected.length){_this.remove(_this.props.tokensSelected);_this.focus();}break;case 65:if(event.metaKey){event.preventDefault();_this.focus();_this.select();_this._suppressNextTokenSelection=true;_this.props.handleNewSelection(_this.props.tokens);}}if(isFunction(_this.props.onKeyDown)){_this.props.onKeyDown(event);}},_temp),possibleConstructorReturn(_this,_ret);}createClass(TokenizedInput,[{key:'componentDidUpdate',value:function componentDidUpdate(prevProps){var previousSelectedIndexes=prevProps.tokensSelected;var currentSelectedIndexes=this.props.tokensSelected;if(this.props.tokens.length>prevProps.tokens.length){this.setValue('');}if(this._suppressNextTokenSelection){this._suppressNextTokenSelection=false;return;}if(previousSelectedIndexes!==currentSelectedIndexes&&currentSelectedIndexes.length!==0){if(currentSelectedIndexes.length===1||currentSelectedIndexes[0]!==previousSelectedIndexes[0]){return this.refs['token_'+currentSelectedIndexes[0]].focus();}else if(last(currentSelectedIndexes)!==last(previousSelectedIndexes)){return this.refs['token_'+last(currentSelectedIndexes)].focus();}this.refs['token_'+currentSelectedIndexes[0]].focus();}}},{key:'remove',value:function remove(index){var _this2=this;var indexes=(Array.isArray(index)?index:[index]).filter(function(idx){return _this2.props.tokens.indexOf(idx)!==-1;});if(indexes.length){this.props.handleRemoveTokens(indexes);}}},{key:'selectToken',value:function selectToken(index){this.props.handleNewSelection([index]);}},{key:'selectTokens',value:function selectTokens(indexes){this.props.handleNewSelection(indexes);}},{key:'selectPreviousToken',value:function selectPreviousToken(append){var selected=this.props.tokensSelected;var indexes=this.props.tokens;if(selected.length===1&&first(selected)===first(indexes)){return;}if(selected.length===0){this.selectToken(last(indexes));}else{var previousToken=indexes[indexes.indexOf(first(selected))-1];this.selectTokens(append?[previousToken].concat(selected):[previousToken]);}}},{key:'selectNextToken',value:function selectNextToken(append){var selected=this.props.tokensSelected;var indexes=this.props.tokens;if(selected.length===0){return;}if(last(selected)===last(indexes)){this.clearSelection();this.focus();}else{var nextToken=indexes[indexes.indexOf(last(selected))+1];this.selectTokens(append?selected.concat(nextToken):[nextToken]);}}},{key:'clearSelection',value:function clearSelection(){this.props.handleNewSelection([]);}},{key:'handleTokenCloseClick',value:function handleTokenCloseClick(index,event){event.stopPropagation();this.remove(index);this.focus();if(this.props.tokenCloseComponent.props.onClick){this.props.tokenCloseComponent.props.onClick(event);}}},{key:'renderTokenClose',value:function renderTokenClose(index){if(this.props.tokenCloseVisible){return React__default.cloneElement(this.props.tokenCloseComponent,{className:index$15('ui-tokenfield-token-close',this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,index)});}}},{key:'handleTokenKeyDown',value:function handleTokenKeyDown(index,event){switch(event.which){case 13:case 32:this.selectToken(index);event.preventDefault();break;case 8:this.remove(index);this.focus();event.preventDefault();break;}}},{key:'renderTokens',value:function renderTokens(){var _this3=this;return React__default.createElement('div',{className:'ui-tokenfield-tokens'},this.props.tokens.map(function(index){return React__default.createElement('div',{ref:'token_'+index,key:index,className:index$15('ui-tokenfield-token',{'ui-tokenfield-token-selected':_this3.props.tokensSelected.indexOf(index)!==-1}),onClick:_this3.selectToken.bind(_this3,index),onKeyDown:_this3.handleTokenKeyDown.bind(_this3,index),tabIndex:'0'},_this3.props.entities[index].text,_this3.renderTokenClose(index));}));}},{key:'render',value:function render(){return React__default.createElement('div',_extends({},omitKeysFromSourceObject(this.props,TokenizedInput.internalKeys),{ref:'wrapper',className:index$15('ui-tokenfield-wrapper',this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),React__default.createElement(Typeahead,_extends({},getIntersection(this.props,Typeahead.defaultProps),{ref:'typeahead',className:'ui-tokenfield',clearPartialInputOnSelection:true,inputProps:_extends({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})));}}]);return TokenizedInput;}(React__default.PureComponent);TokenizedInput.propTypes=_extends({},Typeahead.propTypes,{handleAddToken:React.PropTypes.func,handleRemoveTokens:React.PropTypes.func,handleNewSelection:React.PropTypes.func,tokenCloseComponent:React.PropTypes.element,tokenCloseVisible:React.PropTypes.bool,tokens:React.PropTypes.arrayOf(React.PropTypes.number),tokensSelected:React.PropTypes.arrayOf(React.PropTypes.number)});TokenizedInput.defaultProps=_extends({},Typeahead.defaultProps,{handleAddToken:noop,handleRemoveTokens:noop,handleNewSelection:noop,tokenCloseComponent:React__default.createElement('div',null,'X'),tokenCloseVisible:true,tokens:[],tokensSelected:[]});TokenizedInput.internalKeys=Object.keys(TokenizedInput.defaultProps);

var index$18=createCommonjsModule(function(module){(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=typeof arg==='undefined'?'undefined':_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){classes.push(classNames.apply(null,arg));}else if(argType==='object'){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){define('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();});

var Tooltip=function(_React$PureComponent){inherits(Tooltip,_React$PureComponent);function Tooltip(){classCallCheck(this,Tooltip);return possibleConstructorReturn(this,(Tooltip.__proto__||Object.getPrototypeOf(Tooltip)).apply(this,arguments));}createClass(Tooltip,[{key:'render',value:function render(){var position=this.props.position;return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,Tooltip.internalKeys),{className:index$18('ui-tooltip',this.props.className,{'ui-tooltip-position-above':position===Tooltip.position.ABOVE,'ui-tooltip-position-below':position===Tooltip.position.BELOW,'ui-tooltip-position-before':position===Tooltip.position.BEFORE,'ui-tooltip-position-after':position===Tooltip.position.AFTER}),'data-tooltip':this.props.text,'aria-label':this.props['aria-label']||this.props.text}),this.props.children);}}]);return Tooltip;}(React__default.PureComponent);Tooltip.position={ABOVE:'ABOVE',BELOW:'BELOW',BEFORE:'BEFORE',AFTER:'AFTER'};Tooltip.propTypes={component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),position:React.PropTypes.oneOf(Object.keys(Tooltip.position)),text:React.PropTypes.string};Tooltip.defaultProps={component:'div',position:Tooltip.position.ABOVE,text:''};Tooltip.internalKeys=Object.keys(Tooltip.defaultProps);

exports.ArrowKeyNavigation = ArrowKeyNavigation;
exports.Button = Button;
exports.Checkbox = Checkbox;
exports.CheckboxGroup = CheckboxGroup;
exports.Dialog = Dialog;
exports.FittedText = FittedText;
exports.Image = Image;
exports.Input = Input;
exports.Modal = Modal;
exports.Pagination = Pagination;
exports.Popover = Popover;
exports.Portal = Portal;
exports.ProgressiveDisclosure = ProgressiveDisclosure;
exports.Progress = Progress;
exports.Radio = Radio;
exports.SegmentedControl = SegmentedControl;
exports.TokenizedInput = TokenizedInput;
exports.Tooltip = Tooltip;
exports.Typeahead = Typeahead;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
