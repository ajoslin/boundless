"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _interopDefault(e){return e&&typeof e==="object"&&"default"in e?e["default"]:e}var React=require("react");var React__default=_interopDefault(React);var ReactDOM=require("react-dom");var ReactDOM__default=_interopDefault(ReactDOM);var isFunction=function(e){return typeof e==="function"};function omitKeysFromSourceObject(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return Object.keys(e).reduce(function n(o,r){if(t.indexOf(r)===-1){o[r]=e[r]}return o},{})}var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol==="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var classCallCheck=function(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}};var createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||false;o.configurable=true;if("value"in o)o.writable=true;Object.defineProperty(e,o.key,o)}}return function(t,n,o){if(n)e(t.prototype,n);if(o)e(t,o);return t}}();var defineProperty=function(e,t,n){if(t in e){Object.defineProperty(e,t,{value:n,enumerable:true,configurable:true,writable:true})}else{e[t]=n}return e};var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n){if(Object.prototype.hasOwnProperty.call(n,o)){e[o]=n[o]}}}return e};var inherits=function(e,t){if(typeof t!=="function"&&t!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof t)}e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}});if(t)Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t};var objectWithoutProperties=function(e,t){var n={};for(var o in e){if(t.indexOf(o)>=0)continue;if(!Object.prototype.hasOwnProperty.call(e,o))continue;n[o]=e[o]}return n};var possibleConstructorReturn=function(e,t){if(!e){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t&&(typeof t==="object"||typeof t==="function")?t:e};var ArrowKeyNavigation=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.state={activeChildIndex:o.props.defaultActiveChildIndex},o.handleKeyDown=function(e){switch(e.key){case"ArrowUp":if(o.props.mode===t.mode.VERTICAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(-1)}break;case"ArrowLeft":if(o.props.mode===t.mode.HORIZONTAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(-1)}break;case"ArrowDown":if(o.props.mode===t.mode.VERTICAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(1)}break;case"ArrowRight":if(o.props.mode===t.mode.HORIZONTAL||o.props.mode===t.mode.BOTH){e.preventDefault();o.moveFocus(1)}break}if(isFunction(o.props.onKeyDown)){o.props.onKeyDown(e)}},o.handleFocus=function(e){if(e.target.hasAttribute("data-focus-index")){var t=parseInt(e.target.getAttribute("data-focus-index"),10);var n=React__default.Children.toArray(o.props.children)[t];o.setState({activeChildIndex:t});if(n.props.onFocus){n.props.onFocus(e)}}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentDidUpdate",value:function e(t,n){if(this.state.activeChildIndex!==n.activeChildIndex){this.setFocus(this.state.activeChildIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(this.state.activeChildIndex!==0){var n=t.children?React__default.Children.count(t.children):0;if(n===0){this.setState({activeChildIndex:0})}else if(this.state.activeChildIndex>=n){this.setState({activeChildIndex:n-1})}}}},{key:"setFocus",value:function e(t){var n=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:ReactDOM.findDOMNode(this.refs.wrapper)).children[t];if(n&&n.hasAttribute("data-skip")){this.moveFocus(n.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1)}else if(n&&document.activeElement!==n){n.focus()}}},{key:"moveFocus",value:function e(t){var n=this.props.children?React__default.Children.count(this.props.children):0;var o=this.state.activeChildIndex+t;if(o>=n){o=0}else if(o<0){o=n-1}this.setState({activeChildIndex:o})}},{key:"children",value:function e(){var t=this;return React__default.Children.map(this.props.children,function(e,n){return React__default.cloneElement(e,{"data-focus-index":n,"data-skip":parseInt(e.props.tabIndex,10)===-1||undefined,key:e.key||n,tabIndex:t.state.activeChildIndex===n?0:-1})})}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children())}}]);return t}(React__default.PureComponent);ArrowKeyNavigation.mode={HORIZONTAL:"HORIZONTAL",VERTICAL:"VERTICAL",BOTH:"BOTH"};ArrowKeyNavigation.propTypes={component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),defaultActiveChildIndex:React.PropTypes.number,mode:React.PropTypes.oneOf(Object.keys(ArrowKeyNavigation.mode))};ArrowKeyNavigation.defaultProps={component:"div",defaultActiveChildIndex:0,mode:ArrowKeyNavigation.mode.BOTH};ArrowKeyNavigation.internalKeys=Object.keys(ArrowKeyNavigation.defaultProps);function createCommonjsModule(e,t){return t={exports:{}},e(t,t.exports),t.exports}var index=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});function noop(){}var Button=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.handleClick=function(e){if(o.props.disabled){return}o.toggleState(e);if(isFunction(o.props.onClick)){o.props.onClick(e)}},o.handleKeyDown=function(e){if(o.props.disabled){return}switch(e.key){case"Enter":case"Space":e.preventDefault();o.toggleState(e)}if(isFunction(o.props.onKeyDown)){o.props.onKeyDown(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"toggleState",value:function e(t){this.props[this.props.pressed?"onUnpressed":"onPressed"](t)}},{key:"render",value:function e(){return React__default.createElement("button",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"button",className:index("b-button",this.props.className,{"b-button-pressable":typeof this.props.pressed!=="undefined","b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]);return t}(React__default.PureComponent);Button.propTypes={children:React.PropTypes.node,onClick:React.PropTypes.func,onPressed:React.PropTypes.func,onUnpressed:React.PropTypes.func,pressed:React.PropTypes.bool};Button.defaultProps={children:null,onClick:noop,onPressed:noop,onUnpressed:noop,pressed:undefined};Button.internalKeys=Object.keys(Button.defaultProps);var index$1=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});function uuid(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(e){return(e^Math.random()*16>>e/4).toString(16)})}var Checkbox=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.id=uuid(),o.handleChange=function(e){if(o.props.inputProps.disabled){return}o.props[!o.props.inputProps.checked?"onChecked":"onUnchecked"](o.props.inputProps.name);if(isFunction(o.props.inputProps.onChange)){o.props.inputProps.onChange(e)}},o.handleClick=function(e){if(o.props.inputProps.disabled){return}o.refs.input.focus();if(isFunction(o.props.inputProps.onClick)){o.props.inputProps.onClick(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentDidMount",value:function e(){if(this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"componentDidUpdate",value:function e(t){if(t.inputProps.indeterminate!==this.props.inputProps.indeterminate){this.setIndeterminate()}}},{key:"setIndeterminate",value:function e(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function e(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function e(){return React__default.createElement("input",_extends({},omitKeysFromSourceObject(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:index$1("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function e(){if(this.props.label){return React__default.createElement("label",_extends({},this.props.labelProps,{ref:"label",className:index$1("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$1("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(React__default.PureComponent);Checkbox.propTypes={inputProps:React.PropTypes.shape({checked:React.PropTypes.bool,className:React.PropTypes.string,disabled:React.PropTypes.bool,id:React.PropTypes.string,indeterminate:React.PropTypes.bool,onChange:React.PropTypes.func,onClick:React.PropTypes.func,name:React.PropTypes.string,value:React.PropTypes.string}),label:React.PropTypes.node,labelProps:React.PropTypes.object,onChecked:React.PropTypes.func,onUnchecked:React.PropTypes.func};Checkbox.defaultProps={inputProps:{checked:false,indeterminate:false},label:null,labelProps:{},onChecked:noop,onUnchecked:noop};Checkbox.internalKeys=Object.keys(Checkbox.defaultProps);var index$2=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var CheckboxGroup=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"allItemsChecked",value:function e(){return this.props.items.every(function(e){return e.inputProps.checked===true})}},{key:"anyItemsChecked",value:function e(){return this.props.items.some(function(e){return e.inputProps.checked===true})}},{key:"renderSelectAll",value:function e(){if(this.props.selectAll){var t=this.allItemsChecked();var n=this.props.selectAllProps.inputProps;return React__default.createElement(Checkbox,_extends({},this.props.selectAllProps,{ref:"select_all",key:"cb_select_all",className:index$2("b-checkbox-group-selectall",this.props.selectAllProps.className),inputProps:_extends({},n,{checked:t,indeterminate:!t&&this.anyItemsChecked(),name:n&&n.name?n.name:"cb_select_all"}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}}},{key:"renderCheckboxes",value:function e(){var t=this;return this.props.items.map(function(e){return React__default.createElement(Checkbox,_extends({},e,{key:e.inputProps.name,onChecked:t.props.onChildChecked,onUnchecked:t.props.onChildUnchecked}))})}},{key:"renderChildren",value:function e(){var n=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition){switch(this.props.selectAllPosition){case t.Constants.SELECT_ALL_BEFORE:n.unshift(this.renderSelectAll());break;case t.Constants.SELECT_ALL_AFTER:n.push(this.renderSelectAll());break}}return n}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"group",className:index$2("b-checkbox-group",this.props.className)}),this.renderChildren())}}]);return t}(React__default.PureComponent);CheckboxGroup.Constants={SELECT_ALL_BEFORE:"SELECT_ALL_BEFORE",SELECT_ALL_AFTER:"SELECT_ALL_AFTER"};CheckboxGroup.propTypes={items:React.PropTypes.arrayOf(Checkbox.propTypes.inputProps).isRequired,onAllChecked:React.PropTypes.func,onAllUnchecked:React.PropTypes.func,onChildChecked:React.PropTypes.func,onChildUnchecked:React.PropTypes.func,selectAll:React.PropTypes.bool,selectAllProps:React.PropTypes.shape({label:React.PropTypes.string,inputProps:React.PropTypes.object}),selectAllPosition:React.PropTypes.oneOf(Object.keys(CheckboxGroup.Constants))};CheckboxGroup.defaultProps={items:[],onAllChecked:noop,onAllUnchecked:noop,onChildChecked:noop,onChildUnchecked:noop,selectAll:false,selectAllProps:{},selectAllPosition:CheckboxGroup.Constants.SELECT_ALL_BEFORE};CheckboxGroup.internalKeys=Object.keys(CheckboxGroup.defaultProps);var index$3=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var PORTAL_DATA_ATTRIBUTE="data-portal-id";var Portal=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.id=uuid(),o.$portal=null,o.$passenger=null,n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentWillMount",value:function e(){this.$portal=document.createElement("div");this.props.destination.appendChild(this.$portal);this.renderPortalledContent()}},{key:"renderPortalledContent",value:function e(){var t=React__default.isValidElement(this.props.children)?this.props.children:React__default.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id;ReactDOM__default.unstable_renderSubtreeIntoContainer(this,t,this.$portal);this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function e(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function e(){ReactDOM__default.unmountComponentAtNode(this.$portal);this.props.destination.removeChild(this.$portal)}},{key:"render",value:function e(){return React__default.createElement("span",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),defineProperty({},PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]);return t}(React__default.Component);Portal.propTypes={children:React__default.PropTypes.node.isRequired,destination:React.PropTypes.instanceOf(HTMLElement),portalId:React.PropTypes.string};Portal.defaultProps={children:null,destination:document.body,portalId:null};Portal.internalKeys=Object.keys(Portal.defaultProps);var toArray$1=Array.prototype.slice;var Dialog=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.mounted=false,o.uuidHeader=uuid(),o.uuidBody=uuid(),o.handleFocus=function(e){if(!o.props.captureFocus){if(o.props.closeOnOutsideFocus){if(!o.isPartOfDialog(e.target)){return window.setTimeout(o.props.onClose,0)}}return}var t=e.explicitOriginalTarget||e.relatedTarget;if(o.isPartOfDialog(t)&&!o.isPartOfDialog(e.target)){e.preventDefault();t.focus()}},o.handleKeyDown=function(e){if(o.props.closeOnEscKey&&e.key==="Escape"){window.setTimeout(o.props.onClose,0)}if(isFunction(o.props.onKeyDown)){o.props.onKeyDown(e)}},o.handleOutsideClick=function(e){if(o.props.closeOnOutsideClick&&!o.isPartOfDialog(e.target)){window.setTimeout(o.props.onClose,0)}},o.handleOutsideScrollWheel=function(e){if(o.props.closeOnOutsideScroll&&!o.isPartOfDialog(e.target)){window.setTimeout(o.props.onClose,0)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"isPartOfDialog",value:function e(t){if(!t||t===window){return false}var n=[this.$wrapper].concat(toArray$1.call(this.$wrapper.querySelectorAll("["+PORTAL_DATA_ATTRIBUTE+"]")).map(function(e){return document.getElementById(e.getAttribute(PORTAL_DATA_ATTRIBUTE))}));var o=t.nodeType!==Node.ELEMENT_NODE?t.parentNode:t;return n.some(function(e){return e.contains(o)})}},{key:"componentDidMount",value:function e(){window.addEventListener("click",this.handleOutsideClick,true);window.addEventListener("contextmenu",this.handleOutsideClick,true);window.addEventListener("focus",this.handleFocus,true);window.addEventListener("scroll",this.handleOutsideScrollWheel,true);window.addEventListener("wheel",this.handleOutsideScrollWheel,true);if(this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)){this.$dialog.focus()}}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("click",this.handleOutsideClick,true);window.removeEventListener("contextmenu",this.handleOutsideClick,true);window.removeEventListener("focus",this.handleFocus,true);window.removeEventListener("scroll",this.handleOutsideScrollWheel,true);window.removeEventListener("wheel",this.handleOutsideScrollWheel,true)}},{key:"renderBody",value:function e(){return React__default.createElement("div",_extends({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:index$3("b-dialog-body",this.props.bodyProps.className)}),this.props.children)}},{key:"renderFooter",value:function e(){if(this.props.footer){return React__default.createElement("footer",_extends({},this.props.footerProps,{className:index$3("b-dialog-footer",this.props.footerProps.className)}),this.props.footer)}}},{key:"renderHeader",value:function e(){if(this.props.header){return React__default.createElement("header",_extends({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:index$3("b-dialog-header",this.props.headerProps.className)}),this.props.header)}}},{key:"renderFocusBoundary",value:function e(){if(this.props.captureFocus){return React__default.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}}},{key:"render",value:function e(){var n=this;return React__default.createElement("div",_extends({},this.props.wrapperProps,{ref:function e(t){return n.$wrapper=t},className:index$3("b-dialog-wrapper",this.props.wrapperProps.className),tabIndex:"0"}),this.renderFocusBoundary(),this.props.before,React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:function e(t){return n.$dialog=t},className:index$3("b-dialog",this.props.className),onKeyDown:this.handleKeyDown,role:"dialog","aria-labelledby":this.uuidHeader,"aria-describedby":this.uuidBody,tabIndex:"0"}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary())}}]);return t}(React__default.PureComponent);Dialog.propTypes={after:React.PropTypes.node,before:React.PropTypes.node,bodyProps:React.PropTypes.object,captureFocus:React.PropTypes.bool,children:React.PropTypes.node,closeOnEscKey:React.PropTypes.bool,closeOnOutsideClick:React.PropTypes.bool,closeOnOutsideFocus:React.PropTypes.bool,closeOnOutsideScroll:React.PropTypes.bool,footer:React.PropTypes.node,footerProps:React.PropTypes.object,header:React.PropTypes.node,headerProps:React.PropTypes.object,onClose:React.PropTypes.func,wrapperProps:React.PropTypes.object};Dialog.defaultProps={after:null,before:null,bodyProps:{},captureFocus:true,children:null,closeOnEscKey:false,closeOnOutsideClick:false,closeOnOutsideFocus:false,closeOnOutsideScroll:false,footer:null,footerProps:{},header:null,headerProps:{},onClose:noop,wrapperProps:{}};Dialog.internalKeys=Object.keys(Dialog.defaultProps);var index$4=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var instances=[];function toI(e){return parseInt(e,10)}function rescale(e){var t=ReactDOM.findDOMNode(e);var n=window.getComputedStyle(t.parentNode);var o=toI(window.getComputedStyle(t).fontSize);var r=toI(n.height);var s=toI(n.width);if(n.boxSizing==="border-box"||n.boxSizing==="padding-box"){r-=toI(n.paddingTop)+toI(n.paddingBottom);s-=toI(n.paddingLeft)+toI(n.paddingRight)}var i=Math.floor(o/t.offsetHeight*r);var a=Math.floor(o/t.offsetWidth*s);t.style.fontSize=(Math.min(e.props.maxFontSize,i,a)||1)+"px"}function handleWindowResize(){instances.forEach(function(e){return rescale(e)})}function registerInstance(e){if(instances.length===0){window.addEventListener("resize",handleWindowResize,true)}instances.push(e)}function unregisterInstance(e){instances.splice(instances.indexOf(e),1);if(instances.length===0){window.removeEventListener("resize",handleWindowResize,true)}}var FittedText=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"componentDidMount",value:function e(){rescale(this);registerInstance(this)}},{key:"componentDidUpdate",value:function e(){rescale(this)}},{key:"componentWillUnmount",value:function e(){unregisterInstance(this)}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:index$4("b-text",this.props.className)}),this.props.children)}}]);return t}(React__default.PureComponent);FittedText.propTypes={children:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.number]),component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),maxFontSize:React.PropTypes.number};FittedText.defaultProps={children:null,component:"span",maxFontSize:Number.MAX_VALUE};FittedText.internalKeys=Object.keys(FittedText.defaultProps);var index$5=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Image=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.state={status:t.status.LOADING},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentWillReceiveProps",value:function e(n){if(n.src!==this.props.src){this.resetPreloader();this.setState({status:t.status.LOADING})}}},{key:"componentDidMount",value:function e(){this.preload()}},{key:"componentDidUpdate",value:function e(){this.preload()}},{key:"componentWillUnmount",value:function e(){this.resetPreloader()}},{key:"resetPreloader",value:function e(){this.loader.onload=null;this.loader.onerror=null;this.loader=null}},{key:"preload",value:function e(){var n=this;if(this.loader){return}this.loader=document.createElement("img");this.loader.onload=function(){return n.setState({status:t.status.LOADED})};this.loader.onerror=function(){return n.setState({status:t.status.ERROR})};this.loader.src=this.props.src}},{key:"renderImage",value:function e(){if(this.props.displayAsBackgroundImage){return React__default.createElement("div",_extends({},this.props.imageProps,{ref:"image",className:index$5("b-image",this.props.imageProps.className),title:this.props.alt,style:_extends({},this.props.imageProps.style,{backgroundImage:"url("+this.props.src+")"})}))}return React__default.createElement("img",_extends({},this.props.imageProps,{ref:"image",className:index$5("b-image",this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:noop,onError:noop}))}},{key:"renderStatus",value:function e(){return React__default.createElement("div",_extends({},this.props.statusProps,{ref:"status",className:index$5("b-image-status",this.props.statusProps.className,{"b-image-loading":this.state.status===t.status.LOADING,"b-image-loaded":this.state.status===t.status.LOADED,"b-image-error":this.state.status===t.status.ERROR}),role:"presentation"}))}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$5("b-image-wrapper",this.props.className)}),this.renderImage(),this.renderStatus())}}]);return t}(React__default.PureComponent);Image.status={LOADING:"LOADING",LOADED:"LOADED",ERROR:"ERROR"};Image.propTypes={alt:React.PropTypes.string,displayAsBackgroundImage:React.PropTypes.bool,imageProps:React.PropTypes.object,src:React.PropTypes.string.isRequired,statusProps:React.PropTypes.object};Image.defaultProps={alt:null,displayAsBackgroundImage:false,imageProps:{},src:"about:blank",statusProps:{}};Image.internalKeys=Object.keys(Image.defaultProps);var index$6=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var isString=function(e){return typeof e==="string"};var Input=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.state={input:"",isControlled:isString(o.props.inputProps.value),isFocused:false},o.setInputValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return o.setState({input:e})},o.getValue=function(){return o.refs.field.value},o.handleBlur=function(e){o.setState({isFocused:false});if(isFunction(o.props.inputProps.onBlur)===true){o.props.inputProps.onBlur(e)}},o.handleFocus=function(e){o.setState({isFocused:true});if(isFunction(o.props.inputProps.onFocus)===true){o.props.inputProps.onFocus(e)}},o.handleChange=function(e){if(o.state.isControlled===false){o.setInputValue(e.target.value)}if(isFunction(o.props.inputProps.onChange)===true){o.props.inputProps.onChange(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentWillMount",value:function e(){if(this.state.isControlled===true){return this.setInputValue(this.props.inputProps.value)}this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function e(t){if(t.inputProps.value!==this.props.inputProps.value){this.setInputValue(t.inputProps.value)}}},{key:"setValue",value:function e(t){this.setInputValue(t);this.refs.field.value=t;if(this.state.isControlled===true){this.refs.field.dispatchEvent(new Event("input",{bubbles:true}));this.refs.field.dispatchEvent(new Event("change",{bubbles:true}))}}},{key:"getPlaceholderText",value:function e(){var t=this.state.input!=="";var n=this.props.hidePlaceholderOnFocus===true?this.state.isFocused===false&&t===false:t===false;return n?this.props.inputProps.placeholder:""}},{key:"renderPlaceholder",value:function e(){return React__default.createElement("div",{ref:"placeholder",className:"b-input-placeholder b-input"},this.getPlaceholderText())}},{key:"render",value:function e(){var n=this.props;return React__default.createElement("div",_extends({},omitKeysFromSourceObject(n,t.internalKeys),{ref:"wrapper",className:index$6("b-input-wrapper",n.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),React__default.createElement("input",_extends({},n.inputProps,{ref:"field",className:index$6("b-input",n.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})))}}]);return t}(React__default.PureComponent);Input.propTypes={hidePlaceholderOnFocus:React.PropTypes.bool,inputProps:React.PropTypes.shape({defaultValue:React.PropTypes.string,onBlur:React.PropTypes.func,onFocus:React.PropTypes.func,onChange:React.PropTypes.func,placeholder:React.PropTypes.string,type:React.PropTypes.string,value:React.PropTypes.string})};Input.defaultProps={hidePlaceholderOnFocus:true,inputProps:{type:"text"}};Input.internalKeys=Object.keys(Input.defaultProps);var index$7=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);
if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});function getIntersection(e,t){return Object.keys(t).reduce(function(t,n){if(n in e){t[n]=e[n]}return t},{})}var Modal=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"render",value:function e(){var n=this;var o=this.props;return React__default.createElement(Portal,o.portalProps,React__default.createElement("div",_extends({},omitKeysFromSourceObject(o,t.internalKeys),{ref:function e(t){return n.$modal=t},className:index$7("b-modal-wrapper",o.className)}),React__default.createElement("div",_extends({},o.maskProps,{className:index$7("b-modal-mask",o.maskProps.className)})),React__default.createElement(Dialog,_extends({},getIntersection(o,Dialog.defaultProps),o.modalProps,{className:index$7("b-modal",o.modalProps.className)}),o.children)))}}]);return t}(React__default.PureComponent);Modal.propTypes=_extends({},Dialog.propTypes,{maskProps:React.PropTypes.object,modalProps:React.PropTypes.object,portalProps:React.PropTypes.object});Modal.defaultProps=_extends({},Dialog.defaultProps,{captureFocus:true,maskProps:{},modalProps:{},portalProps:{}});Modal.internalKeys=Object.keys(Modal.defaultProps);var index$8=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var INFINITY=1/0;var MAX_INTEGER=1.7976931348623157e308;var NAN=0/0;var symbolTag="[object Symbol]";var reTrim=/^\s+|\s+$/g;var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;var reIsBinary=/^0b[01]+$/i;var reIsOctal=/^0o[0-7]+$/i;var freeParseInt=parseInt;var objectProto=Object.prototype;var objectToString=objectProto.toString;function isInteger(e){return typeof e=="number"&&e==toInteger(e)}function isObject(e){var t=typeof e==="undefined"?"undefined":_typeof(e);return!!e&&(t=="object"||t=="function")}function isObjectLike(e){return!!e&&(typeof e==="undefined"?"undefined":_typeof(e))=="object"}function isSymbol(e){return(typeof e==="undefined"?"undefined":_typeof(e))=="symbol"||isObjectLike(e)&&objectToString.call(e)==symbolTag}function toFinite(e){if(!e){return e===0?e:0}e=toNumber(e);if(e===INFINITY||e===-INFINITY){var t=e<0?-1:1;return t*MAX_INTEGER}return e===e?e:0}function toInteger(e){var t=toFinite(e),n=t%1;return t===t?n?t-n:t:0}function toNumber(e){if(typeof e=="number"){return e}if(isSymbol(e)){return NAN}if(isObject(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=isObject(t)?t+"":t}if(typeof e!="string"){return e===0?e:+e}e=e.replace(reTrim,"");var n=reIsBinary.test(e);return n||reIsOctal.test(e)?freeParseInt(e.slice(2),n?2:8):reIsBadHex.test(e)?NAN:+e}var index$9=isInteger;var index$10=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var SegmentedControl=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.state={indexOfOptionInFocus:null},o.handleKeyDown=function(e){var t=e.key;var n=o.state.indexOfOptionInFocus;if(t==="ArrowLeft"){o.setFocus(o.getPreviousOptionIndex(n));e.preventDefault()}else if(t==="ArrowRight"){o.setFocus(o.getNextOptionIndex(n));e.preventDefault()}else if(t==="Enter"){o.handleOptionClick(o.props.options[n]);e.preventDefault()}if(isFunction(o.props.onKeyDown)){o.props.onKeyDown(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"currentValue",value:function e(){var t=void 0;this.props.options.some(function(e){if(e.selected){t=e.value;return true}});return t}},{key:"setFocus",value:function e(t){ReactDOM.findDOMNode(this.refs["option_$"+t]).focus()}},{key:"getNextOptionIndex",value:function e(t){var n=t+1;return n<this.props.options.length?n:0}},{key:"getPreviousOptionIndex",value:function e(t){var n=t-1;return n<0?this.props.options.length-1:n}},{key:"handleOptionBlur",value:function e(t,n){if(this.state.indexOfOptionInFocus===this.props.options.indexOf(t)){this.setState({indexOfOptionInFocus:null})}if(isFunction(t.onBlur)){t.onBlur(n)}}},{key:"handleOptionClick",value:function e(t,n){this.props.onOptionSelected(t.value);if(isFunction(t.onClick)){t.onClick(n)}}},{key:"handleOptionFocus",value:function e(t,n){this.setState({indexOfOptionInFocus:this.props.options.indexOf(t)});if(isFunction(t.onFocus)){t.onFocus(n)}}},{key:"renderOptions",value:function e(){var n=this;return this.props.options.map(function(e,o){return React__default.createElement(Button,_extends({},omitKeysFromSourceObject(e,t.internalChildKeys),{role:"radio","aria-checked":String(e.selected),ref:"option_$"+o,key:e.value,className:index$10("b-segmented-control-option",e.className,{"b-segmented-control-option-selected":e.selected}),tabIndex:e.selected?"0":"-1",onBlur:n.handleOptionBlur.bind(n,e),onPressed:n.handleOptionClick.bind(n,e),onFocus:n.handleOptionFocus.bind(n,e)}),e.content)})}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",role:"radiogroup",className:index$10("b-segmented-control",this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions())}}]);return t}(React__default.PureComponent);SegmentedControl.propTypes={onOptionSelected:React.PropTypes.func,options:function e(t){if(t.options.length<2){throw new Error("Must provide at least two options.")}var n=t.options.some(function(e){if(!("selected"in e)){return true}});if(n){throw new Error("Must provide a `selected` prop for each option.")}var o=false;var r=t.options.some(function(e){if(e.selected){if(o){return true}o=true}});if(r){throw new Error("Encountered multiple options with `selected: true`. There can be only one.")}if(t.options.some(function(e){return typeof e.value==="undefined"})){throw new Error("Must provide a `value` prop for each option.")}}};SegmentedControl.defaultProps={onOptionSelected:noop,options:[]};SegmentedControl.internalKeys=Object.keys(SegmentedControl.defaultProps);SegmentedControl.internalChildKeys=["content","value","selected"];var identity=function e(t){return t};var Item=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.mounted=false,o.state={},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"convertDataToJSXOrWait",value:function e(){var t=this;var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props;if(n.data instanceof Promise){var o=function(){t.setState({component:null});var e=n.data;n.data.then(function(n){if(t.mounted){t.setState(function(t,o){return{component:o.data===e?o.convertToJSXFunc(n,o.index):t.component}})}},noop);return{v:void 0}}();if((typeof o==="undefined"?"undefined":_typeof(o))==="object")return o.v}this.setState({component:n.convertToJSXFunc(n.data,n.index)})}},{key:"componentWillMount",value:function e(){this.convertDataToJSXOrWait()}},{key:"componentDidMount",value:function e(){this.mounted=true}},{key:"componentWillReceiveProps",value:function e(t){this.convertDataToJSXOrWait(t)}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"getClasses",value:function e(t){return index$8("b-pagination-item",t,{"b-pagination-item-even":this.props.even,"b-pagination-item-odd":!this.props.even,"b-pagination-item-loading":this.state.component===null})}},{key:"render",value:function e(){if(this.state.component===null){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:this.getClasses()}),this.props.loadingContent)}return React__default.cloneElement(this.state.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className),"data-pagination-index":this.props.index}))}}]);return t}(React__default.PureComponent);Item.propTypes={convertToJSXFunc:React.PropTypes.func,data:React.PropTypes.object,even:React.PropTypes.bool,index:React.PropTypes.number,loadingContent:React.PropTypes.node};Item.defaultProps={convertToJSXFunc:noop,data:null,even:true,index:0,loadingContent:null};Item.internalKeys=Object.keys(Item.defaultProps);var Pagination=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.state={currentPage:o.props.initialPage,targetIndex:(o.props.initialPage-1)*o.props.numItemsPerPage},o.currentPage=function(){return o.state.currentPage},o.getPageForIndex=function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:o.props.numItemsPerPage;return Math.ceil((e+1)/t)},o.totalPages=function(){return Math.ceil(o.props.totalItems/o.props.numItemsPerPage)},o.firstVisibleItemIndex=function(){return(o.currentPage()-1)*o.props.numItemsPerPage},o.pageToIndex=function(e){if(e<0||e>=o.props.totalItems){return new Error("Cannot page to invalid index "+e+".")}o.setState({currentPage:o.getPageForIndex(e),targetIndex:e})},o.handleClick=function(e){var n=void 0;switch(e){case t.controls.FIRST:n=0;break;case t.controls.PREVIOUS:n=o.firstVisibleItemIndex()-o.props.numItemsPerPage;break;case t.controls.NEXT:n=o.firstVisibleItemIndex()+o.props.numItemsPerPage;break;case t.controls.LAST:n=o.props.totalItems-1;break;default:n=parseInt(e,10)*o.props.numItemsPerPage-1}o.setState({currentPage:o.getPageForIndex(n),targetIndex:n})},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentDidUpdate",value:function e(t,n){if(n.currentPage!==this.currentPage()){ReactDOM.findDOMNode(this.refs.item_0).focus()}}},{key:"componentWillReceiveProps",value:function e(){var t=this;var n=this.props;this.setState(function(e,o){if(o.identifier!==n.identifier){return{currentPage:1,targetIndex:0}}return{currentPage:t.getPageForIndex(e.targetIndex,o.numItemsPerPage),targetIndex:e.targetIndex}})}},{key:"createPageButtonOptions",value:function e(){var n=[];var o=this.currentPage();var r=this.props.numPageToggles;var s=this.totalPages();var i=o-(o-1)%r;var a=Math.min(i+r-1,s);if(this.props.showPaginationState){n.push({selected:false,content:isFunction(this.props.showPaginationState)?this.props.showPaginationState(o,s):o+" of "+s,value:"",disabled:true,className:"b-pagination-control b-pagination-control-state"})}if(this.props.showJumpToFirst){n.push({selected:false,content:this.props.jumpToFirstControlContent,value:t.controls.FIRST,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-first"})}n.push({selected:false,content:this.props.previousPageControlContent,value:t.controls.PREVIOUS,disabled:this.currentPage()===1,className:"b-pagination-control b-pagination-control-previous"});for(var p=i;p<=a;p++){n.push({className:"b-pagination-control","data-page-number":p,selected:p===this.currentPage(),content:p,value:p})}n.push({selected:false,content:this.props.nextPageControlContent,value:t.controls.NEXT,disabled:this.currentPage()===s,className:"b-pagination-control b-pagination-control-next"});if(this.props.showJumpToLast){n.push({selected:false,content:this.props.jumpToLastControlContent,value:t.controls.LAST,disabled:this.currentPage()===s,className:"b-pagination-control b-pagination-control-last"})}if(this.props.customControlContent){n.push({selected:false,content:this.props.customControlContent,value:uuid(),disabled:true,className:"b-pagination-control b-pagination-control-custom"})}return n}},{key:"generateItems",value:function e(){var t=[];var n=this.firstVisibleItemIndex();var o=Math.min(this.props.totalItems,n+this.props.numItemsPerPage)-1;for(var r=n;r<=o;r+=1){t.push({data:this.props.getItem(r)})}return t}},{key:"renderItems",value:function e(){var t=this;var n=this.props.listWrapperProps;var o=this.props.numItemsPerPage*(this.currentPage()-1);return React__default.createElement(ArrowKeyNavigation,_extends({},n,{ref:"itemList",className:index$8("b-pagination-items",n.className)}),this.generateItems().map(function(e,n){return React__default.createElement(Item,{ref:"item_"+n,key:n,convertToJSXFunc:t.props.itemToJSXConverterFunc,data:e.data,even:n%2===0,index:o+n,loadingContent:t.props.itemLoadingContent})}))}},{key:"renderControls",value:function e(t){if(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage){return}var n=this.props.toggleWrapperProps;var o=t.toLowerCase();var r=o[0].toUpperCase()+o.slice(1);return React__default.createElement(SegmentedControl,_extends({},n,{ref:"segmentedControl"+r,className:index$8("b-pagination-controls",n.className,defineProperty({},"b-pagination-controls-"+o,true)),options:this.createPageButtonOptions(),onOptionSelected:this.handleClick}))}},{key:"renderView",value:function e(){var n=this.props;var o=t.positions;return React__default.createElement("div",{ref:"paginatedView",className:"b-pagination"},n.position===o.ABOVE||n.position===o.BOTH?this.renderControls(o.ABOVE):noop,n.before,this.renderItems(),n.after,n.position===o.BELOW||n.position===o.BOTH?this.renderControls(o.BELOW):noop)}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$8("b-pagination-wrapper",this.props.className)}),this.renderView())}}]);return t}(React__default.PureComponent);Pagination.controls={FIRST:"FIRST",PREVIOUS:"PREVIOUS",NEXT:"NEXT",LAST:"LAST"};Pagination.positions={ABOVE:"ABOVE",BELOW:"BELOW",BOTH:"BOTH"};Pagination.propTypes={after:React.PropTypes.node,before:React.PropTypes.node,customControlContent:React.PropTypes.node,getItem:React.PropTypes.func,hidePagerIfNotNeeded:React.PropTypes.bool,identifier:React.PropTypes.string.isRequired,initialPage:function e(t){if(index$9(t.initialPage)===false){return new Error("`initialPage` must be an integer.")}var n=Math.ceil(t.totalItems/t.numItemsPerPage);if(t.initialPage<1||t.initialPage>n){return new Error("`initialPage` must be between 1 and "+n+".")}},itemLoadingContent:React.PropTypes.node,itemToJSXConverterFunc:React.PropTypes.func,jumpToFirstControlContent:React.PropTypes.node,jumpToLastControlContent:React.PropTypes.node,listWrapperProps:React.PropTypes.object,nextPageControlContent:React.PropTypes.node,numItemsPerPage:function e(t){if(index$9(t.numItemsPerPage)===false){return new Error("`numItemsPerPage` must be an integer.")}else if(t.numItemsPerPage<1){return new Error("`numItemsPerPage` must be greater than zero.")}},numPageToggles:React.PropTypes.number,position:React.PropTypes.oneOf(Object.keys(Pagination.positions)),previousPageControlContent:React.PropTypes.node,showJumpToFirst:React.PropTypes.bool,showJumpToLast:React.PropTypes.bool,showPaginationState:React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.func]),toggleWrapperProps:React.PropTypes.object,totalItems:React.PropTypes.number.isRequired};Pagination.defaultProps={after:null,before:null,customControlContent:null,getItem:noop,hidePagerIfNotNeeded:false,identifier:uuid(),initialPage:1,itemLoadingContent:null,itemToJSXConverterFunc:identity,jumpToFirstControlContent:"« First",jumpToLastControlContent:"Last »",listWrapperProps:{},nextPageControlContent:"Next ›",numItemsPerPage:10,numPageToggles:5,position:Pagination.positions.ABOVE,previousPageControlContent:"‹ Previous",showJumpToFirst:true,showJumpToLast:true,showPaginationState:true,toggleWrapperProps:{},totalItems:null};Pagination.internalKeys=Object.keys(Pagination.defaultProps);var index$11=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var transformProp=function e(){var t=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"];for(var n=0,o=t.length;n<o;n++){if(t[n]in document.documentElement.style){return t[n]}}return false}();function without(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}function values(e){return Object.keys(e).map(function(t){return e[t]})}var DEFAULT_CARET_COMPONENT=React__default.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},React__default.createElement("g",null,React__default.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),React__default.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"})));var Popover=function(e){inherits(t,e);function t(e){classCallCheck(this,t);var n=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.align=function(){var e=n.props.anchor instanceof HTMLElement?n.props.anchor:ReactDOM.findDOMNode(n.props.anchor);n.cacheViewportCartography(e);var t=Math.round(n.getNextDialogXPosition(e));var o=Math.round(n.getNextDialogYPosition(e));var r=n.getAlignmentCorrectionIfOverflowing(t,o);if(r&&n.didAlignmentChange(r)){return n.setState(r)}n.$caret.style.left=Math.round(n.getNextCaretXPosition(e))+"px";n.$caret.style.top=Math.round(n.getNextCaretYPosition(e))+"px";n.applyTranslation(n.$caret,index$11,0);n.applyTranslation(n.dialog.$wrapper,t,o)};n.state={anchorXAlign:e.anchorXAlign||e.preset.anchorXAlign,anchorYAlign:e.anchorYAlign||e.preset.anchorYAlign,selfXAlign:e.selfXAlign||e.preset.selfXAlign,selfYAlign:e.selfYAlign||e.preset.selfYAlign};return n}createClass(t,[{key:"cacheViewportCartography",value:function e(t){var n=t.getBoundingClientRect();var o=document.body.getBoundingClientRect();this.anchorLeft=n.left;this.anchorTop=n.top;this.anchorHeight=n.height;this.anchorWidth=n.width;this.bodyLeft=o.left*-1;this.bodyTop=o.top*-1}},{key:"getNextCaretXPosition",value:function e(n){var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var r=this.state,s=r.anchorXAlign,i=r.selfXAlign,a=r.anchorYAlign,p=r.selfYAlign;var l=t.position;var c=0;if(i!==l.MIDDLE&&(a===l.START&&p===l.END||a===l.END&&p===l.START)){if(s===l.START){c+=this.anchorWidth/2-o.clientWidth/2}else if(s===l.END){c+=this.dialog.$wrapper.clientWidth-this.anchorWidth/2-o.clientWidth/2}}return c}},{key:"getNextCaretYPosition",value:function e(n){var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$caret;var r=this.state,s=r.anchorXAlign,i=r.selfXAlign,a=r.anchorYAlign,p=r.selfYAlign;var l=t.position;var c=0;if(p!==l.MIDDLE&&(s===l.START&&i===l.END||s===l.END&&i===l.START)){if(a===l.START){c+=this.anchorHeight/2-o.clientWidth/2}else if(a===l.END){c+=this.dialog.$wrapper.clientHeight-this.anchorWidth/2-o.clientWidth/2}}return c}},{key:"getNextDialogXPosition",value:function e(n){var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var r=this.state,s=r.anchorXAlign,i=r.selfXAlign;var a=t.position;var p=this.anchorLeft+this.bodyLeft;switch(s){case a.MIDDLE:p+=this.anchorWidth/2;break;case a.END:p+=this.anchorWidth;break}switch(i){case a.MIDDLE:p-=o.clientWidth/2;break;case a.END:p-=o.clientWidth;break}return p}},{key:"getNextDialogYPosition",value:function e(n){var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.dialog.$wrapper;var r=this.state;var s=t.position;var i=this.anchorTop+this.bodyTop;var a=i+this.anchorHeight;switch(r.anchorYAlign){case s.START:a=i;break;case s.MIDDLE:a=i+this.anchorHeight/2;break}switch(r.selfYAlign){case s.MIDDLE:a-=o.clientHeight/2;break;case s.END:a-=o.clientHeight;break}return a}},{key:"getAlignmentCorrectionIfOverflowing",value:function e(n,o){if(!this.props.autoReposition){return false}var r=_extends({},this.state);var s=t.position;var i=this.dialog.$wrapper.clientWidth;var a=this.dialog.$wrapper.clientHeight;var p=document.body.scrollWidth;var l=document.body.scrollHeight;if(n+i>p){r.anchorXAlign=s.START;r.selfXAlign=s.END}if(n<0){r.anchorXAlign=s.END;r.selfXAlign=s.START}if(o+a>l){if(r.anchorXAlign===s.START&&r.selfXAlign===s.END||r.anchorXAlign===s.END&&r.selfXAlign===s.START){r.anchorYAlign=s.END}else{r.anchorYAlign=s.START}r.selfYAlign=s.END}if(o<0){if(r.anchorXAlign===s.START&&r.selfXAlign===s.END||r.anchorXAlign===s.END&&r.selfXAlign===s.START){r.anchorYAlign=s.START}else{r.anchorYAlign=s.END}r.selfYAlign=s.START}return r}},{key:"applyTranslation",value:function e(t,n,o){if(transformProp){t.style[transformProp]="translate("+n+"px, "+o+"px)"}else{t.style.left=n+"px";t.style.top=o+"px"}}},{key:"didAlignmentChange",value:function e(t){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.state;return t.anchorXAlign!==n.anchorXAlign||t.anchorYAlign!==n.anchorYAlign||t.selfXAlign!==n.selfXAlign||t.selfYAlign!==n.selfYAlign}},{key:"componentDidMount",value:function e(){this.align();window.addEventListener("resize",this.align,true)}},{key:"componentDidUpdate",value:function e(){this.align()}},{key:"componentWillUnmount",value:function e(){window.removeEventListener("resize",this.align,true)}},{key:"getClassAlignmentFragment",value:function e(n){var o=t.position;switch(n){case o.START:return"start";case o.MIDDLE:return"middle";case o.END:return"end"}}},{key:"render",value:function e(){var n=this,o;var r=this.getClassAlignmentFragment,s=this.props,i=this.state;return React__default.createElement(Portal,s.portalProps,React__default.createElement(Dialog,_extends({},omitKeysFromSourceObject(s,t.internalKeys),{ref:function e(t){return n.dialog=t},before:React__default.cloneElement(s.caretComponent,{ref:function e(t){return n.$caret=t},className:index$11("b-popover-caret",s.caretComponent.props.className)}),wrapperProps:_extends({},s.wrapperProps,{className:index$11("b-popover",s.wrapperProps.className,(o={},defineProperty(o,"b-popover-anchor-x-"+r(i.anchorXAlign),true),defineProperty(o,"b-popover-anchor-y-"+r(i.anchorYAlign),true),defineProperty(o,"b-popover-self-x-"+r(i.selfXAlign),true),defineProperty(o,"b-popover-self-y-"+r(i.selfYAlign),true),o))})})))}}]);return t}(React__default.PureComponent);Popover.position={START:"START",MIDDLE:"MIDDLE",END:"END"};Popover.preset={ABOVE:{anchorXAlign:Popover.position.MIDDLE,anchorYAlign:Popover.position.START,selfXAlign:Popover.position.MIDDLE,selfYAlign:Popover.position.END},BELOW:{anchorXAlign:Popover.position.MIDDLE,anchorYAlign:Popover.position.END,selfXAlign:Popover.position.MIDDLE,selfYAlign:Popover.position.START},LEFT:{anchorXAlign:Popover.position.START,anchorYAlign:Popover.position.MIDDLE,selfXAlign:Popover.position.END,selfYAlign:Popover.position.MIDDLE},RIGHT:{anchorXAlign:Popover.position.END,anchorYAlign:Popover.position.MIDDLE,selfXAlign:Popover.position.START,selfYAlign:Popover.position.MIDDLE}};Popover.presetValues=values(Popover.preset);Popover.propTypes=_extends({},Dialog.propTypes,{anchor:React.PropTypes.oneOfType([React.PropTypes.instanceOf(HTMLElement),React.PropTypes.shape({props:React.PropTypes.object,state:React.PropTypes.object})]).isRequired,anchorXAlign:React.PropTypes.oneOf(Object.keys(Popover.position)),anchorYAlign:React.PropTypes.oneOf(Object.keys(Popover.position)),autoReposition:React.PropTypes.bool,caretComponent:React.PropTypes.element,portalProps:React.PropTypes.object,preset:React.PropTypes.oneOf(Popover.presetValues),selfXAlign:React.PropTypes.oneOf(Object.keys(Popover.position)),selfYAlign:React.PropTypes.oneOf(Object.keys(Popover.position)),wrapperProps:React.PropTypes.object});Popover.defaultProps=_extends({},Dialog.defaultProps,{anchor:document.body,anchorXAlign:undefined,anchorYAlign:undefined,autoReposition:true,captureFocus:false,caretComponent:DEFAULT_CARET_COMPONENT,closeOnEscKey:true,closeOnOutsideClick:true,closeOnOutsideScroll:true,portalProps:{},preset:Popover.preset.BELOW,selfXAlign:undefined,selfYAlign:undefined,wrapperProps:{}});Popover.internalKeys=without(Object.keys(Popover.defaultProps),Dialog.internalKeys);var index$12=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var ProgressiveDisclosure=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.state={expanded:o.props.expanded},o.dispatchCallback=function(){o.props[o.state.expanded?"onExpand":"onHide"]()},o.handleClick=function(e){o.setState({expanded:!o.state.expanded},o.dispatchCallback);if(isFunction(o.props.toggleProps.onClick)){o.props.toggleProps.onClick(e)}},o.handleKeyDown=function(e){switch(e.key){case"Enter":e.preventDefault();o.setState({expanded:!o.state.expanded},o.dispatchCallback)}if(isFunction(o.props.toggleProps.onKeyDown)){o.props.toggleProps.onKeyDown(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentWillReceiveProps",value:function e(t){if(t.expanded!==this.props.expanded){this.setState({expanded:t.expanded},this.dispatchCallback)}}},{key:"renderContent",value:function e(){if(this.state.expanded){return React__default.createElement("div",{ref:"content",className:"b-disclosure-content"},this.props.children)}}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$12("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),React__default.createElement("div",_extends({},this.props.toggleProps,{ref:"toggle",className:index$12("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent())}}]);return t}(React__default.PureComponent);ProgressiveDisclosure.propTypes={children:React.PropTypes.node,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),expanded:React.PropTypes.bool,onExpand:React.PropTypes.func,onHide:React.PropTypes.func,teaser:React.PropTypes.node,teaserExpanded:React.PropTypes.node,toggleProps:React.PropTypes.object};ProgressiveDisclosure.defaultProps={children:null,component:"div",expanded:false,onExpand:noop,onHide:noop,teaser:null,teaserExpanded:null,toggleProps:{}};ProgressiveDisclosure.internalKeys=Object.keys(ProgressiveDisclosure.defaultProps);var index$13=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Progress=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"renderLabel",value:function e(){if(this.props.label){return React__default.createElement("div",_extends({},this.props.labelProps,{ref:"label",className:index$13("b-progress-label",this.props.labelProps.className)}),this.props.label)}}},{key:"renderCancel",value:function e(){if(this.props.onCancel){return React__default.createElement(Button,_extends({},this.props.cancelProps,{ref:"cancel",className:index$13("b-progress-cancel",this.props.cancelProps.className),onPressed:this.props.onCancel}))}}},{key:"renderProgress",value:function e(){return React__default.createElement("div",_extends({},this.props.progressProps,{ref:"progress",className:index$13("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":typeof this.props.progress==="undefined"}),role:"presentation",style:_extends({},this.props.progressProps.style,defineProperty({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function e(){return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$13("b-progress-wrapper",this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel())}}]);return t}(React__default.PureComponent);Progress.propTypes={cancelProps:React.PropTypes.object,component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),label:React.PropTypes.node,labelProps:React.PropTypes.object,onCancel:React.PropTypes.func,progress:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.number]),progressProps:React.PropTypes.object,tweenProperty:React.PropTypes.string};Progress.defaultProps={cancelProps:{},component:"div",label:null,labelProps:{},onCancel:null,progress:undefined,progressProps:{},tweenProperty:"width"};Progress.internalKeys=Object.keys(Progress.defaultProps);var index$14=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ");
}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Radio=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.uuid=uuid(),o.handleChange=function(e){if(e.target.checked){o.props.onSelected(e.target.value)}if(isFunction(o.props.inputProps.onChange)){o.props.inputProps.onChange(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"renderInput",value:function e(){return React__default.createElement("input",_extends({},this.props.inputProps,{ref:"input",type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:index$14("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function e(){if(this.props.label){return React__default.createElement("label",_extends({},this.props.labelProps,{ref:"label",className:index$14("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label)}}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$14("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]);return t}(React__default.PureComponent);Radio.propTypes={inputProps:React.PropTypes.object,label:React.PropTypes.node,labelProps:React.PropTypes.object,name:React.PropTypes.string.isRequired,onSelected:React.PropTypes.func,selected:React.PropTypes.bool,value:React.PropTypes.string.isRequired};Radio.defaultProps={inputProps:{},label:null,labelProps:{},name:"",onSelected:noop,selected:false,value:""};Radio.internalKeys=Object.keys(Radio.defaultProps);var index$15=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var index$16=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;var index$17=function e(t){if(typeof t!=="string"){throw new TypeError("Expected a string")}return t.replace(matchOperatorsRe,"\\$&")};var Typeahead=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),_initialiseProps.call(o),n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentWillMount",value:function e(){if(this.props.inputProps.value||this.props.inputProps.defaultValue){this.computeMatches()}}},{key:"componentDidMount",value:function e(){this.mounted=true;if(this.state.selectedEntityIndex>=0){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillReceiveProps",value:function e(t){if(t.entities!==this.props.entities){this.computeMatches(t.entities)}if(t.inputProps.value!==this.props.inputProps.value){this.updateInputState(t.inputProps.value);this.computeMatches()}}},{key:"componentDidUpdate",value:function e(t,n){if(this.state.entityMatchIndexes.length&&!n.entityMatchIndexes.length){this.refs.matches.scrollTop=0}if(this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==t.entities[n.selectedEntityIndex]){this.props.onEntityHighlighted(this.state.selectedEntityIndex)}}},{key:"componentWillUnmount",value:function e(){this.mounted=false}},{key:"handleMatchClick",value:function e(t){this.setState({selectedEntityIndex:t},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function e(t){var n=this.state.entityMatchIndexes;var o=n.length;var r=n.indexOf(this.state.selectedEntityIndex)+t;if(o){if(r<0){r=o-1}else if(r>=o){r=0}var s=n[r];var i=this.refs.matches;var a=i.scrollTop+i.clientHeight;var p=this.refs["match_$"+s];var l=p.offsetTop;var c=l+p.clientHeight;if(c>=a){i.scrollTop+=c-a}else if(l<=i.scrollTop){i.scrollTop=l}this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function e(){var t=this.getInputNode();return t.selectionStart===t.selectionEnd&&t.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function e(t,n){var o=n.text;var r=o.split(new RegExp("("+index$17(t)+")","ig"));var s=t.toLowerCase();var i=r.length;var a=-1;while(++a<i){if(r[a].toLowerCase()===s){r[a]=React__default.createElement("mark",{key:a,className:"b-typeahead-match-highlight"},r[a])}}return r}},{key:"markStartsWithMatchSubstring",value:function e(t,n){var o=n.text;var r=t.toLowerCase();var s=o.toLowerCase().indexOf(r);var i=s+r.length;return[React__default.createElement("span",{key:"0"},o.slice(0,s)),React__default.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},o.slice(s,i)),React__default.createElement("span",{key:"2"},o.slice(i))]}},{key:"getMarkingFunction",value:function e(){if(isString(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.markStartsWithMatchSubstring}return this.markFuzzyMatchSubstring}else if(isFunction(this.props.algorithm.marker)){return this.props.algorithm.marker}if(this.warnedMarker===undefined){this.warnedMarker=true;console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")}return this.markFuzzyMatchSubstring}},{key:"getFuzzyMatchIndexes",value:function e(t,n){var o=t.toLowerCase();return n.reduce(function e(t,n,r){return n.text.toLowerCase().indexOf(o)!==-1?t.push(r)&&t:t},[])}},{key:"getStartsWithMatchIndexes",value:function e(t,n){var o=t.toLowerCase();return n.reduce(function e(t,n,r){if(n.text.toLowerCase().indexOf(o)===0){t.push(r)}return t},[])}},{key:"getMatchingFunction",value:function e(){if(isString(this.props.algorithm)){if(this.props.algorithm===t.mode.STARTS_WITH){return this.getStartsWithMatchIndexes}return this.getFuzzyMatchIndexes}else if(isFunction(this.props.algorithm.matcher)){return this.props.algorithm.matcher}if(this.warnedMatcher===undefined){this.warnedMatcher=true;console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")}return this.getFuzzyMatchIndexes}},{key:"computeMatches",value:function e(t){var n=this;this.setState(function(e,o){var r=t||o.entities;var s=e.input;var i=s===""?[]:n.getMatchIndexes(s,r);return{selectedEntityIndex:i.length?i[0]:-1,entityMatchIndexes:i}})}},{key:"renderNotification",value:function e(){return React__default.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function e(){if(this.props.hint){var t=this.state.input;var n=this.getSelectedEntityText();var o="";if(n&&n.toLowerCase().indexOf(t.toLowerCase())===0){o=n.replace(new RegExp(t,"i"),t)}return React__default.createElement("div",_extends({},this.props.hintProps,{ref:"hint",className:index$16("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),o)}}},{key:"renderMatches",value:function e(){var t=this;if(this.state.entityMatchIndexes.length){var n=this.props.matchWrapperProps;return React__default.createElement("div",_extends({},n,{ref:"matches",className:index$16("b-typeahead-match-wrapper",n.className)}),this.state.entityMatchIndexes.map(function(e){var n=t.props.entities[e];var o=n.className,r=n.text,s=objectWithoutProperties(n,["className","text"]);return React__default.createElement("div",_extends({},s,{ref:"match_$"+e,className:index$16("b-typeahead-match",o,{"b-typeahead-match-selected":t.state.selectedEntityIndex===e}),key:r,onClick:t.handleMatchClick.bind(t,e)}),t.markMatchSubstring(t.state.input,n))}))}}},{key:"render",value:function e(){var n=this.props,o=this.state;return React__default.createElement("div",_extends({},omitKeysFromSourceObject(n,t.internalKeys),{ref:"wrapper",className:index$16("b-typeahead-wrapper",n.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),React__default.createElement(Input,_extends({},getIntersection(n,Input.defaultProps),{ref:"input","aria-controls":o.id,inputProps:_extends({},n.inputProps,{className:index$16("b-typeahead",n.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]);return t}(React__default.PureComponent);Typeahead.mode={STARTS_WITH:"STARTS_WITH",FUZZY:"FUZZY"};Typeahead.propTypes=_extends({},Input.propTypes,{algorithm:React.PropTypes.oneOfType([React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY]),React.PropTypes.shape({marker:React.PropTypes.oneOfType([React.PropTypes.func,React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])]),matcher:React.PropTypes.oneOfType([React.PropTypes.func,React.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])])})]),clearPartialInputOnSelection:React.PropTypes.bool,entities:React.PropTypes.arrayOf(React.PropTypes.shape({text:React.PropTypes.string})),hint:React.PropTypes.bool,hintProps:React.PropTypes.object,matchWrapperProps:React.PropTypes.object,offscreenClass:React.PropTypes.string,onComplete:React.PropTypes.func,onEntityHighlighted:React.PropTypes.func,onEntitySelected:React.PropTypes.func});Typeahead.defaultProps=_extends({},Input.defaultProps,{algorithm:Typeahead.mode.FUZZY,clearPartialInputOnSelection:false,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:noop,onEntityHighlighted:noop,onEntitySelected:noop});Typeahead.internalKeys=Object.keys(Typeahead.defaultProps);var _initialiseProps=function e(){var t=this;this.state={entityMatchIndexes:[],id:uuid(),isControlled:isString(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1};this.mounted=false;this.updateInputState=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return t.setState({input:e})};this.getSelectedEntityText=function(){var e=t.props.entities[t.state.selectedEntityIndex];return e?e.text:""};this.resetMatches=function(){if(t.mounted){t.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})}};this.getInputNode=function(){return t.refs.input.refs.field};this.select=function(){var e=t.getInputNode();e.selectionStart=0;e.selectionEnd=t.getValue().length};this.focus=function(){return t.getInputNode().focus()};this.getValue=function(){return t.refs.input.getValue()};this.setValue=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";t.refs.input.setValue(e);t.updateInputState(e);t.resetMatches();t.focus()};this.setValueWithSelectedEntity=function(){t.props.onEntitySelected(t.state.selectedEntityIndex);if(t.props.clearPartialInputOnSelection){t.setValue("")}else{t.setValue(t.getSelectedEntityText())}window.setTimeout(t.resetMatches,0)};this.markMatchSubstring=function(){return t.getMarkingFunction().apply(undefined,arguments)};this.getMatchIndexes=function(){return t.getMatchingFunction().apply(undefined,arguments)};this.handleChange=function(e){if(t.state.isControlled===false){t.updateInputState(e.target.value);t.computeMatches()}if(isFunction(t.props.inputProps.onChange)){t.props.inputProps.onChange(e)}};this.handleKeyDown=function(e){switch(e.key){case"ArrowLeft":if(e.target.selectionStart>1){e.stopPropagation()}break;case"Tab":case"ArrowRight":if(t.state.selectedEntityIndex!==-1&&t.cursorAtEndOfInput()&&t.getInputNode()===e.target&&!e.shiftKey){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}break;case"ArrowUp":e.nativeEvent.preventDefault();t.selectMatch(-1);t.focus();break;case"ArrowDown":e.nativeEvent.preventDefault();t.selectMatch(1);t.focus();break;case"Escape":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){t.resetMatches()}break;case"Enter":if(t.state.selectedEntityIndex!==-1&&t.getInputNode()===e.target){e.nativeEvent.preventDefault();t.setValueWithSelectedEntity()}else{t.props.onComplete(t.state.input,e)}break}if(isFunction(t.props.onKeyDown)){t.props.onKeyDown(e)}}};var first=function e(t){return t[0]};var last=function e(t){return t[t.length-1]};var TokenizedInput=function(e){inherits(t,e);function t(){var e;var n,o,r;classCallCheck(this,t);for(var s=arguments.length,i=Array(s),a=0;a<s;a++){i[a]=arguments[a]}return r=(n=(o=possibleConstructorReturn(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o),o.focus=function(){return o.refs.typeahead.focus()},o.getInputNode=function(){return o.refs.typeahead.getInputNode()},o.getSelectedEntityText=function(){return o.refs.typeahead.getSelectedEntityText()},o.getValue=function(){return o.refs.typeahead.getValue()},o.select=function(){return o.refs.typeahead.select()},o.setValue=function(e){return o.refs.typeahead.setValue(e)},o.add=function(e){if(o.props.tokens.indexOf(e)===-1){o.props.handleAddToken(e)}},o.handleInputClick=function(e){o.clearSelection();if(isFunction(o.props.inputProps.onClick)){o.props.inputProps.onClick(e)}},o.handleInputFocus=function(e){o.clearSelection();if(isFunction(o.props.inputProps.onFocus)){o.props.inputProps.onFocus(e)}},o.handleKeyDown=function(e){switch(e.which){case 37:o.selectPreviousToken(e.shiftKey);break;case 39:o.selectNextToken(e.shiftKey);break;case 8:if(o.props.tokensSelected.length){o.remove(o.props.tokensSelected);o.focus()}break;case 65:if(e.metaKey){e.preventDefault();o.focus();o.select();o._suppressNextTokenSelection=true;o.props.handleNewSelection(o.props.tokens)}}if(isFunction(o.props.onKeyDown)){o.props.onKeyDown(e)}},n),possibleConstructorReturn(o,r)}createClass(t,[{key:"componentDidUpdate",value:function e(t){var n=t.tokensSelected;var o=this.props.tokensSelected;if(this.props.tokens.length>t.tokens.length){this.setValue("")}if(this._suppressNextTokenSelection){this._suppressNextTokenSelection=false;return}if(n!==o&&o.length!==0){if(o.length===1||o[0]!==n[0]){return this.refs["token_"+o[0]].focus()}else if(last(o)!==last(n)){return this.refs["token_"+last(o)].focus()}this.refs["token_"+o[0]].focus()}}},{key:"remove",value:function e(t){var n=this;var o=(Array.isArray(t)?t:[t]).filter(function(e){return n.props.tokens.indexOf(e)!==-1});if(o.length){this.props.handleRemoveTokens(o)}}},{key:"selectToken",value:function e(t){this.props.handleNewSelection([t])}},{key:"selectTokens",value:function e(t){this.props.handleNewSelection(t)}},{key:"selectPreviousToken",value:function e(t){var n=this.props.tokensSelected;var o=this.props.tokens;if(n.length===1&&first(n)===first(o)){return}if(n.length===0){this.selectToken(last(o))}else{var r=o[o.indexOf(first(n))-1];this.selectTokens(t?[r].concat(n):[r])}}},{key:"selectNextToken",value:function e(t){var n=this.props.tokensSelected;var o=this.props.tokens;if(n.length===0){return}if(last(n)===last(o)){this.clearSelection();this.focus()}else{var r=o[o.indexOf(last(n))+1];this.selectTokens(t?n.concat(r):[r])}}},{key:"clearSelection",value:function e(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function e(t,n){n.stopPropagation();this.remove(t);this.focus();if(this.props.tokenCloseComponent.props.onClick){this.props.tokenCloseComponent.props.onClick(n)}}},{key:"renderTokenClose",value:function e(t){if(this.props.tokenCloseVisible){return React__default.cloneElement(this.props.tokenCloseComponent,{className:index$15("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,t)})}}},{key:"handleTokenKeyDown",value:function e(t,n){switch(n.which){case 13:case 32:this.selectToken(t);n.preventDefault();break;case 8:this.remove(t);this.focus();n.preventDefault();break}}},{key:"renderTokens",value:function e(){var t=this;return React__default.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(e){return React__default.createElement("div",{ref:"token_"+e,key:e,className:index$15("b-tokenfield-token",{"b-tokenfield-token-selected":t.props.tokensSelected.indexOf(e)!==-1}),onClick:t.selectToken.bind(t,e),onKeyDown:t.handleTokenKeyDown.bind(t,e),tabIndex:"0"},t.props.entities[e].text,t.renderTokenClose(e))}))}},{key:"render",value:function e(){return React__default.createElement("div",_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{ref:"wrapper",className:index$15("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),React__default.createElement(Typeahead,_extends({},getIntersection(this.props,Typeahead.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearPartialInputOnSelection:true,inputProps:_extends({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]);return t}(React__default.PureComponent);TokenizedInput.propTypes=_extends({},Typeahead.propTypes,{handleAddToken:React.PropTypes.func,handleRemoveTokens:React.PropTypes.func,handleNewSelection:React.PropTypes.func,tokenCloseComponent:React.PropTypes.element,tokenCloseVisible:React.PropTypes.bool,tokens:React.PropTypes.arrayOf(React.PropTypes.number),tokensSelected:React.PropTypes.arrayOf(React.PropTypes.number)});TokenizedInput.defaultProps=_extends({},Typeahead.defaultProps,{handleAddToken:noop,handleRemoveTokens:noop,handleNewSelection:noop,tokenCloseComponent:React__default.createElement("div",null,"X"),tokenCloseVisible:true,tokens:[],tokensSelected:[]});TokenizedInput.internalKeys=Object.keys(TokenizedInput.defaultProps);var index$18=createCommonjsModule(function(e){(function(){"use strict";var t={}.hasOwnProperty;function n(){var e=[];for(var o=0;o<arguments.length;o++){var r=arguments[o];if(!r)continue;var s=typeof r==="undefined"?"undefined":_typeof(r);if(s==="string"||s==="number"){e.push(r)}else if(Array.isArray(r)){e.push(n.apply(null,r))}else if(s==="object"){for(var i in r){if(t.call(r,i)&&r[i]){e.push(i)}}}}return e.join(" ")}if(typeof e!=="undefined"&&e.exports){e.exports=n}else if(typeof define==="function"&&_typeof(define.amd)==="object"&&define.amd){define("classnames",[],function(){return n})}else{window.classNames=n}})()});var Tooltip=function(e){inherits(t,e);function t(){classCallCheck(this,t);return possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}createClass(t,[{key:"render",value:function e(){var n=this.props.position;return React__default.createElement(this.props.component,_extends({},omitKeysFromSourceObject(this.props,t.internalKeys),{className:index$18("b-tooltip",this.props.className,{"b-tooltip-position-above":n===t.position.ABOVE,"b-tooltip-position-below":n===t.position.BELOW,"b-tooltip-position-before":n===t.position.BEFORE,"b-tooltip-position-after":n===t.position.AFTER}),"data-tooltip":this.props.text,"aria-label":this.props["aria-label"]||this.props.text}),this.props.children)}}]);return t}(React__default.PureComponent);Tooltip.position={ABOVE:"ABOVE",BELOW:"BELOW",BEFORE:"BEFORE",AFTER:"AFTER"};Tooltip.propTypes={component:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.func]),position:React.PropTypes.oneOf(Object.keys(Tooltip.position)),text:React.PropTypes.string};Tooltip.defaultProps={component:"div",position:Tooltip.position.ABOVE,text:""};Tooltip.internalKeys=Object.keys(Tooltip.defaultProps);exports.ArrowKeyNavigation=ArrowKeyNavigation;exports.Button=Button;exports.Checkbox=Checkbox;exports.CheckboxGroup=CheckboxGroup;exports.Dialog=Dialog;exports.FittedText=FittedText;exports.Image=Image;exports.Input=Input;exports.Modal=Modal;exports.Pagination=Pagination;exports.Popover=Popover;exports.Portal=Portal;exports.ProgressiveDisclosure=ProgressiveDisclosure;exports.Progress=Progress;exports.Radio=Radio;exports.SegmentedControl=SegmentedControl;exports.TokenizedInput=TokenizedInput;exports.Tooltip=Tooltip;exports.Typeahead=Typeahead;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
