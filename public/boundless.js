!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],t):"object"==typeof exports?exports.Boundless=t(require("react"),require("react-dom")):e.Boundless=t(e.React,e.ReactDOM)}(this,function(e,t){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=32)}([function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.keys(e).reduce(function(n,r){return t.indexOf(r)===-1&&(n[r]=e[r]),n},{})}t.a=r},function(t,n){t.exports=e},function(e,t,n){var r,o,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){"use strict";function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r="undefined"==typeof n?"undefined":s(n);if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n))e.push(i.apply(null,n));else if("object"===r)for(var o in n)a.call(n,o)&&n[o]&&e.push(o)}}return e.join(" ")}var a={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=i:"object"===s(n(17))&&n(17)?(r=[],o=function(){return i}.apply(t,r),!(void 0!==o&&(e.exports=o))):window.classNames=i}()},function(e,t,n){"use strict";t.a=function(e){return"function"==typeof e}},function(e,t,n){"use strict";function r(){}t.a=r},function(e,t,n){"use strict";function r(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(e){return(e^16*Math.random()>>e/4).toString(16)})}t.a=r},function(e,n){e.exports=t},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(6),l=n.n(c),u=n(0),f=n(5),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=function(e){function t(){var e,r,i,a;o(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return r=i=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.id=n.i(f.a)(),i.$portal=null,i.$passenger=null,a=r,s(i,a)}return i(t,e),d(t,[{key:"componentWillMount",value:function(){this.$portal=document.createElement("div"),this.props.destination.appendChild(this.$portal),this.renderPortalledContent()}},{key:"renderPortalledContent",value:function(){var e=p.a.isValidElement(this.props.children)?this.props.children:p.a.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id,l.a.unstable_renderSubtreeIntoContainer(this,e,this.$portal),this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function(){l.a.unmountComponentAtNode(this.$portal),this.props.destination.removeChild(this.$portal)}},{key:"render",value:function(){return p.a.createElement("span",h({},n.i(u.a)(this.props,t.internalKeys),r({},t.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]),t}(p.a.Component);y.propTypes={children:p.a.PropTypes.node,destination:a.PropTypes.instanceOf(HTMLElement),portalId:a.PropTypes.string},y.defaultProps={children:null,destination:document.body,portalId:null},y.internalKeys=Object.keys(y.defaultProps),y.PORTAL_DATA_ATTRIBUTE="data-portal-id",t.a=y},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.handleClick=function(e){i.props.disabled||(i.toggleState(e),n.i(l.a)(i.props.onClick)&&i.props.onClick(e))},i.handleKeyDown=function(e){if(!i.props.disabled){switch(e.key){case"Enter":case"Space":e.preventDefault(),i.toggleState(e)}n.i(l.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)}},a=s,o(i,a)}return s(t,e),d(t,[{key:"toggleState",value:function(e){this.props[this.props.pressed?"onUnpressed":"onPressed"](e)}},{key:"render",value:function(){return a.a.createElement(this.props.component,h({},n.i(f.a)(this.props,t.internalKeys),{ref:"button",className:c()("b-button",this.props.className,{"b-button-pressable":"undefined"!=typeof this.props.pressed,"b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]),t}(a.a.PureComponent);y.propTypes={children:i.PropTypes.node,component:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.func]),onClick:i.PropTypes.func,onPressed:i.PropTypes.func,onUnpressed:i.PropTypes.func,pressed:i.PropTypes.bool},y.defaultProps={children:null,component:"button",onClick:u.a,onPressed:u.a,onUnpressed:u.a,pressed:void 0},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(7),u=n(3),f=n(4),h=n(0),d=n(5),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),m=Array.prototype.slice,v=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.mounted=!1,i.uuidHeader=n.i(d.a)(),i.uuidBody=n.i(d.a)(),i.handleFocus=function(e){if(i.props.captureFocus){var t=e.explicitOriginalTarget||e.relatedTarget;i.isPartOfDialog(t)&&!i.isPartOfDialog(e.target)&&(e.preventDefault(),t.focus())}else if(i.shouldDialogCloseOnEvent("closeOnOutsideFocus",e)&&!i.isPartOfDialog(e.target))return window.setTimeout(i.props.onClose,0)},i.handleKeyDown=function(e){"Escape"===e.key&&i.shouldDialogCloseOnEvent("closeOnEscKey",e)&&window.setTimeout(i.props.onClose,0),n.i(u.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},i.handleInsideClick=function(e){i.shouldDialogCloseOnEvent("closeOnInsideClick",e)&&window.setTimeout(i.props.onClose,0)},i.handleOutsideClick=function(e){i.shouldDialogCloseOnEvent("closeOnOutsideClick",e)&&!i.isPartOfDialog(e.target)&&window.setTimeout(i.props.onClose,0)},i.handleOutsideScrollWheel=function(e){i.shouldDialogCloseOnEvent("closeOnOutsideScroll",e)&&!i.isPartOfDialog(e.target)&&window.setTimeout(i.props.onClose,0)},a=s,o(i,a)}return s(t,e),b(t,[{key:"isPartOfDialog",value:function(e){if(!e||e===window)return!1;var t=[this.$wrapper].concat(m.call(this.$wrapper.querySelectorAll("["+l.a.PORTAL_DATA_ATTRIBUTE+"]")).map(function(e){return document.getElementById(e.getAttribute(l.a.PORTAL_DATA_ATTRIBUTE))})),n=e.nodeType!==Node.ELEMENT_NODE?e.parentNode:e;return t.some(function(e){return e.contains(n)})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick,!0),window.addEventListener("contextmenu",this.handleOutsideClick,!0),window.addEventListener("focus",this.handleFocus,!0),window.addEventListener("scroll",this.handleOutsideScrollWheel,!0),window.addEventListener("wheel",this.handleOutsideScrollWheel,!0),this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)&&this.$dialog.focus()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick,!0),window.removeEventListener("contextmenu",this.handleOutsideClick,!0),window.removeEventListener("focus",this.handleFocus,!0),window.removeEventListener("scroll",this.handleOutsideScrollWheel,!0),window.removeEventListener("wheel",this.handleOutsideScrollWheel,!0)}},{key:"shouldDialogCloseOnEvent",value:function(e,t){return n.i(u.a)(this.props[e])?this.props[e](t):this.props[e]}},{key:"renderBody",value:function(){return a.a.createElement("div",y({},this.props.bodyProps,{id:this.props.bodyProps.id||this.uuidBody,className:c()("b-dialog-body",this.props.bodyProps.className)}),this.props.children)}},{key:"renderFooter",value:function(){if(this.props.footer)return a.a.createElement("footer",y({},this.props.footerProps,{className:c()("b-dialog-footer",this.props.footerProps.className)}),this.props.footer)}},{key:"renderHeader",value:function(){if(this.props.header)return a.a.createElement("header",y({},this.props.headerProps,{id:this.props.headerProps.id||this.uuidHeader,className:c()("b-dialog-header",this.props.headerProps.className)}),this.props.header)}},{key:"renderFocusBoundary",value:function(){if(this.props.captureFocus)return a.a.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}},{key:"render",value:function(){var e=this;return a.a.createElement("div",y({},this.props.wrapperProps,{ref:function(t){return e.$wrapper=t},className:c()("b-dialog-wrapper",this.props.wrapperProps.className),tabIndex:"0"}),this.renderFocusBoundary(),this.props.before,a.a.createElement("div",y({},n.i(h.a)(this.props,t.internalKeys),{ref:function(t){return e.$dialog=t},className:c()("b-dialog",this.props.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:"dialog","aria-labelledby":this.uuidHeader,"aria-describedby":this.uuidBody,tabIndex:"0"}),this.renderHeader(),this.renderBody(),this.renderFooter()),this.props.after,this.renderFocusBoundary())}}]),t}(a.a.PureComponent);v.propTypes={after:i.PropTypes.node,before:i.PropTypes.node,bodyProps:i.PropTypes.object,captureFocus:i.PropTypes.bool,children:i.PropTypes.node,closeOnEscKey:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnInsideClick:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnOutsideClick:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnOutsideFocus:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),closeOnOutsideScroll:i.PropTypes.oneOfType([i.PropTypes.bool,i.PropTypes.func]),footer:i.PropTypes.node,footerProps:i.PropTypes.object,header:i.PropTypes.node,headerProps:i.PropTypes.object,onClose:i.PropTypes.func,wrapperProps:i.PropTypes.object},v.defaultProps={after:null,before:null,bodyProps:{},captureFocus:!0,children:null,closeOnEscKey:!1,closeOnInsideClick:!1,closeOnOutsideClick:!1,closeOnOutsideFocus:!1,closeOnOutsideScroll:!1,footer:null,footerProps:{},header:null,headerProps:{},onClose:f.a,wrapperProps:{}},v.internalKeys=Object.keys(v.defaultProps),t.a=v},function(e,t,n){"use strict";function r(e,t){return Object.keys(t).reduce(function(t,n){return n in e&&(t[n]=e[n]),t},{})}t.a=r},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(6),c=(n.n(p),n(3)),l=n(0),u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),h=function(e){function t(){var e,s,i,p;r(this,t);for(var l=arguments.length,u=Array(l),f=0;f<l;f++)u[f]=arguments[f];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),i.state={activeChildIndex:i.props.defaultActiveChildIndex},i.handleKeyDown=function(e){switch(e.key){case"ArrowUp":i.props.mode!==t.mode.VERTICAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(-1));break;case"ArrowLeft":i.props.mode!==t.mode.HORIZONTAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(-1));break;case"ArrowDown":i.props.mode!==t.mode.VERTICAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(1));break;case"ArrowRight":i.props.mode!==t.mode.HORIZONTAL&&i.props.mode!==t.mode.BOTH||(e.preventDefault(),i.moveFocus(1))}n.i(c.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},i.handleFocus=function(e){if(e.target.hasAttribute("data-focus-index")){var t=parseInt(e.target.getAttribute("data-focus-index"),10),n=a.a.Children.toArray(i.props.children)[t];i.setState({activeChildIndex:t}),n.props.onFocus&&n.props.onFocus(e)}},p=s,o(i,p)}return s(t,e),f(t,[{key:"componentDidUpdate",value:function(e,t){this.state.activeChildIndex!==t.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"componentWillReceiveProps",value:function(e){if(0!==this.state.activeChildIndex){var t=e.children?a.a.Children.count(e.children):0;0===t?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=t&&this.setState({activeChildIndex:t-1})}}},{key:"setFocus",value:function(e){var t=(this.refs.wrapper instanceof HTMLElement?this.refs.wrapper:n.i(p.findDOMNode)(this.refs.wrapper)).children[e];t&&t.hasAttribute("data-skip")?this.moveFocus(t.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):t&&document.activeElement!==t&&t.focus()}},{key:"moveFocus",value:function(e){var t=this.props.children?a.a.Children.count(this.props.children):0,n=this.state.activeChildIndex+e;n>=t?n=0:n<0&&(n=t-1),this.setState({activeChildIndex:n})}},{key:"children",value:function(){var e=this;return a.a.Children.map(this.props.children,function(t,n){return a.a.cloneElement(t,{"data-focus-index":n,"data-skip":parseInt(t.props.tabIndex,10)===-1||void 0,key:t.key||n,tabIndex:e.state.activeChildIndex===n?0:-1})})}},{key:"render",value:function(){return a.a.createElement(this.props.component,u({},n.i(l.a)(this.props,t.internalKeys),{ref:"wrapper",onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.children())}}]),t}(a.a.PureComponent);h.mode={HORIZONTAL:"HORIZONTAL",VERTICAL:"VERTICAL",BOTH:"BOTH"},h.propTypes={component:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.func]),defaultActiveChildIndex:i.PropTypes.number,mode:i.PropTypes.oneOf([h.mode.BOTH,h.mode.HORIZONTAL,h.mode.VERTICAL])},h.defaultProps={component:"div",defaultActiveChildIndex:0,mode:h.mode.BOTH},h.internalKeys=Object.keys(h.defaultProps),t.a=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=n(5),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),b=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.id=n.i(h.a)(),i.handleChange=function(e){i.props.inputProps.disabled||(i.props[i.props.inputProps.checked?"onUnchecked":"onChecked"](i.props.inputProps.name),n.i(l.a)(i.props.inputProps.onChange)&&i.props.inputProps.onChange(e))},i.handleClick=function(e){i.props.inputProps.disabled||(i.refs.input.focus(),n.i(l.a)(i.props.inputProps.onClick)&&i.props.inputProps.onClick(e))},a=s,o(i,a)}return s(t,e),y(t,[{key:"componentDidMount",value:function(){this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"componentDidUpdate",value:function(e){e.inputProps.indeterminate!==this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"setIndeterminate",value:function(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function(){return a.a.createElement("input",d({},n.i(f.a)(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:c()("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function(){if(this.props.label)return a.a.createElement("label",d({},this.props.labelProps,{ref:"label",className:c()("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}},{key:"render",value:function(){return a.a.createElement("div",d({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),t}(a.a.PureComponent);b.propTypes={inputProps:i.PropTypes.shape({checked:i.PropTypes.bool,className:i.PropTypes.string,disabled:i.PropTypes.bool,id:i.PropTypes.string,indeterminate:i.PropTypes.bool,onChange:i.PropTypes.func,onClick:i.PropTypes.func,name:i.PropTypes.string,value:i.PropTypes.string}),label:i.PropTypes.node,labelProps:i.PropTypes.object,onChecked:i.PropTypes.func,onUnchecked:i.PropTypes.func},b.defaultProps={inputProps:{checked:!1,indeterminate:!1},label:null,labelProps:{},onChecked:u.a,onUnchecked:u.a},b.internalKeys=Object.keys(b.defaultProps),t.a=b},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(16),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),f=0;f<p;f++)c[f]=arguments[f];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.state={input:"",isControlled:n.i(u.a)(i.props.inputProps.value),isFocused:!1},i.setInputValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return i.setState({input:e})},i.getValue=function(){return i.refs.field.value},i.handleBlur=function(e){i.setState({isFocused:!1}),n.i(l.a)(i.props.inputProps.onBlur)===!0&&i.props.inputProps.onBlur(e)},i.handleFocus=function(e){i.setState({isFocused:!0}),n.i(l.a)(i.props.inputProps.onFocus)===!0&&i.props.inputProps.onFocus(e)},i.handleChange=function(e){i.state.isControlled===!1&&i.setInputValue(e.target.value),n.i(l.a)(i.props.inputProps.onChange)===!0&&i.props.inputProps.onChange(e)},a=s,o(i,a)}return s(t,e),d(t,[{key:"componentWillMount",value:function(){return this.state.isControlled===!0?this.setInputValue(this.props.inputProps.value):void this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function(e){e.inputProps.value!==this.props.inputProps.value&&this.setInputValue(e.inputProps.value)}},{key:"setValue",value:function(e){this.setInputValue(e),this.refs.field.value=e,this.state.isControlled===!0&&(this.refs.field.dispatchEvent(new Event("input",{bubbles:!0})),this.refs.field.dispatchEvent(new Event("change",{bubbles:!0})))}},{key:"getPlaceholderText",value:function(){var e=""!==this.state.input,t=this.props.hidePlaceholderOnFocus===!0?this.state.isFocused===!1&&e===!1:e===!1;return t?this.props.inputProps.placeholder:""}},{key:"renderPlaceholder",value:function(){return a.a.createElement("div",{ref:"placeholder",className:"b-input-placeholder b-input"},this.getPlaceholderText())}},{key:"render",value:function(){var e=this.props;return a.a.createElement("div",h({},n.i(f.a)(e,t.internalKeys),{ref:"wrapper",className:c()("b-input-wrapper",e.className),title:this.getPlaceholderText()}),this.renderPlaceholder(),a.a.createElement("input",h({},e.inputProps,{ref:"field",className:c()("b-input",e.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})))}}]),t}(a.a.PureComponent);y.propTypes={hidePlaceholderOnFocus:i.PropTypes.bool,inputProps:i.PropTypes.shape({defaultValue:i.PropTypes.string,onBlur:i.PropTypes.func,onFocus:i.PropTypes.func,onChange:i.PropTypes.func,placeholder:i.PropTypes.string,type:i.PropTypes.string,value:i.PropTypes.string})},y.defaultProps={hidePlaceholderOnFocus:!0,inputProps:{type:"text"}},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(6),c=(n.n(p),n(2)),l=n.n(c),u=n(8),f=n(3),h=n(4),d=n(0),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),m=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.state={indexOfOptionInFocus:null},i.handleKeyDown=function(e){var t=e.key,r=i.state.indexOfOptionInFocus;"ArrowLeft"===t?(i.setFocus(i.getPreviousOptionIndex(r)),e.preventDefault()):"ArrowRight"===t?(i.setFocus(i.getNextOptionIndex(r)),e.preventDefault()):"Enter"===t&&(i.handleOptionClick(i.props.options[r]),e.preventDefault()),n.i(f.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},a=s,o(i,a)}return s(t,e),b(t,[{key:"currentValue",value:function(){var e=void 0;return this.props.options.some(function(t){if(t.selected)return e=t.value,!0}),e}},{key:"setFocus",value:function(e){n.i(p.findDOMNode)(this.refs["option_$"+e]).focus()}},{key:"getNextOptionIndex",value:function(e){var t=e+1;return t<this.props.options.length?t:0}},{key:"getPreviousOptionIndex",value:function(e){var t=e-1;return t<0?this.props.options.length-1:t}},{key:"handleOptionBlur",value:function(e,t){this.state.indexOfOptionInFocus===this.props.options.indexOf(e)&&this.setState({indexOfOptionInFocus:null}),n.i(f.a)(e.onBlur)&&e.onBlur(t)}},{key:"handleOptionClick",value:function(e,t){this.props.onOptionSelected(e.value),n.i(f.a)(e.onClick)&&e.onClick(t)}},{key:"handleOptionFocus",value:function(e,t){this.setState({indexOfOptionInFocus:this.props.options.indexOf(e)}),n.i(f.a)(e.onFocus)&&e.onFocus(t)}},{key:"renderOptions",value:function(){var e=this;return this.props.options.map(function(r,o){return a.a.createElement(u.a,y({},n.i(d.a)(r,t.internalChildKeys),{role:"radio","aria-checked":String(r.selected),ref:"option_$"+o,key:r.value,className:l()("b-segmented-control-option",r.className,{"b-segmented-control-option-selected":r.selected}),tabIndex:r.selected?"0":"-1",onBlur:e.handleOptionBlur.bind(e,r),onPressed:e.handleOptionClick.bind(e,r),onFocus:e.handleOptionFocus.bind(e,r)}),r.content)})}},{key:"render",value:function(){return a.a.createElement("div",y({},n.i(d.a)(this.props,t.internalKeys),{ref:"wrapper",role:"radiogroup",className:l()("b-segmented-control",this.props.className),onKeyDown:this.handleKeyDown}),this.renderOptions())}}]),t}(a.a.PureComponent);m.propTypes={onOptionSelected:i.PropTypes.func,options:function(e){if(e.options.length<2)throw new Error("Must provide at least two options.");var t=e.options.some(function(e){if(!("selected"in e))return!0});if(t)throw new Error("Must provide a `selected` prop for each option.");var n=!1,r=e.options.some(function(e){if(e.selected){if(n)return!0;n=!0}});if(r)throw new Error("Encountered multiple options with `selected: true`. There can be only one.");if(e.options.some(function(e){return"undefined"==typeof e.value}))throw new Error("Must provide a `value` prop for each option.")}},m.defaultProps={onOptionSelected:h.a,options:[]},m.internalKeys=Object.keys(m.defaultProps),m.internalChildKeys=["content","value","selected"],t.a=m},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(2),l=n.n(c),u=n(30),f=n.n(u),h=n(13),d=n(10),y=n(3),b=n(16),m=n(4),v=n(0),P=n(5),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e){function t(){var e,n,r,i;o(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=r=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),w.call(r),i=n,s(r,i)}return i(t,e),O(t,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(e){e.entities!==this.props.entities&&this.computeMatches(e.entities),e.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(e.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(e,t){this.state.entityMatchIndexes.length&&!t.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==e.entities[t.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(e){this.setState({selectedEntityIndex:e},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(e){var t=this.state.entityMatchIndexes,n=t.length,r=t.indexOf(this.state.selectedEntityIndex)+e;if(n){r<0?r=n-1:r>=n&&(r=0);var o=t[r],s=this.refs.matches,i=s.scrollTop+s.clientHeight,a=this.refs["match_$"+o],p=a.offsetTop,c=p+a.clientHeight;c>=i?s.scrollTop+=c-i:p<=s.scrollTop&&(s.scrollTop=p),
this.setState({selectedEntityIndex:o})}}},{key:"cursorAtEndOfInput",value:function(){var e=this.getInputNode();return e.selectionStart===e.selectionEnd&&e.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(e,t){for(var n=t.text,r=n.split(new RegExp("("+f()(e)+")","ig")),o=e.toLowerCase(),s=r.length,i=-1;++i<s;)r[i].toLowerCase()===o&&(r[i]=p.a.createElement("mark",{key:i,className:"b-typeahead-match-highlight"},r[i]));return r}},{key:"markStartsWithMatchSubstring",value:function(e,t){var n=t.text,r=e.toLowerCase(),o=n.toLowerCase().indexOf(r),s=o+r.length;return[p.a.createElement("span",{key:"0"},n.slice(0,o)),p.a.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},n.slice(o,s)),p.a.createElement("span",{key:"2"},n.slice(s))]}},{key:"getMarkingFunction",value:function(){return n.i(b.a)(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:n.i(y.a)(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return t.text.toLowerCase().indexOf(n)!==-1?e.push(r)&&e:e},[])}},{key:"getStartsWithMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return 0===t.text.toLowerCase().indexOf(n)&&e.push(r),e},[])}},{key:"getMatchingFunction",value:function(){return n.i(b.a)(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:n.i(y.a)(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(e){var t=this;this.setState(function(n,r){var o=e||r.entities,s=n.input,i=""===s?[]:t.getMatchIndexes(s,o);return{selectedEntityIndex:i.length?i[0]:-1,entityMatchIndexes:i}})}},{key:"renderNotification",value:function(){return p.a.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var e=this.state.input,t=this.getSelectedEntityText(),n="";return t&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(n=t.replace(new RegExp(e,"i"),e)),p.a.createElement("div",g({},this.props.hintProps,{ref:"hint",className:l()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),n)}}},{key:"renderMatches",value:function(){var e=this;if(this.state.entityMatchIndexes.length){var t=this.props.matchWrapperProps;return p.a.createElement("div",g({},t,{ref:"matches",className:l()("b-typeahead-match-wrapper",t.className)}),this.state.entityMatchIndexes.map(function(t){var n=e.props.entities[t],o=n.className,s=n.text,i=r(n,["className","text"]);return p.a.createElement("div",g({},i,{ref:"match_$"+t,className:l()("b-typeahead-match",o,{"b-typeahead-match-selected":e.state.selectedEntityIndex===t}),key:s,onClick:e.handleMatchClick.bind(e,t)}),e.markMatchSubstring(e.state.input,n))}))}}},{key:"render",value:function(){var e=this.props,r=this.state;return p.a.createElement("div",g({},n.i(v.a)(e,t.internalKeys),{ref:"wrapper",className:l()("b-typeahead-wrapper",e.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),p.a.createElement(h.a,g({},n.i(d.a)(e,h.a.defaultProps),{ref:"input","aria-controls":r.id,inputProps:g({},e.inputProps,{className:l()("b-typeahead",e.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),t}(p.a.PureComponent);k.mode={STARTS_WITH:n.i(P.a)(),FUZZY:n.i(P.a)()},k.propTypes=g({},h.a.propTypes,{algorithm:a.PropTypes.oneOfType([a.PropTypes.oneOf([k.mode.STARTS_WITH,k.mode.FUZZY]),a.PropTypes.shape({marker:a.PropTypes.oneOfType([a.PropTypes.func,a.PropTypes.oneOf([k.mode.STARTS_WITH,k.mode.FUZZY])]),matcher:a.PropTypes.oneOfType([a.PropTypes.func,a.PropTypes.oneOf([k.mode.STARTS_WITH,k.mode.FUZZY])])})]),clearOnSelection:a.PropTypes.bool,entities:a.PropTypes.arrayOf(a.PropTypes.shape({text:a.PropTypes.string.isRequired})),hint:a.PropTypes.bool,hintProps:a.PropTypes.object,matchWrapperProps:a.PropTypes.object,offscreenClass:a.PropTypes.string,onComplete:a.PropTypes.func,onEntityHighlighted:a.PropTypes.func,onEntitySelected:a.PropTypes.func}),k.defaultProps=g({},h.a.defaultProps,{algorithm:k.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:m.a,onEntityHighlighted:m.a,onEntitySelected:m.a}),k.internalKeys=Object.keys(k.defaultProps);var w=function(){var e=this;this.state={entityMatchIndexes:[],id:n.i(P.a)(),isControlled:n.i(b.a)(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.setState({input:t})},this.getSelectedEntityText=function(){var t=e.props.entities[e.state.selectedEntityIndex];return t?t.text:""},this.resetMatches=function(){e.mounted&&e.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return e.refs.input.refs.field},this.select=function(){var t=e.getInputNode();t.selectionStart=0,t.selectionEnd=e.getValue().length},this.focus=function(){return e.getInputNode().focus()},this.getValue=function(){return e.refs.input.getValue()},this.setValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";e.refs.input.setValue(t),e.updateInputState(t),e.resetMatches(),e.focus()},this.setValueWithSelectedEntity=function(){e.props.onEntitySelected(e.state.selectedEntityIndex),e.props.clearOnSelection?e.setValue(""):e.setValue(e.getSelectedEntityText()),window.setTimeout(e.resetMatches,0)},this.markMatchSubstring=function(){return e.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return e.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(t){e.state.isControlled===!1&&(e.updateInputState(t.target.value),e.computeMatches()),n.i(y.a)(e.props.inputProps.onChange)&&e.props.inputProps.onChange(t)},this.handleKeyDown=function(t){switch(t.key){case"ArrowLeft":t.target.selectionStart>1&&t.stopPropagation();break;case"Tab":case"ArrowRight":e.state.selectedEntityIndex!==-1&&e.cursorAtEndOfInput()&&e.getInputNode()===t.target&&!t.shiftKey&&(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity());break;case"ArrowUp":t.nativeEvent.preventDefault(),e.selectMatch(-1),e.focus();break;case"ArrowDown":t.nativeEvent.preventDefault(),e.selectMatch(1),e.focus();break;case"Escape":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target&&e.resetMatches();break;case"Enter":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target?(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity()):e.props.onComplete(e.state.input,t)}n.i(y.a)(e.props.onKeyDown)&&e.props.onKeyDown(t)}};t.a=k},function(e,t,n){"use strict";t.a=function(e){return"string"==typeof e}},function(e,t){(function(t){e.exports=t}).call(t,{})},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(0),u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),h=function(e){function t(){var e,n,s,i;r(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=s=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.mounted=!1,s.state={},i=n,o(s,i)}return s(t,e),f(t,[{key:"convertDataToJSXOrWait",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,n=t.data;return n instanceof Promise?(this.setState({component:null}),n.then(function(t){e.mounted&&e.setState(function(e,r){return{component:r.data===n?r.convertToJSXFunc(t):e.component}})},function(){return e.setState({component:!1})})):void this.setState({component:t.convertToJSXFunc(n)})}},{key:"fireCallbackIfDataRendered",value:function(){this.state.component&&this.props.contentRenderedFunc()}},{key:"componentWillMount",value:function(){this.convertDataToJSXOrWait()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.fireCallbackIfDataRendered()}},{key:"componentDidUpdate",value:function(){this.fireCallbackIfDataRendered()}},{key:"componentWillReceiveProps",value:function(e){this.convertDataToJSXOrWait(e)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"getClasses",value:function(e){return c()("b-async",this.props.className,e,{"b-async-error":this.state.component===!1,"b-async-loading":null===this.state.component})}},{key:"render",value:function(){return null===this.state.component||this.state.component===!1?a.a.createElement("div",u({},n.i(l.a)(this.props,t.internalKeys),{className:this.getClasses()}),null===this.state.component?this.props.loadingContent:this.props.errorContent):a.a.cloneElement(this.state.component,u({},n.i(l.a)(this.props,t.internalKeys),{className:this.getClasses(this.state.component.props&&this.state.component.props.className)}))}}]),t}(a.a.PureComponent);h.propTypes={contentRenderedFunc:i.PropTypes.func,convertToJSXFunc:i.PropTypes.func,data:i.PropTypes.any,errorContent:i.PropTypes.node,loadingContent:i.PropTypes.node},h.defaultProps={contentRenderedFunc:function(){},convertToJSXFunc:function(e){return e},data:null,errorContent:"⚠️",loadingContent:null},h.internalKeys=Object.keys(h.defaultProps),t.a=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(12),u=n(0),f=n(4),h=n(5),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),b=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),y(t,[{key:"allItemsChecked",value:function(){return this.props.items.every(function(e){return e.inputProps.checked===!0})}},{key:"anyItemsChecked",value:function(){return this.props.items.some(function(e){return e.inputProps.checked===!0})}},{key:"renderSelectAll",value:function(){if(this.props.selectAll){var e=this.allItemsChecked(),t=this.props.selectAllProps.inputProps;return a.a.createElement(l.a,d({},this.props.selectAllProps,{ref:"select_all",key:"cb_select_all",className:c()("b-checkbox-group-selectall",this.props.selectAllProps.className),inputProps:d({},t,{checked:e,indeterminate:!e&&this.anyItemsChecked(),name:t&&t.name?t.name:"cb_select_all"}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}}},{key:"renderCheckboxes",value:function(){var e=this;return this.props.items.map(function(t){return a.a.createElement(l.a,d({},t,{key:t.inputProps.name,onChecked:e.props.onChildChecked,onUnchecked:e.props.onChildUnchecked}))})}},{key:"renderChildren",value:function(){var e=[this.renderCheckboxes()];if(this.props.selectAll&&this.props.selectAllPosition)switch(this.props.selectAllPosition){case t.selectAllPosition.BEFORE:e.unshift(this.renderSelectAll());break;case t.selectAllPosition.AFTER:e.push(this.renderSelectAll())}return e}},{key:"render",value:function(){return a.a.createElement("div",d({},n.i(u.a)(this.props,t.internalKeys),{ref:"group",className:c()("b-checkbox-group",this.props.className)}),this.renderChildren())}}]),t}(a.a.PureComponent);b.selectAllPosition={BEFORE:n.i(h.a)(),AFTER:n.i(h.a)()},b.propTypes={items:i.PropTypes.arrayOf(l.a.propTypes.inputProps).isRequired,onAllChecked:i.PropTypes.func,onAllUnchecked:i.PropTypes.func,onChildChecked:i.PropTypes.func,onChildUnchecked:i.PropTypes.func,selectAll:i.PropTypes.bool,selectAllProps:i.PropTypes.shape({label:i.PropTypes.string,inputProps:i.PropTypes.object}),selectAllPosition:i.PropTypes.oneOf([b.selectAllPosition.BEFORE,b.selectAllPosition.AFTER])},b.defaultProps={items:[],onAllChecked:f.a,onAllUnchecked:f.a,onChildChecked:f.a,onChildUnchecked:f.a,selectAll:!1,selectAllProps:{},selectAllPosition:b.selectAllPosition.BEFORE},b.internalKeys=Object.keys(b.defaultProps),t.a=b},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return parseInt(e,10)}function a(e){var t=n.i(h.findDOMNode)(e),r=window.getComputedStyle(t.parentNode),o=i(window.getComputedStyle(t).fontSize),s=i(r.height),a=i(r.width);"border-box"!==r.boxSizing&&"padding-box"!==r.boxSizing||(s-=i(r.paddingTop)+i(r.paddingBottom),a-=i(r.paddingLeft)+i(r.paddingRight));var p=Math.floor(o/t.offsetHeight*s),c=Math.floor(o/t.offsetWidth*a);t.style.fontSize=(Math.min(e.props.maxFontSize,p,c)||1)+"px"}function p(){P.forEach(function(e){return a(e)})}function c(e){0===P.length&&window.addEventListener("resize",p,!0),P.push(e)}function l(e){P.splice(P.indexOf(e),1),0===P.length&&window.removeEventListener("resize",p,!0)}var u=n(1),f=n.n(u),h=n(6),d=(n.n(h),n(2)),y=n.n(d),b=n(0),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),P=[],g=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),v(t,[{key:"componentDidMount",value:function(){a(this),c(this)}},{key:"componentDidUpdate",value:function(){a(this)}},{key:"componentWillUnmount",value:function(){l(this)}},{key:"render",value:function(){return f.a.createElement(this.props.component,m({},n.i(b.a)(this.props,t.internalKeys),{className:y()("b-text",this.props.className)}),this.props.children)}}]),t}(f.a.PureComponent);g.propTypes={component:u.PropTypes.oneOfType([u.PropTypes.string,u.PropTypes.func]),maxFontSize:u.PropTypes.number},g.defaultProps={component:"span",maxFontSize:Number.MAX_VALUE},g.internalKeys=Object.keys(g.defaultProps),t.a=g},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(4),u=n(0),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=function(e){function t(){var e,n,s,i;r(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=s=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.state={status:t.status.LOADING},i=n,o(s,i)}return s(t,e),h(t,[{key:"componentWillReceiveProps",value:function(e){e.src!==this.props.src&&(this.resetPreloader(),this.setState({status:t.status.LOADING}))}},{key:"componentDidMount",value:function(){this.preload()}},{key:"componentDidUpdate",value:function(){this.preload()}},{key:"componentWillUnmount",value:function(){this.resetPreloader()}},{key:"resetPreloader",value:function(){this.loader.onload=null,this.loader.onerror=null,this.loader=null}},{key:"preload",value:function(){var e=this;this.loader||(this.loader=document.createElement("img"),this.loader.onload=function(){return e.setState({status:t.status.LOADED})},this.loader.onerror=function(){return e.setState({status:t.status.ERROR})},this.loader.src=this.props.src)}},{key:"renderImage",value:function(){return this.props.displayAsBackgroundImage?a.a.createElement("div",f({},this.props.imageProps,{ref:"image",className:c()("b-image",this.props.imageProps.className),title:this.props.alt,style:f({},this.props.imageProps.style,{backgroundImage:"url("+this.props.src+")"})})):a.a.createElement("img",f({},this.props.imageProps,{ref:"image",className:c()("b-image",this.props.imageProps.className),src:this.props.src,alt:this.props.alt,onLoad:l.a,onError:l.a}))}},{key:"renderStatus",value:function(){return a.a.createElement("div",f({},this.props.statusProps,{ref:"status",className:c()("b-image-status",this.props.statusProps.className,{"b-image-loading":this.state.status===t.status.LOADING,"b-image-loaded":this.state.status===t.status.LOADED,"b-image-error":this.state.status===t.status.ERROR}),role:"presentation"}))}},{key:"render",value:function(){return a.a.createElement("div",f({},n.i(u.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-image-wrapper",this.props.className)}),this.renderImage(),this.renderStatus())}}]),t}(a.a.PureComponent);d.status={LOADING:"LOADING",LOADED:"LOADED",ERROR:"ERROR"},d.propTypes={alt:i.PropTypes.string,displayAsBackgroundImage:i.PropTypes.bool,imageProps:i.PropTypes.object,src:i.PropTypes.string.isRequired,statusProps:i.PropTypes.object},d.defaultProps={alt:null,displayAsBackgroundImage:!1,imageProps:{},src:"about:blank",statusProps:{}},d.internalKeys=Object.keys(d.defaultProps),t.a=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(9),u=n(7),f=n(10),h=n(0),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),b=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),y(t,[{key:"render",value:function(){var e=this,r=this.props;return a.a.createElement(u.a,r.portalProps,a.a.createElement("div",d({},n.i(h.a)(r,t.internalKeys),{ref:function(t){return e.$modal=t},className:c()("b-modal-wrapper",r.className)}),a.a.createElement("div",d({},r.maskProps,{className:c()("b-modal-mask",r.maskProps.className)})),a.a.createElement(l.a,d({},n.i(f.a)(r,l.a.defaultProps),r.modalProps,{className:c()("b-modal",r.modalProps.className)}),r.children)))}}]),t}(a.a.PureComponent);b.propTypes=d({},l.a.propTypes,{maskProps:i.PropTypes.object,modalProps:i.PropTypes.object,portalProps:i.PropTypes.shape(u.a.propTypes)}),b.defaultProps=d({},l.a.defaultProps,{captureFocus:!0,maskProps:{},modalProps:{},portalProps:{}}),b.internalKeys=Object.keys(b.defaultProps),t.a=b},function(e,t,n){"use strict";var r=n(1),o=(n.n(r),n(6)),s=(n.n(o),n(2)),i=(n.n(s),n(29));n.n(i);throw new Error('Cannot find module "boundless-async"')},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){switch(e[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function a(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}var p=n(1),c=n.n(p),l=n(6),u=(n.n(l),n(2)),f=n.n(u),h=n(9),d=n(7),y=n(0),b=n(31),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),P=/\s?b-popover-(anchor|self)-(start|middle|end)/g,g=c.a.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},c.a.createElement("g",null,c.a.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),c.a.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),O=0,k=1,w=2,T=[{name:"NNW",ax:O,ay:O,dx:O,dy:w},{name:"N",ax:k,ay:O,dx:k,dy:w},{name:"NNE",ax:w,ay:O,dx:w,dy:w},{name:"ENE",ax:w,ay:O,dx:O,dy:O},{name:"E",ax:w,ay:k,dx:O,dy:k},{name:"ESE",ax:w,ay:w,dx:O,dy:w},{name:"SSE",ax:w,ay:w,dx:w,dy:O},{name:"S",ax:k,ay:w,dx:k,dy:O},{name:"SSW",ax:O,ay:w,dx:O,dy:O},{name:"WSW",ax:O,ay:w,dx:w,dy:w},{name:"W",ax:O,ay:k,dx:w,dy:k},{name:"WNW",ax:O,ay:O,dx:w,dy:O}],E=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.align=function(){var e=i.props.anchor instanceof HTMLElement?i.props.anchor:n.i(l.findDOMNode)(i.props.anchor),r=i.props.caretAnchor?i.props.caretAnchor instanceof HTMLElement?i.props.caretAnchor:n.i(l.findDOMNode)(i.props.caretAnchor):e;i.cacheViewportCartography(e,r);var o=i.getValidAlignmentPreset(),s=t.getAlignmentClassFragment;i.dialog.$wrapper.className=i.dialog.$wrapper.className.replace(P,"")+(" b-popover-anchor-x-"+s(o.ax))+(" b-popover-anchor-y-"+s(o.ay))+(" b-popover-self-x-"+s(o.dx))+(" b-popover-self-y-"+s(o.dy));var a=Math.round(i.getNextDialogXPosition(o)),p=Math.round(i.getNextDialogYPosition(o));i.dialog.$wrapper.style[b.a]="translate("+a+"px, "+p+"px)";var c=o.name[0],u="N"===c||"S"===c;i.$caret.style[u?"left":"top"]=Math.round(i.getNextCaretXPosition(o))+"px",i.$caret.style[u?"top":"left"]="0px"},a=s,o(i,a)}return s(t,e),v(t,[{key:"cacheViewportCartography",value:function(e,t){var n=document.body.getBoundingClientRect();this.anchorRect=e.getBoundingClientRect(),this.caretAnchorRect=t.getBoundingClientRect(),this.bodyLeft=n.left*-1,this.bodyTop=n.top*-1}},{key:"getNextCaretXPosition",value:function(e){var t=e.name,n=(e.ax,e.dx),r=(e.ay,e.dy),o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,s=0;return"N"===t[0]||"S"===t[0]?(s=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,n===k?s+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:n===w&&(s+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(s=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,r===k?s+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:r===w&&(s+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),s-=o.clientWidth/2}},{key:"getNextDialogXPosition",value:function(e){var t=e.ax,n=e.dx,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,o=this.anchorRect.left+this.bodyLeft;switch(t){case k:o+=this.anchorRect.width/2;break;case w:o+=this.anchorRect.width}switch(n){case k:o-=r.clientWidth/2;break;case w:o-=r.clientWidth}return o}},{key:"getNextDialogYPosition",value:function(e){var t=e.ay,n=e.dy,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,o=this.anchorRect.top+this.bodyTop;switch(t){case k:o+=this.anchorRect.height/2;break;case w:o+=this.anchorRect.height}switch(n){case k:o-=r.clientHeight/2;break;case w:o-=r.clientHeight}return o}},{key:"isPositionValid",value:function(e,t,n){var r=e.name,o=e.ax,s=e.ay,i=(e.dx,e.dy,r[0]);return"N"===i||"S"===i?!("N"===i&&this.anchorRect.top-t<0)&&(!("S"===i&&this.anchorRect.bottom+t>window.innerHeight)&&(o===O?!(this.anchorRect.left+n>window.innerWidth||this.anchorRect.left<0):o===k?!(this.anchorRect.left-n/2<0||this.anchorRect.left+n/2>window.innerWidth):!(this.anchorRect.left-n<0||this.anchorRect.right>window.innerWidth))):"W"!==i&&"E"!==i||!("W"===i&&this.anchorRect.left-n<0)&&(!("E"===i&&this.anchorRect.right+n>window.innerWidth)&&(s===O?!(this.anchorRect.top+t>window.innerHeight||this.anchorRect.top<0):s===k?!(this.anchorRect.top+this.anchorRect.height/2-t/2<0||this.anchorRect.top+this.anchorRect.height/2+t/2>window.innerHeight):!(this.anchorRect.top-t<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var e=this,t=this.dialog.$wrapper.clientWidth,n=this.dialog.$wrapper.clientHeight,r=T.filter(function(r){return e.isPositionValid(r,n,t)});if(r.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!r.length)return this.props.preset;var o=r.filter(function(t){var n=t.name;return n[0]===e.props.preset.name[0]});if(o.length)return o[0];var s=i(this.props.preset.name),a=r.filter(function(e){var t=e.name;return t[0]===s});return a.length?a[0]:r[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var e=this,r=this.props;return c.a.createElement(d.a,r.portalProps,c.a.createElement(h.a,m({},n.i(y.a)(r,t.internalKeys),{ref:function(t){return e.dialog=t},before:c.a.cloneElement(r.caretComponent,{ref:function(t){return e.$caret=t},className:f()("b-popover-caret",r.caretComponent.props.className)}),wrapperProps:m({},r.wrapperProps,{className:f()("b-popover",r.wrapperProps.className)})})))}}],[{key:"getAlignmentClassFragment",value:function(e){switch(e){case O:return"start";case k:return"middle";case w:return"end"}}}]),t}(c.a.PureComponent);E.preset=T.reduce(function(e,t){return e[t.name]=t,e},{}),E.propTypes=m({},h.a.propTypes,{anchor:p.PropTypes.oneOfType([p.PropTypes.instanceOf(HTMLElement),p.PropTypes.element]).isRequired,autoReposition:p.PropTypes.bool,caretAnchor:p.PropTypes.oneOfType([p.PropTypes.instanceOf(HTMLElement),p.PropTypes.element]),caretComponent:p.PropTypes.element,portalProps:p.PropTypes.shape(d.a.PropTypes),preset:p.PropTypes.oneOf([E.preset.NNW,E.preset.N,E.preset.NNE,E.preset.ENE,E.preset.E,E.preset.ESE,E.preset.SSE,E.preset.S,E.preset.SSW,E.preset.WSW,E.preset.W,E.preset.WNW]),wrapperProps:p.PropTypes.object}),E.defaultProps=m({},h.a.defaultProps,{anchor:void 0,autoReposition:!0,captureFocus:!1,caretAnchor:void 0,caretComponent:g,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:E.preset.S,wrapperProps:{}}),E.internalKeys=a(Object.keys(E.defaultProps),h.a.internalKeys),t.a=E},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(1),p=n.n(a),c=n(2),l=n.n(c),u=n(8),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=function(e){function t(){return o(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),d(t,[{key:"renderLabel",value:function(){if(this.props.label)return p.a.createElement("div",h({},this.props.labelProps,{ref:"label",className:l()("b-progress-label",this.props.labelProps.className)}),this.props.label)}},{key:"renderCancel",value:function(){if(this.props.onCancel)return p.a.createElement(u.a,h({},this.props.cancelProps,{ref:"cancel",className:l()("b-progress-cancel",this.props.cancelProps.className),onPressed:this.props.onCancel}))}},{key:"renderProgress",value:function(){return p.a.createElement("div",h({},this.props.progressProps,{ref:"progress",className:l()("b-progress",this.props.progressProps.className,{
"b-progress-indeterminate":"undefined"==typeof this.props.progress}),role:"presentation",style:h({},this.props.progressProps.style,r({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function(){return p.a.createElement(this.props.component,h({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:l()("b-progress-wrapper",this.props.className)}),this.renderProgress(),this.renderLabel(),this.renderCancel())}}]),t}(p.a.PureComponent);y.propTypes={cancelProps:a.PropTypes.object,component:a.PropTypes.oneOfType([a.PropTypes.string,a.PropTypes.func]),label:a.PropTypes.node,labelProps:a.PropTypes.object,onCancel:a.PropTypes.func,progress:a.PropTypes.oneOfType([a.PropTypes.string,a.PropTypes.number]),progressProps:a.PropTypes.object,tweenProperty:a.PropTypes.string},y.defaultProps={cancelProps:{},component:"div",label:null,labelProps:{},onCancel:null,progress:void 0,progressProps:{},tweenProperty:"width"},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.state={expanded:i.props.expanded},i.dispatchCallback=function(){i.props[i.state.expanded?"onExpand":"onHide"]()},i.handleClick=function(e){i.setState({expanded:!i.state.expanded},i.dispatchCallback),n.i(l.a)(i.props.toggleProps.onClick)&&i.props.toggleProps.onClick(e)},i.handleKeyDown=function(e){switch(e.key){case"Enter":e.preventDefault(),i.setState({expanded:!i.state.expanded},i.dispatchCallback)}n.i(l.a)(i.props.toggleProps.onKeyDown)&&i.props.toggleProps.onKeyDown(e)},a=s,o(i,a)}return s(t,e),d(t,[{key:"componentWillReceiveProps",value:function(e){e.expanded!==this.props.expanded&&this.setState({expanded:e.expanded},this.dispatchCallback)}},{key:"renderContent",value:function(){if(this.state.expanded)return a.a.createElement("div",{ref:"content",className:"b-disclosure-content"},n.i(l.a)(this.props.children)?this.props.children():this.props.children)}},{key:"render",value:function(){return a.a.createElement(this.props.component,h({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),a.a.createElement("div",h({},this.props.toggleProps,{ref:"toggle",className:c()("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.teaserExpanded||this.props.teaser:this.props.teaser),this.renderContent())}}]),t}(a.a.PureComponent);y.propTypes={children:i.PropTypes.any,component:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.func]),expanded:i.PropTypes.bool,onExpand:i.PropTypes.func,onHide:i.PropTypes.func,teaser:i.PropTypes.node,teaserExpanded:i.PropTypes.node,toggleProps:i.PropTypes.object},y.defaultProps={children:null,component:"div",expanded:!1,onExpand:u.a,onHide:u.a,teaser:null,teaserExpanded:null,toggleProps:{}},y.internalKeys=Object.keys(y.defaultProps),t.a=y},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(3),u=n(4),f=n(0),h=n(5),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),b=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),u=0;u<p;u++)c[u]=arguments[u];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.uuid=n.i(h.a)(),i.handleChange=function(e){e.target.checked&&i.props.onSelected(e.target.value),n.i(l.a)(i.props.inputProps.onChange)&&i.props.inputProps.onChange(e)},a=s,o(i,a)}return s(t,e),y(t,[{key:"renderInput",value:function(){return a.a.createElement("input",d({},this.props.inputProps,{ref:"input",type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:c()("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function(){if(this.props.label)return a.a.createElement("label",d({},this.props.labelProps,{ref:"label",className:c()("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.label)}},{key:"render",value:function(){return a.a.createElement("div",d({},n.i(f.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),t}(a.a.PureComponent);b.propTypes={inputProps:i.PropTypes.object,label:i.PropTypes.node,labelProps:i.PropTypes.object,name:i.PropTypes.string.isRequired,onSelected:i.PropTypes.func,selected:i.PropTypes.bool,value:i.PropTypes.string.isRequired},b.defaultProps={inputProps:{},label:null,labelProps:{},name:"",onSelected:u.a,selected:!1,value:""},b.internalKeys=Object.keys(b.defaultProps),t.a=b},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=n(1),a=n.n(i),p=n(2),c=n.n(p),l=n(15),u=n(10),f=n(3),h=n(4),d=n(0),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),m=function(e){return e[0]},v=function(e){return e[e.length-1]},P=function(e){function t(){var e,s,i,a;r(this,t);for(var p=arguments.length,c=Array(p),l=0;l<p;l++)c[l]=arguments[l];return s=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),i.focus=function(){return i.refs.typeahead.focus()},i.getInputNode=function(){return i.refs.typeahead.getInputNode()},i.getSelectedEntityText=function(){return i.refs.typeahead.getSelectedEntityText()},i.getValue=function(){return i.refs.typeahead.getValue()},i.select=function(){return i.refs.typeahead.select()},i.setValue=function(e){return i.refs.typeahead.setValue(e)},i.add=function(e){i.props.tokens.indexOf(e)===-1&&i.props.handleAddToken(e)},i.handleInputClick=function(e){i.clearSelection(),n.i(f.a)(i.props.inputProps.onClick)&&i.props.inputProps.onClick(e)},i.handleInputFocus=function(e){i.clearSelection(),n.i(f.a)(i.props.inputProps.onFocus)&&i.props.inputProps.onFocus(e)},i.handleKeyDown=function(e){switch(e.which){case 37:i.selectPreviousToken(e.shiftKey);break;case 39:i.selectNextToken(e.shiftKey);break;case 8:i.props.tokensSelected.length&&(i.remove(i.props.tokensSelected),i.focus());break;case 65:e.metaKey&&(e.preventDefault(),i.focus(),i.select(),i._suppressNextTokenSelection=!0,i.props.handleNewSelection(i.props.tokens))}n.i(f.a)(i.props.onKeyDown)&&i.props.onKeyDown(e)},a=s,o(i,a)}return s(t,e),b(t,[{key:"componentDidUpdate",value:function(e){var t=e.tokensSelected,n=this.props.tokensSelected;if(this.props.tokens.length>e.tokens.length&&this.setValue(""),this._suppressNextTokenSelection)return void(this._suppressNextTokenSelection=!1);if(t!==n&&0!==n.length){if(1===n.length||n[0]!==t[0])return this.refs["token_"+n[0]].focus();if(v(n)!==v(t))return this.refs["token_"+v(n)].focus();this.refs["token_"+n[0]].focus()}}},{key:"remove",value:function(e){var t=this,n=(Array.isArray(e)?e:[e]).filter(function(e){return t.props.tokens.indexOf(e)!==-1});n.length&&this.props.handleRemoveTokens(n)}},{key:"selectToken",value:function(e){this.props.handleNewSelection([e])}},{key:"selectTokens",value:function(e){this.props.handleNewSelection(e)}},{key:"selectPreviousToken",value:function(e){var t=this.props.tokensSelected,n=this.props.tokens;if(1!==t.length||m(t)!==m(n))if(0===t.length)this.selectToken(v(n));else{var r=n[n.indexOf(m(t))-1];this.selectTokens(e?[r].concat(t):[r])}}},{key:"selectNextToken",value:function(e){var t=this.props.tokensSelected,n=this.props.tokens;if(0!==t.length)if(v(t)===v(n))this.clearSelection(),this.focus();else{var r=n[n.indexOf(v(t))+1];this.selectTokens(e?t.concat(r):[r])}}},{key:"clearSelection",value:function(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function(e,t){t.stopPropagation(),this.remove(e),this.focus(),this.props.tokenCloseComponent.props.onClick&&this.props.tokenCloseComponent.props.onClick(t)}},{key:"renderTokenClose",value:function(e){if(this.props.tokenCloseVisible)return a.a.cloneElement(this.props.tokenCloseComponent,{className:c()("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,e)})}},{key:"handleTokenKeyDown",value:function(e,t){switch(t.which){case 13:case 32:this.selectToken(e),t.preventDefault();break;case 8:this.remove(e),this.focus(),t.preventDefault()}}},{key:"renderTokens",value:function(){var e=this;return a.a.createElement("div",{className:"b-tokenfield-tokens"},this.props.tokens.map(function(t){return a.a.createElement("div",{ref:"token_"+t,key:t,className:c()("b-tokenfield-token",{"b-tokenfield-token-selected":e.props.tokensSelected.indexOf(t)!==-1}),onClick:e.selectToken.bind(e,t),onKeyDown:e.handleTokenKeyDown.bind(e,t),tabIndex:"0"},e.props.entities[t].text,e.renderTokenClose(t))}))}},{key:"render",value:function(){return a.a.createElement("div",y({},n.i(d.a)(this.props,t.internalKeys),{ref:"wrapper",className:c()("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),a.a.createElement(l.a,y({},n.i(u.a)(this.props,l.a.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:!0,inputProps:y({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]),t}(a.a.PureComponent);P.propTypes=y({},l.a.propTypes,{handleAddToken:i.PropTypes.func,handleRemoveTokens:i.PropTypes.func,handleNewSelection:i.PropTypes.func,tokenCloseComponent:i.PropTypes.element,tokenCloseVisible:i.PropTypes.bool,tokens:i.PropTypes.arrayOf(i.PropTypes.number),tokensSelected:i.PropTypes.arrayOf(i.PropTypes.number)}),P.defaultProps=y({},l.a.defaultProps,{handleAddToken:h.a,handleRemoveTokens:h.a,handleNewSelection:h.a,tokenCloseComponent:a.a.createElement("div",null,"X"),tokenCloseVisible:!0,tokens:[],tokensSelected:[]}),P.internalKeys=Object.keys(P.defaultProps),t.a=P},function(e,t){function n(e){return"number"==typeof e&&e==a(e)}function r(e){var t="undefined"==typeof e?"undefined":c(e);return!!e&&("object"==t||"function"==t)}function o(e){return!!e&&"object"==("undefined"==typeof e?"undefined":c(e))}function s(e){return"symbol"==("undefined"==typeof e?"undefined":c(e))||o(e)&&g.call(e)==h}function i(e){if(!e)return 0===e?e:0;if(e=p(e),e===l||e===-l){var t=e<0?-1:1;return t*u}return e===e?e:0}function a(e){var t=i(e),n=t%1;return t===t?n?t-n:t:0}function p(e){if("number"==typeof e)return e;if(s(e))return f;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(d,"");var n=b.test(e);return n||m.test(e)?v(e.slice(2),n?2:8):y.test(e)?f:+e}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l=1/0,u=1.7976931348623157e308,f=NaN,h="[object Symbol]",d=/^\s+|\s+$/g,y=/^[-+]0x[0-9a-f]+$/i,b=/^0b[01]+$/i,m=/^0o[0-7]+$/i,v=parseInt,P=Object.prototype,g=P.toString;e.exports=n},function(e,t,n){"use strict";var r=/[|\\{}()[\]^$+*?.]/g;e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(r,"\\$&")}},function(e,t,n){"use strict";t.a=function(){for(var e=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"],t=0,n=e.length;t<n;t++)if(e[t]in document.documentElement.style)return e[t];return!1}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11);n.d(t,"ArrowKeyNavigation",function(){return r.a});var o=n(18);n.d(t,"Async",function(){return o.a});var s=n(8);n.d(t,"Button",function(){return s.a});var i=n(12);n.d(t,"Checkbox",function(){return i.a});var a=n(19);n.d(t,"CheckboxGroup",function(){return a.a});var p=n(9);n.d(t,"Dialog",function(){return p.a});var c=n(20);n.d(t,"FittedText",function(){return c.a});var l=n(21);n.d(t,"Image",function(){return l.a});var u=n(13);n.d(t,"Input",function(){return u.a});var f=n(22);n.d(t,"Modal",function(){return f.a});var h=n(23);n.d(t,"Pagination",function(){return h.a});var d=n(24);n.d(t,"Popover",function(){return d.a});var y=n(7);n.d(t,"Portal",function(){return y.a});var b=n(26);n.d(t,"ProgressiveDisclosure",function(){return b.a});var m=n(25);n.d(t,"Progress",function(){return m.a});var v=n(27);n.d(t,"Radio",function(){return v.a});var P=n(14);n.d(t,"SegmentedControl",function(){return P.a});var g=n(28);n.d(t,"TokenizedInput",function(){return g.a});var O=n(15);n.d(t,"Typeahead",function(){return O.a})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,