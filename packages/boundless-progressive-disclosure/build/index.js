module.exports=function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function p(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),a=n.n(s),i=n(1),l=n.n(i),c=n(0),u=n.n(c),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),y=function(e){return"function"==typeof e},g=function(){},h=function(e){function t(){var e,n,p,s;o(this,t);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=p=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),p.state={expanded:p.props.expanded},p.fireStatefulCallback=function(){return p.props[p.state.expanded?"onExpand":"onHide"]()},p.handleClick=function(e){p.setState({expanded:!p.state.expanded},p.fireStatefulCallback),y(p.props.toggleProps.onClick)&&p.props.toggleProps.onClick(e)},p.handleKeyDown=function(e){"Enter"===e.key&&(e.preventDefault(),p.setState({expanded:!p.state.expanded},p.fireStatefulCallback)),y(p.props.toggleProps.onKeyDown)&&p.props.toggleProps.onKeyDown(e)},s=n,r(p,s)}return p(t,e),f(t,[{key:"componentWillReceiveProps",value:function(e){e.expanded!==this.props.expanded&&this.setState({expanded:e.expanded},this.fireStatefulCallback)}},{key:"renderContent",value:function(){if(this.state.expanded)return a.a.createElement("div",{className:"b-disclosure-content"},y(this.props.children)?this.props.children():this.props.children)}},{key:"render",value:function(){return a.a.createElement(this.props.component,d({},u()(this.props,t.internalKeys),{className:l()("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),a.a.createElement(this.props.toggleComponent,d({},this.props.toggleProps,{className:l()("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.toggleExpandedContent||this.props.toggleContent:this.props.toggleContent),this.renderContent())}}]),t}(a.a.PureComponent);h.propTypes={"*":s.PropTypes.any,children:s.PropTypes.oneOfType([s.PropTypes.node,s.PropTypes.arrayOf(s.PropTypes.node),s.PropTypes.func]),component:s.PropTypes.string,expanded:s.PropTypes.bool,onExpand:s.PropTypes.func,onHide:s.PropTypes.func,toggleComponent:s.PropTypes.string,toggleContent:s.PropTypes.node,toggleExpandedContent:s.PropTypes.node,toggleProps:s.PropTypes.shape({"*":s.PropTypes.any})},h.defaultProps={children:null,component:"div",expanded:!1,onExpand:g,onHide:g,toggleComponent:"div",toggleContent:null,toggleExpandedContent:null,toggleProps:{}},h.internalKeys=Object.keys(h.defaultProps),t.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,