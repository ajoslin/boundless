module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=5)}([function(e,t){e.exports=require("boundless-checkbox")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=n(4),c=n.n(l),p=n(3),i=n.n(p),u=n(0),a=n.n(u),h=n(1),f=n.n(h),d=n(2),y=n.n(d),k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),m=function(){},P=function(e){function t(){var e,n,s,l;r(this,t);for(var c=arguments.length,p=Array(c),i=0;i<c;i++)p[i]=arguments[i];return n=s=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.selectAllUUID=y()(),l=n,o(s,l)}return s(t,e),b(t,[{key:"allItemsChecked",value:function(){return this.props.items.every(function(e){return e.inputProps.checked===!0})}},{key:"anyItemsChecked",value:function(){return this.props.items.some(function(e){return e.inputProps.checked===!0})}},{key:"renderSelectAllCheckbox",value:function(){var e=this.allItemsChecked(),t=this.props.selectAllProps.inputProps;return c.a.createElement(a.a,k({},this.props.selectAllProps,{key:this.selectAllUUID,className:i()("b-checkbox-group-all",this.props.selectAllProps.className),inputProps:k({},t,{checked:e,indeterminate:!e&&this.anyItemsChecked(),name:t&&t.name?t.name:null}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}},{key:"renderCheckboxes",value:function(){var e=this;return this.props.items.map(function(t){return c.a.createElement(a.a,k({},t,{key:t.inputProps.name,onChecked:e.props.onChildChecked,onUnchecked:e.props.onChildUnchecked}))})}},{key:"renderChildren",value:function(){var e=[this.renderCheckboxes()];switch(this.props.selectAll){case t.selectAll.BEFORE:e.unshift(this.renderSelectAllCheckbox());break;case t.selectAll.AFTER:e.push(this.renderSelectAllCheckbox())}return e}},{key:"render",value:function(){return c.a.createElement(this.props.component,k({},f()(this.props,t.internalKeys),{className:i()("b-checkbox-group",this.props.className)}),this.renderChildren())}}]),t}(c.a.PureComponent);P.selectAll={BEFORE:y()(),AFTER:y()(),NONE:y()()},P.propTypes={"*":l.PropTypes.any,component:l.PropTypes.string,items:l.PropTypes.arrayOf(a.a.propTypes.inputProps).isRequired,onAllChecked:l.PropTypes.func,onAllUnchecked:l.PropTypes.func,onChildChecked:l.PropTypes.func,onChildUnchecked:l.PropTypes.func,selectAll:l.PropTypes.oneOf([P.selectAll.BEFORE,P.selectAll.AFTER,P.selectAll.NONE]),selectAllProps:l.PropTypes.shape({"*":l.PropTypes.any,label:l.PropTypes.string,inputProps:l.PropTypes.object})},P.defaultProps={component:"div",items:[],onAllChecked:m,onAllUnchecked:m,onChildChecked:m,onChildUnchecked:m,selectAll:P.selectAll.BEFORE,selectAllProps:{}},P.internalKeys=Object.keys(P.defaultProps),t.default=P}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,