module.exports=function(e){function t(r){if(n[r])return n[r].exports;var s=n[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t){e.exports=require("boundless-input")},function(e,t){e.exports=require("boundless-utils-object-intersection")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("escape-string-regexp")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),p=n.n(o),c=n(4),u=n.n(c),l=n(5),h=n.n(l),d=n(0),f=n.n(d),y=n(1),m=n.n(y),g=n(2),v=n.n(g),x=n(3),T=n.n(x),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),P=function(e){return"function"==typeof e},k=function(e){return"string"==typeof e},I=function(){},M=function(e){function t(){var e,n,r,a;s(this,t);for(var o=arguments.length,p=Array(o),c=0;c<o;c++)p[c]=arguments[c];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),S.call(r),a=n,i(r,a)}return a(t,e),E(t,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(e){e.entities!==this.props.entities&&this.computeMatches(e.entities),e.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(e.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(e,t){this.state.entityMatchIndexes.length&&!t.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==e.entities[t.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(e){this.setState({selectedEntityIndex:e},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(e){var t=this.state.entityMatchIndexes,n=t.length,r=t.indexOf(this.state.selectedEntityIndex)+e;if(n){r<0?r=n-1:r>=n&&(r=0);var s=t[r],i=this.refs.matches,a=i.scrollTop+i.clientHeight,o=this.refs["match_$"+s],p=o.offsetTop,c=p+o.clientHeight;c>=a?i.scrollTop+=c-a:p<=i.scrollTop&&(i.scrollTop=p),this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function(){var e=this.getInputNode();return e.selectionStart===e.selectionEnd&&e.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(e,t){for(var n=t.text,r=n.split(new RegExp("("+h()(e)+")","ig")),s=e.toLowerCase(),i=r.length,a=-1;++a<i;)r[a].toLowerCase()===s&&(r[a]=p.a.createElement("mark",{key:a,className:"b-typeahead-match-highlight"},r[a]));return r}},{key:"markStartsWithMatchSubstring",value:function(e,t){var n=t.text,r=e.toLowerCase(),s=n.toLowerCase().indexOf(r),i=s+r.length;return[p.a.createElement("span",{key:"0"},n.slice(0,s)),p.a.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},n.slice(s,i)),p.a.createElement("span",{key:"2"},n.slice(i))]}},{key:"getMarkingFunction",value:function(){return k(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:P(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return t.text.toLowerCase().indexOf(n)!==-1?e.push(r)&&e:e},[])}},{key:"getStartsWithMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return 0===t.text.toLowerCase().indexOf(n)&&e.push(r),e},[])}},{key:"getMatchingFunction",value:function(){return k(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:P(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(e){var t=this;this.setState(function(n,r){var s=e||r.entities,i=n.input,a=""===i?[]:t.getMatchIndexes(i,s);return{selectedEntityIndex:a.length?a[0]:-1,entityMatchIndexes:a}})}},{key:"renderNotification",value:function(){return p.a.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var e=this.state.input,t=this.getSelectedEntityText(),n="";return t&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(n=t.replace(new RegExp(e,"i"),e)),p.a.createElement("div",b({},this.props.hintProps,{ref:"hint",className:u()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),n)}}},{key:"renderMatches",value:function(){var e=this;if(this.state.entityMatchIndexes.length){var t=this.props.matchWrapperProps;return p.a.createElement("div",b({},t,{ref:"matches",className:u()("b-typeahead-match-wrapper",t.className)}),this.state.entityMatchIndexes.map(function(t){var n=e.props.entities[t],s=n.className,i=n.text,a=r(n,["className","text"]);return p.a.createElement("div",b({},a,{ref:"match_$"+t,className:u()("b-typeahead-match",s,{"b-typeahead-match-selected":e.state.selectedEntityIndex===t}),key:i,onClick:e.handleMatchClick.bind(e,t)}),e.markMatchSubstring(e.state.input,n))}))}}},{key:"render",value:function(){var e=this.props,n=this.state;return p.a.createElement("div",b({},v()(e,t.internalKeys),{ref:"wrapper",className:u()("b-typeahead-wrapper",e.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),p.a.createElement(f.a,b({},m()(e,f.a.defaultProps),{ref:"input","aria-controls":n.id,inputProps:b({},e.inputProps,{className:u()("b-typeahead",e.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),t}(p.a.PureComponent);M.mode={STARTS_WITH:T()(),FUZZY:T()()},M.propTypes=b({},f.a.propTypes,{algorithm:o.PropTypes.oneOfType([o.PropTypes.oneOf([M.mode.STARTS_WITH,M.mode.FUZZY]),o.PropTypes.shape({marker:o.PropTypes.oneOfType([o.PropTypes.func,o.PropTypes.oneOf([M.mode.STARTS_WITH,M.mode.FUZZY])]),matcher:o.PropTypes.oneOfType([o.PropTypes.func,o.PropTypes.oneOf([M.mode.STARTS_WITH,M.mode.FUZZY])])})]),clearOnSelection:o.PropTypes.bool,entities:o.PropTypes.arrayOf(o.PropTypes.shape({text:o.PropTypes.string.isRequired})),hint:o.PropTypes.bool,hintProps:o.PropTypes.shape({"*":o.PropTypes.any}),matchWrapperProps:o.PropTypes.shape({"*":o.PropTypes.any}),offscreenClass:o.PropTypes.string,onComplete:o.PropTypes.func,onEntityHighlighted:o.PropTypes.func,onEntitySelected:o.PropTypes.func}),M.defaultProps=b({},f.a.defaultProps,{algorithm:M.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:I,onEntityHighlighted:I,onEntitySelected:I}),M.internalKeys=Object.keys(M.defaultProps);var S=function(){var e=this;this.state={entityMatchIndexes:[],id:T()(),isControlled:k(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.setState({input:t})},this.getSelectedEntityText=function(){var t=e.props.entities[e.state.selectedEntityIndex];return t?t.text:""},this.resetMatches=function(){e.mounted&&e.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return e.refs.input.refs.field},this.select=function(){var t=e.getInputNode();t.selectionStart=0,t.selectionEnd=e.getValue().length},this.focus=function(){return e.getInputNode().focus()},this.getValue=function(){return e.refs.input.getValue()},this.setValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";e.refs.input.setValue(t),e.updateInputState(t),e.resetMatches(),e.focus()},this.setValueWithSelectedEntity=function(){e.props.onEntitySelected(e.state.selectedEntityIndex),e.props.clearOnSelection?e.setValue(""):e.setValue(e.getSelectedEntityText()),window.setTimeout(e.resetMatches,0)},this.markMatchSubstring=function(){return e.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return e.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(t){e.state.isControlled===!1&&(e.updateInputState(t.target.value),e.computeMatches()),P(e.props.inputProps.onChange)&&e.props.inputProps.onChange(t)},this.handleKeyDown=function(t){switch(t.key){case"ArrowLeft":t.target.selectionStart>1&&t.stopPropagation();break;case"Tab":case"ArrowRight":e.state.selectedEntityIndex!==-1&&e.cursorAtEndOfInput()&&e.getInputNode()===t.target&&!t.shiftKey&&(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity());break;case"ArrowUp":t.nativeEvent.preventDefault(),e.selectMatch(-1),e.focus();break;case"ArrowDown":t.nativeEvent.preventDefault(),e.selectMatch(1),e.focus();break;case"Escape":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target&&e.resetMatches();break;case"Enter":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target?(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity()):e.props.onComplete(e.state.input,t)}P(e.props.onKeyDown)&&e.props.onKeyDown(t)}};t.default=M}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGRiZmY3Yzk2YjM1NjliMjBmNmJjIiwid2VicGFjazovLy9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcImJvdW5kbGVzcy1pbnB1dFwifSIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvblwifSIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcImJvdW5kbGVzcy11dGlscy11dWlkXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcImNsYXNzbmFtZXNcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcImNvbW1vbmpzMlwiOlwiZXNjYXBlLXN0cmluZy1yZWdleHBcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcImNvbW1vbmpzMlwiOlwicmVhY3RcIn0iLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsInZhbHVlIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIm9iaiIsImtleXMiLCJ0YXJnZXQiLCJpbmRleE9mIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9lc2NhcGVfc3RyaW5nX3JlZ2V4cF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2VzY2FwZV9zdHJpbmdfcmVnZXhwX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2JvdW5kbGVzc191dGlsc191dWlkX19fZGVmYXVsdCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImlzRnVuY3Rpb24iLCJ4IiwiaXNTdHJpbmciLCJub29wIiwiVHlwZWFoZWFkIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJfcmVmIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJ0aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiY29uY2F0IiwiX2luaXRpYWxpc2VQcm9wcyIsImlucHV0UHJvcHMiLCJkZWZhdWx0VmFsdWUiLCJjb21wdXRlTWF0Y2hlcyIsIm1vdW50ZWQiLCJzdGF0ZSIsInNlbGVjdGVkRW50aXR5SW5kZXgiLCJvbkVudGl0eUhpZ2hsaWdodGVkIiwibmV4dFByb3BzIiwiZW50aXRpZXMiLCJ1cGRhdGVJbnB1dFN0YXRlIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiZW50aXR5TWF0Y2hJbmRleGVzIiwicmVmcyIsIm1hdGNoZXMiLCJzY3JvbGxUb3AiLCJpbmRleCIsInNldFN0YXRlIiwic2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkiLCJkZWx0YSIsInRvdGFsTWF0Y2hlcyIsIm5leHRJbmRleCIsIm1hdGNoSW5kZXgiLCJtYXRjaGVzTm9kZSIsIm1hdGNoZXNOb2RlWUVuZCIsImNsaWVudEhlaWdodCIsIm1hdGNoTm9kZSIsIm1hdGNoTm9kZVlTdGFydCIsIm9mZnNldFRvcCIsIm1hdGNoTm9kZVlFbmQiLCJub2RlIiwiZ2V0SW5wdXROb2RlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRWYWx1ZSIsImlucHV0IiwiZW50aXR5IiwiZW50aXR5Q29udGVudCIsInRleHQiLCJmcmFncyIsInNwbGl0IiwiUmVnRXhwIiwibm9ybWFsaXplZFVzZXJUZXh0IiwidG9Mb3dlckNhc2UiLCJ0aHJlc2hvbGQiLCJhIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInNlZWtWYWx1ZSIsImluZGV4U3RhcnQiLCJpbmRleEVuZCIsInNsaWNlIiwiYWxnb3JpdGhtIiwibW9kZSIsIlNUQVJUU19XSVRIIiwibWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZyIsIm1hcmtGdXp6eU1hdGNoU3Vic3RyaW5nIiwibWFya2VyIiwidW5kZWZpbmVkIiwid2FybmVkTWFya2VyIiwiY29uc29sZSIsIndhcm4iLCJ1c2VyVGV4dCIsIm5vcm1hbGl6ZWQiLCJyZWR1Y2UiLCJyZXN1bHQiLCJwdXNoIiwicmVzdWx0cyIsImdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXMiLCJnZXRGdXp6eU1hdGNoSW5kZXhlcyIsIm1hdGNoZXIiLCJ3YXJuZWRNYXRjaGVyIiwicHJvdmlkZWRFbnRpdGllcyIsIl90aGlzMiIsImN1cnJlbnRWYWx1ZSIsImdldE1hdGNoSW5kZXhlcyIsInJlZiIsImlkIiwib2Zmc2NyZWVuQ2xhc3MiLCJhcmlhLWxpdmUiLCJnZXRTZWxlY3RlZEVudGl0eVRleHQiLCJoaW50IiwicmF3IiwicHJvY2Vzc2VkIiwicmVwbGFjZSIsImhpbnRQcm9wcyIsInRhYkluZGV4IiwiX3RoaXMzIiwibWF0Y2hXcmFwcGVyUHJvcHMiLCJtYXAiLCJyZXN0IiwiYi10eXBlYWhlYWQtbWF0Y2gtc2VsZWN0ZWQiLCJvbkNsaWNrIiwiaGFuZGxlTWF0Y2hDbGljayIsImJpbmQiLCJtYXJrTWF0Y2hTdWJzdHJpbmciLCJpbnRlcm5hbEtleXMiLCJvbktleURvd24iLCJoYW5kbGVLZXlEb3duIiwicmVuZGVyTm90aWZpY2F0aW9uIiwicmVuZGVySGludCIsImRlZmF1bHRQcm9wcyIsImFyaWEtY29udHJvbHMiLCJvbkNoYW5nZSIsImhhbmRsZUNoYW5nZSIsInJlbmRlck1hdGNoZXMiLCJQdXJlQ29tcG9uZW50IiwiRlVaWlkiLCJwcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJvbmVPZiIsInNoYXBlIiwiZnVuYyIsImNsZWFyT25TZWxlY3Rpb24iLCJib29sIiwiYXJyYXlPZiIsInN0cmluZyIsImlzUmVxdWlyZWQiLCIqIiwiYW55Iiwib25Db21wbGV0ZSIsIm9uRW50aXR5U2VsZWN0ZWQiLCJfdGhpczQiLCJpc0NvbnRyb2xsZWQiLCJyZXNldE1hdGNoZXMiLCJmaWVsZCIsInNlbGVjdCIsImZvY3VzIiwic2V0VmFsdWUiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwiZ2V0TWFya2luZ0Z1bmN0aW9uIiwiZ2V0TWF0Y2hpbmdGdW5jdGlvbiIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiY3Vyc29yQXRFbmRPZklucHV0Iiwic2hpZnRLZXkiLCJuYXRpdmVFdmVudCIsInByZXZlbnREZWZhdWx0Iiwic2VsZWN0TWF0Y2giXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxRQUNFLFNBQVVDLEdDR25CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBSCxPQUdBLElBQUFELEdBQUFLLEVBQUFELElBQ0FFLEVBQUFGLEVBQ0FHLEdBQUEsRUFDQU4sV0FVQSxPQU5BQyxHQUFBRSxHQUFBSSxLQUFBUixFQUFBQyxRQUFBRCxJQUFBQyxRQUFBRSxHQUdBSCxFQUFBTyxHQUFBLEVBR0FQLEVBQUFDLFFBdkJBLEdBQUFJLEtBK0RBLE9BbkNBRixHQUFBTSxFQUFBUCxFQUdBQyxFQUFBTyxFQUFBTCxFQUdBRixFQUFBRyxFQUFBLFNBQUFLLEdBQTJDLE1BQUFBLElBRzNDUixFQUFBUyxFQUFBLFNBQUFYLEVBQUFZLEVBQUFDLEdBQ0FYLEVBQUFZLEVBQUFkLEVBQUFZLElBQ0FHLE9BQUFDLGVBQUFoQixFQUFBWSxH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SSxFQUFLakosTUFBTXVCLFdBQVd1RyxXQUNqQ21CLEVBQUtqSixNQUFNdUIsV0FBV3VHLFNBQVM4QixJVHpXbStjOUksS1M2VzFnZDJHLGNBQWdCLFNBQUNtQyxHQUNiLE9BQVFBLEVBQU0vSixLQUNkLElBQUssWUFDRytKLEVBQU1uTSxPQUFPOEYsZUFBaUIsR0FDOUJxRyxFQUFNQyxpQkFHVixNQUVKLEtBQUssTUFDTCxJQUFLLGFBQ01aLEVBQUt0SCxNQUFNQyx1QkFBd0IsR0FDbkNxSCxFQUFLYSxzQkFDTGIsRUFBSzNGLGlCQUFtQnNHLEVBQU1uTSxTQUM3Qm1NLEVBQU1HLFdBQ1ZILEVBQU1JLFlBQVlDLGlCQUNsQmhCLEVBQUt4Ryw2QkFHVCxNQUVKLEtBQUssVUFDRG1ILEVBQU1JLFlBQVlDLGlCQUNsQmhCLEVBQUtpQixhQUFZLEdBQ2pCakIsRUFBS0ssT0FDTCxNQUVKLEtBQUssWUFDRE0sRUFBTUksWUFBWUMsaUJBQ2xCaEIsRUFBS2lCLFlBQVksR0FDakJqQixFQUFLSyxPQUNMLE1BRUosS0FBSyxTQUNNTCxFQUFLdEgsTUFBTUMsdUJBQXdCLEdBQ25DcUgsRUFBSzNGLGlCQUFtQnNHLEVBQU1uTSxRQUNqQ3dMLEVBQUtFLGNBR1QsTUFFSixLQUFLLFFBQ01GLEVBQUt0SCxNQUFNQyx1QkFBd0IsR0FDbkNxSCxFQUFLM0YsaUJBQW1Cc0csRUFBTW5NLFFBQ2pDbU0sRUFBTUksWUFBWUMsaUJBQ2xCaEIsRUFBS3hHLDhCQUVMd0csRUFBS2pKLE1BQU0rSSxXQUFXRSxFQUFLdEgsTUFBTStCLE1BQU9rRyxHQU01Q3hKLEVBQVc2SSxFQUFLakosTUFBTXdILFlBQ3RCeUIsRUFBS2pKLE1BQU13SCxVQUFVb0MsSVRuYXk5ZXZNLEdBQTZCLFFTL0NsZ2ZtRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLWlucHV0XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb25cIik7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLXV0aWxzLXV1aWRcIik7XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXNjYXBlLXN0cmluZy1yZWdleHBcIik7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2VzY2FwZV9zdHJpbmdfcmVnZXhwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9lc2NhcGVfc3RyaW5nX3JlZ2V4cF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2VzY2FwZV9zdHJpbmdfcmVnZXhwX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19pbnB1dF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19pbnB1dF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX3V1aWRfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLGtleXMpe3ZhciB0YXJnZXQ9e307Zm9yKHZhciBpIGluIG9iail7aWYoa2V5cy5pbmRleE9mKGkpPj0wKWNvbnRpbnVlO2lmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLGkpKWNvbnRpbnVlO3RhcmdldFtpXT1vYmpbaV07fXJldHVybiB0YXJnZXQ7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgaXNGdW5jdGlvbj1mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpe3JldHVybiB0eXBlb2YgeD09PSdmdW5jdGlvbic7fTt2YXIgaXNTdHJpbmc9ZnVuY3Rpb24gaXNTdHJpbmcoeCl7cmV0dXJuIHR5cGVvZiB4PT09J3N0cmluZyc7fTt2YXIgbm9vcD1mdW5jdGlvbiBub29wKCl7fTt2YXIgVHlwZWFoZWFkPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoVHlwZWFoZWFkLF9SZWFjdCRQdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBUeXBlYWhlYWQoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxUeXBlYWhlYWQpO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9VHlwZWFoZWFkLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFR5cGVhaGVhZCkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoVHlwZWFoZWFkLFt7a2V5Oidjb21wb25lbnRXaWxsTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe2lmKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZXx8dGhpcy5wcm9wcy5pbnB1dFByb3BzLmRlZmF1bHRWYWx1ZSl7dGhpcy5jb21wdXRlTWF0Y2hlcygpO319fSx7a2V5Oidjb21wb25lbnREaWRNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKXt0aGlzLm1vdW50ZWQ9dHJ1ZTtpZih0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXg+PTApe3RoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO319fSx7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7aWYobmV4dFByb3BzLmVudGl0aWVzIT09dGhpcy5wcm9wcy5lbnRpdGllcyl7dGhpcy5jb21wdXRlTWF0Y2hlcyhuZXh0UHJvcHMuZW50aXRpZXMpO31pZihuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSE9PXRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSl7dGhpcy51cGRhdGVJbnB1dFN0YXRlKG5leHRQcm9wcy5pbnB1dFByb3BzLnZhbHVlKTt0aGlzLmNvbXB1dGVNYXRjaGVzKCk7fX19LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcyxwcmV2U3RhdGUpe2lmKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCYmIXByZXZTdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubGVuZ3RoKXt0aGlzLnJlZnMubWF0Y2hlcy5zY3JvbGxUb3A9MDt9aWYodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4Pj0wJiZ0aGlzLnByb3BzLmVudGl0aWVzW3RoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0hPT1wcmV2UHJvcHMuZW50aXRpZXNbcHJldlN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdKXt0aGlzLnByb3BzLm9uRW50aXR5SGlnaGxpZ2h0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTt9fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5tb3VudGVkPWZhbHNlO319LHtrZXk6J2hhbmRsZU1hdGNoQ2xpY2snLHZhbHVlOmZ1bmN0aW9uIGhhbmRsZU1hdGNoQ2xpY2soaW5kZXgpe3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkRW50aXR5SW5kZXg6aW5kZXh9LHRoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkpO319LHtrZXk6J3NlbGVjdE1hdGNoJyx2YWx1ZTpmdW5jdGlvbiBzZWxlY3RNYXRjaChkZWx0YSl7dmFyIG1hdGNoZXM9dGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXM7dmFyIHRvdGFsTWF0Y2hlcz1tYXRjaGVzLmxlbmd0aDt2YXIgbmV4dEluZGV4PW1hdGNoZXMuaW5kZXhPZih0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpK2RlbHRhO2lmKHRvdGFsTWF0Y2hlcyl7aWYobmV4dEluZGV4PDApe25leHRJbmRleD10b3RhbE1hdGNoZXMtMTt9ZWxzZSBpZihuZXh0SW5kZXg+PXRvdGFsTWF0Y2hlcyl7bmV4dEluZGV4PTA7fXZhciBtYXRjaEluZGV4PW1hdGNoZXNbbmV4dEluZGV4XTt2YXIgbWF0Y2hlc05vZGU9dGhpcy5yZWZzLm1hdGNoZXM7dmFyIG1hdGNoZXNOb2RlWUVuZD1tYXRjaGVzTm9kZS5zY3JvbGxUb3ArbWF0Y2hlc05vZGUuY2xpZW50SGVpZ2h0O3ZhciBtYXRjaE5vZGU9dGhpcy5yZWZzWydtYXRjaF8kJyttYXRjaEluZGV4XTt2YXIgbWF0Y2hOb2RlWVN0YXJ0PW1hdGNoTm9kZS5vZmZzZXRUb3A7dmFyIG1hdGNoTm9kZVlFbmQ9bWF0Y2hOb2RlWVN0YXJ0K21hdGNoTm9kZS5jbGllbnRIZWlnaHQ7aWYobWF0Y2hOb2RlWUVuZD49bWF0Y2hlc05vZGVZRW5kKXttYXRjaGVzTm9kZS5zY3JvbGxUb3ArPW1hdGNoTm9kZVlFbmQtbWF0Y2hlc05vZGVZRW5kO31lbHNlIGlmKG1hdGNoTm9kZVlTdGFydDw9bWF0Y2hlc05vZGUuc2Nyb2xsVG9wKXttYXRjaGVzTm9kZS5zY3JvbGxUb3A9bWF0Y2hOb2RlWVN0YXJ0O310aGlzLnNldFN0YXRlKHtzZWxlY3RlZEVudGl0eUluZGV4Om1hdGNoSW5kZXh9KTt9fX0se2tleTonY3Vyc29yQXRFbmRPZklucHV0Jyx2YWx1ZTpmdW5jdGlvbiBjdXJzb3JBdEVuZE9mSW5wdXQoKXt2YXIgbm9kZT10aGlzLmdldElucHV0Tm9kZSgpO3JldHVybiBub2RlLnNlbGVjdGlvblN0YXJ0PT09bm9kZS5zZWxlY3Rpb25FbmQmJm5vZGUuc2VsZWN0aW9uRW5kPT09dGhpcy5nZXRWYWx1ZSgpLmxlbmd0aDt9fSx7a2V5OidtYXJrRnV6enlNYXRjaFN1YnN0cmluZycsdmFsdWU6ZnVuY3Rpb24gbWFya0Z1enp5TWF0Y2hTdWJzdHJpbmcoaW5wdXQsZW50aXR5KXt2YXIgZW50aXR5Q29udGVudD1lbnRpdHkudGV4dDt2YXIgZnJhZ3M9ZW50aXR5Q29udGVudC5zcGxpdChuZXcgUmVnRXhwKCcoJytfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfZXNjYXBlX3N0cmluZ19yZWdleHBfX19kZWZhdWx0KCkoaW5wdXQpKycpJywnaWcnKSk7dmFyIG5vcm1hbGl6ZWRVc2VyVGV4dD1pbnB1dC50b0xvd2VyQ2FzZSgpO3ZhciB0aHJlc2hvbGQ9ZnJhZ3MubGVuZ3RoO3ZhciBpPS0xO3doaWxlKCsraTx0aHJlc2hvbGQpe2lmKGZyYWdzW2ldLnRvTG93ZXJDYXNlKCk9PT1ub3JtYWxpemVkVXNlclRleHQpe2ZyYWdzW2ldPV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdtYXJrJyx7a2V5OmksY2xhc3NOYW1lOidiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnfSxmcmFnc1tpXSk7fX1yZXR1cm4gZnJhZ3M7fX0se2tleTonbWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZycsdmFsdWU6ZnVuY3Rpb24gbWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZyhpbnB1dCxlbnRpdHkpe3ZhciBlbnRpdHlDb250ZW50PWVudGl0eS50ZXh0O3ZhciBzZWVrVmFsdWU9aW5wdXQudG9Mb3dlckNhc2UoKTt2YXIgaW5kZXhTdGFydD1lbnRpdHlDb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpO3ZhciBpbmRleEVuZD1pbmRleFN0YXJ0K3NlZWtWYWx1ZS5sZW5ndGg7cmV0dXJuW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdzcGFuJyx7a2V5OicwJ30sZW50aXR5Q29udGVudC5zbGljZSgwLGluZGV4U3RhcnQpKSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnbWFyaycse2tleTonMScsY2xhc3NOYW1lOidiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnfSxlbnRpdHlDb250ZW50LnNsaWNlKGluZGV4U3RhcnQsaW5kZXhFbmQpKSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnc3Bhbicse2tleTonMid9LGVudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhFbmQpKV07fX0se2tleTonZ2V0TWFya2luZ0Z1bmN0aW9uJyx2YWx1ZTpmdW5jdGlvbiBnZXRNYXJraW5nRnVuY3Rpb24oKXtpZihpc1N0cmluZyh0aGlzLnByb3BzLmFsZ29yaXRobSkpe2lmKHRoaXMucHJvcHMuYWxnb3JpdGhtPT09VHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgpe3JldHVybiB0aGlzLm1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmc7fXJldHVybiB0aGlzLm1hcmtGdXp6eU1hdGNoU3Vic3RyaW5nO31lbHNlIGlmKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5hbGdvcml0aG0ubWFya2VyKSl7cmV0dXJuIHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcjt9aWYodGhpcy53YXJuZWRNYXJrZXI9PT11bmRlZmluZWQpe3RoaXMud2FybmVkTWFya2VyPXRydWU7Y29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWFya2VyYCB3YXMgcHJvdmlkZWQ7IGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBtYXJraW5nIGFsZ29yaXRobSAoRlVaWlkpLicpO31yZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZzt9fSx7a2V5OidnZXRGdXp6eU1hdGNoSW5kZXhlcycsdmFsdWU6ZnVuY3Rpb24gZ2V0RnV6enlNYXRjaEluZGV4ZXModXNlclRleHQsZW50aXRpZXMpe3ZhciBub3JtYWxpemVkPXVzZXJUZXh0LnRvTG93ZXJDYXNlKCk7cmV0dXJuIGVudGl0aWVzLnJlZHVjZShmdW5jdGlvbiBmaW5kSW5kZXhlcyhyZXN1bHQsZW50aXR5LGluZGV4KXtyZXR1cm4gZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKG5vcm1hbGl6ZWQpIT09LTE/cmVzdWx0LnB1c2goaW5kZXgpJiZyZXN1bHQ6cmVzdWx0O30sW10pO319LHtrZXk6J2dldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXMnLHZhbHVlOmZ1bmN0aW9uIGdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXModXNlclRleHQsZW50aXRpZXMpe3ZhciBzZWVrVmFsdWU9dXNlclRleHQudG9Mb3dlckNhc2UoKTtyZXR1cm4gZW50aXRpZXMucmVkdWNlKGZ1bmN0aW9uIHNlZWtNYXRjaChyZXN1bHRzLGVudGl0eSxpbmRleCl7aWYoZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlZWtWYWx1ZSk9PT0wKXtyZXN1bHRzLnB1c2goaW5kZXgpO31yZXR1cm4gcmVzdWx0czt9LFtdKTt9fSx7a2V5OidnZXRNYXRjaGluZ0Z1bmN0aW9uJyx2YWx1ZTpmdW5jdGlvbiBnZXRNYXRjaGluZ0Z1bmN0aW9uKCl7aWYoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKXtpZih0aGlzLnByb3BzLmFsZ29yaXRobT09PVR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKXtyZXR1cm4gdGhpcy5nZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzO31yZXR1cm4gdGhpcy5nZXRGdXp6eU1hdGNoSW5kZXhlczt9ZWxzZSBpZihpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hdGNoZXIpKXtyZXR1cm4gdGhpcy5wcm9wcy5hbGdvcml0aG0ubWF0Y2hlcjt9aWYodGhpcy53YXJuZWRNYXRjaGVyPT09dW5kZWZpbmVkKXt0aGlzLndhcm5lZE1hdGNoZXI9dHJ1ZTtjb25zb2xlLndhcm4oJ1R5cGVhaGVhZDogbm8gYHByb3BzLmFsZ29yaXRobS5tYXRjaGVyYCB3YXMgcHJvdmlkZWQ7IGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBtYXRjaGluZyBhbGdvcml0aG0gKEZVWlpZKS4nKTt9cmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7fX0se2tleTonY29tcHV0ZU1hdGNoZXMnLHZhbHVlOmZ1bmN0aW9uIGNvbXB1dGVNYXRjaGVzKHByb3ZpZGVkRW50aXRpZXMpe3ZhciBfdGhpczI9dGhpczt0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKHN0YXRlLHByb3BzKXt2YXIgZW50aXRpZXM9cHJvdmlkZWRFbnRpdGllc3x8cHJvcHMuZW50aXRpZXM7dmFyIGN1cnJlbnRWYWx1ZT1zdGF0ZS5pbnB1dDt2YXIgbWF0Y2hlcz1jdXJyZW50VmFsdWU9PT0nJz9bXTpfdGhpczIuZ2V0TWF0Y2hJbmRleGVzKGN1cnJlbnRWYWx1ZSxlbnRpdGllcyk7cmV0dXJue3NlbGVjdGVkRW50aXR5SW5kZXg6bWF0Y2hlcy5sZW5ndGg/bWF0Y2hlc1swXTotMSxlbnRpdHlNYXRjaEluZGV4ZXM6bWF0Y2hlc307fSk7fX0se2tleToncmVuZGVyTm90aWZpY2F0aW9uJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJOb3RpZmljYXRpb24oKXtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2Rpdicse3JlZjonYXJpYScsaWQ6dGhpcy5zdGF0ZS5pZCxjbGFzc05hbWU6dGhpcy5wcm9wcy5vZmZzY3JlZW5DbGFzcywnYXJpYS1saXZlJzoncG9saXRlJ30sdGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQoKSk7fX0se2tleToncmVuZGVySGludCcsdmFsdWU6ZnVuY3Rpb24gcmVuZGVySGludCgpe2lmKHRoaXMucHJvcHMuaGludCl7dmFyIHVzZXJUZXh0PXRoaXMuc3RhdGUuaW5wdXQ7dmFyIHJhdz10aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dCgpO3ZhciBwcm9jZXNzZWQ9Jyc7aWYocmF3JiZyYXcudG9Mb3dlckNhc2UoKS5pbmRleE9mKHVzZXJUZXh0LnRvTG93ZXJDYXNlKCkpPT09MCl7cHJvY2Vzc2VkPXJhdy5yZXBsYWNlKG5ldyBSZWdFeHAodXNlclRleHQsJ2knKSx1c2VyVGV4dCk7fXJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmhpbnRQcm9wcyx7cmVmOidoaW50JyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItaW5wdXQnLCdiLWlucHV0LXBsYWNlaG9sZGVyJywnYi10eXBlYWhlYWQtaGludCcsdGhpcy5wcm9wcy5oaW50UHJvcHMuY2xhc3NOYW1lKSx0YWJJbmRleDonLTEnfSkscHJvY2Vzc2VkKTt9fX0se2tleToncmVuZGVyTWF0Y2hlcycsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcygpe3ZhciBfdGhpczM9dGhpcztpZih0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgpe3ZhciBwcm9wcz10aGlzLnByb3BzLm1hdGNoV3JhcHBlclByb3BzO3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxfZXh0ZW5kcyh7fSxwcm9wcyx7cmVmOidtYXRjaGVzJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItdHlwZWFoZWFkLW1hdGNoLXdyYXBwZXInLHByb3BzLmNsYXNzTmFtZSl9KSx0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5tYXAoZnVuY3Rpb24oaW5kZXgpe3ZhciBlbnRpdHk9X3RoaXMzLnByb3BzLmVudGl0aWVzW2luZGV4XTt2YXIgY2xhc3NOYW1lPWVudGl0eS5jbGFzc05hbWUsdGV4dD1lbnRpdHkudGV4dCxyZXN0PV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlbnRpdHksWydjbGFzc05hbWUnLCd0ZXh0J10pO3JldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgnZGl2JyxfZXh0ZW5kcyh7fSxyZXN0LHtyZWY6J21hdGNoXyQnK2luZGV4LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi10eXBlYWhlYWQtbWF0Y2gnLGNsYXNzTmFtZSx7J2ItdHlwZWFoZWFkLW1hdGNoLXNlbGVjdGVkJzpfdGhpczMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleD09PWluZGV4fSksa2V5OnRleHQsb25DbGljazpfdGhpczMuaGFuZGxlTWF0Y2hDbGljay5iaW5kKF90aGlzMyxpbmRleCl9KSxfdGhpczMubWFya01hdGNoU3Vic3RyaW5nKF90aGlzMy5zdGF0ZS5pbnB1dCxlbnRpdHkpKTt9KSk7fX19LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIHByb3BzPXRoaXMucHJvcHMsc3RhdGU9dGhpcy5zdGF0ZTtyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoJ2RpdicsX2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX19kZWZhdWx0KCkocHJvcHMsVHlwZWFoZWFkLmludGVybmFsS2V5cykse3JlZjond3JhcHBlcicsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXR5cGVhaGVhZC13cmFwcGVyJyxwcm9wcy5jbGFzc05hbWUpLG9uS2V5RG93bjp0aGlzLmhhbmRsZUtleURvd259KSx0aGlzLnJlbmRlck5vdGlmaWNhdGlvbigpLHRoaXMucmVuZGVySGludCgpLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfX19kZWZhdWx0LmEsX2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX19fZGVmYXVsdCgpKHByb3BzLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfX19kZWZhdWx0LmEuZGVmYXVsdFByb3BzKSx7cmVmOidpbnB1dCcsJ2FyaWEtY29udHJvbHMnOnN0YXRlLmlkLGlucHV0UHJvcHM6X2V4dGVuZHMoe30scHJvcHMuaW5wdXRQcm9wcyx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXR5cGVhaGVhZCcscHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpLG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlfSl9KSksdGhpcy5yZW5kZXJNYXRjaGVzKCkpO319XSk7cmV0dXJuIFR5cGVhaGVhZDt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtUeXBlYWhlYWQubW9kZT17J1NUQVJUU19XSVRIJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX3V1aWRfX19kZWZhdWx0KCkoKSwnRlVaWlknOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fX2RlZmF1bHQoKSgpfTtUeXBlYWhlYWQucHJvcFR5cGVzPV9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfaW5wdXRfX19kZWZhdWx0LmEucHJvcFR5cGVzLHthbGdvcml0aG06X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZihbVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsVHlwZWFoZWFkLm1vZGUuRlVaWlldKSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZSh7bWFya2VyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuYyxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5vbmVPZihbVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsVHlwZWFoZWFkLm1vZGUuRlVaWlldKV0pLG1hdGNoZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0ub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLm9uZU9mKFtUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxUeXBlYWhlYWQubW9kZS5GVVpaWV0pXSl9KV0pLGNsZWFyT25TZWxlY3Rpb246X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCxlbnRpdGllczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hcnJheU9mKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnNoYXBlKHt0ZXh0Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZy5pc1JlcXVpcmVkfSkpLGhpbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uYm9vbCxoaW50UHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5hbnl9KSxtYXRjaFdyYXBwZXJQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmFueX0pLG9mZnNjcmVlbkNsYXNzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLnN0cmluZyxvbkNvbXBsZXRlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fW1wiUHJvcFR5cGVzXCJdLmZ1bmMsb25FbnRpdHlIaWdobGlnaHRlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX1tcIlByb3BUeXBlc1wiXS5mdW5jLG9uRW50aXR5U2VsZWN0ZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19bXCJQcm9wVHlwZXNcIl0uZnVuY30pO1R5cGVhaGVhZC5kZWZhdWx0UHJvcHM9X2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19pbnB1dF9fX2RlZmF1bHQuYS5kZWZhdWx0UHJvcHMse2FsZ29yaXRobTpUeXBlYWhlYWQubW9kZS5GVVpaWSxjbGVhck9uU2VsZWN0aW9uOmZhbHNlLGVudGl0aWVzOltdLGhpbnQ6bnVsbCxoaW50UHJvcHM6e30sbWF0Y2hXcmFwcGVyUHJvcHM6e30sb2Zmc2NyZWVuQ2xhc3M6J2Itb2Zmc2NyZWVuJyxvbkNvbXBsZXRlOm5vb3Asb25FbnRpdHlIaWdobGlnaHRlZDpub29wLG9uRW50aXR5U2VsZWN0ZWQ6bm9vcH0pO1R5cGVhaGVhZC5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoVHlwZWFoZWFkLmRlZmF1bHRQcm9wcyk7dmFyIF9pbml0aWFsaXNlUHJvcHM9ZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpe3ZhciBfdGhpczQ9dGhpczt0aGlzLnN0YXRlPXtlbnRpdHlNYXRjaEluZGV4ZXM6W10saWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2JvdW5kbGVzc191dGlsc191dWlkX19fZGVmYXVsdCgpKCksaXNDb250cm9sbGVkOmlzU3RyaW5nKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSksaW5wdXQ6dGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlfHx0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlfHwnJyxzZWxlY3RlZEVudGl0eUluZGV4Oi0xfTt0aGlzLm1vdW50ZWQ9ZmFsc2U7dGhpcy51cGRhdGVJbnB1dFN0YXRlPWZ1bmN0aW9uKCl7dmFyIHZhbHVlPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1swXTonJztyZXR1cm4gX3RoaXM0LnNldFN0YXRlKHtpbnB1dDp2YWx1ZX0pO307dGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQ9ZnVuY3Rpb24oKXt2YXIgZW50aXR5PV90aGlzNC5wcm9wcy5lbnRpdGllc1tfdGhpczQuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF07cmV0dXJuIGVudGl0eT9lbnRpdHkudGV4dDonJzt9O3RoaXMucmVzZXRNYXRjaGVzPWZ1bmN0aW9uKCl7aWYoX3RoaXM0Lm1vdW50ZWQpe190aGlzNC5zZXRTdGF0ZSh7c2VsZWN0ZWRFbnRpdHlJbmRleDotMSxlbnRpdHlNYXRjaEluZGV4ZXM6W119KTt9fTt0aGlzLmdldElucHV0Tm9kZT1mdW5jdGlvbigpe3JldHVybiBfdGhpczQucmVmcy5pbnB1dC5yZWZzLmZpZWxkO307dGhpcy5zZWxlY3Q9ZnVuY3Rpb24oKXt2YXIgaW5wdXQ9X3RoaXM0LmdldElucHV0Tm9kZSgpO2lucHV0LnNlbGVjdGlvblN0YXJ0PTA7aW5wdXQuc2VsZWN0aW9uRW5kPV90aGlzNC5nZXRWYWx1ZSgpLmxlbmd0aDt9O3RoaXMuZm9jdXM9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXM0LmdldElucHV0Tm9kZSgpLmZvY3VzKCk7fTt0aGlzLmdldFZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzNC5yZWZzLmlucHV0LmdldFZhbHVlKCk7fTt0aGlzLnNldFZhbHVlPWZ1bmN0aW9uKCl7dmFyIHZhbHVlPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1swXTonJztfdGhpczQucmVmcy5pbnB1dC5zZXRWYWx1ZSh2YWx1ZSk7X3RoaXM0LnVwZGF0ZUlucHV0U3RhdGUodmFsdWUpO190aGlzNC5yZXNldE1hdGNoZXMoKTtfdGhpczQuZm9jdXMoKTt9O3RoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHk9ZnVuY3Rpb24oKXtfdGhpczQucHJvcHMub25FbnRpdHlTZWxlY3RlZChfdGhpczQuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCk7aWYoX3RoaXM0LnByb3BzLmNsZWFyT25TZWxlY3Rpb24pe190aGlzNC5zZXRWYWx1ZSgnJyk7fWVsc2V7X3RoaXM0LnNldFZhbHVlKF90aGlzNC5nZXRTZWxlY3RlZEVudGl0eVRleHQoKSk7fXdpbmRvdy5zZXRUaW1lb3V0KF90aGlzNC5yZXNldE1hdGNoZXMsMCk7fTt0aGlzLm1hcmtNYXRjaFN1YnN0cmluZz1mdW5jdGlvbigpe3JldHVybiBfdGhpczQuZ2V0TWFya2luZ0Z1bmN0aW9uKCkuYXBwbHkodW5kZWZpbmVkLGFyZ3VtZW50cyk7fTt0aGlzLmdldE1hdGNoSW5kZXhlcz1mdW5jdGlvbigpe3JldHVybiBfdGhpczQuZ2V0TWF0Y2hpbmdGdW5jdGlvbigpLmFwcGx5KHVuZGVmaW5lZCxhcmd1bWVudHMpO307dGhpcy5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzNC5zdGF0ZS5pc0NvbnRyb2xsZWQ9PT1mYWxzZSl7X3RoaXM0LnVwZGF0ZUlucHV0U3RhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtfdGhpczQuY29tcHV0ZU1hdGNoZXMoKTt9aWYoaXNGdW5jdGlvbihfdGhpczQucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpe190aGlzNC5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTt9fTt0aGlzLmhhbmRsZUtleURvd249ZnVuY3Rpb24oZXZlbnQpe3N3aXRjaChldmVudC5rZXkpe2Nhc2UnQXJyb3dMZWZ0JzppZihldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQ+MSl7ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fWJyZWFrO2Nhc2UnVGFiJzpjYXNlJ0Fycm93UmlnaHQnOmlmKF90aGlzNC5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4IT09LTEmJl90aGlzNC5jdXJzb3JBdEVuZE9mSW5wdXQoKSYmX3RoaXM0LmdldElucHV0Tm9kZSgpPT09ZXZlbnQudGFyZ2V0JiYhZXZlbnQuc2hpZnRLZXkpe2V2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3RoaXM0LnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KCk7fWJyZWFrO2Nhc2UnQXJyb3dVcCc6ZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpczQuc2VsZWN0TWF0Y2goLTEpO190aGlzNC5mb2N1cygpO2JyZWFrO2Nhc2UnQXJyb3dEb3duJzpldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzNC5zZWxlY3RNYXRjaCgxKTtfdGhpczQuZm9jdXMoKTticmVhaztjYXNlJ0VzY2FwZSc6aWYoX3RoaXM0LnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXghPT0tMSYmX3RoaXM0LmdldElucHV0Tm9kZSgpPT09ZXZlbnQudGFyZ2V0KXtfdGhpczQucmVzZXRNYXRjaGVzKCk7fWJyZWFrO2Nhc2UnRW50ZXInOmlmKF90aGlzNC5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4IT09LTEmJl90aGlzNC5nZXRJbnB1dE5vZGUoKT09PWV2ZW50LnRhcmdldCl7ZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpczQuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkoKTt9ZWxzZXtfdGhpczQucHJvcHMub25Db21wbGV0ZShfdGhpczQuc3RhdGUuaW5wdXQsZXZlbnQpO31icmVhazt9aWYoaXNGdW5jdGlvbihfdGhpczQucHJvcHMub25LZXlEb3duKSl7X3RoaXM0LnByb3BzLm9uS2V5RG93bihldmVudCk7fX07fTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gVHlwZWFoZWFkO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGluZGV4LmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZGJmZjdjOTZiMzU2OWIyMGY2YmMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtaW5wdXRcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtaW5wdXRcIn1cbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb25cIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvblwifVxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImNvbW1vbmpzMlwiOlwiYm91bmRsZXNzLXV0aWxzLW9taXQta2V5c1wifVxuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtdXRpbHMtdXVpZFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qczJcIjpcImJvdW5kbGVzcy11dGlscy11dWlkXCJ9XG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJjbGFzc25hbWVzXCJ9XG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImVzY2FwZS1zdHJpbmctcmVnZXhwXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImNvbW1vbmpzMlwiOlwiZXNjYXBlLXN0cmluZy1yZWdleHBcIn1cbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJyZWFjdFwifVxuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBlc2NhcGVyIGZyb20gJ2VzY2FwZS1zdHJpbmctcmVnZXhwJztcblxuaW1wb3J0IElucHV0IGZyb20gJ2JvdW5kbGVzcy1pbnB1dCc7XG5pbXBvcnQgZXh0cmFjdENoaWxkUHJvcHMgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb24nO1xuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5pbXBvcnQgdXVpZCBmcm9tICdib3VuZGxlc3MtdXRpbHMtdXVpZCc7XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSAoeCkgPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1N0cmluZyA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ3N0cmluZyc7XG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8qKlxuX19JbnRlbGxpZ2VudGx5IHJlY29tbWVuZCBlbnRpdGllcyB2aWEgY3VzdG9taXphYmxlLCBmdXp6eSByZWNvZ25pdGlvbi5fX1xuXG5UeXBlYWhlYWQgaXMgYW4gZW5oYW5jZW1lbnQgdXBvbiBbSW5wdXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9lbmlnbWEtaW8vYm91bmRsZXNzL3RyZWUvbWFzdGVyL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dCkgd2hpY2ggcHJvdmlkZXMgdHdvIGJ1aWx0LWluIG1hdGNoaW5nIGFsZ29yaXRobXMgKFwiZnV6enlcIiBcXFtkZWZhdWx0XFxdIGFuZCBcInN0YXJ0cy13aXRoXCIpIGFuZCBzdXBwb3J0cyB0aGUgdXNlIG9mIGN1c3RvbSBtYXRjaGluZyBhbmQgbWFya2luZyBmdW5jdGlvbnMuXG5cbkluIHRoZSBleGFtcGxlcyBiZWxvdywgaW1hZ2luZSB0aGUgYDw+YCBpbiB0aGUgXCJtYXJrc1wiIHNlY3Rpb24gaXMgYSB3cmFwcGluZyBgPG1hcms+YCBlbGVtZW50OlxuXG4xLiBfX1wiU3RhcnRzLXdpdGhcIiBtYXRjaGluZyAmIG1hcmtpbmdfX1xuICAgYGBganN4XG4gICA8VHlwZWFoZWFkXG4gICAgICAgYWxnb3JpdGhtPXtUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSH1cbiAgICAgICBlbnRpdGllcz17W1xuICAgICAgICAgICB7dGV4dDogJ2FwcGxlJ30sXG4gICAgICAgICAgIHt0ZXh0OiAnYXByaWNvdCd9LFxuICAgICAgICAgICB7dGV4dDogJ2dyYXBlJ30sXG4gICAgICAgXX1cbiAgICAgICBpbnB1dFByb3BzPXt7dmFsdWU6ICdhJ319IC8+XG4gICBgYGBcblxuICAgKyBtYXRjaGVzOiBgXCJhcHBsZVwiLCBcImFwcmljb3RcImBcbiAgICsgbWFya3M6IGBcIjxhPnBwbGVcIiwgXCI8YT5wcmljb3RcImBcblxuMS4gX19cIkZ1enp5XCIgbWF0Y2hpbmcgJiBtYXJraW5nX19cbiAgIGBgYGpzeFxuICAgPFR5cGVhaGVhZFxuICAgICAgIGFsZ29yaXRobT17VHlwZWFoZWFkLm1vZGUuRlVaWll9XG4gICAgICAgZW50aXRpZXM9e1tcbiAgICAgICAgICAge3RleHQ6ICdhcHBsZSd9LFxuICAgICAgICAgICB7dGV4dDogJ2Fwcmljb3QnfSxcbiAgICAgICAgICAge3RleHQ6ICdncmFwZSd9LFxuICAgICAgIF19XG4gICAgICAgaW5wdXRQcm9wcz17e3ZhbHVlOiAnYSd9fSAvPlxuICAgYGBgXG5cbiAgICsgbWF0Y2hlczogYFwiYXBwbGVcIiwgXCJhcHJpY290XCIsIFwiZ3JhcGVcImBcbiAgICsgbWFya3M6IGBcIjxhPnBwbGVcIiwgXCI8YT5wcmljb3RcIiwgXCJncjxhPnBlXCJgXG5cbjEuIF9fQ3VzdG9tIG1hdGNoaW5nICYgbWFya2luZ19fXG5cbiAgICBPcHRpb25hbGx5LCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24gY29tYmluYXRpb24gb2YgbWF0Y2hpbmcgYW5kIG1hcmtpbmcgZnVuY3Rpb25zLiBGb3IgZXhhbXBsZSwgbG9vc2VuaW5nIHRoZSBtYXRjaGluZyB0byBpbmNsdWRlIHVuaWNvZGUgdmFyaWFudHMgb2YgY2hhcmFjdGVycyBjb3VsZCBiZSB1c2VmdWwsIGUuZy4gw6cgJnJhcnI7IGNcblxuICAgIGBgYGpzeFxuICAgIDxUeXBlYWhlYWRcbiAgICAgICAgYWxnb3JpdGhtPXt7XG4gICAgICAgICAgICBtYXRjaGVyOiB5b3VyTWF0Y2hGdW5jLFxuICAgICAgICAgICAgbWFya2VyOiB5b3VyTWFya0Z1bmMsXG4gICAgICAgIH19IC8+XG4gICAgYGBgXG5cbiMjIENvbXBvbmVudCBJbnN0YW5jZSBNZXRob2RzXG5cbldoZW4gdXNpbmcgYFR5cGVhaGVhZGAgaW4geW91ciBwcm9qZWN0LCB5b3UgbWF5IGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzIG9uIGEgcmVuZGVyZWQgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudC4gVXNlIFtgcmVmc2BdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1sKSB0byBnZXQgdGhlIGluc3RhbmNlLlxuXG4tIF9fYGZvY3VzKClgX19cbiAgZm9jdXNlcyB0aGUgYnJvd3NlciBvb24gdGhlIHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dCBmb3IgaW1tZWRpYXRlIHRleHQgZW50cnlcblxuLSBfX2BnZXRJbnB1dE5vZGUoKWBfX1xuICByZXR1cm5zIHRoZSByYXcgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IERPTSBub2RlXG5cbi0gX19gZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KClgX19cbiAgcmV0dXJucyB0aGUgYHRleHRgIHByb3BlcnR5IG9mIHRoZSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgZW50aXR5IChmcm9tIGBwcm9wcy5lbnRpdGllc2ApLCBvciByZXR1cm5zIGFuIGVtcHR5IHN0cmluZ1xuXG4tIF9fYGdldFZhbHVlKClgX19cbiAgcmV0cmlldmVzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXRcblxuLSBfX2BzZWxlY3QoKWBfX1xuICBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZXMgYSBmdWxsIHNlbGVjdGlvbiBvbiB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IHN1Y2ggdGhhdCBhIHByZXNzIG9mIHRoZSBCYWNrc3BhY2Uga2V5IHdvdWxkIGZ1bGx5IGNsZWFyIHRoZSBpbnB1dFxuXG4tIF9fYHNldFZhbHVlKHZhbHVlOiBzdHJpbmcpYF9fXG4gIHNldHMgdGhlIHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dCB0byB0aGUgc3BlY2lmaWVkIHRleHQgYW5kIHVwZGF0ZXMgaW50ZXJuYWwgc3RhdGU7IGRvIG5vdCB1c2UgdGhpcyBtZXRob2Qgd2hlbiB1c2luZyBgVHlwZWFoZWFkYCBhcyBhIFwiY29udHJvbGxlZCBpbnB1dFwiXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cGVhaGVhZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBtb2RlID0ge1xuICAgICAgICAnU1RBUlRTX1dJVEgnOiB1dWlkKCksXG4gICAgICAgICdGVVpaWSc6IHV1aWQoKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKiogVHlwZWFoZWFkIGFjY2VwdHMgYWxsIHN1cHBvcnRlZCBbSW5wdXQgcHJvcHNdKGh0dHBzOi8vZ2l0aHViLmNvbS9lbmlnbWEtaW8vYm91bmRsZXNzL3RyZWUvbWFzdGVyL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dCkgKi9cbiAgICAgICAgLi4uSW5wdXQucHJvcFR5cGVzLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgdGhlIG1lY2hhbmlzbSB1c2VkIHRvIGlkZW50aWZ5IGFuZCBtYXJrIG1hdGNoaW5nIHN1YnN0cmluZ3M7IGEgY3VzdG9tIHNldCBjYW4gYmUgcHJvdmlkZWQgYXMgYW4gb2JqZWN0IChzZWUgdGhlIHByb3BlcnRpZXMgYmVsb3cpXG4gICAgICAgICAqL1xuICAgICAgICBhbGdvcml0aG06IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxcbiAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gZm9ybWF0IHdpbGwgYmUgd2hhdCBzaG93cyB1cCBpbiB0aGUgdHlwZWFoZWFkIGRyb3Bkb3duIGxpc3QgKEpTWCBhcnJheXMgYXJlIGFjY2VwdGVkLCB0aGUgY29tcG9uZW50IHdpbGwgcHJvdmlkZSB0aGUgd3JhcHBlcilcblxuICAgICAgICAgICAgICAgICAgICBhbiBleGFtcGxlIG1hcmtpbmcgZnVuY3Rpb246XG5cbiAgICAgICAgICAgICAgICAgICAgYGBganNcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRzV2l0aE1hcmtpbmdGdW5jKGlucHV0VGV4dCwgZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHlDb250ZW50ID0gZW50aXR5LnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWVrVmFsdWUgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXhTdGFydCA9IGVudGl0eUNvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlZWtWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleEVuZCA9IGluZGV4U3RhcnQgKyBzZWVrVmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT0nYmVmb3JlJz57ZW50aXR5Q29udGVudC5zbGljZSgwLCBpbmRleFN0YXJ0KX08L3NwYW4+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXJrIGtleT0nbWFyayc+e2VudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhTdGFydCwgaW5kZXhFbmQpfTwvbWFyaz4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4ga2V5PSdhZnRlcic+e2VudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhFbmQpfTwvc3Bhbj4sXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGBgYFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIG1hcmtlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gZm9ybWF0IGRldGVybWluZXMgd2hpY2ggZW50aXRpZXMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIG1hcmtpbmcgZnVuY3Rpb25cblxuICAgICAgICAgICAgICAgICAgICBhbiBleGFtcGxlIG1hdGNoaW5nIGZ1bmN0aW9uOlxuXG4gICAgICAgICAgICAgICAgICAgIGBgYGpzXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0c1dpdGhNYXRjaGluZ0Z1bmMoaW5wdXRUZXh0LCBlbnRpdGllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vla1ZhbHVlID0gdXNlclRleHQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0aWVzLnJlZHVjZShmdW5jdGlvbiBzZWVrTWF0Y2gocmVzdWx0cywgZW50aXR5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkudGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2Vla1ZhbHVlKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGBgYFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIG1hdGNoZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgICAgICAgICAgUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRILFxuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuRlVaWlksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiBgdHJ1ZWAsIGNsZWFycyB0aGUgaW5wdXQgdGV4dCB3aGVuIGEgKHBhcnRpYWwpIG1hdGNoIGlzIHNlbGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGVhck9uU2VsZWN0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IHVzZXIgaW5wdXQgaXMgZmlsdGVyZWQgYWdhaW5zdDsgYXQgYSBtaW5pbXVtLCBlYWNoIG9iamVjdCBtdXN0IGhhdmUgYSBgdGV4dGAgcHJvcGVydHkgYW5kIGFueSBvdGhlciBzdXBwbGllZCBwcm9wZXJ0eSBpcyBwYXNzZWQgdGhyb3VnaCB0byB0aGUgcmVzdWx0aW5nIERPTSBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBlbnRpdGllczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIHRoZSB0ZXh0IHRvIGJlIHVzZWQgdG8gZG8gc3RyaW5nIGNvbXBhcmlzb24gYW5kIG1hdGNoIGFnYWluc3RcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICApLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZW5kZXJzIGEgZGlzYWJsZWQgdGV4dGZpZWxkIHdpdGggdGhlIGZ1bGwgdGV4dCBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGlucHV0IGhpbnQ7IHdpbGwgcmVtYWluIGJsYW5rIGlmIHRoZSBtYXRjaGVkIHN1YnN0cmluZyBpcyBub3QgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdXNlciBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgaGludDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgaGludFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICBtYXRjaFdyYXBwZXJQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBcIm9mZnNjcmVlblwiIGNsYXNzIHVzZWQgYnkgeW91ciBhcHBsaWNhdGlvbjsgc3BlY2lmaWNhbGx5IHRvIHJldGFpbiBbQVJJQSBuYXZpZ2FiaWxpdHldKGh0dHA6Ly9zbm9vay5jYS9hcmNoaXZlcy9odG1sX2FuZF9jc3MvaGlkaW5nLWNvbnRlbnQtZm9yLWFjY2Vzc2liaWxpdHkpIGFzIGBkaXNwbGF5OiBub25lYCBleGNsdWRlcyB0aGUgZWxlbWVudCBmcm9tIGNvbnNpZGVyYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIG9mZnNjcmVlbkNsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiB0aGUgdXNlciBwcmVzc2VzIGBFbnRlcmAgd2l0aCBubyBhdXRvc3VnZ2VzdCBoaW50IGF2YWlsYWJsZSwgaW5kaWNhdGluZyB0aGF0IGlucHV0IGlzIGNvbXBsZXRlXG4gICAgICAgICAqL1xuICAgICAgICBvbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdpdGggdGhlIGluZGV4IG9mIHRoZSBoaWdobGlnaHRlZCBlbnRpdHkgZHVlIHRvIGtleWJvYXJkIHNlbGVjdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgb25FbnRpdHlIaWdobGlnaHRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aXRoIHRoZSBpbmRleCBvZiB0aGUgZW50aXR5IHNlbGVjdGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgICAqL1xuICAgICAgICBvbkVudGl0eVNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICAuLi5JbnB1dC5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGFsZ29yaXRobTogVHlwZWFoZWFkLm1vZGUuRlVaWlksXG4gICAgICAgIGNsZWFyT25TZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICBlbnRpdGllczogW10sXG4gICAgICAgIGhpbnQ6IG51bGwsXG4gICAgICAgIGhpbnRQcm9wczoge30sXG4gICAgICAgIG1hdGNoV3JhcHBlclByb3BzOiB7fSxcbiAgICAgICAgb2Zmc2NyZWVuQ2xhc3M6ICdiLW9mZnNjcmVlbicsXG4gICAgICAgIG9uQ29tcGxldGU6IG5vb3AsXG4gICAgICAgIG9uRW50aXR5SGlnaGxpZ2h0ZWQ6IG5vb3AsXG4gICAgICAgIG9uRW50aXR5U2VsZWN0ZWQ6IG5vb3AsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFR5cGVhaGVhZC5kZWZhdWx0UHJvcHMpXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgZW50aXR5TWF0Y2hJbmRleGVzOiBbXSxcbiAgICAgICAgaWQ6IHV1aWQoKSxcbiAgICAgICAgaXNDb250cm9sbGVkOiBpc1N0cmluZyh0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpLFxuICAgICAgICBpbnB1dDogdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlXG4gICAgICAgICAgICAgICB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICB8fCAnJyxcbiAgICAgICAgc2VsZWN0ZWRFbnRpdHlJbmRleDogLTEsXG4gICAgfVxuXG4gICAgbW91bnRlZCA9IGZhbHNlXG5cbiAgICB1cGRhdGVJbnB1dFN0YXRlID0gKHZhbHVlID0gJycpID0+IHRoaXMuc2V0U3RhdGUoe2lucHV0OiB2YWx1ZX0pXG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUgfHwgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRW50aXR5SGlnaGxpZ2h0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcHMuZW50aXRpZXMgIT09IHRoaXMucHJvcHMuZW50aXRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZU1hdGNoZXMobmV4dFByb3BzLmVudGl0aWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0U3RhdGUobmV4dFByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGggJiYgIXByZXZTdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnMubWF0Y2hlcy5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9IC8vIGZpeCBhbiBvZGQgYnVnIGluIEZGIHdoZXJlIGl0IGluaXRpYWxpemVzIHRoZSBlbGVtZW50IHdpdGggYW4gaW5jb3JyZWN0IHNjcm9sbFRvcFxuXG4gICAgICAgIGlmICggICB0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXggPj0gMFxuICAgICAgICAgICAgJiYgdGhpcy5wcm9wcy5lbnRpdGllc1t0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdICE9PSBwcmV2UHJvcHMuZW50aXRpZXNbcHJldlN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRW50aXR5SGlnaGxpZ2h0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRTZWxlY3RlZEVudGl0eVRleHQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucHJvcHMuZW50aXRpZXNbdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4XTtcblxuICAgICAgICByZXR1cm4gZW50aXR5ID8gZW50aXR5LnRleHQgOiAnJztcbiAgICB9XG5cbiAgICBoYW5kbGVNYXRjaENsaWNrKGluZGV4KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkRW50aXR5SW5kZXg6IGluZGV4fSwgdGhpcy5zZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eSk7XG4gICAgfVxuXG4gICAgc2VsZWN0TWF0Y2goZGVsdGEpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzO1xuICAgICAgICBjb25zdCB0b3RhbE1hdGNoZXMgPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgbGV0IG5leHRJbmRleCA9IG1hdGNoZXMuaW5kZXhPZih0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpICsgZGVsdGE7XG5cbiAgICAgICAgaWYgKHRvdGFsTWF0Y2hlcykge1xuICAgICAgICAgICAgaWYgKG5leHRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSB0b3RhbE1hdGNoZXMgLSAxOyAvLyByZXZlcnNlIGxvb3BcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEluZGV4ID49IHRvdGFsTWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IDA7IC8vIGxvb3BcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbWF0Y2hJbmRleCA9IG1hdGNoZXNbbmV4dEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXNOb2RlID0gdGhpcy5yZWZzLm1hdGNoZXM7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzTm9kZVlFbmQgPSBtYXRjaGVzTm9kZS5zY3JvbGxUb3AgKyBtYXRjaGVzTm9kZS5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBtYXRjaE5vZGUgPSB0aGlzLnJlZnNbYG1hdGNoXyQke21hdGNoSW5kZXh9YF07XG4gICAgICAgICAgICBjb25zdCBtYXRjaE5vZGVZU3RhcnQgPSBtYXRjaE5vZGUub2Zmc2V0VG9wO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hOb2RlWUVuZCA9IG1hdGNoTm9kZVlTdGFydCArIG1hdGNoTm9kZS5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIGJyaW5nIGludG8gdmlldyBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIGlmIChtYXRjaE5vZGVZRW5kID49IG1hdGNoZXNOb2RlWUVuZCkgeyAvLyBiZWxvd1xuICAgICAgICAgICAgICAgIG1hdGNoZXNOb2RlLnNjcm9sbFRvcCArPSBtYXRjaE5vZGVZRW5kIC0gbWF0Y2hlc05vZGVZRW5kO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaE5vZGVZU3RhcnQgPD0gbWF0Y2hlc05vZGUuc2Nyb2xsVG9wKSB7IC8vIGFib3ZlXG4gICAgICAgICAgICAgICAgbWF0Y2hlc05vZGUuc2Nyb2xsVG9wID0gbWF0Y2hOb2RlWVN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEVudGl0eUluZGV4OiBtYXRjaEluZGV4fSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldE1hdGNoZXMgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkRW50aXR5SW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgIGVudGl0eU1hdGNoSW5kZXhlczogW10sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldElucHV0Tm9kZSA9ICgpID0+IHRoaXMucmVmcy5pbnB1dC5yZWZzLmZpZWxkXG5cbiAgICBzZWxlY3QgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5nZXRJbnB1dE5vZGUoKTtcblxuICAgICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IDA7XG4gICAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9jdXMgPSAoKSA9PiB0aGlzLmdldElucHV0Tm9kZSgpLmZvY3VzKClcbiAgICBnZXRWYWx1ZSA9ICgpID0+IHRoaXMucmVmcy5pbnB1dC5nZXRWYWx1ZSgpXG5cbiAgICBzZXRWYWx1ZSA9ICh2YWx1ZSA9ICcnKSA9PiB7XG4gICAgICAgIHRoaXMucmVmcy5pbnB1dC5zZXRWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVJbnB1dFN0YXRlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZXNldE1hdGNoZXMoKTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cblxuICAgIGN1cnNvckF0RW5kT2ZJbnB1dCgpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0SW5wdXROb2RlKCk7XG5cbiAgICAgICAgcmV0dXJuICAgIG5vZGUuc2VsZWN0aW9uU3RhcnQgPT09IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICAgICAmJiBub2RlLnNlbGVjdGlvbkVuZCA9PT0gdGhpcy5nZXRWYWx1ZSgpLmxlbmd0aDtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkVudGl0eVNlbGVjdGVkKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2xlYXJPblNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbmVlZHMgdG8gaGFwcGVuIGFmdGVyIHRoZSB1cGNvbWluZyByZW5kZXIgdGhhdCB3aWxsIGJlIHRyaWdnZXJlZCBieSBgc2V0VmFsdWVgXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucmVzZXRNYXRjaGVzLCAwKTtcbiAgICB9XG5cbiAgICBtYXJrRnV6enlNYXRjaFN1YnN0cmluZyhpbnB1dCwgZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRlbnQgPSBlbnRpdHkudGV4dDtcbiAgICAgICAgY29uc3QgZnJhZ3MgPSBlbnRpdHlDb250ZW50LnNwbGl0KG5ldyBSZWdFeHAoJygnICsgZXNjYXBlcihpbnB1dCkgKyAnKScsICdpZycpKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFVzZXJUZXh0ID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gZnJhZ3MubGVuZ3RoO1xuICAgICAgICBsZXQgaSA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK2kgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGlmIChmcmFnc1tpXS50b0xvd2VyQ2FzZSgpID09PSBub3JtYWxpemVkVXNlclRleHQpIHtcbiAgICAgICAgICAgICAgICBmcmFnc1tpXSA9IDxtYXJrIGtleT17aX0gY2xhc3NOYW1lPSdiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnPntmcmFnc1tpXX08L21hcms+O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZyYWdzO1xuICAgIH1cblxuICAgIG1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmcoaW5wdXQsIGVudGl0eSkge1xuICAgICAgICBjb25zdCBlbnRpdHlDb250ZW50ID0gZW50aXR5LnRleHQ7XG4gICAgICAgIGNvbnN0IHNlZWtWYWx1ZSA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGluZGV4U3RhcnQgPSBlbnRpdHlDb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpO1xuICAgICAgICBjb25zdCBpbmRleEVuZCA9IGluZGV4U3RhcnQgKyBzZWVrVmFsdWUubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICA8c3BhbiBrZXk9JzAnPntlbnRpdHlDb250ZW50LnNsaWNlKDAsIGluZGV4U3RhcnQpfTwvc3Bhbj4sXG4gICAgICAgICAgICA8bWFyayBrZXk9JzEnIGNsYXNzTmFtZT0nYi10eXBlYWhlYWQtbWF0Y2gtaGlnaGxpZ2h0Jz57ZW50aXR5Q29udGVudC5zbGljZShpbmRleFN0YXJ0LCBpbmRleEVuZCl9PC9tYXJrPixcbiAgICAgICAgICAgIDxzcGFuIGtleT0nMic+e2VudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhFbmQpfTwvc3Bhbj4sXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZ2V0TWFya2luZ0Z1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5hbGdvcml0aG0gPT09IFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFya0Z1enp5TWF0Y2hTdWJzdHJpbmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmFsZ29yaXRobS5tYXJrZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53YXJuZWRNYXJrZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YXJuZWRNYXJrZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWFya2VyYCB3YXMgcHJvdmlkZWQ7IGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBtYXJraW5nIGFsZ29yaXRobSAoRlVaWlkpLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWFya0Z1enp5TWF0Y2hTdWJzdHJpbmc7XG4gICAgfVxuXG4gICAgbWFya01hdGNoU3Vic3RyaW5nID0gKC4uLmFyZ3MpID0+IHRoaXMuZ2V0TWFya2luZ0Z1bmN0aW9uKCkoLi4uYXJncylcblxuICAgIGdldEZ1enp5TWF0Y2hJbmRleGVzKHVzZXJUZXh0LCBlbnRpdGllcykge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkID0gdXNlclRleHQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICByZXR1cm4gZW50aXRpZXMucmVkdWNlKGZ1bmN0aW9uIGZpbmRJbmRleGVzKHJlc3VsdCwgZW50aXR5LCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuICAgZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKG5vcm1hbGl6ZWQpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgID8gKHJlc3VsdC5wdXNoKGluZGV4KSAmJiByZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgOiByZXN1bHQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBnZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzKHVzZXJUZXh0LCBlbnRpdGllcykge1xuICAgICAgICBjb25zdCBzZWVrVmFsdWUgPSB1c2VyVGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiBlbnRpdGllcy5yZWR1Y2UoZnVuY3Rpb24gc2Vla01hdGNoKHJlc3VsdHMsIGVudGl0eSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChlbnRpdHkudGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2Vla1ZhbHVlKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChpbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuXG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBnZXRNYXRjaGluZ0Z1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5hbGdvcml0aG0gPT09IFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhcnRzV2l0aE1hdGNoSW5kZXhlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hdGNoZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hbGdvcml0aG0ubWF0Y2hlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndhcm5lZE1hdGNoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YXJuZWRNYXRjaGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVHlwZWFoZWFkOiBubyBgcHJvcHMuYWxnb3JpdGhtLm1hdGNoZXJgIHdhcyBwcm92aWRlZDsgZmFsbGluZyBiYWNrIHRvIHRoZSBkZWZhdWx0IG1hdGNoaW5nIGFsZ29yaXRobSAoRlVaWlkpLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7XG4gICAgfVxuXG4gICAgZ2V0TWF0Y2hJbmRleGVzID0gKC4uLmFyZ3MpID0+IHRoaXMuZ2V0TWF0Y2hpbmdGdW5jdGlvbigpKC4uLmFyZ3MpXG5cbiAgICBjb21wdXRlTWF0Y2hlcyhwcm92aWRlZEVudGl0aWVzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW50aXRpZXMgPSBwcm92aWRlZEVudGl0aWVzIHx8IHByb3BzLmVudGl0aWVzO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gc3RhdGUuaW5wdXQ7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gY3VycmVudFZhbHVlID09PSAnJyA/IFtdIDogdGhpcy5nZXRNYXRjaEluZGV4ZXMoY3VycmVudFZhbHVlLCBlbnRpdGllcyk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbnRpdHlJbmRleDogbWF0Y2hlcy5sZW5ndGggPyBtYXRjaGVzWzBdIDogLTEsXG4gICAgICAgICAgICAgICAgZW50aXR5TWF0Y2hJbmRleGVzOiBtYXRjaGVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRTdGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCAhPT0gLTFcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmN1cnNvckF0RW5kT2ZJbnB1dCgpXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5nZXRJbnB1dE5vZGUoKSA9PT0gZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICAgICAgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gYmxvY2sgY3Vyc29yIG1vdmVtZW50XG4gICAgICAgICAgICB0aGlzLnNlbGVjdE1hdGNoKC0xKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBibG9jayBjdXJzb3IgbW92ZW1lbnRcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TWF0Y2goMSk7XG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCAhPT0gLTFcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmdldElucHV0Tm9kZSgpID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICBpZiAoICAgdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIHRoaXMuZ2V0SW5wdXROb2RlKCkgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ29tcGxldGUodGhpcy5zdGF0ZS5pbnB1dCwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyTm90aWZpY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJlZj0nYXJpYSdcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5zdGF0ZS5pZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMub2Zmc2NyZWVuQ2xhc3N9XG4gICAgICAgICAgICAgICAgYXJpYS1saXZlPSdwb2xpdGUnPlxuICAgICAgICAgICAgICAgIHt0aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dCgpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVySGludCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGludCkge1xuICAgICAgICAgICAgY29uc3QgdXNlclRleHQgPSB0aGlzLnN0YXRlLmlucHV0O1xuICAgICAgICAgICAgY29uc3QgcmF3ID0gdGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQoKTtcbiAgICAgICAgICAgIGxldCBwcm9jZXNzZWQgPSAnJztcblxuICAgICAgICAgICAgaWYgKCAgIHJhd1xuICAgICAgICAgICAgICAgICYmIHJhdy50b0xvd2VyQ2FzZSgpLmluZGV4T2YodXNlclRleHQudG9Mb3dlckNhc2UoKSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWQgPSByYXcucmVwbGFjZShuZXcgUmVnRXhwKHVzZXJUZXh0LCAnaScpLCB1c2VyVGV4dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5oaW50UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIHJlZj0naGludCdcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeChcbiAgICAgICAgICAgICAgICAgICAgICAgICdiLWlucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdiLWlucHV0LXBsYWNlaG9sZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdiLXR5cGVhaGVhZC1oaW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGludFByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9Jy0xJz5cbiAgICAgICAgICAgICAgICAgICAge3Byb2Nlc3NlZH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJNYXRjaGVzKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHMubWF0Y2hXcmFwcGVyUHJvcHM7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIHJlZj0nbWF0Y2hlcydcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi10eXBlYWhlYWQtbWF0Y2gtd3JhcHBlcicsIHByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubWFwKChpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5wcm9wcy5lbnRpdGllc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7Y2xhc3NOYW1lLCB0ZXh0LCAuLi5yZXN0fSA9IGVudGl0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2BtYXRjaF8kJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXR5cGVhaGVhZC1tYXRjaCcsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ItdHlwZWFoZWFkLW1hdGNoLXNlbGVjdGVkJzogdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ID09PSBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17dGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVNYXRjaENsaWNrLmJpbmQodGhpcywgaW5kZXgpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMubWFya01hdGNoU3Vic3RyaW5nKHRoaXMuc3RhdGUuaW5wdXQsIGVudGl0eSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHtwcm9wcywgc3RhdGV9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHByb3BzLCBUeXBlYWhlYWQuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9J3dyYXBwZXInXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi10eXBlYWhlYWQtd3JhcHBlcicsIHByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlck5vdGlmaWNhdGlvbigpfVxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckhpbnQoKX1cblxuICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICB7Li4uZXh0cmFjdENoaWxkUHJvcHMocHJvcHMsIElucHV0LmRlZmF1bHRQcm9wcyl9XG4gICAgICAgICAgICAgICAgICAgIHJlZj0naW5wdXQnXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9e3N0YXRlLmlkfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wcm9wcy5pbnB1dFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjeCgnYi10eXBlYWhlYWQnLCBwcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIH19IC8+XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJNYXRjaGVzKCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==